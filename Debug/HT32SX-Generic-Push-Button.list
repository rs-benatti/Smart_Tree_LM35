
HT32SX-Generic-Push-Button.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .noinit       00000100  08080000  08081000  00030000  2**0
                  ALLOC
  2 .text         0000a948  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000a78  0800aa08  0800aa08  0001aa08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM.extab    00000000  0800b480  0800b480  000201c8  2**0
                  CONTENTS
  5 .ARM          00000008  0800b480  0800b480  0001b480  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .preinit_array 00000000  0800b488  0800b488  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  7 .init_array   00000004  0800b488  0800b488  0001b488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .fini_array   00000004  0800b48c  0800b48c  0001b48c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data         000001c8  20000000  0800b490  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000754  200001c8  0800b658  000201c8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000091c  0800b658  0002091c  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002dd07  00000000  00000000  000201f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006948  00000000  00000000  0004defd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    000108df  00000000  00000000  00054845  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000015d0  00000000  00000000  00065128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001f30  00000000  00000000  000666f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001c617  00000000  00000000  00068628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00027cac  00000000  00000000  00084c3f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0009104e  00000000  00000000  000ac8eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000e8d  00000000  00000000  0013d939  2**0
                  CONTENTS, READONLY
 22 .iar.rtmodel  000000b9  00000000  00000000  0013e7c6  2**0
                  CONTENTS, READONLY
 23 .iar_vfe_header 00000020  00000000  00000000  0013e880  2**2
                  CONTENTS, READONLY
 24 .debug_frame  00006018  00000000  00000000  0013e8a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001c8 	.word	0x200001c8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800a9f0 	.word	0x0800a9f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001cc 	.word	0x200001cc
 8000104:	0800a9f0 	.word	0x0800a9f0

08000108 <KeyExpansion_dec>:
 8000108:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800010a:	4880      	ldr	r0, [pc, #512]	; (800030c <.text_14>)
 800010c:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800010e:	4880      	ldr	r0, [pc, #512]	; (8000310 <.text_15>)
 8000110:	780a      	ldrb	r2, [r1, #0]
 8000112:	7002      	strb	r2, [r0, #0]
 8000114:	784a      	ldrb	r2, [r1, #1]
 8000116:	7042      	strb	r2, [r0, #1]
 8000118:	788a      	ldrb	r2, [r1, #2]
 800011a:	7082      	strb	r2, [r0, #2]
 800011c:	78ca      	ldrb	r2, [r1, #3]
 800011e:	70c2      	strb	r2, [r0, #3]
 8000120:	790a      	ldrb	r2, [r1, #4]
 8000122:	7102      	strb	r2, [r0, #4]
 8000124:	794a      	ldrb	r2, [r1, #5]
 8000126:	7142      	strb	r2, [r0, #5]
 8000128:	798a      	ldrb	r2, [r1, #6]
 800012a:	7182      	strb	r2, [r0, #6]
 800012c:	79ca      	ldrb	r2, [r1, #7]
 800012e:	71c2      	strb	r2, [r0, #7]
 8000130:	7a0a      	ldrb	r2, [r1, #8]
 8000132:	7202      	strb	r2, [r0, #8]
 8000134:	7a4a      	ldrb	r2, [r1, #9]
 8000136:	7242      	strb	r2, [r0, #9]
 8000138:	7a8a      	ldrb	r2, [r1, #10]
 800013a:	7282      	strb	r2, [r0, #10]
 800013c:	7aca      	ldrb	r2, [r1, #11]
 800013e:	72c2      	strb	r2, [r0, #11]
 8000140:	7b0a      	ldrb	r2, [r1, #12]
 8000142:	7302      	strb	r2, [r0, #12]
 8000144:	7b4a      	ldrb	r2, [r1, #13]
 8000146:	7342      	strb	r2, [r0, #13]
 8000148:	7b8a      	ldrb	r2, [r1, #14]
 800014a:	7382      	strb	r2, [r0, #14]
 800014c:	7bc9      	ldrb	r1, [r1, #15]
 800014e:	73c1      	strb	r1, [r0, #15]
 8000150:	e01c      	b.n	800018c <.text_9>

08000152 <KeyExpansion_enc>:
 8000152:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000154:	2200      	movs	r2, #0
 8000156:	4b6d      	ldr	r3, [pc, #436]	; (800030c <.text_14>)
 8000158:	7c19      	ldrb	r1, [r3, #16]
 800015a:	2010      	movs	r0, #16
 800015c:	1a44      	subs	r4, r0, r1
 800015e:	486c      	ldr	r0, [pc, #432]	; (8000310 <.text_15>)
 8000160:	d009      	beq.n	8000176 <KeyExpansion_enc+0x24>
 8000162:	0005      	movs	r5, r0
 8000164:	350f      	adds	r5, #15
 8000166:	6c1e      	ldr	r6, [r3, #64]	; 0x40
 8000168:	7837      	ldrb	r7, [r6, #0]
 800016a:	702f      	strb	r7, [r5, #0]
 800016c:	1c52      	adds	r2, r2, #1
 800016e:	1c76      	adds	r6, r6, #1
 8000170:	1e6d      	subs	r5, r5, #1
 8000172:	42a2      	cmp	r2, r4
 8000174:	d1f8      	bne.n	8000168 <KeyExpansion_enc+0x16>
 8000176:	2900      	cmp	r1, #0
 8000178:	d008      	beq.n	800018c <.text_9>
 800017a:	0004      	movs	r4, r0
 800017c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800017e:	189a      	adds	r2, r3, r2
 8000180:	7813      	ldrb	r3, [r2, #0]
 8000182:	7023      	strb	r3, [r4, #0]
 8000184:	1c52      	adds	r2, r2, #1
 8000186:	1c64      	adds	r4, r4, #1
 8000188:	1e49      	subs	r1, r1, #1
 800018a:	d1f9      	bne.n	8000180 <KeyExpansion_enc+0x2e>

0800018c <.text_9>:
 800018c:	2604      	movs	r6, #4
 800018e:	0007      	movs	r7, r0
 8000190:	3710      	adds	r7, #16
 8000192:	4c60      	ldr	r4, [pc, #384]	; (8000314 <.text_16>)
 8000194:	466d      	mov	r5, sp
 8000196:	2204      	movs	r2, #4
 8000198:	1f39      	subs	r1, r7, #4
 800019a:	4668      	mov	r0, sp
 800019c:	f009 f9a7 	bl	80094ee <__aeabi_memcpy>
 80001a0:	07b0      	lsls	r0, r6, #30
 80001a2:	d117      	bne.n	80001d4 <.text_9+0x48>
 80001a4:	782a      	ldrb	r2, [r5, #0]
 80001a6:	7868      	ldrb	r0, [r5, #1]
 80001a8:	7028      	strb	r0, [r5, #0]
 80001aa:	78a8      	ldrb	r0, [r5, #2]
 80001ac:	7068      	strb	r0, [r5, #1]
 80001ae:	78e9      	ldrb	r1, [r5, #3]
 80001b0:	70a9      	strb	r1, [r5, #2]
 80001b2:	70ea      	strb	r2, [r5, #3]
 80001b4:	782a      	ldrb	r2, [r5, #0]
 80001b6:	5ca2      	ldrb	r2, [r4, r2]
 80001b8:	702a      	strb	r2, [r5, #0]
 80001ba:	5c20      	ldrb	r0, [r4, r0]
 80001bc:	7068      	strb	r0, [r5, #1]
 80001be:	5c60      	ldrb	r0, [r4, r1]
 80001c0:	70a8      	strb	r0, [r5, #2]
 80001c2:	78e8      	ldrb	r0, [r5, #3]
 80001c4:	5c20      	ldrb	r0, [r4, r0]
 80001c6:	70e8      	strb	r0, [r5, #3]
 80001c8:	7828      	ldrb	r0, [r5, #0]
 80001ca:	4953      	ldr	r1, [pc, #332]	; (8000318 <.text_17>)
 80001cc:	08b2      	lsrs	r2, r6, #2
 80001ce:	5c89      	ldrb	r1, [r1, r2]
 80001d0:	4041      	eors	r1, r0
 80001d2:	7029      	strb	r1, [r5, #0]
 80001d4:	0038      	movs	r0, r7
 80001d6:	3810      	subs	r0, #16
 80001d8:	7800      	ldrb	r0, [r0, #0]
 80001da:	7829      	ldrb	r1, [r5, #0]
 80001dc:	4041      	eors	r1, r0
 80001de:	7039      	strb	r1, [r7, #0]
 80001e0:	0038      	movs	r0, r7
 80001e2:	380f      	subs	r0, #15
 80001e4:	7800      	ldrb	r0, [r0, #0]
 80001e6:	7869      	ldrb	r1, [r5, #1]
 80001e8:	4041      	eors	r1, r0
 80001ea:	7079      	strb	r1, [r7, #1]
 80001ec:	0038      	movs	r0, r7
 80001ee:	380e      	subs	r0, #14
 80001f0:	7800      	ldrb	r0, [r0, #0]
 80001f2:	78a9      	ldrb	r1, [r5, #2]
 80001f4:	4041      	eors	r1, r0
 80001f6:	70b9      	strb	r1, [r7, #2]
 80001f8:	0038      	movs	r0, r7
 80001fa:	380d      	subs	r0, #13
 80001fc:	7800      	ldrb	r0, [r0, #0]
 80001fe:	78e9      	ldrb	r1, [r5, #3]
 8000200:	4041      	eors	r1, r0
 8000202:	70f9      	strb	r1, [r7, #3]
 8000204:	1c76      	adds	r6, r6, #1
 8000206:	1d3f      	adds	r7, r7, #4
 8000208:	2e2c      	cmp	r6, #44	; 0x2c
 800020a:	d3c4      	bcc.n	8000196 <.text_9+0xa>
 800020c:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

0800020e <AddRoundKey>:
 800020e:	b410      	push	{r4}
 8000210:	493e      	ldr	r1, [pc, #248]	; (800030c <.text_14>)
 8000212:	6bc9      	ldr	r1, [r1, #60]	; 0x3c
 8000214:	4a3e      	ldr	r2, [pc, #248]	; (8000310 <.text_15>)
 8000216:	0100      	lsls	r0, r0, #4
 8000218:	1810      	adds	r0, r2, r0
 800021a:	2204      	movs	r2, #4
 800021c:	780b      	ldrb	r3, [r1, #0]
 800021e:	7804      	ldrb	r4, [r0, #0]
 8000220:	405c      	eors	r4, r3
 8000222:	700c      	strb	r4, [r1, #0]
 8000224:	784b      	ldrb	r3, [r1, #1]
 8000226:	7844      	ldrb	r4, [r0, #1]
 8000228:	405c      	eors	r4, r3
 800022a:	704c      	strb	r4, [r1, #1]
 800022c:	788b      	ldrb	r3, [r1, #2]
 800022e:	7884      	ldrb	r4, [r0, #2]
 8000230:	405c      	eors	r4, r3
 8000232:	708c      	strb	r4, [r1, #2]
 8000234:	78cb      	ldrb	r3, [r1, #3]
 8000236:	78c4      	ldrb	r4, [r0, #3]
 8000238:	405c      	eors	r4, r3
 800023a:	70cc      	strb	r4, [r1, #3]
 800023c:	1d00      	adds	r0, r0, #4
 800023e:	1d09      	adds	r1, r1, #4
 8000240:	1e52      	subs	r2, r2, #1
 8000242:	d1eb      	bne.n	800021c <AddRoundKey+0xe>
 8000244:	bc10      	pop	{r4}
 8000246:	4770      	bx	lr

08000248 <SubBytes>:
 8000248:	4830      	ldr	r0, [pc, #192]	; (800030c <.text_14>)
 800024a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 800024c:	2204      	movs	r2, #4
 800024e:	4831      	ldr	r0, [pc, #196]	; (8000314 <.text_16>)
 8000250:	e201      	b.n	8000656 <.text_20>

08000252 <ShiftRows>:
 8000252:	482e      	ldr	r0, [pc, #184]	; (800030c <.text_14>)
 8000254:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 8000256:	7841      	ldrb	r1, [r0, #1]
 8000258:	7942      	ldrb	r2, [r0, #5]
 800025a:	7042      	strb	r2, [r0, #1]
 800025c:	7a42      	ldrb	r2, [r0, #9]
 800025e:	7142      	strb	r2, [r0, #5]
 8000260:	7b42      	ldrb	r2, [r0, #13]
 8000262:	7242      	strb	r2, [r0, #9]
 8000264:	7341      	strb	r1, [r0, #13]
 8000266:	7881      	ldrb	r1, [r0, #2]
 8000268:	7a82      	ldrb	r2, [r0, #10]
 800026a:	7082      	strb	r2, [r0, #2]
 800026c:	7281      	strb	r1, [r0, #10]
 800026e:	7981      	ldrb	r1, [r0, #6]
 8000270:	7b82      	ldrb	r2, [r0, #14]
 8000272:	7182      	strb	r2, [r0, #6]
 8000274:	7381      	strb	r1, [r0, #14]
 8000276:	78c1      	ldrb	r1, [r0, #3]
 8000278:	7bc2      	ldrb	r2, [r0, #15]
 800027a:	70c2      	strb	r2, [r0, #3]
 800027c:	7ac2      	ldrb	r2, [r0, #11]
 800027e:	73c2      	strb	r2, [r0, #15]
 8000280:	79c2      	ldrb	r2, [r0, #7]
 8000282:	72c2      	strb	r2, [r0, #11]
 8000284:	71c1      	strb	r1, [r0, #7]
 8000286:	4770      	bx	lr

08000288 <MixColumns>:
 8000288:	b4fc      	push	{r2, r3, r4, r5, r6, r7}
 800028a:	4820      	ldr	r0, [pc, #128]	; (800030c <.text_14>)
 800028c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800028e:	2104      	movs	r1, #4
 8000290:	7806      	ldrb	r6, [r0, #0]
 8000292:	466a      	mov	r2, sp
 8000294:	7116      	strb	r6, [r2, #4]
 8000296:	7847      	ldrb	r7, [r0, #1]
 8000298:	003d      	movs	r5, r7
 800029a:	4075      	eors	r5, r6
 800029c:	78c2      	ldrb	r2, [r0, #3]
 800029e:	7883      	ldrb	r3, [r0, #2]
 80002a0:	001c      	movs	r4, r3
 80002a2:	406c      	eors	r4, r5
 80002a4:	4054      	eors	r4, r2
 80002a6:	9600      	str	r6, [sp, #0]
 80002a8:	006e      	lsls	r6, r5, #1
 80002aa:	46b4      	mov	ip, r6
 80002ac:	09ee      	lsrs	r6, r5, #7
 80002ae:	251b      	movs	r5, #27
 80002b0:	436e      	muls	r6, r5
 80002b2:	4665      	mov	r5, ip
 80002b4:	406e      	eors	r6, r5
 80002b6:	4066      	eors	r6, r4
 80002b8:	9d00      	ldr	r5, [sp, #0]
 80002ba:	406e      	eors	r6, r5
 80002bc:	7006      	strb	r6, [r0, #0]
 80002be:	001d      	movs	r5, r3
 80002c0:	407d      	eors	r5, r7
 80002c2:	006e      	lsls	r6, r5, #1
 80002c4:	46b4      	mov	ip, r6
 80002c6:	09ee      	lsrs	r6, r5, #7
 80002c8:	251b      	movs	r5, #27
 80002ca:	436e      	muls	r6, r5
 80002cc:	4665      	mov	r5, ip
 80002ce:	406e      	eors	r6, r5
 80002d0:	4066      	eors	r6, r4
 80002d2:	407e      	eors	r6, r7
 80002d4:	7046      	strb	r6, [r0, #1]
 80002d6:	0016      	movs	r6, r2
 80002d8:	405e      	eors	r6, r3
 80002da:	0075      	lsls	r5, r6, #1
 80002dc:	09f6      	lsrs	r6, r6, #7
 80002de:	271b      	movs	r7, #27
 80002e0:	437e      	muls	r6, r7
 80002e2:	406e      	eors	r6, r5
 80002e4:	4066      	eors	r6, r4
 80002e6:	405e      	eors	r6, r3
 80002e8:	7086      	strb	r6, [r0, #2]
 80002ea:	466b      	mov	r3, sp
 80002ec:	791b      	ldrb	r3, [r3, #4]
 80002ee:	4053      	eors	r3, r2
 80002f0:	005d      	lsls	r5, r3, #1
 80002f2:	09db      	lsrs	r3, r3, #7
 80002f4:	261b      	movs	r6, #27
 80002f6:	4373      	muls	r3, r6
 80002f8:	406b      	eors	r3, r5
 80002fa:	405c      	eors	r4, r3
 80002fc:	4054      	eors	r4, r2
 80002fe:	70c4      	strb	r4, [r0, #3]
 8000300:	1d00      	adds	r0, r0, #4
 8000302:	1e49      	subs	r1, r1, #1
 8000304:	d1c4      	bne.n	8000290 <MixColumns+0x8>
 8000306:	bcf3      	pop	{r0, r1, r4, r5, r6, r7}
 8000308:	4770      	bx	lr
	...

0800030c <.text_14>:
 800030c:	20000000 	.word	0x20000000

08000310 <.text_15>:
 8000310:	200001e4 	.word	0x200001e4

08000314 <.text_16>:
 8000314:	0800aae0 	.word	0x0800aae0

08000318 <.text_17>:
 8000318:	0800ace0 	.word	0x0800ace0

0800031c <InvMixColumns>:
 800031c:	b4f0      	push	{r4, r5, r6, r7}
 800031e:	b089      	sub	sp, #36	; 0x24
 8000320:	48e2      	ldr	r0, [pc, #904]	; (80006ac <.text_22>)
 8000322:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000324:	2004      	movs	r0, #4
 8000326:	9008      	str	r0, [sp, #32]
 8000328:	7808      	ldrb	r0, [r1, #0]
 800032a:	466a      	mov	r2, sp
 800032c:	7090      	strb	r0, [r2, #2]
 800032e:	7848      	ldrb	r0, [r1, #1]
 8000330:	7150      	strb	r0, [r2, #5]
 8000332:	7888      	ldrb	r0, [r1, #2]
 8000334:	7110      	strb	r0, [r2, #4]
 8000336:	78c8      	ldrb	r0, [r1, #3]
 8000338:	70d0      	strb	r0, [r2, #3]
 800033a:	4668      	mov	r0, sp
 800033c:	7880      	ldrb	r0, [r0, #2]
 800033e:	09c0      	lsrs	r0, r0, #7
 8000340:	221b      	movs	r2, #27
 8000342:	4350      	muls	r0, r2
 8000344:	466a      	mov	r2, sp
 8000346:	7610      	strb	r0, [r2, #24]
 8000348:	4668      	mov	r0, sp
 800034a:	7880      	ldrb	r0, [r0, #2]
 800034c:	0040      	lsls	r0, r0, #1
 800034e:	76d0      	strb	r0, [r2, #27]
 8000350:	4668      	mov	r0, sp
 8000352:	7ec0      	ldrb	r0, [r0, #27]
 8000354:	7e12      	ldrb	r2, [r2, #24]
 8000356:	4042      	eors	r2, r0
 8000358:	4668      	mov	r0, sp
 800035a:	7042      	strb	r2, [r0, #1]
 800035c:	7840      	ldrb	r0, [r0, #1]
 800035e:	466a      	mov	r2, sp
 8000360:	7710      	strb	r0, [r2, #28]
 8000362:	4668      	mov	r0, sp
 8000364:	7840      	ldrb	r0, [r0, #1]
 8000366:	09c2      	lsrs	r2, r0, #7
 8000368:	231b      	movs	r3, #27
 800036a:	435a      	muls	r2, r3
 800036c:	466b      	mov	r3, sp
 800036e:	75da      	strb	r2, [r3, #23]
 8000370:	0040      	lsls	r0, r0, #1
 8000372:	466a      	mov	r2, sp
 8000374:	7dd2      	ldrb	r2, [r2, #23]
 8000376:	4042      	eors	r2, r0
 8000378:	4668      	mov	r0, sp
 800037a:	7342      	strb	r2, [r0, #13]
 800037c:	7b40      	ldrb	r0, [r0, #13]
 800037e:	466a      	mov	r2, sp
 8000380:	7690      	strb	r0, [r2, #26]
 8000382:	4668      	mov	r0, sp
 8000384:	7940      	ldrb	r0, [r0, #5]
 8000386:	09c0      	lsrs	r0, r0, #7
 8000388:	221b      	movs	r2, #27
 800038a:	4350      	muls	r0, r2
 800038c:	466a      	mov	r2, sp
 800038e:	7590      	strb	r0, [r2, #22]
 8000390:	4668      	mov	r0, sp
 8000392:	7940      	ldrb	r0, [r0, #5]
 8000394:	0040      	lsls	r0, r0, #1
 8000396:	7550      	strb	r0, [r2, #21]
 8000398:	4668      	mov	r0, sp
 800039a:	7d40      	ldrb	r0, [r0, #21]
 800039c:	7d92      	ldrb	r2, [r2, #22]
 800039e:	4042      	eors	r2, r0
 80003a0:	09d0      	lsrs	r0, r2, #7
 80003a2:	231b      	movs	r3, #27
 80003a4:	4358      	muls	r0, r3
 80003a6:	466b      	mov	r3, sp
 80003a8:	7518      	strb	r0, [r3, #20]
 80003aa:	0050      	lsls	r0, r2, #1
 80003ac:	7d1b      	ldrb	r3, [r3, #20]
 80003ae:	4043      	eors	r3, r0
 80003b0:	4668      	mov	r0, sp
 80003b2:	7303      	strb	r3, [r0, #12]
 80003b4:	7b00      	ldrb	r0, [r0, #12]
 80003b6:	466b      	mov	r3, sp
 80003b8:	7658      	strb	r0, [r3, #25]
 80003ba:	4668      	mov	r0, sp
 80003bc:	7900      	ldrb	r0, [r0, #4]
 80003be:	09c0      	lsrs	r0, r0, #7
 80003c0:	231b      	movs	r3, #27
 80003c2:	4358      	muls	r0, r3
 80003c4:	466b      	mov	r3, sp
 80003c6:	74d8      	strb	r0, [r3, #19]
 80003c8:	4668      	mov	r0, sp
 80003ca:	7900      	ldrb	r0, [r0, #4]
 80003cc:	0040      	lsls	r0, r0, #1
 80003ce:	7498      	strb	r0, [r3, #18]
 80003d0:	4668      	mov	r0, sp
 80003d2:	7c9b      	ldrb	r3, [r3, #18]
 80003d4:	466c      	mov	r4, sp
 80003d6:	7ce4      	ldrb	r4, [r4, #19]
 80003d8:	405c      	eors	r4, r3
 80003da:	7004      	strb	r4, [r0, #0]
 80003dc:	7804      	ldrb	r4, [r0, #0]
 80003de:	09e3      	lsrs	r3, r4, #7
 80003e0:	251b      	movs	r5, #27
 80003e2:	436b      	muls	r3, r5
 80003e4:	466d      	mov	r5, sp
 80003e6:	746b      	strb	r3, [r5, #17]
 80003e8:	0060      	lsls	r0, r4, #1
 80003ea:	466b      	mov	r3, sp
 80003ec:	7c5b      	ldrb	r3, [r3, #17]
 80003ee:	4043      	eors	r3, r0
 80003f0:	4668      	mov	r0, sp
 80003f2:	72c3      	strb	r3, [r0, #11]
 80003f4:	7ac5      	ldrb	r5, [r0, #11]
 80003f6:	78c0      	ldrb	r0, [r0, #3]
 80003f8:	09c0      	lsrs	r0, r0, #7
 80003fa:	231b      	movs	r3, #27
 80003fc:	4358      	muls	r0, r3
 80003fe:	466b      	mov	r3, sp
 8000400:	7418      	strb	r0, [r3, #16]
 8000402:	4668      	mov	r0, sp
 8000404:	78c0      	ldrb	r0, [r0, #3]
 8000406:	0040      	lsls	r0, r0, #1
 8000408:	73d8      	strb	r0, [r3, #15]
 800040a:	4668      	mov	r0, sp
 800040c:	7bc0      	ldrb	r0, [r0, #15]
 800040e:	7c1b      	ldrb	r3, [r3, #16]
 8000410:	4043      	eors	r3, r0
 8000412:	09d8      	lsrs	r0, r3, #7
 8000414:	261b      	movs	r6, #27
 8000416:	4370      	muls	r0, r6
 8000418:	466e      	mov	r6, sp
 800041a:	73b0      	strb	r0, [r6, #14]
 800041c:	0058      	lsls	r0, r3, #1
 800041e:	7bb6      	ldrb	r6, [r6, #14]
 8000420:	4046      	eors	r6, r0
 8000422:	4668      	mov	r0, sp
 8000424:	7286      	strb	r6, [r0, #10]
 8000426:	7a86      	ldrb	r6, [r0, #10]
 8000428:	09f0      	lsrs	r0, r6, #7
 800042a:	271b      	movs	r7, #27
 800042c:	4378      	muls	r0, r7
 800042e:	466f      	mov	r7, sp
 8000430:	7278      	strb	r0, [r7, #9]
 8000432:	09e8      	lsrs	r0, r5, #7
 8000434:	271b      	movs	r7, #27
 8000436:	4378      	muls	r0, r7
 8000438:	466f      	mov	r7, sp
 800043a:	7238      	strb	r0, [r7, #8]
 800043c:	4668      	mov	r0, sp
 800043e:	7e40      	ldrb	r0, [r0, #25]
 8000440:	09c0      	lsrs	r0, r0, #7
 8000442:	271b      	movs	r7, #27
 8000444:	4378      	muls	r0, r7
 8000446:	466f      	mov	r7, sp
 8000448:	71f8      	strb	r0, [r7, #7]
 800044a:	4668      	mov	r0, sp
 800044c:	7e80      	ldrb	r0, [r0, #26]
 800044e:	09c0      	lsrs	r0, r0, #7
 8000450:	271b      	movs	r7, #27
 8000452:	4378      	muls	r0, r7
 8000454:	466f      	mov	r7, sp
 8000456:	71b8      	strb	r0, [r7, #6]
 8000458:	4668      	mov	r0, sp
 800045a:	7880      	ldrb	r0, [r0, #2]
 800045c:	7f3f      	ldrb	r7, [r7, #28]
 800045e:	4047      	eors	r7, r0
 8000460:	0078      	lsls	r0, r7, #1
 8000462:	466f      	mov	r7, sp
 8000464:	7e3f      	ldrb	r7, [r7, #24]
 8000466:	4047      	eors	r7, r0
 8000468:	4668      	mov	r0, sp
 800046a:	7dc0      	ldrb	r0, [r0, #23]
 800046c:	4078      	eors	r0, r7
 800046e:	466f      	mov	r7, sp
 8000470:	7ebf      	ldrb	r7, [r7, #26]
 8000472:	007f      	lsls	r7, r7, #1
 8000474:	4047      	eors	r7, r0
 8000476:	4668      	mov	r0, sp
 8000478:	7980      	ldrb	r0, [r0, #6]
 800047a:	4078      	eors	r0, r7
 800047c:	466f      	mov	r7, sp
 800047e:	797f      	ldrb	r7, [r7, #5]
 8000480:	4047      	eors	r7, r0
 8000482:	4668      	mov	r0, sp
 8000484:	7d40      	ldrb	r0, [r0, #21]
 8000486:	4078      	eors	r0, r7
 8000488:	466f      	mov	r7, sp
 800048a:	7dbf      	ldrb	r7, [r7, #22]
 800048c:	4047      	eors	r7, r0
 800048e:	4668      	mov	r0, sp
 8000490:	7e40      	ldrb	r0, [r0, #25]
 8000492:	0040      	lsls	r0, r0, #1
 8000494:	4078      	eors	r0, r7
 8000496:	466f      	mov	r7, sp
 8000498:	79ff      	ldrb	r7, [r7, #7]
 800049a:	4047      	eors	r7, r0
 800049c:	4668      	mov	r0, sp
 800049e:	7900      	ldrb	r0, [r0, #4]
 80004a0:	4078      	eors	r0, r7
 80004a2:	0064      	lsls	r4, r4, #1
 80004a4:	4044      	eors	r4, r0
 80004a6:	4668      	mov	r0, sp
 80004a8:	7c40      	ldrb	r0, [r0, #17]
 80004aa:	4060      	eors	r0, r4
 80004ac:	006c      	lsls	r4, r5, #1
 80004ae:	4044      	eors	r4, r0
 80004b0:	4668      	mov	r0, sp
 80004b2:	7a00      	ldrb	r0, [r0, #8]
 80004b4:	4060      	eors	r0, r4
 80004b6:	466c      	mov	r4, sp
 80004b8:	78e4      	ldrb	r4, [r4, #3]
 80004ba:	4044      	eors	r4, r0
 80004bc:	0070      	lsls	r0, r6, #1
 80004be:	4060      	eors	r0, r4
 80004c0:	466c      	mov	r4, sp
 80004c2:	7a64      	ldrb	r4, [r4, #9]
 80004c4:	4044      	eors	r4, r0
 80004c6:	700c      	strb	r4, [r1, #0]
 80004c8:	4668      	mov	r0, sp
 80004ca:	7b47      	ldrb	r7, [r0, #13]
 80004cc:	7b04      	ldrb	r4, [r0, #12]
 80004ce:	7ac5      	ldrb	r5, [r0, #11]
 80004d0:	7a86      	ldrb	r6, [r0, #10]
 80004d2:	7880      	ldrb	r0, [r0, #2]
 80004d4:	007f      	lsls	r7, r7, #1
 80004d6:	4047      	eors	r7, r0
 80004d8:	4668      	mov	r0, sp
 80004da:	7980      	ldrb	r0, [r0, #6]
 80004dc:	4078      	eors	r0, r7
 80004de:	4684      	mov	ip, r0
 80004e0:	4668      	mov	r0, sp
 80004e2:	7d47      	ldrb	r7, [r0, #21]
 80004e4:	4660      	mov	r0, ip
 80004e6:	4047      	eors	r7, r0
 80004e8:	4668      	mov	r0, sp
 80004ea:	7d80      	ldrb	r0, [r0, #22]
 80004ec:	4078      	eors	r0, r7
 80004ee:	0057      	lsls	r7, r2, #1
 80004f0:	4047      	eors	r7, r0
 80004f2:	4668      	mov	r0, sp
 80004f4:	7d00      	ldrb	r0, [r0, #20]
 80004f6:	4078      	eors	r0, r7
 80004f8:	0064      	lsls	r4, r4, #1
 80004fa:	4044      	eors	r4, r0
 80004fc:	4668      	mov	r0, sp
 80004fe:	79c0      	ldrb	r0, [r0, #7]
 8000500:	4060      	eors	r0, r4
 8000502:	466c      	mov	r4, sp
 8000504:	7924      	ldrb	r4, [r4, #4]
 8000506:	4044      	eors	r4, r0
 8000508:	4668      	mov	r0, sp
 800050a:	7c80      	ldrb	r0, [r0, #18]
 800050c:	4060      	eors	r0, r4
 800050e:	466c      	mov	r4, sp
 8000510:	7ce4      	ldrb	r4, [r4, #19]
 8000512:	4044      	eors	r4, r0
 8000514:	0068      	lsls	r0, r5, #1
 8000516:	4060      	eors	r0, r4
 8000518:	466c      	mov	r4, sp
 800051a:	7a24      	ldrb	r4, [r4, #8]
 800051c:	4044      	eors	r4, r0
 800051e:	4668      	mov	r0, sp
 8000520:	78c0      	ldrb	r0, [r0, #3]
 8000522:	4060      	eors	r0, r4
 8000524:	005c      	lsls	r4, r3, #1
 8000526:	4044      	eors	r4, r0
 8000528:	4668      	mov	r0, sp
 800052a:	7b80      	ldrb	r0, [r0, #14]
 800052c:	4060      	eors	r0, r4
 800052e:	0074      	lsls	r4, r6, #1
 8000530:	4044      	eors	r4, r0
 8000532:	4668      	mov	r0, sp
 8000534:	7a40      	ldrb	r0, [r0, #9]
 8000536:	4060      	eors	r0, r4
 8000538:	7048      	strb	r0, [r1, #1]
 800053a:	4668      	mov	r0, sp
 800053c:	7846      	ldrb	r6, [r0, #1]
 800053e:	7b40      	ldrb	r0, [r0, #13]
 8000540:	466c      	mov	r4, sp
 8000542:	75a0      	strb	r0, [r4, #22]
 8000544:	4668      	mov	r0, sp
 8000546:	7b00      	ldrb	r0, [r0, #12]
 8000548:	7824      	ldrb	r4, [r4, #0]
 800054a:	466d      	mov	r5, sp
 800054c:	756c      	strb	r4, [r5, #21]
 800054e:	466c      	mov	r4, sp
 8000550:	7ae4      	ldrb	r4, [r4, #11]
 8000552:	7aad      	ldrb	r5, [r5, #10]
 8000554:	466f      	mov	r7, sp
 8000556:	78bf      	ldrb	r7, [r7, #2]
 8000558:	0076      	lsls	r6, r6, #1
 800055a:	407e      	eors	r6, r7
 800055c:	466f      	mov	r7, sp
 800055e:	7dff      	ldrb	r7, [r7, #23]
 8000560:	4077      	eors	r7, r6
 8000562:	466e      	mov	r6, sp
 8000564:	7db6      	ldrb	r6, [r6, #22]
 8000566:	0076      	lsls	r6, r6, #1
 8000568:	407e      	eors	r6, r7
 800056a:	466f      	mov	r7, sp
 800056c:	79bf      	ldrb	r7, [r7, #6]
 800056e:	4077      	eors	r7, r6
 8000570:	466e      	mov	r6, sp
 8000572:	7976      	ldrb	r6, [r6, #5]
 8000574:	407e      	eors	r6, r7
 8000576:	0040      	lsls	r0, r0, #1
 8000578:	4070      	eors	r0, r6
 800057a:	466e      	mov	r6, sp
 800057c:	79f6      	ldrb	r6, [r6, #7]
 800057e:	4046      	eors	r6, r0
 8000580:	4668      	mov	r0, sp
 8000582:	7c80      	ldrb	r0, [r0, #18]
 8000584:	4070      	eors	r0, r6
 8000586:	466e      	mov	r6, sp
 8000588:	7cf6      	ldrb	r6, [r6, #19]
 800058a:	4046      	eors	r6, r0
 800058c:	4668      	mov	r0, sp
 800058e:	7d40      	ldrb	r0, [r0, #21]
 8000590:	0040      	lsls	r0, r0, #1
 8000592:	4070      	eors	r0, r6
 8000594:	466e      	mov	r6, sp
 8000596:	7c76      	ldrb	r6, [r6, #17]
 8000598:	4046      	eors	r6, r0
 800059a:	0060      	lsls	r0, r4, #1
 800059c:	4070      	eors	r0, r6
 800059e:	466c      	mov	r4, sp
 80005a0:	7a24      	ldrb	r4, [r4, #8]
 80005a2:	4044      	eors	r4, r0
 80005a4:	4668      	mov	r0, sp
 80005a6:	78c0      	ldrb	r0, [r0, #3]
 80005a8:	4060      	eors	r0, r4
 80005aa:	466c      	mov	r4, sp
 80005ac:	7be4      	ldrb	r4, [r4, #15]
 80005ae:	4044      	eors	r4, r0
 80005b0:	4668      	mov	r0, sp
 80005b2:	7c00      	ldrb	r0, [r0, #16]
 80005b4:	4060      	eors	r0, r4
 80005b6:	006c      	lsls	r4, r5, #1
 80005b8:	4044      	eors	r4, r0
 80005ba:	4668      	mov	r0, sp
 80005bc:	7a40      	ldrb	r0, [r0, #9]
 80005be:	4060      	eors	r0, r4
 80005c0:	7088      	strb	r0, [r1, #2]
 80005c2:	4668      	mov	r0, sp
 80005c4:	7b40      	ldrb	r0, [r0, #13]
 80005c6:	466c      	mov	r4, sp
 80005c8:	7062      	strb	r2, [r4, #1]
 80005ca:	466a      	mov	r2, sp
 80005cc:	7b12      	ldrb	r2, [r2, #12]
 80005ce:	7ae4      	ldrb	r4, [r4, #11]
 80005d0:	466d      	mov	r5, sp
 80005d2:	7aad      	ldrb	r5, [r5, #10]
 80005d4:	466e      	mov	r6, sp
 80005d6:	78b7      	ldrb	r7, [r6, #2]
 80005d8:	7ef6      	ldrb	r6, [r6, #27]
 80005da:	407e      	eors	r6, r7
 80005dc:	466f      	mov	r7, sp
 80005de:	7e3f      	ldrb	r7, [r7, #24]
 80005e0:	4077      	eors	r7, r6
 80005e2:	0040      	lsls	r0, r0, #1
 80005e4:	4078      	eors	r0, r7
 80005e6:	466e      	mov	r6, sp
 80005e8:	79b6      	ldrb	r6, [r6, #6]
 80005ea:	4046      	eors	r6, r0
 80005ec:	4668      	mov	r0, sp
 80005ee:	7940      	ldrb	r0, [r0, #5]
 80005f0:	4070      	eors	r0, r6
 80005f2:	466e      	mov	r6, sp
 80005f4:	7876      	ldrb	r6, [r6, #1]
 80005f6:	0076      	lsls	r6, r6, #1
 80005f8:	4046      	eors	r6, r0
 80005fa:	4668      	mov	r0, sp
 80005fc:	7d00      	ldrb	r0, [r0, #20]
 80005fe:	4070      	eors	r0, r6
 8000600:	0052      	lsls	r2, r2, #1
 8000602:	4042      	eors	r2, r0
 8000604:	4668      	mov	r0, sp
 8000606:	79c0      	ldrb	r0, [r0, #7]
 8000608:	4050      	eors	r0, r2
 800060a:	466a      	mov	r2, sp
 800060c:	7912      	ldrb	r2, [r2, #4]
 800060e:	4042      	eors	r2, r0
 8000610:	0060      	lsls	r0, r4, #1
 8000612:	4050      	eors	r0, r2
 8000614:	466a      	mov	r2, sp
 8000616:	7a12      	ldrb	r2, [r2, #8]
 8000618:	4042      	eors	r2, r0
 800061a:	4668      	mov	r0, sp
 800061c:	7bc0      	ldrb	r0, [r0, #15]
 800061e:	4050      	eors	r0, r2
 8000620:	466a      	mov	r2, sp
 8000622:	7c12      	ldrb	r2, [r2, #16]
 8000624:	4042      	eors	r2, r0
 8000626:	0058      	lsls	r0, r3, #1
 8000628:	4050      	eors	r0, r2
 800062a:	466a      	mov	r2, sp
 800062c:	7b92      	ldrb	r2, [r2, #14]
 800062e:	4042      	eors	r2, r0
 8000630:	0068      	lsls	r0, r5, #1
 8000632:	4050      	eors	r0, r2
 8000634:	466a      	mov	r2, sp
 8000636:	7a52      	ldrb	r2, [r2, #9]
 8000638:	4042      	eors	r2, r0
 800063a:	70ca      	strb	r2, [r1, #3]
 800063c:	1d09      	adds	r1, r1, #4
 800063e:	9808      	ldr	r0, [sp, #32]
 8000640:	1e40      	subs	r0, r0, #1
 8000642:	9008      	str	r0, [sp, #32]
 8000644:	d000      	beq.n	8000648 <InvMixColumns+0x32c>
 8000646:	e66f      	b.n	8000328 <InvMixColumns+0xc>
 8000648:	b009      	add	sp, #36	; 0x24
 800064a:	bcf0      	pop	{r4, r5, r6, r7}
 800064c:	4770      	bx	lr

0800064e <InvSubBytes>:
 800064e:	4817      	ldr	r0, [pc, #92]	; (80006ac <.text_22>)
 8000650:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8000652:	2204      	movs	r2, #4
 8000654:	48ba      	ldr	r0, [pc, #744]	; (8000940 <.text_30>)

08000656 <.text_20>:
 8000656:	780b      	ldrb	r3, [r1, #0]
 8000658:	5cc3      	ldrb	r3, [r0, r3]
 800065a:	700b      	strb	r3, [r1, #0]
 800065c:	790b      	ldrb	r3, [r1, #4]
 800065e:	5cc3      	ldrb	r3, [r0, r3]
 8000660:	710b      	strb	r3, [r1, #4]
 8000662:	7a0b      	ldrb	r3, [r1, #8]
 8000664:	5cc3      	ldrb	r3, [r0, r3]
 8000666:	720b      	strb	r3, [r1, #8]
 8000668:	7b0b      	ldrb	r3, [r1, #12]
 800066a:	5cc3      	ldrb	r3, [r0, r3]
 800066c:	730b      	strb	r3, [r1, #12]
 800066e:	1c49      	adds	r1, r1, #1
 8000670:	1e52      	subs	r2, r2, #1
 8000672:	d1f0      	bne.n	8000656 <.text_20>
 8000674:	4770      	bx	lr

08000676 <InvShiftRows>:
 8000676:	480d      	ldr	r0, [pc, #52]	; (80006ac <.text_22>)
 8000678:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
 800067a:	7b41      	ldrb	r1, [r0, #13]
 800067c:	7a42      	ldrb	r2, [r0, #9]
 800067e:	7342      	strb	r2, [r0, #13]
 8000680:	7942      	ldrb	r2, [r0, #5]
 8000682:	7242      	strb	r2, [r0, #9]
 8000684:	7842      	ldrb	r2, [r0, #1]
 8000686:	7142      	strb	r2, [r0, #5]
 8000688:	7041      	strb	r1, [r0, #1]
 800068a:	7881      	ldrb	r1, [r0, #2]
 800068c:	7a82      	ldrb	r2, [r0, #10]
 800068e:	7082      	strb	r2, [r0, #2]
 8000690:	7281      	strb	r1, [r0, #10]
 8000692:	7981      	ldrb	r1, [r0, #6]
 8000694:	7b82      	ldrb	r2, [r0, #14]
 8000696:	7182      	strb	r2, [r0, #6]
 8000698:	7381      	strb	r1, [r0, #14]
 800069a:	78c1      	ldrb	r1, [r0, #3]
 800069c:	79c2      	ldrb	r2, [r0, #7]
 800069e:	70c2      	strb	r2, [r0, #3]
 80006a0:	7ac2      	ldrb	r2, [r0, #11]
 80006a2:	71c2      	strb	r2, [r0, #7]
 80006a4:	7bc2      	ldrb	r2, [r0, #15]
 80006a6:	72c2      	strb	r2, [r0, #11]
 80006a8:	73c1      	strb	r1, [r0, #15]
 80006aa:	4770      	bx	lr

080006ac <.text_22>:
 80006ac:	20000000 	.word	0x20000000

080006b0 <Cipher>:
 80006b0:	b510      	push	{r4, lr}
 80006b2:	2000      	movs	r0, #0
 80006b4:	f7ff fdab 	bl	800020e <AddRoundKey>
 80006b8:	2401      	movs	r4, #1
 80006ba:	f7ff fdc5 	bl	8000248 <SubBytes>
 80006be:	f7ff fdc8 	bl	8000252 <ShiftRows>
 80006c2:	f7ff fde1 	bl	8000288 <MixColumns>
 80006c6:	b2e0      	uxtb	r0, r4
 80006c8:	f7ff fda1 	bl	800020e <AddRoundKey>
 80006cc:	1c64      	adds	r4, r4, #1
 80006ce:	b2e0      	uxtb	r0, r4
 80006d0:	280a      	cmp	r0, #10
 80006d2:	dbf2      	blt.n	80006ba <Cipher+0xa>
 80006d4:	f7ff fdb8 	bl	8000248 <SubBytes>
 80006d8:	f7ff fdbb 	bl	8000252 <ShiftRows>
 80006dc:	200a      	movs	r0, #10
 80006de:	f7ff fd96 	bl	800020e <AddRoundKey>
 80006e2:	bd10      	pop	{r4, pc}

080006e4 <InvCipher>:
 80006e4:	b510      	push	{r4, lr}
 80006e6:	200a      	movs	r0, #10
 80006e8:	f7ff fd91 	bl	800020e <AddRoundKey>
 80006ec:	2409      	movs	r4, #9
 80006ee:	f7ff ffc2 	bl	8000676 <InvShiftRows>
 80006f2:	f7ff ffac 	bl	800064e <InvSubBytes>
 80006f6:	b2e0      	uxtb	r0, r4
 80006f8:	f7ff fd89 	bl	800020e <AddRoundKey>
 80006fc:	f7ff fe0e 	bl	800031c <InvMixColumns>
 8000700:	1e64      	subs	r4, r4, #1
 8000702:	0620      	lsls	r0, r4, #24
 8000704:	d1f3      	bne.n	80006ee <InvCipher+0xa>
 8000706:	f7ff ffb6 	bl	8000676 <InvShiftRows>
 800070a:	f7ff ffa0 	bl	800064e <InvSubBytes>
 800070e:	2000      	movs	r0, #0
 8000710:	f7ff fd7d 	bl	800020e <AddRoundKey>
 8000714:	bd10      	pop	{r4, pc}

08000716 <BlockCopy>:
 8000716:	2200      	movs	r2, #0
 8000718:	5c8b      	ldrb	r3, [r1, r2]
 800071a:	5483      	strb	r3, [r0, r2]
 800071c:	1c52      	adds	r2, r2, #1
 800071e:	5c8b      	ldrb	r3, [r1, r2]
 8000720:	5483      	strb	r3, [r0, r2]
 8000722:	1c52      	adds	r2, r2, #1
 8000724:	5c8b      	ldrb	r3, [r1, r2]
 8000726:	5483      	strb	r3, [r0, r2]
 8000728:	1c52      	adds	r2, r2, #1
 800072a:	5c8b      	ldrb	r3, [r1, r2]
 800072c:	5483      	strb	r3, [r0, r2]
 800072e:	1c52      	adds	r2, r2, #1
 8000730:	2a10      	cmp	r2, #16
 8000732:	dbf1      	blt.n	8000718 <BlockCopy+0x2>
 8000734:	4770      	bx	lr

08000736 <XorWithIv>:
 8000736:	b430      	push	{r4, r5}
 8000738:	2100      	movs	r1, #0
 800073a:	4a82      	ldr	r2, [pc, #520]	; (8000944 <.text_31>)
 800073c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800073e:	1843      	adds	r3, r0, r1
 8000740:	781c      	ldrb	r4, [r3, #0]
 8000742:	5c55      	ldrb	r5, [r2, r1]
 8000744:	4065      	eors	r5, r4
 8000746:	701d      	strb	r5, [r3, #0]
 8000748:	1c49      	adds	r1, r1, #1
 800074a:	1843      	adds	r3, r0, r1
 800074c:	781c      	ldrb	r4, [r3, #0]
 800074e:	5c55      	ldrb	r5, [r2, r1]
 8000750:	4065      	eors	r5, r4
 8000752:	701d      	strb	r5, [r3, #0]
 8000754:	1c49      	adds	r1, r1, #1
 8000756:	1843      	adds	r3, r0, r1
 8000758:	781c      	ldrb	r4, [r3, #0]
 800075a:	5c55      	ldrb	r5, [r2, r1]
 800075c:	4065      	eors	r5, r4
 800075e:	701d      	strb	r5, [r3, #0]
 8000760:	1c49      	adds	r1, r1, #1
 8000762:	1843      	adds	r3, r0, r1
 8000764:	781c      	ldrb	r4, [r3, #0]
 8000766:	5c55      	ldrb	r5, [r2, r1]
 8000768:	4065      	eors	r5, r4
 800076a:	701d      	strb	r5, [r3, #0]
 800076c:	1c49      	adds	r1, r1, #1
 800076e:	2910      	cmp	r1, #16
 8000770:	dbe5      	blt.n	800073e <XorWithIv+0x8>
 8000772:	bc30      	pop	{r4, r5}
 8000774:	4770      	bx	lr

08000776 <AES128_CBC_encrypt>:
 8000776:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000778:	0006      	movs	r6, r0
 800077a:	000d      	movs	r5, r1
 800077c:	0017      	movs	r7, r2
 800077e:	001c      	movs	r4, r3
 8000780:	0738      	lsls	r0, r7, #28
 8000782:	0f00      	lsrs	r0, r0, #28
 8000784:	9000      	str	r0, [sp, #0]
 8000786:	0030      	movs	r0, r6
 8000788:	f7ff ffc5 	bl	8000716 <BlockCopy>
 800078c:	486d      	ldr	r0, [pc, #436]	; (8000944 <.text_31>)
 800078e:	63c6      	str	r6, [r0, #60]	; 0x3c
 8000790:	6404      	str	r4, [r0, #64]	; 0x40
 8000792:	f7ff fcde 	bl	8000152 <KeyExpansion_enc>
 8000796:	486b      	ldr	r0, [pc, #428]	; (8000944 <.text_31>)
 8000798:	7b40      	ldrb	r0, [r0, #13]
 800079a:	496a      	ldr	r1, [pc, #424]	; (8000944 <.text_31>)
 800079c:	7b89      	ldrb	r1, [r1, #14]
 800079e:	4301      	orrs	r1, r0
 80007a0:	d001      	beq.n	80007a6 <AES128_CBC_encrypt+0x30>
 80007a2:	48ca      	ldr	r0, [pc, #808]	; (8000acc <.text_34>)
 80007a4:	e001      	b.n	80007aa <AES128_CBC_encrypt+0x34>
 80007a6:	4867      	ldr	r0, [pc, #412]	; (8000944 <.text_31>)
 80007a8:	6c80      	ldr	r0, [r0, #72]	; 0x48
 80007aa:	4966      	ldr	r1, [pc, #408]	; (8000944 <.text_31>)
 80007ac:	6448      	str	r0, [r1, #68]	; 0x44
 80007ae:	2f00      	cmp	r7, #0
 80007b0:	d01f      	beq.n	80007f2 <AES128_CBC_encrypt+0x7c>
 80007b2:	002c      	movs	r4, r5
 80007b4:	2500      	movs	r5, #0
 80007b6:	0020      	movs	r0, r4
 80007b8:	f7ff ffbd 	bl	8000736 <XorWithIv>
 80007bc:	2000      	movs	r0, #0
 80007be:	5c21      	ldrb	r1, [r4, r0]
 80007c0:	5431      	strb	r1, [r6, r0]
 80007c2:	1c40      	adds	r0, r0, #1
 80007c4:	5c21      	ldrb	r1, [r4, r0]
 80007c6:	5431      	strb	r1, [r6, r0]
 80007c8:	1c40      	adds	r0, r0, #1
 80007ca:	5c21      	ldrb	r1, [r4, r0]
 80007cc:	5431      	strb	r1, [r6, r0]
 80007ce:	1c40      	adds	r0, r0, #1
 80007d0:	5c21      	ldrb	r1, [r4, r0]
 80007d2:	5431      	strb	r1, [r6, r0]
 80007d4:	1c40      	adds	r0, r0, #1
 80007d6:	2810      	cmp	r0, #16
 80007d8:	dbf1      	blt.n	80007be <AES128_CBC_encrypt+0x48>
 80007da:	485a      	ldr	r0, [pc, #360]	; (8000944 <.text_31>)
 80007dc:	63c6      	str	r6, [r0, #60]	; 0x3c
 80007de:	f7ff ff67 	bl	80006b0 <Cipher>
 80007e2:	4858      	ldr	r0, [pc, #352]	; (8000944 <.text_31>)
 80007e4:	6446      	str	r6, [r0, #68]	; 0x44
 80007e6:	3410      	adds	r4, #16
 80007e8:	3610      	adds	r6, #16
 80007ea:	3510      	adds	r5, #16
 80007ec:	42bd      	cmp	r5, r7
 80007ee:	d3e2      	bcc.n	80007b6 <AES128_CBC_encrypt+0x40>
 80007f0:	0025      	movs	r5, r4
 80007f2:	9800      	ldr	r0, [sp, #0]
 80007f4:	2800      	cmp	r0, #0
 80007f6:	d00e      	beq.n	8000816 <AES128_CBC_encrypt+0xa0>
 80007f8:	0029      	movs	r1, r5
 80007fa:	0030      	movs	r0, r6
 80007fc:	f7ff ff8b 	bl	8000716 <BlockCopy>
 8000800:	2010      	movs	r0, #16
 8000802:	9900      	ldr	r1, [sp, #0]
 8000804:	1a41      	subs	r1, r0, r1
 8000806:	9800      	ldr	r0, [sp, #0]
 8000808:	1830      	adds	r0, r6, r0
 800080a:	f008 fe6b 	bl	80094e4 <__aeabi_memclr>
 800080e:	484d      	ldr	r0, [pc, #308]	; (8000944 <.text_31>)
 8000810:	63c6      	str	r6, [r0, #60]	; 0x3c
 8000812:	f7ff ff4d 	bl	80006b0 <Cipher>
 8000816:	4a4b      	ldr	r2, [pc, #300]	; (8000944 <.text_31>)
 8000818:	7b50      	ldrb	r0, [r2, #13]
 800081a:	2800      	cmp	r0, #0
 800081c:	d002      	beq.n	8000824 <AES128_CBC_encrypt+0xae>
 800081e:	0010      	movs	r0, r2
 8000820:	3060      	adds	r0, #96	; 0x60
 8000822:	e004      	b.n	800082e <AES128_CBC_encrypt+0xb8>
 8000824:	7b90      	ldrb	r0, [r2, #14]
 8000826:	2800      	cmp	r0, #0
 8000828:	d003      	beq.n	8000832 <AES128_CBC_encrypt+0xbc>
 800082a:	0010      	movs	r0, r2
 800082c:	3050      	adds	r0, #80	; 0x50
 800082e:	2110      	movs	r1, #16
 8000830:	e001      	b.n	8000836 <AES128_CBC_encrypt+0xc0>
 8000832:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8000834:	7bd1      	ldrb	r1, [r2, #15]
 8000836:	7411      	strb	r1, [r2, #16]
 8000838:	6410      	str	r0, [r2, #64]	; 0x40
 800083a:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}

0800083c <AES128_CBC_decrypt_internal>:
 800083c:	b5f1      	push	{r0, r4, r5, r6, r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	000e      	movs	r6, r1
 8000842:	0014      	movs	r4, r2
 8000844:	0720      	lsls	r0, r4, #28
 8000846:	0f00      	lsrs	r0, r0, #28
 8000848:	9004      	str	r0, [sp, #16]
 800084a:	466d      	mov	r5, sp
 800084c:	4668      	mov	r0, sp
 800084e:	f7ff ff62 	bl	8000716 <BlockCopy>
 8000852:	4f3c      	ldr	r7, [pc, #240]	; (8000944 <.text_31>)
 8000854:	4668      	mov	r0, sp
 8000856:	63f8      	str	r0, [r7, #60]	; 0x3c
 8000858:	f7ff fc56 	bl	8000108 <KeyExpansion_dec>
 800085c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800085e:	6478      	str	r0, [r7, #68]	; 0x44
 8000860:	2c00      	cmp	r4, #0
 8000862:	d025      	beq.n	80008b0 <AES128_CBC_decrypt_internal+0x74>
 8000864:	0030      	movs	r0, r6
 8000866:	9405      	str	r4, [sp, #20]
 8000868:	0029      	movs	r1, r5
 800086a:	2400      	movs	r4, #0
 800086c:	2200      	movs	r2, #0
 800086e:	5c83      	ldrb	r3, [r0, r2]
 8000870:	548b      	strb	r3, [r1, r2]
 8000872:	1c52      	adds	r2, r2, #1
 8000874:	5c83      	ldrb	r3, [r0, r2]
 8000876:	548b      	strb	r3, [r1, r2]
 8000878:	1c52      	adds	r2, r2, #1
 800087a:	5c83      	ldrb	r3, [r0, r2]
 800087c:	548b      	strb	r3, [r1, r2]
 800087e:	1c52      	adds	r2, r2, #1
 8000880:	5c83      	ldrb	r3, [r0, r2]
 8000882:	548b      	strb	r3, [r1, r2]
 8000884:	1c52      	adds	r2, r2, #1
 8000886:	2a10      	cmp	r2, #16
 8000888:	dbf1      	blt.n	800086e <AES128_CBC_decrypt_internal+0x32>
 800088a:	0005      	movs	r5, r0
 800088c:	000e      	movs	r6, r1
 800088e:	63fe      	str	r6, [r7, #60]	; 0x3c
 8000890:	f7ff ff28 	bl	80006e4 <InvCipher>
 8000894:	0030      	movs	r0, r6
 8000896:	f7ff ff4e 	bl	8000736 <XorWithIv>
 800089a:	647d      	str	r5, [r7, #68]	; 0x44
 800089c:	0028      	movs	r0, r5
 800089e:	3010      	adds	r0, #16
 80008a0:	0031      	movs	r1, r6
 80008a2:	3110      	adds	r1, #16
 80008a4:	3410      	adds	r4, #16
 80008a6:	9a05      	ldr	r2, [sp, #20]
 80008a8:	4294      	cmp	r4, r2
 80008aa:	d3df      	bcc.n	800086c <AES128_CBC_decrypt_internal+0x30>
 80008ac:	0006      	movs	r6, r0
 80008ae:	000d      	movs	r5, r1
 80008b0:	9804      	ldr	r0, [sp, #16]
 80008b2:	2800      	cmp	r0, #0
 80008b4:	d00d      	beq.n	80008d2 <AES128_CBC_decrypt_internal+0x96>
 80008b6:	0031      	movs	r1, r6
 80008b8:	0028      	movs	r0, r5
 80008ba:	f7ff ff2c 	bl	8000716 <BlockCopy>
 80008be:	2010      	movs	r0, #16
 80008c0:	9904      	ldr	r1, [sp, #16]
 80008c2:	1a41      	subs	r1, r0, r1
 80008c4:	9804      	ldr	r0, [sp, #16]
 80008c6:	1828      	adds	r0, r5, r0
 80008c8:	f008 fe0c 	bl	80094e4 <__aeabi_memclr>
 80008cc:	63fd      	str	r5, [r7, #60]	; 0x3c
 80008ce:	f7ff ff09 	bl	80006e4 <InvCipher>
 80008d2:	2100      	movs	r1, #0
 80008d4:	7c38      	ldrb	r0, [r7, #16]
 80008d6:	2210      	movs	r2, #16
 80008d8:	1a13      	subs	r3, r2, r0
 80008da:	466c      	mov	r4, sp
 80008dc:	9a06      	ldr	r2, [sp, #24]
 80008de:	e005      	b.n	80008ec <AES128_CBC_decrypt_internal+0xb0>
 80008e0:	424d      	negs	r5, r1
 80008e2:	1965      	adds	r5, r4, r5
 80008e4:	7bed      	ldrb	r5, [r5, #15]
 80008e6:	5455      	strb	r5, [r2, r1]
 80008e8:	1c49      	adds	r1, r1, #1
 80008ea:	b2c9      	uxtb	r1, r1
 80008ec:	4299      	cmp	r1, r3
 80008ee:	d1f7      	bne.n	80008e0 <AES128_CBC_decrypt_internal+0xa4>
 80008f0:	2800      	cmp	r0, #0
 80008f2:	d007      	beq.n	8000904 <AES128_CBC_decrypt_internal+0xc8>
 80008f4:	1851      	adds	r1, r2, r1
 80008f6:	466a      	mov	r2, sp
 80008f8:	7813      	ldrb	r3, [r2, #0]
 80008fa:	700b      	strb	r3, [r1, #0]
 80008fc:	1c52      	adds	r2, r2, #1
 80008fe:	1c49      	adds	r1, r1, #1
 8000900:	1e40      	subs	r0, r0, #1
 8000902:	d1f9      	bne.n	80008f8 <AES128_CBC_decrypt_internal+0xbc>
 8000904:	b007      	add	sp, #28
 8000906:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000908 <AES_CBC_decrypt_buffer>:
 8000908:	b538      	push	{r3, r4, r5, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	000d      	movs	r5, r1
 800090e:	4c0d      	ldr	r4, [pc, #52]	; (8000944 <.text_31>)
 8000910:	0021      	movs	r1, r4
 8000912:	3170      	adds	r1, #112	; 0x70
 8000914:	6461      	str	r1, [r4, #68]	; 0x44
 8000916:	6420      	str	r0, [r4, #64]	; 0x40
 8000918:	f7ff fbf6 	bl	8000108 <KeyExpansion_dec>
 800091c:	2210      	movs	r2, #16
 800091e:	0029      	movs	r1, r5
 8000920:	4668      	mov	r0, sp
 8000922:	f008 fde4 	bl	80094ee <__aeabi_memcpy>
 8000926:	63e5      	str	r5, [r4, #60]	; 0x3c
 8000928:	f7ff fedc 	bl	80006e4 <InvCipher>
 800092c:	0028      	movs	r0, r5
 800092e:	f7ff ff02 	bl	8000736 <XorWithIv>
 8000932:	2210      	movs	r2, #16
 8000934:	4669      	mov	r1, sp
 8000936:	6c60      	ldr	r0, [r4, #68]	; 0x44
 8000938:	f008 fdd9 	bl	80094ee <__aeabi_memcpy>
 800093c:	b005      	add	sp, #20
 800093e:	bd30      	pop	{r4, r5, pc}

08000940 <.text_30>:
 8000940:	0800abe0 	.word	0x0800abe0

08000944 <.text_31>:
 8000944:	20000000 	.word	0x20000000

08000948 <get_integrity_cksum>:
 8000948:	6802      	ldr	r2, [r0, #0]
 800094a:	6840      	ldr	r0, [r0, #4]
 800094c:	1810      	adds	r0, r2, r0
 800094e:	680a      	ldr	r2, [r1, #0]
 8000950:	1880      	adds	r0, r0, r2
 8000952:	684a      	ldr	r2, [r1, #4]
 8000954:	1880      	adds	r0, r0, r2
 8000956:	688a      	ldr	r2, [r1, #8]
 8000958:	1880      	adds	r0, r0, r2
 800095a:	68ca      	ldr	r2, [r1, #12]
 800095c:	1880      	adds	r0, r0, r2
 800095e:	690a      	ldr	r2, [r1, #16]
 8000960:	1880      	adds	r0, r0, r2
 8000962:	694a      	ldr	r2, [r1, #20]
 8000964:	1880      	adds	r0, r0, r2
 8000966:	698a      	ldr	r2, [r1, #24]
 8000968:	1880      	adds	r0, r0, r2
 800096a:	69c9      	ldr	r1, [r1, #28]
 800096c:	1841      	adds	r1, r0, r1
 800096e:	43c8      	mvns	r0, r1
 8000970:	4770      	bx	lr

08000972 <enc_utils_retrieve_data_from_flash>:
 8000972:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000974:	b094      	sub	sp, #80	; 0x50
 8000976:	0007      	movs	r7, r0
 8000978:	2600      	movs	r6, #0
 800097a:	2500      	movs	r5, #0
 800097c:	f007 fcde 	bl	800833c <GetNVMBoardDataAddress>
 8000980:	2800      	cmp	r0, #0
 8000982:	d100      	bne.n	8000986 <enc_utils_retrieve_data_from_flash+0x14>
 8000984:	e09e      	b.n	8000ac4 <enc_utils_retrieve_data_from_flash+0x152>
 8000986:	aa04      	add	r2, sp, #16
 8000988:	2140      	movs	r1, #64	; 0x40
 800098a:	f007 fcdd 	bl	8008348 <NVM_Read>
 800098e:	0001      	movs	r1, r0
 8000990:	ab04      	add	r3, sp, #16
 8000992:	220c      	movs	r2, #12
 8000994:	2000      	movs	r0, #0
 8000996:	781c      	ldrb	r4, [r3, #0]
 8000998:	1900      	adds	r0, r0, r4
 800099a:	785c      	ldrb	r4, [r3, #1]
 800099c:	1900      	adds	r0, r0, r4
 800099e:	789c      	ldrb	r4, [r3, #2]
 80009a0:	1900      	adds	r0, r0, r4
 80009a2:	78dc      	ldrb	r4, [r3, #3]
 80009a4:	1900      	adds	r0, r0, r4
 80009a6:	1d1b      	adds	r3, r3, #4
 80009a8:	1e52      	subs	r2, r2, #1
 80009aa:	d1f4      	bne.n	8000996 <enc_utils_retrieve_data_from_flash+0x24>
 80009ac:	2900      	cmp	r1, #0
 80009ae:	d105      	bne.n	80009bc <enc_utils_retrieve_data_from_flash+0x4a>
 80009b0:	2800      	cmp	r0, #0
 80009b2:	d003      	beq.n	80009bc <enc_utils_retrieve_data_from_flash+0x4a>
 80009b4:	ac04      	add	r4, sp, #16
 80009b6:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80009b8:	4288      	cmp	r0, r1
 80009ba:	d002      	beq.n	80009c2 <enc_utils_retrieve_data_from_flash+0x50>
 80009bc:	48c2      	ldr	r0, [pc, #776]	; (8000cc8 <.text_42>)
 80009be:	6086      	str	r6, [r0, #8]
 80009c0:	e080      	b.n	8000ac4 <enc_utils_retrieve_data_from_flash+0x152>
 80009c2:	9905      	ldr	r1, [sp, #20]
 80009c4:	0e08      	lsrs	r0, r1, #24
 80009c6:	2801      	cmp	r0, #1
 80009c8:	d002      	beq.n	80009d0 <enc_utils_retrieve_data_from_flash+0x5e>
 80009ca:	2802      	cmp	r0, #2
 80009cc:	d039      	beq.n	8000a42 <enc_utils_retrieve_data_from_flash+0xd0>
 80009ce:	e046      	b.n	8000a5e <enc_utils_retrieve_data_from_flash+0xec>
 80009d0:	4668      	mov	r0, sp
 80009d2:	0c0a      	lsrs	r2, r1, #16
 80009d4:	7002      	strb	r2, [r0, #0]
 80009d6:	0a09      	lsrs	r1, r1, #8
 80009d8:	73c1      	strb	r1, [r0, #15]
 80009da:	2120      	movs	r1, #32
 80009dc:	5c61      	ldrb	r1, [r4, r1]
 80009de:	7041      	strb	r1, [r0, #1]
 80009e0:	2122      	movs	r1, #34	; 0x22
 80009e2:	5c61      	ldrb	r1, [r4, r1]
 80009e4:	7081      	strb	r1, [r0, #2]
 80009e6:	2124      	movs	r1, #36	; 0x24
 80009e8:	5c61      	ldrb	r1, [r4, r1]
 80009ea:	70c1      	strb	r1, [r0, #3]
 80009ec:	2126      	movs	r1, #38	; 0x26
 80009ee:	5c61      	ldrb	r1, [r4, r1]
 80009f0:	7101      	strb	r1, [r0, #4]
 80009f2:	2128      	movs	r1, #40	; 0x28
 80009f4:	5c61      	ldrb	r1, [r4, r1]
 80009f6:	7141      	strb	r1, [r0, #5]
 80009f8:	212a      	movs	r1, #42	; 0x2a
 80009fa:	5c61      	ldrb	r1, [r4, r1]
 80009fc:	7181      	strb	r1, [r0, #6]
 80009fe:	212c      	movs	r1, #44	; 0x2c
 8000a00:	5c61      	ldrb	r1, [r4, r1]
 8000a02:	71c1      	strb	r1, [r0, #7]
 8000a04:	212d      	movs	r1, #45	; 0x2d
 8000a06:	5c61      	ldrb	r1, [r4, r1]
 8000a08:	7201      	strb	r1, [r0, #8]
 8000a0a:	2121      	movs	r1, #33	; 0x21
 8000a0c:	5c61      	ldrb	r1, [r4, r1]
 8000a0e:	7241      	strb	r1, [r0, #9]
 8000a10:	212b      	movs	r1, #43	; 0x2b
 8000a12:	5c61      	ldrb	r1, [r4, r1]
 8000a14:	7281      	strb	r1, [r0, #10]
 8000a16:	2123      	movs	r1, #35	; 0x23
 8000a18:	5c61      	ldrb	r1, [r4, r1]
 8000a1a:	72c1      	strb	r1, [r0, #11]
 8000a1c:	2129      	movs	r1, #41	; 0x29
 8000a1e:	5c61      	ldrb	r1, [r4, r1]
 8000a20:	7301      	strb	r1, [r0, #12]
 8000a22:	2125      	movs	r1, #37	; 0x25
 8000a24:	5c61      	ldrb	r1, [r4, r1]
 8000a26:	7341      	strb	r1, [r0, #13]
 8000a28:	2127      	movs	r1, #39	; 0x27
 8000a2a:	5c61      	ldrb	r1, [r4, r1]
 8000a2c:	7381      	strb	r1, [r0, #14]
 8000a2e:	0020      	movs	r0, r4
 8000a30:	3020      	adds	r0, #32
 8000a32:	2100      	movs	r1, #0
 8000a34:	2200      	movs	r2, #0
 8000a36:	2300      	movs	r3, #0
 8000a38:	c04e      	stmia	r0!, {r1, r2, r3, r6}
 8000a3a:	0021      	movs	r1, r4
 8000a3c:	3110      	adds	r1, #16
 8000a3e:	4668      	mov	r0, sp
 8000a40:	e00b      	b.n	8000a5a <enc_utils_retrieve_data_from_flash+0xe8>
 8000a42:	466a      	mov	r2, sp
 8000a44:	210c      	movs	r1, #12
 8000a46:	48a1      	ldr	r0, [pc, #644]	; (8000ccc <.text_43>)
 8000a48:	f007 fc7e 	bl	8008348 <NVM_Read>
 8000a4c:	4668      	mov	r0, sp
 8000a4e:	4669      	mov	r1, sp
 8000a50:	310c      	adds	r1, #12
 8000a52:	6802      	ldr	r2, [r0, #0]
 8000a54:	600a      	str	r2, [r1, #0]
 8000a56:	0021      	movs	r1, r4
 8000a58:	3110      	adds	r1, #16
 8000a5a:	f7ff ff55 	bl	8000908 <AES_CBC_decrypt_buffer>
 8000a5e:	a804      	add	r0, sp, #16
 8000a60:	7900      	ldrb	r0, [r0, #4]
 8000a62:	9005      	str	r0, [sp, #20]
 8000a64:	7138      	strb	r0, [r7, #4]
 8000a66:	4e98      	ldr	r6, [pc, #608]	; (8000cc8 <.text_42>)
 8000a68:	9804      	ldr	r0, [sp, #16]
 8000a6a:	60b0      	str	r0, [r6, #8]
 8000a6c:	9804      	ldr	r0, [sp, #16]
 8000a6e:	6038      	str	r0, [r7, #0]
 8000a70:	0020      	movs	r0, r4
 8000a72:	3008      	adds	r0, #8
 8000a74:	c806      	ldmia	r0!, {r1, r2}
 8000a76:	c606      	stmia	r6!, {r1, r2}
 8000a78:	3e08      	subs	r6, #8
 8000a7a:	2208      	movs	r2, #8
 8000a7c:	0021      	movs	r1, r4
 8000a7e:	3108      	adds	r1, #8
 8000a80:	1d78      	adds	r0, r7, #5
 8000a82:	f008 fd34 	bl	80094ee <__aeabi_memcpy>
 8000a86:	9810      	ldr	r0, [sp, #64]	; 0x40
 8000a88:	6138      	str	r0, [r7, #16]
 8000a8a:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8000a8c:	b240      	sxtb	r0, r0
 8000a8e:	6178      	str	r0, [r7, #20]
 8000a90:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8000a92:	61b8      	str	r0, [r7, #24]
 8000a94:	2128      	movs	r1, #40	; 0x28
 8000a96:	0030      	movs	r0, r6
 8000a98:	3014      	adds	r0, #20
 8000a9a:	f008 fd23 	bl	80094e4 <__aeabi_memclr>
 8000a9e:	0020      	movs	r0, r4
 8000aa0:	3010      	adds	r0, #16
 8000aa2:	0031      	movs	r1, r6
 8000aa4:	3124      	adds	r1, #36	; 0x24
 8000aa6:	c89c      	ldmia	r0!, {r2, r3, r4, r7}
 8000aa8:	c19c      	stmia	r1!, {r2, r3, r4, r7}
 8000aaa:	0030      	movs	r0, r6
 8000aac:	3014      	adds	r0, #20
 8000aae:	64b0      	str	r0, [r6, #72]	; 0x48
 8000ab0:	0030      	movs	r0, r6
 8000ab2:	3024      	adds	r0, #36	; 0x24
 8000ab4:	6430      	str	r0, [r6, #64]	; 0x40
 8000ab6:	0030      	movs	r0, r6
 8000ab8:	3024      	adds	r0, #36	; 0x24
 8000aba:	64f0      	str	r0, [r6, #76]	; 0x4c
 8000abc:	2010      	movs	r0, #16
 8000abe:	7430      	strb	r0, [r6, #16]
 8000ac0:	73f0      	strb	r0, [r6, #15]
 8000ac2:	e000      	b.n	8000ac6 <enc_utils_retrieve_data_from_flash+0x154>
 8000ac4:	2501      	movs	r5, #1
 8000ac6:	0028      	movs	r0, r5
 8000ac8:	b015      	add	sp, #84	; 0x54
 8000aca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000acc <.text_34>:
 8000acc:	20000070 	.word	0x20000070

08000ad0 <enc_utils_retrieve_data>:
 8000ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ad2:	b094      	sub	sp, #80	; 0x50
 8000ad4:	0007      	movs	r7, r0
 8000ad6:	000e      	movs	r6, r1
 8000ad8:	0015      	movs	r5, r2
 8000ada:	466a      	mov	r2, sp
 8000adc:	2104      	movs	r1, #4
 8000ade:	20f8      	movs	r0, #248	; 0xf8
 8000ae0:	0040      	lsls	r0, r0, #1
 8000ae2:	f004 fff3 	bl	8005acc <EepromRead>
 8000ae6:	aa0c      	add	r2, sp, #48	; 0x30
 8000ae8:	2120      	movs	r1, #32
 8000aea:	0108      	lsls	r0, r1, #4
 8000aec:	f004 ffee 	bl	8005acc <EepromRead>
 8000af0:	aa01      	add	r2, sp, #4
 8000af2:	2108      	movs	r1, #8
 8000af4:	2006      	movs	r0, #6
 8000af6:	f004 ffe9 	bl	8005acc <EepromRead>
 8000afa:	a90c      	add	r1, sp, #48	; 0x30
 8000afc:	a801      	add	r0, sp, #4
 8000afe:	f7ff ff23 	bl	8000948 <get_integrity_cksum>
 8000b02:	4c71      	ldr	r4, [pc, #452]	; (8000cc8 <.text_42>)
 8000b04:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000b06:	60a1      	str	r1, [r4, #8]
 8000b08:	2900      	cmp	r1, #0
 8000b0a:	d006      	beq.n	8000b1a <enc_utils_retrieve_data+0x4a>
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	43d2      	mvns	r2, r2
 8000b10:	4291      	cmp	r1, r2
 8000b12:	d002      	beq.n	8000b1a <enc_utils_retrieve_data+0x4a>
 8000b14:	9a00      	ldr	r2, [sp, #0]
 8000b16:	4290      	cmp	r0, r2
 8000b18:	d003      	beq.n	8000b22 <enc_utils_retrieve_data+0x52>
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	60a0      	str	r0, [r4, #8]
 8000b1e:	2001      	movs	r0, #1
 8000b20:	e073      	b.n	8000c0a <enc_utils_retrieve_data+0x13a>
 8000b22:	9703      	str	r7, [sp, #12]
 8000b24:	a80c      	add	r0, sp, #48	; 0x30
 8000b26:	1d02      	adds	r2, r0, #4
 8000b28:	ca88      	ldmia	r2!, {r3, r7}
 8000b2a:	c488      	stmia	r4!, {r3, r7}
 8000b2c:	3c08      	subs	r4, #8
 8000b2e:	9a03      	ldr	r2, [sp, #12]
 8000b30:	6011      	str	r1, [r2, #0]
 8000b32:	7821      	ldrb	r1, [r4, #0]
 8000b34:	7031      	strb	r1, [r6, #0]
 8000b36:	7861      	ldrb	r1, [r4, #1]
 8000b38:	7071      	strb	r1, [r6, #1]
 8000b3a:	78a1      	ldrb	r1, [r4, #2]
 8000b3c:	70b1      	strb	r1, [r6, #2]
 8000b3e:	78e1      	ldrb	r1, [r4, #3]
 8000b40:	70f1      	strb	r1, [r6, #3]
 8000b42:	7921      	ldrb	r1, [r4, #4]
 8000b44:	7131      	strb	r1, [r6, #4]
 8000b46:	7961      	ldrb	r1, [r4, #5]
 8000b48:	7171      	strb	r1, [r6, #5]
 8000b4a:	79a1      	ldrb	r1, [r4, #6]
 8000b4c:	71b1      	strb	r1, [r6, #6]
 8000b4e:	79e1      	ldrb	r1, [r4, #7]
 8000b50:	71f1      	strb	r1, [r6, #7]
 8000b52:	7b01      	ldrb	r1, [r0, #12]
 8000b54:	0709      	lsls	r1, r1, #28
 8000b56:	0f09      	lsrs	r1, r1, #28
 8000b58:	d100      	bne.n	8000b5c <enc_utils_retrieve_data+0x8c>
 8000b5a:	2101      	movs	r1, #1
 8000b5c:	7029      	strb	r1, [r5, #0]
 8000b5e:	68a1      	ldr	r1, [r4, #8]
 8000b60:	9104      	str	r1, [sp, #16]
 8000b62:	9105      	str	r1, [sp, #20]
 8000b64:	9106      	str	r1, [sp, #24]
 8000b66:	9107      	str	r1, [sp, #28]
 8000b68:	9108      	str	r1, [sp, #32]
 8000b6a:	aa08      	add	r2, sp, #32
 8000b6c:	ab01      	add	r3, sp, #4
 8000b6e:	1d15      	adds	r5, r2, #4
 8000b70:	cbc0      	ldmia	r3!, {r6, r7}
 8000b72:	c5c0      	stmia	r5!, {r6, r7}
 8000b74:	43cb      	mvns	r3, r1
 8000b76:	930b      	str	r3, [sp, #44]	; 0x2c
 8000b78:	7bd1      	ldrb	r1, [r2, #15]
 8000b7a:	7b03      	ldrb	r3, [r0, #12]
 8000b7c:	2b87      	cmp	r3, #135	; 0x87
 8000b7e:	da01      	bge.n	8000b84 <enc_utils_retrieve_data+0xb4>
 8000b80:	430b      	orrs	r3, r1
 8000b82:	e000      	b.n	8000b86 <enc_utils_retrieve_data+0xb6>
 8000b84:	400b      	ands	r3, r1
 8000b86:	73d3      	strb	r3, [r2, #15]
 8000b88:	7b11      	ldrb	r1, [r2, #12]
 8000b8a:	7b43      	ldrb	r3, [r0, #13]
 8000b8c:	2b19      	cmp	r3, #25
 8000b8e:	da01      	bge.n	8000b94 <enc_utils_retrieve_data+0xc4>
 8000b90:	430b      	orrs	r3, r1
 8000b92:	e000      	b.n	8000b96 <enc_utils_retrieve_data+0xc6>
 8000b94:	400b      	ands	r3, r1
 8000b96:	7313      	strb	r3, [r2, #12]
 8000b98:	a904      	add	r1, sp, #16
 8000b9a:	7a0a      	ldrb	r2, [r1, #8]
 8000b9c:	7b83      	ldrb	r3, [r0, #14]
 8000b9e:	2b80      	cmp	r3, #128	; 0x80
 8000ba0:	da01      	bge.n	8000ba6 <enc_utils_retrieve_data+0xd6>
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	e000      	b.n	8000ba8 <enc_utils_retrieve_data+0xd8>
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	720b      	strb	r3, [r1, #8]
 8000baa:	7aca      	ldrb	r2, [r1, #11]
 8000bac:	7bc3      	ldrb	r3, [r0, #15]
 8000bae:	2b80      	cmp	r3, #128	; 0x80
 8000bb0:	da01      	bge.n	8000bb6 <enc_utils_retrieve_data+0xe6>
 8000bb2:	431a      	orrs	r2, r3
 8000bb4:	e000      	b.n	8000bb8 <enc_utils_retrieve_data+0xe8>
 8000bb6:	401a      	ands	r2, r3
 8000bb8:	72ca      	strb	r2, [r1, #11]
 8000bba:	0719      	lsls	r1, r3, #28
 8000bbc:	0f09      	lsrs	r1, r1, #28
 8000bbe:	2902      	cmp	r1, #2
 8000bc0:	da01      	bge.n	8000bc6 <enc_utils_retrieve_data+0xf6>
 8000bc2:	2102      	movs	r1, #2
 8000bc4:	e002      	b.n	8000bcc <enc_utils_retrieve_data+0xfc>
 8000bc6:	290e      	cmp	r1, #14
 8000bc8:	db00      	blt.n	8000bcc <enc_utils_retrieve_data+0xfc>
 8000bca:	210d      	movs	r1, #13
 8000bcc:	7421      	strb	r1, [r4, #16]
 8000bce:	a904      	add	r1, sp, #16
 8000bd0:	64a1      	str	r1, [r4, #72]	; 0x48
 8000bd2:	a908      	add	r1, sp, #32
 8000bd4:	6421      	str	r1, [r4, #64]	; 0x40
 8000bd6:	2210      	movs	r2, #16
 8000bd8:	0001      	movs	r1, r0
 8000bda:	3110      	adds	r1, #16
 8000bdc:	0020      	movs	r0, r4
 8000bde:	3024      	adds	r0, #36	; 0x24
 8000be0:	f7ff fe2c 	bl	800083c <AES128_CBC_decrypt_internal>
 8000be4:	0020      	movs	r0, r4
 8000be6:	3014      	adds	r0, #20
 8000be8:	2100      	movs	r1, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	2300      	movs	r3, #0
 8000bee:	2500      	movs	r5, #0
 8000bf0:	c02e      	stmia	r0!, {r1, r2, r3, r5}
 8000bf2:	0020      	movs	r0, r4
 8000bf4:	3014      	adds	r0, #20
 8000bf6:	64a0      	str	r0, [r4, #72]	; 0x48
 8000bf8:	0020      	movs	r0, r4
 8000bfa:	3024      	adds	r0, #36	; 0x24
 8000bfc:	6420      	str	r0, [r4, #64]	; 0x40
 8000bfe:	7c20      	ldrb	r0, [r4, #16]
 8000c00:	73e0      	strb	r0, [r4, #15]
 8000c02:	0020      	movs	r0, r4
 8000c04:	3024      	adds	r0, #36	; 0x24
 8000c06:	64e0      	str	r0, [r4, #76]	; 0x4c
 8000c08:	2000      	movs	r0, #0
 8000c0a:	b015      	add	sp, #84	; 0x54
 8000c0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000c0e <enc_utils_encrypt>:
 8000c0e:	b538      	push	{r3, r4, r5, lr}
 8000c10:	4c2d      	ldr	r4, [pc, #180]	; (8000cc8 <.text_42>)
 8000c12:	6c24      	ldr	r4, [r4, #64]	; 0x40
 8000c14:	2c00      	cmp	r4, #0
 8000c16:	d101      	bne.n	8000c1c <enc_utils_encrypt+0xe>
 8000c18:	2001      	movs	r0, #1
 8000c1a:	bd32      	pop	{r1, r4, r5, pc}
 8000c1c:	9d04      	ldr	r5, [sp, #16]
 8000c1e:	2d00      	cmp	r5, #0
 8000c20:	d100      	bne.n	8000c24 <enc_utils_encrypt+0x16>
 8000c22:	0023      	movs	r3, r4
 8000c24:	f7ff fda7 	bl	8000776 <AES128_CBC_encrypt>
 8000c28:	2000      	movs	r0, #0
 8000c2a:	bd32      	pop	{r1, r4, r5, pc}

08000c2c <enc_utils_set_public_key>:
 8000c2c:	4926      	ldr	r1, [pc, #152]	; (8000cc8 <.text_42>)
 8000c2e:	2800      	cmp	r0, #0
 8000c30:	d004      	beq.n	8000c3c <enc_utils_set_public_key+0x10>
 8000c32:	2010      	movs	r0, #16
 8000c34:	000a      	movs	r2, r1
 8000c36:	3250      	adds	r2, #80	; 0x50
 8000c38:	2301      	movs	r3, #1
 8000c3a:	e002      	b.n	8000c42 <enc_utils_set_public_key+0x16>
 8000c3c:	7bc8      	ldrb	r0, [r1, #15]
 8000c3e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000c40:	2300      	movs	r3, #0
 8000c42:	738b      	strb	r3, [r1, #14]
 8000c44:	640a      	str	r2, [r1, #64]	; 0x40
 8000c46:	7408      	strb	r0, [r1, #16]
 8000c48:	2000      	movs	r0, #0
 8000c4a:	4770      	bx	lr

08000c4c <enc_utils_set_test_key>:
 8000c4c:	491e      	ldr	r1, [pc, #120]	; (8000cc8 <.text_42>)
 8000c4e:	2800      	cmp	r0, #0
 8000c50:	d004      	beq.n	8000c5c <enc_utils_set_test_key+0x10>
 8000c52:	2010      	movs	r0, #16
 8000c54:	000a      	movs	r2, r1
 8000c56:	3260      	adds	r2, #96	; 0x60
 8000c58:	2301      	movs	r3, #1
 8000c5a:	e002      	b.n	8000c62 <enc_utils_set_test_key+0x16>
 8000c5c:	7bc8      	ldrb	r0, [r1, #15]
 8000c5e:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8000c60:	2300      	movs	r3, #0
 8000c62:	734b      	strb	r3, [r1, #13]
 8000c64:	640a      	str	r2, [r1, #64]	; 0x40
 8000c66:	7408      	strb	r0, [r1, #16]
 8000c68:	2000      	movs	r0, #0
 8000c6a:	4770      	bx	lr

08000c6c <enc_utils_set_test_id>:
 8000c6c:	4916      	ldr	r1, [pc, #88]	; (8000cc8 <.text_42>)
 8000c6e:	7308      	strb	r0, [r1, #12]
 8000c70:	2000      	movs	r0, #0
 8000c72:	4770      	bx	lr

08000c74 <enc_utils_get_id>:
 8000c74:	4914      	ldr	r1, [pc, #80]	; (8000cc8 <.text_42>)
 8000c76:	7b0a      	ldrb	r2, [r1, #12]
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	d002      	beq.n	8000c82 <enc_utils_get_id+0xe>
 8000c7c:	4914      	ldr	r1, [pc, #80]	; (8000cd0 <.text_44>)
 8000c7e:	6001      	str	r1, [r0, #0]
 8000c80:	e007      	b.n	8000c92 <enc_utils_get_id+0x1e>
 8000c82:	7a0a      	ldrb	r2, [r1, #8]
 8000c84:	7002      	strb	r2, [r0, #0]
 8000c86:	7a4a      	ldrb	r2, [r1, #9]
 8000c88:	7042      	strb	r2, [r0, #1]
 8000c8a:	7a8a      	ldrb	r2, [r1, #10]
 8000c8c:	7082      	strb	r2, [r0, #2]
 8000c8e:	7ac9      	ldrb	r1, [r1, #11]
 8000c90:	70c1      	strb	r1, [r0, #3]
 8000c92:	2000      	movs	r0, #0
 8000c94:	4770      	bx	lr

08000c96 <enc_utils_get_initial_pac>:
 8000c96:	490c      	ldr	r1, [pc, #48]	; (8000cc8 <.text_42>)
 8000c98:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8000c9a:	2a00      	cmp	r2, #0
 8000c9c:	d101      	bne.n	8000ca2 <enc_utils_get_initial_pac+0xc>
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	4770      	bx	lr
 8000ca2:	780a      	ldrb	r2, [r1, #0]
 8000ca4:	7002      	strb	r2, [r0, #0]
 8000ca6:	784a      	ldrb	r2, [r1, #1]
 8000ca8:	7042      	strb	r2, [r0, #1]
 8000caa:	788a      	ldrb	r2, [r1, #2]
 8000cac:	7082      	strb	r2, [r0, #2]
 8000cae:	78ca      	ldrb	r2, [r1, #3]
 8000cb0:	70c2      	strb	r2, [r0, #3]
 8000cb2:	790a      	ldrb	r2, [r1, #4]
 8000cb4:	7102      	strb	r2, [r0, #4]
 8000cb6:	794a      	ldrb	r2, [r1, #5]
 8000cb8:	7142      	strb	r2, [r0, #5]
 8000cba:	798a      	ldrb	r2, [r1, #6]
 8000cbc:	7182      	strb	r2, [r0, #6]
 8000cbe:	79c9      	ldrb	r1, [r1, #7]
 8000cc0:	71c1      	strb	r1, [r0, #7]
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	4770      	bx	lr
	...

08000cc8 <.text_42>:
 8000cc8:	20000000 	.word	0x20000000

08000ccc <.text_43>:
 8000ccc:	1ff80050 	.word	0x1ff80050

08000cd0 <.text_44>:
 8000cd0:	fedcba98 	.word	0xfedcba98

08000cd4 <SIGFOX_API_open>:
 8000cd4:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 8000cd6:	0004      	movs	r4, r0
 8000cd8:	4895      	ldr	r0, [pc, #596]	; (8000f30 <.text_8>)
 8000cda:	7800      	ldrb	r0, [r0, #0]
 8000cdc:	2800      	cmp	r0, #0
 8000cde:	d001      	beq.n	8000ce4 <SIGFOX_API_open+0x10>
 8000ce0:	2011      	movs	r0, #17
 8000ce2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000ce4:	2c00      	cmp	r4, #0
 8000ce6:	d101      	bne.n	8000cec <SIGFOX_API_open+0x18>
 8000ce8:	2013      	movs	r0, #19
 8000cea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000cec:	ad01      	add	r5, sp, #4
 8000cee:	203b      	movs	r0, #59	; 0x3b
 8000cf0:	71e8      	strb	r0, [r5, #7]
 8000cf2:	a801      	add	r0, sp, #4
 8000cf4:	f007 faea 	bl	80082cc <MCU_API_get_nv_mem>
 8000cf8:	0001      	movs	r1, r0
 8000cfa:	d10e      	bne.n	8000d1a <SIGFOX_API_open+0x46>
 8000cfc:	79e8      	ldrb	r0, [r5, #7]
 8000cfe:	283b      	cmp	r0, #59	; 0x3b
 8000d00:	d001      	beq.n	8000d06 <SIGFOX_API_open+0x32>
 8000d02:	2012      	movs	r0, #18
 8000d04:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000d06:	498b      	ldr	r1, [pc, #556]	; (8000f34 <.text_9>)
 8000d08:	2074      	movs	r0, #116	; 0x74
 8000d0a:	f007 fad3 	bl	80082b4 <MCU_API_malloc>
 8000d0e:	4988      	ldr	r1, [pc, #544]	; (8000f30 <.text_8>)
 8000d10:	684a      	ldr	r2, [r1, #4]
 8000d12:	2a00      	cmp	r2, #0
 8000d14:	d001      	beq.n	8000d1a <SIGFOX_API_open+0x46>
 8000d16:	0001      	movs	r1, r0
 8000d18:	d001      	beq.n	8000d1e <SIGFOX_API_open+0x4a>
 8000d1a:	2110      	movs	r1, #16
 8000d1c:	e09a      	b.n	8000e54 <SIGFOX_API_open+0x180>
 8000d1e:	0011      	movs	r1, r2
 8000d20:	3157      	adds	r1, #87	; 0x57
 8000d22:	0010      	movs	r0, r2
 8000d24:	306c      	adds	r0, #108	; 0x6c
 8000d26:	f001 f9c3 	bl	80020b0 <SIGFOX_INT_get_device_id_and_payload_encryption_flag>
 8000d2a:	0006      	movs	r6, r0
 8000d2c:	4880      	ldr	r0, [pc, #512]	; (8000f30 <.text_8>)
 8000d2e:	6840      	ldr	r0, [r0, #4]
 8000d30:	d003      	beq.n	8000d3a <SIGFOX_API_open+0x66>
 8000d32:	f007 fad5 	bl	80082e0 <MCU_API_free>
 8000d36:	0030      	movs	r0, r6
 8000d38:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000d3a:	7869      	ldrb	r1, [r5, #1]
 8000d3c:	0209      	lsls	r1, r1, #8
 8000d3e:	782a      	ldrb	r2, [r5, #0]
 8000d40:	4311      	orrs	r1, r2
 8000d42:	8481      	strh	r1, [r0, #36]	; 0x24
 8000d44:	78e9      	ldrb	r1, [r5, #3]
 8000d46:	0209      	lsls	r1, r1, #8
 8000d48:	78aa      	ldrb	r2, [r5, #2]
 8000d4a:	4311      	orrs	r1, r2
 8000d4c:	0509      	lsls	r1, r1, #20
 8000d4e:	0d09      	lsrs	r1, r1, #20
 8000d50:	2254      	movs	r2, #84	; 0x54
 8000d52:	5281      	strh	r1, [r0, r2]
 8000d54:	79a9      	ldrb	r1, [r5, #6]
 8000d56:	225a      	movs	r2, #90	; 0x5a
 8000d58:	5481      	strb	r1, [r0, r2]
 8000d5a:	2000      	movs	r0, #0
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	7b62      	ldrb	r2, [r4, #13]
 8000d60:	2a02      	cmp	r2, #2
 8000d62:	d11f      	bne.n	8000da4 <SIGFOX_API_open+0xd0>
 8000d64:	4a72      	ldr	r2, [pc, #456]	; (8000f30 <.text_8>)
 8000d66:	6853      	ldr	r3, [r2, #4]
 8000d68:	2203      	movs	r2, #3
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	4eb8      	ldr	r6, [pc, #736]	; (8001050 <.text_15>)
 8000d6e:	60de      	str	r6, [r3, #12]
 8000d70:	6118      	str	r0, [r3, #16]
 8000d72:	6926      	ldr	r6, [r4, #16]
 8000d74:	629e      	str	r6, [r3, #40]	; 0x28
 8000d76:	7e27      	ldrb	r7, [r4, #24]
 8000d78:	2630      	movs	r6, #48	; 0x30
 8000d7a:	559f      	strb	r7, [r3, r6]
 8000d7c:	4b6c      	ldr	r3, [pc, #432]	; (8000f30 <.text_8>)
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	001e      	movs	r6, r3
 8000d82:	362c      	adds	r6, #44	; 0x2c
 8000d84:	9600      	str	r6, [sp, #0]
 8000d86:	6966      	ldr	r6, [r4, #20]
 8000d88:	4f9e      	ldr	r7, [pc, #632]	; (8001004 <.text_13>)
 8000d8a:	42be      	cmp	r6, r7
 8000d8c:	d106      	bne.n	8000d9c <SIGFOX_API_open+0xc8>
 8000d8e:	26fa      	movs	r6, #250	; 0xfa
 8000d90:	0076      	lsls	r6, r6, #1
 8000d92:	9f00      	ldr	r7, [sp, #0]
 8000d94:	603e      	str	r6, [r7, #0]
 8000d96:	2631      	movs	r6, #49	; 0x31
 8000d98:	559a      	strb	r2, [r3, r6]
 8000d9a:	e003      	b.n	8000da4 <SIGFOX_API_open+0xd0>
 8000d9c:	9a00      	ldr	r2, [sp, #0]
 8000d9e:	6010      	str	r0, [r2, #0]
 8000da0:	2631      	movs	r6, #49	; 0x31
 8000da2:	5599      	strb	r1, [r3, r6]
 8000da4:	2201      	movs	r2, #1
 8000da6:	7b63      	ldrb	r3, [r4, #13]
 8000da8:	2b01      	cmp	r3, #1
 8000daa:	d10e      	bne.n	8000dca <SIGFOX_API_open+0xf6>
 8000dac:	4b60      	ldr	r3, [pc, #384]	; (8000f30 <.text_8>)
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	4ea8      	ldr	r6, [pc, #672]	; (8001054 <.text_16>)
 8000db2:	609e      	str	r6, [r3, #8]
 8000db4:	60d8      	str	r0, [r3, #12]
 8000db6:	6118      	str	r0, [r3, #16]
 8000db8:	2632      	movs	r6, #50	; 0x32
 8000dba:	559a      	strb	r2, [r3, r6]
 8000dbc:	796b      	ldrb	r3, [r5, #5]
 8000dbe:	021b      	lsls	r3, r3, #8
 8000dc0:	792d      	ldrb	r5, [r5, #4]
 8000dc2:	432b      	orrs	r3, r5
 8000dc4:	4d5a      	ldr	r5, [pc, #360]	; (8000f30 <.text_8>)
 8000dc6:	686d      	ldr	r5, [r5, #4]
 8000dc8:	86ab      	strh	r3, [r5, #52]	; 0x34
 8000dca:	4b59      	ldr	r3, [pc, #356]	; (8000f30 <.text_8>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	6825      	ldr	r5, [r4, #0]
 8000dd0:	601d      	str	r5, [r3, #0]
 8000dd2:	6865      	ldr	r5, [r4, #4]
 8000dd4:	605d      	str	r5, [r3, #4]
 8000dd6:	001d      	movs	r5, r3
 8000dd8:	3556      	adds	r5, #86	; 0x56
 8000dda:	7b66      	ldrb	r6, [r4, #13]
 8000ddc:	71ee      	strb	r6, [r5, #7]
 8000dde:	68a6      	ldr	r6, [r4, #8]
 8000de0:	661e      	str	r6, [r3, #96]	; 0x60
 8000de2:	8068      	strh	r0, [r5, #2]
 8000de4:	7028      	strb	r0, [r5, #0]
 8000de6:	4852      	ldr	r0, [pc, #328]	; (8000f30 <.text_8>)
 8000de8:	6840      	ldr	r0, [r0, #4]
 8000dea:	0003      	movs	r3, r0
 8000dec:	3364      	adds	r3, #100	; 0x64
 8000dee:	7b25      	ldrb	r5, [r4, #12]
 8000df0:	2d01      	cmp	r5, #1
 8000df2:	d101      	bne.n	8000df8 <SIGFOX_API_open+0x124>
 8000df4:	2564      	movs	r5, #100	; 0x64
 8000df6:	e003      	b.n	8000e00 <SIGFOX_API_open+0x12c>
 8000df8:	2d02      	cmp	r5, #2
 8000dfa:	d102      	bne.n	8000e02 <SIGFOX_API_open+0x12e>
 8000dfc:	2596      	movs	r5, #150	; 0x96
 8000dfe:	00ad      	lsls	r5, r5, #2
 8000e00:	801d      	strh	r5, [r3, #0]
 8000e02:	7b25      	ldrb	r5, [r4, #12]
 8000e04:	731d      	strb	r5, [r3, #12]
 8000e06:	68a5      	ldr	r5, [r4, #8]
 8000e08:	263c      	movs	r6, #60	; 0x3c
 8000e0a:	4fa0      	ldr	r7, [pc, #640]	; (800108c <.text_18>)
 8000e0c:	42bd      	cmp	r5, r7
 8000e0e:	d110      	bne.n	8000e32 <SIGFOX_API_open+0x15e>
 8000e10:	805e      	strh	r6, [r3, #2]
 8000e12:	489f      	ldr	r0, [pc, #636]	; (8001090 <.text_19>)
 8000e14:	8098      	strh	r0, [r3, #4]
 8000e16:	7b60      	ldrb	r0, [r4, #13]
 8000e18:	2804      	cmp	r0, #4
 8000e1a:	d101      	bne.n	8000e20 <SIGFOX_API_open+0x14c>
 8000e1c:	4844      	ldr	r0, [pc, #272]	; (8000f30 <.text_8>)
 8000e1e:	7001      	strb	r1, [r0, #0]
 8000e20:	7b60      	ldrb	r0, [r4, #13]
 8000e22:	2801      	cmp	r0, #1
 8000e24:	d001      	beq.n	8000e2a <SIGFOX_API_open+0x156>
 8000e26:	2802      	cmp	r0, #2
 8000e28:	d101      	bne.n	8000e2e <SIGFOX_API_open+0x15a>
 8000e2a:	4841      	ldr	r0, [pc, #260]	; (8000f30 <.text_8>)
 8000e2c:	7002      	strb	r2, [r0, #0]
 8000e2e:	2000      	movs	r0, #0
 8000e30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8000e32:	4f98      	ldr	r7, [pc, #608]	; (8001094 <.text_20>)
 8000e34:	42bd      	cmp	r5, r7
 8000e36:	d104      	bne.n	8000e42 <SIGFOX_API_open+0x16e>
 8000e38:	2008      	movs	r0, #8
 8000e3a:	8058      	strh	r0, [r3, #2]
 8000e3c:	20fa      	movs	r0, #250	; 0xfa
 8000e3e:	00c0      	lsls	r0, r0, #3
 8000e40:	e7e8      	b.n	8000e14 <SIGFOX_API_open+0x140>
 8000e42:	4f95      	ldr	r7, [pc, #596]	; (8001098 <.text_21>)
 8000e44:	42bd      	cmp	r5, r7
 8000e46:	d102      	bne.n	8000e4e <SIGFOX_API_open+0x17a>
 8000e48:	805e      	strh	r6, [r3, #2]
 8000e4a:	4881      	ldr	r0, [pc, #516]	; (8001050 <.text_15>)
 8000e4c:	e7e2      	b.n	8000e14 <SIGFOX_API_open+0x140>
 8000e4e:	f007 fa47 	bl	80082e0 <MCU_API_free>
 8000e52:	2114      	movs	r1, #20
 8000e54:	f000 fa56 	bl	8001304 <RETURN_CODE>
 8000e58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

08000e5a <SIGFOX_API_close>:
 8000e5a:	b570      	push	{r4, r5, r6, lr}
 8000e5c:	2500      	movs	r5, #0
 8000e5e:	2400      	movs	r4, #0
 8000e60:	4e33      	ldr	r6, [pc, #204]	; (8000f30 <.text_8>)
 8000e62:	7830      	ldrb	r0, [r6, #0]
 8000e64:	2800      	cmp	r0, #0
 8000e66:	d101      	bne.n	8000e6c <SIGFOX_API_close+0x12>
 8000e68:	2021      	movs	r0, #33	; 0x21
 8000e6a:	bd70      	pop	{r4, r5, r6, pc}
 8000e6c:	6870      	ldr	r0, [r6, #4]
 8000e6e:	f007 fa37 	bl	80082e0 <MCU_API_free>
 8000e72:	0001      	movs	r1, r0
 8000e74:	d000      	beq.n	8000e78 <SIGFOX_API_close+0x1e>
 8000e76:	2420      	movs	r4, #32
 8000e78:	7035      	strb	r5, [r6, #0]
 8000e7a:	0021      	movs	r1, r4
 8000e7c:	f000 fa42 	bl	8001304 <RETURN_CODE>
 8000e80:	bd70      	pop	{r4, r5, r6, pc}

08000e82 <SIGFOX_API_send_frame>:
 8000e82:	b53e      	push	{r1, r2, r3, r4, r5, lr}
 8000e84:	9c06      	ldr	r4, [sp, #24]
 8000e86:	2c01      	cmp	r4, #1
 8000e88:	d101      	bne.n	8000e8e <SIGFOX_API_send_frame+0xc>
 8000e8a:	2501      	movs	r5, #1
 8000e8c:	e000      	b.n	8000e90 <SIGFOX_API_send_frame+0xe>
 8000e8e:	2500      	movs	r5, #0
 8000e90:	2800      	cmp	r0, #0
 8000e92:	d101      	bne.n	8000e98 <SIGFOX_API_send_frame+0x16>
 8000e94:	2033      	movs	r0, #51	; 0x33
 8000e96:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8000e98:	290d      	cmp	r1, #13
 8000e9a:	db01      	blt.n	8000ea0 <SIGFOX_API_send_frame+0x1e>
 8000e9c:	2030      	movs	r0, #48	; 0x30
 8000e9e:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8000ea0:	2a00      	cmp	r2, #0
 8000ea2:	d103      	bne.n	8000eac <SIGFOX_API_send_frame+0x2a>
 8000ea4:	2c01      	cmp	r4, #1
 8000ea6:	d101      	bne.n	8000eac <SIGFOX_API_send_frame+0x2a>
 8000ea8:	2031      	movs	r0, #49	; 0x31
 8000eaa:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
 8000eac:	9502      	str	r5, [sp, #8]
 8000eae:	9301      	str	r3, [sp, #4]
 8000eb0:	9200      	str	r2, [sp, #0]
 8000eb2:	000b      	movs	r3, r1
 8000eb4:	0002      	movs	r2, r0
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	481d      	ldr	r0, [pc, #116]	; (8000f30 <.text_8>)
 8000eba:	6840      	ldr	r0, [r0, #4]
 8000ebc:	f000 fb0f 	bl	80014de <SIGFOX_INT_execute_communication_sequence>
 8000ec0:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}

08000ec2 <SIGFOX_API_send_bit>:
 8000ec2:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000ec4:	2402      	movs	r4, #2
 8000ec6:	4304      	orrs	r4, r0
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d106      	bne.n	8000eda <SIGFOX_API_send_bit+0x18>
 8000ecc:	2001      	movs	r0, #1
 8000ece:	466b      	mov	r3, sp
 8000ed0:	731c      	strb	r4, [r3, #12]
 8000ed2:	2900      	cmp	r1, #0
 8000ed4:	d104      	bne.n	8000ee0 <SIGFOX_API_send_bit+0x1e>
 8000ed6:	2034      	movs	r0, #52	; 0x34
 8000ed8:	e00c      	b.n	8000ef4 <SIGFOX_API_send_bit+0x32>
 8000eda:	2000      	movs	r0, #0
 8000edc:	466b      	mov	r3, sp
 8000ede:	731c      	strb	r4, [r3, #12]
 8000ee0:	9002      	str	r0, [sp, #8]
 8000ee2:	9201      	str	r2, [sp, #4]
 8000ee4:	9100      	str	r1, [sp, #0]
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	aa03      	add	r2, sp, #12
 8000eea:	2100      	movs	r1, #0
 8000eec:	4810      	ldr	r0, [pc, #64]	; (8000f30 <.text_8>)
 8000eee:	6840      	ldr	r0, [r0, #4]
 8000ef0:	f000 faf5 	bl	80014de <SIGFOX_INT_execute_communication_sequence>
 8000ef4:	b004      	add	sp, #16
 8000ef6:	bd10      	pop	{r4, pc}

08000ef8 <SIGFOX_API_send_outofband>:
 8000ef8:	b5e0      	push	{r5, r6, r7, lr}
 8000efa:	2801      	cmp	r0, #1
 8000efc:	dd01      	ble.n	8000f02 <SIGFOX_API_send_outofband+0xa>
 8000efe:	2035      	movs	r0, #53	; 0x35
 8000f00:	bd0e      	pop	{r1, r2, r3, pc}
 8000f02:	2800      	cmp	r0, #0
 8000f04:	d102      	bne.n	8000f0c <SIGFOX_API_send_outofband+0x14>
 8000f06:	2103      	movs	r1, #3
 8000f08:	2307      	movs	r3, #7
 8000f0a:	e003      	b.n	8000f14 <SIGFOX_API_send_outofband+0x1c>
 8000f0c:	2801      	cmp	r0, #1
 8000f0e:	d101      	bne.n	8000f14 <SIGFOX_API_send_outofband+0x1c>
 8000f10:	2104      	movs	r1, #4
 8000f12:	2305      	movs	r3, #5
 8000f14:	2000      	movs	r0, #0
 8000f16:	9002      	str	r0, [sp, #8]
 8000f18:	2002      	movs	r0, #2
 8000f1a:	9001      	str	r0, [sp, #4]
 8000f1c:	2000      	movs	r0, #0
 8000f1e:	9000      	str	r0, [sp, #0]
 8000f20:	b2db      	uxtb	r3, r3
 8000f22:	2200      	movs	r2, #0
 8000f24:	b2c9      	uxtb	r1, r1
 8000f26:	4802      	ldr	r0, [pc, #8]	; (8000f30 <.text_8>)
 8000f28:	6840      	ldr	r0, [r0, #4]
 8000f2a:	f000 fad8 	bl	80014de <SIGFOX_INT_execute_communication_sequence>
 8000f2e:	bd0e      	pop	{r1, r2, r3, pc}

08000f30 <.text_8>:
 8000f30:	20000294 	.word	0x20000294

08000f34 <.text_9>:
 8000f34:	20000298 	.word	0x20000298

08000f38 <SIGFOX_API_get_version>:
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	2a00      	cmp	r2, #0
 8000f3c:	d006      	beq.n	8000f4c <SIGFOX_API_get_version+0x14>
 8000f3e:	2a01      	cmp	r2, #1
 8000f40:	d00c      	beq.n	8000f5c <SIGFOX_API_get_version+0x24>
 8000f42:	2a02      	cmp	r2, #2
 8000f44:	d012      	beq.n	8000f6c <SIGFOX_API_get_version+0x34>
 8000f46:	2a05      	cmp	r2, #5
 8000f48:	d013      	beq.n	8000f72 <SIGFOX_API_get_version+0x3a>
 8000f4a:	e015      	b.n	8000f78 <SIGFOX_API_get_version+0x40>
 8000f4c:	a20c      	add	r2, pc, #48	; (adr r2, 8000f80 <sfxlib_version>)
 8000f4e:	6002      	str	r2, [r0, #0]
 8000f50:	2900      	cmp	r1, #0
 8000f52:	d001      	beq.n	8000f58 <SIGFOX_API_get_version+0x20>
 8000f54:	200f      	movs	r0, #15
 8000f56:	7008      	strb	r0, [r1, #0]
 8000f58:	2000      	movs	r0, #0
 8000f5a:	bd02      	pop	{r1, pc}
 8000f5c:	f007 f9e4 	bl	8008328 <MCU_API_get_version>
 8000f60:	0001      	movs	r1, r0
 8000f62:	d0f9      	beq.n	8000f58 <SIGFOX_API_get_version+0x20>
 8000f64:	215c      	movs	r1, #92	; 0x5c
 8000f66:	f000 f9cd 	bl	8001304 <RETURN_CODE>
 8000f6a:	bd02      	pop	{r1, pc}
 8000f6c:	f007 ffc2 	bl	8008ef4 <RF_API_get_version>
 8000f70:	e7f6      	b.n	8000f60 <SIGFOX_API_get_version+0x28>
 8000f72:	f008 fab5 	bl	80094e0 <MONARCH_API_get_version>
 8000f76:	e7f3      	b.n	8000f60 <SIGFOX_API_get_version+0x28>
 8000f78:	215d      	movs	r1, #93	; 0x5d
 8000f7a:	2000      	movs	r0, #0
 8000f7c:	e7f3      	b.n	8000f66 <SIGFOX_API_get_version+0x2e>
	...

08000f80 <sfxlib_version>:
 8000f80:	3256 382e 312e 465f 4c44 4d5f 4e4f 0000     V2.8.1_FDL_MON..

08000f90 <SIGFOX_API_set_std_config>:
 8000f90:	b538      	push	{r3, r4, r5, lr}
 8000f92:	000c      	movs	r4, r1
 8000f94:	4da2      	ldr	r5, [pc, #648]	; (8001220 <.text_29>)
 8000f96:	7829      	ldrb	r1, [r5, #0]
 8000f98:	2901      	cmp	r1, #1
 8000f9a:	d130      	bne.n	8000ffe <SIGFOX_API_set_std_config+0x6e>
 8000f9c:	6869      	ldr	r1, [r5, #4]
 8000f9e:	6802      	ldr	r2, [r0, #0]
 8000fa0:	608a      	str	r2, [r1, #8]
 8000fa2:	6842      	ldr	r2, [r0, #4]
 8000fa4:	60ca      	str	r2, [r1, #12]
 8000fa6:	6880      	ldr	r0, [r0, #8]
 8000fa8:	6108      	str	r0, [r1, #16]
 8000faa:	05c0      	lsls	r0, r0, #23
 8000fac:	d509      	bpl.n	8000fc2 <SIGFOX_API_set_std_config+0x32>
 8000fae:	6e08      	ldr	r0, [r1, #96]	; 0x60
 8000fb0:	4a39      	ldr	r2, [pc, #228]	; (8001098 <.text_21>)
 8000fb2:	4290      	cmp	r0, r2
 8000fb4:	d105      	bne.n	8000fc2 <SIGFOX_API_set_std_config+0x32>
 8000fb6:	0008      	movs	r0, r1
 8000fb8:	3060      	adds	r0, #96	; 0x60
 8000fba:	4a34      	ldr	r2, [pc, #208]	; (800108c <.text_18>)
 8000fbc:	6002      	str	r2, [r0, #0]
 8000fbe:	4a34      	ldr	r2, [pc, #208]	; (8001090 <.text_19>)
 8000fc0:	8102      	strh	r2, [r0, #8]
 8000fc2:	205d      	movs	r0, #93	; 0x5d
 8000fc4:	5c08      	ldrb	r0, [r1, r0]
 8000fc6:	2801      	cmp	r0, #1
 8000fc8:	d10a      	bne.n	8000fe0 <SIGFOX_API_set_std_config+0x50>
 8000fca:	0008      	movs	r0, r1
 8000fcc:	f000 f93b 	bl	8001246 <SIGFOX_INT_get_max_micro_channel>
 8000fd0:	6869      	ldr	r1, [r5, #4]
 8000fd2:	86c8      	strh	r0, [r1, #54]	; 0x36
 8000fd4:	2800      	cmp	r0, #0
 8000fd6:	d101      	bne.n	8000fdc <SIGFOX_API_set_std_config+0x4c>
 8000fd8:	2041      	movs	r0, #65	; 0x41
 8000fda:	bd32      	pop	{r1, r4, r5, pc}
 8000fdc:	2032      	movs	r0, #50	; 0x32
 8000fde:	540c      	strb	r4, [r1, r0]
 8000fe0:	6868      	ldr	r0, [r5, #4]
 8000fe2:	215d      	movs	r1, #93	; 0x5d
 8000fe4:	5c41      	ldrb	r1, [r0, r1]
 8000fe6:	2902      	cmp	r1, #2
 8000fe8:	d107      	bne.n	8000ffa <SIGFOX_API_set_std_config+0x6a>
 8000fea:	6881      	ldr	r1, [r0, #8]
 8000fec:	2900      	cmp	r1, #0
 8000fee:	d002      	beq.n	8000ff6 <SIGFOX_API_set_std_config+0x66>
 8000ff0:	68c0      	ldr	r0, [r0, #12]
 8000ff2:	2806      	cmp	r0, #6
 8000ff4:	d201      	bcs.n	8000ffa <SIGFOX_API_set_std_config+0x6a>
 8000ff6:	2040      	movs	r0, #64	; 0x40
 8000ff8:	bd32      	pop	{r1, r4, r5, pc}
 8000ffa:	2002      	movs	r0, #2
 8000ffc:	7028      	strb	r0, [r5, #0]
 8000ffe:	2000      	movs	r0, #0
 8001000:	bd32      	pop	{r1, r4, r5, pc}
	...

08001004 <.text_13>:
 8001004:	000493e0 	.word	0x000493e0

08001008 <SIGFOX_API_start_continuous_transmission>:
 8001008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800100a:	0007      	movs	r7, r0
 800100c:	000c      	movs	r4, r1
 800100e:	4e84      	ldr	r6, [pc, #528]	; (8001220 <.text_29>)
 8001010:	7830      	ldrb	r0, [r6, #0]
 8001012:	2800      	cmp	r0, #0
 8001014:	d001      	beq.n	800101a <SIGFOX_API_start_continuous_transmission+0x12>
 8001016:	2058      	movs	r0, #88	; 0x58
 8001018:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800101a:	f007 fcfb 	bl	8008a14 <RF_API_init>
 800101e:	0005      	movs	r5, r0
 8001020:	d001      	beq.n	8001026 <SIGFOX_API_start_continuous_transmission+0x1e>
 8001022:	2157      	movs	r1, #87	; 0x57
 8001024:	e00d      	b.n	8001042 <SIGFOX_API_start_continuous_transmission+0x3a>
 8001026:	0038      	movs	r0, r7
 8001028:	f007 fef0 	bl	8008e0c <RF_API_change_frequency>
 800102c:	0005      	movs	r5, r0
 800102e:	d104      	bne.n	800103a <SIGFOX_API_start_continuous_transmission+0x32>
 8001030:	0020      	movs	r0, r4
 8001032:	f007 fff5 	bl	8009020 <RF_API_start_continuous_transmission>
 8001036:	0005      	movs	r5, r0
 8001038:	d006      	beq.n	8001048 <SIGFOX_API_start_continuous_transmission+0x40>
 800103a:	f008 f84d 	bl	80090d8 <RF_API_stop>
 800103e:	2157      	movs	r1, #87	; 0x57
 8001040:	0028      	movs	r0, r5
 8001042:	f000 f95f 	bl	8001304 <RETURN_CODE>
 8001046:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8001048:	2003      	movs	r0, #3
 800104a:	7030      	strb	r0, [r6, #0]
 800104c:	2000      	movs	r0, #0
 800104e:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08001050 <.text_15>:
 8001050:	00001388 	.word	0x00001388

08001054 <.text_16>:
 8001054:	000001ff 	.word	0x000001ff

08001058 <SIGFOX_API_stop_continuous_transmission>:
 8001058:	b538      	push	{r3, r4, r5, lr}
 800105a:	4c71      	ldr	r4, [pc, #452]	; (8001220 <.text_29>)
 800105c:	7820      	ldrb	r0, [r4, #0]
 800105e:	2803      	cmp	r0, #3
 8001060:	d001      	beq.n	8001066 <SIGFOX_API_stop_continuous_transmission+0xe>
 8001062:	205a      	movs	r0, #90	; 0x5a
 8001064:	bd32      	pop	{r1, r4, r5, pc}
 8001066:	f008 f84f 	bl	8009108 <RF_API_stop_continuous_transmission>
 800106a:	2500      	movs	r5, #0
 800106c:	0001      	movs	r1, r0
 800106e:	d001      	beq.n	8001074 <SIGFOX_API_stop_continuous_transmission+0x1c>
 8001070:	7025      	strb	r5, [r4, #0]
 8001072:	e004      	b.n	800107e <SIGFOX_API_stop_continuous_transmission+0x26>
 8001074:	f008 f830 	bl	80090d8 <RF_API_stop>
 8001078:	0001      	movs	r1, r0
 800107a:	7025      	strb	r5, [r4, #0]
 800107c:	d003      	beq.n	8001086 <SIGFOX_API_stop_continuous_transmission+0x2e>
 800107e:	2159      	movs	r1, #89	; 0x59
 8001080:	f000 f940 	bl	8001304 <RETURN_CODE>
 8001084:	bd32      	pop	{r1, r4, r5, pc}
 8001086:	2000      	movs	r0, #0
 8001088:	bd32      	pop	{r1, r4, r5, pc}
	...

0800108c <.text_18>:
 800108c:	0002ee00 	.word	0x0002ee00

08001090 <.text_19>:
 8001090:	00005208 	.word	0x00005208

08001094 <.text_20>:
 8001094:	000030d4 	.word	0x000030d4

08001098 <.text_21>:
 8001098:	00008ca0 	.word	0x00008ca0

0800109c <SIGFOX_API_send_test_frame>:
 800109c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800109e:	0005      	movs	r5, r0
 80010a0:	000e      	movs	r6, r1
 80010a2:	a802      	add	r0, sp, #8
 80010a4:	a160      	add	r1, pc, #384	; (adr r1, 8001228 <.text_31>)
 80010a6:	680c      	ldr	r4, [r1, #0]
 80010a8:	6004      	str	r4, [r0, #0]
 80010aa:	d101      	bne.n	80010b0 <SIGFOX_API_send_test_frame+0x14>
 80010ac:	2053      	movs	r0, #83	; 0x53
 80010ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80010b0:	2a0d      	cmp	r2, #13
 80010b2:	db01      	blt.n	80010b8 <SIGFOX_API_send_test_frame+0x1c>
 80010b4:	2052      	movs	r0, #82	; 0x52
 80010b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80010b8:	4c59      	ldr	r4, [pc, #356]	; (8001220 <.text_29>)
 80010ba:	7820      	ldrb	r0, [r4, #0]
 80010bc:	2802      	cmp	r0, #2
 80010be:	d001      	beq.n	80010c4 <SIGFOX_API_send_test_frame+0x28>
 80010c0:	2051      	movs	r0, #81	; 0x51
 80010c2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80010c4:	2003      	movs	r0, #3
 80010c6:	7020      	strb	r0, [r4, #0]
 80010c8:	2000      	movs	r0, #0
 80010ca:	6861      	ldr	r1, [r4, #4]
 80010cc:	1809      	adds	r1, r1, r0
 80010ce:	276c      	movs	r7, #108	; 0x6c
 80010d0:	5dc9      	ldrb	r1, [r1, r7]
 80010d2:	af02      	add	r7, sp, #8
 80010d4:	5c3f      	ldrb	r7, [r7, r0]
 80010d6:	42b9      	cmp	r1, r7
 80010d8:	d10e      	bne.n	80010f8 <SIGFOX_API_send_test_frame+0x5c>
 80010da:	1c40      	adds	r0, r0, #1
 80010dc:	2804      	cmp	r0, #4
 80010de:	dbf4      	blt.n	80010ca <SIGFOX_API_send_test_frame+0x2e>
 80010e0:	9301      	str	r3, [sp, #4]
 80010e2:	2000      	movs	r0, #0
 80010e4:	9000      	str	r0, [sp, #0]
 80010e6:	0013      	movs	r3, r2
 80010e8:	0032      	movs	r2, r6
 80010ea:	2101      	movs	r1, #1
 80010ec:	6860      	ldr	r0, [r4, #4]
 80010ee:	f000 fab1 	bl	8001654 <SIGFOX_INT_prepare_transmission>
 80010f2:	0001      	movs	r1, r0
 80010f4:	d002      	beq.n	80010fc <SIGFOX_API_send_test_frame+0x60>
 80010f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80010f8:	2050      	movs	r0, #80	; 0x50
 80010fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80010fc:	6860      	ldr	r0, [r4, #4]
 80010fe:	f000 f9cf 	bl	80014a0 <SIGFOX_INT_store_nvm>
 8001102:	0001      	movs	r1, r0
 8001104:	d003      	beq.n	800110e <SIGFOX_API_send_test_frame+0x72>
 8001106:	2154      	movs	r1, #84	; 0x54
 8001108:	f000 f8fc 	bl	8001304 <RETURN_CODE>
 800110c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800110e:	2d00      	cmp	r5, #0
 8001110:	d104      	bne.n	800111c <SIGFOX_API_send_test_frame+0x80>
 8001112:	2100      	movs	r1, #0
 8001114:	6860      	ldr	r0, [r4, #4]
 8001116:	f000 ff81 	bl	800201c <SIGFOX_INT_compute_uplink_frequency>
 800111a:	0005      	movs	r5, r0
 800111c:	002a      	movs	r2, r5
 800111e:	2100      	movs	r1, #0
 8001120:	6860      	ldr	r0, [r4, #4]
 8001122:	f000 fd0f 	bl	8001b44 <SIGFOX_INT_send_single_frame>
 8001126:	0001      	movs	r1, r0
 8001128:	d102      	bne.n	8001130 <SIGFOX_API_send_test_frame+0x94>
 800112a:	2002      	movs	r0, #2
 800112c:	7020      	strb	r0, [r4, #0]
 800112e:	2000      	movs	r0, #0
 8001130:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

08001134 <SIGFOX_API_receive_test_frame>:
 8001134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001136:	000d      	movs	r5, r1
 8001138:	0017      	movs	r7, r2
 800113a:	001e      	movs	r6, r3
 800113c:	4669      	mov	r1, sp
 800113e:	bf00      	nop
 8001140:	a23a      	add	r2, pc, #232	; (adr r2, 800122c <.text_32>)
 8001142:	6813      	ldr	r3, [r2, #0]
 8001144:	600b      	str	r3, [r1, #0]
 8001146:	4c36      	ldr	r4, [pc, #216]	; (8001220 <.text_29>)
 8001148:	7821      	ldrb	r1, [r4, #0]
 800114a:	2902      	cmp	r1, #2
 800114c:	d001      	beq.n	8001152 <SIGFOX_API_receive_test_frame+0x1e>
 800114e:	2056      	movs	r0, #86	; 0x56
 8001150:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8001152:	2104      	movs	r1, #4
 8001154:	7021      	strb	r1, [r4, #0]
 8001156:	2100      	movs	r1, #0
 8001158:	6862      	ldr	r2, [r4, #4]
 800115a:	1852      	adds	r2, r2, r1
 800115c:	236c      	movs	r3, #108	; 0x6c
 800115e:	5cd2      	ldrb	r2, [r2, r3]
 8001160:	466b      	mov	r3, sp
 8001162:	5c5b      	ldrb	r3, [r3, r1]
 8001164:	429a      	cmp	r2, r3
 8001166:	d110      	bne.n	800118a <SIGFOX_API_receive_test_frame+0x56>
 8001168:	1c49      	adds	r1, r1, #1
 800116a:	2904      	cmp	r1, #4
 800116c:	dbf4      	blt.n	8001158 <SIGFOX_API_receive_test_frame+0x24>
 800116e:	2800      	cmp	r0, #0
 8001170:	d102      	bne.n	8001178 <SIGFOX_API_receive_test_frame+0x44>
 8001172:	6860      	ldr	r0, [r4, #4]
 8001174:	f000 ff9a 	bl	80020ac <SIGFOX_INT_compute_downlink_frequency>
 8001178:	2301      	movs	r3, #1
 800117a:	0002      	movs	r2, r0
 800117c:	0031      	movs	r1, r6
 800117e:	0028      	movs	r0, r5
 8001180:	f000 fea0 	bl	8001ec4 <SIGFOX_INT_downlink_configuration>
 8001184:	0001      	movs	r1, r0
 8001186:	d002      	beq.n	800118e <SIGFOX_API_receive_test_frame+0x5a>
 8001188:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800118a:	2055      	movs	r0, #85	; 0x55
 800118c:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 800118e:	003a      	movs	r2, r7
 8001190:	0029      	movs	r1, r5
 8001192:	6860      	ldr	r0, [r4, #4]
 8001194:	f000 feb3 	bl	8001efe <SIGFOX_INT_get_received_frames>
 8001198:	2102      	movs	r1, #2
 800119a:	289b      	cmp	r0, #155	; 0x9b
 800119c:	d100      	bne.n	80011a0 <SIGFOX_API_receive_test_frame+0x6c>
 800119e:	7021      	strb	r1, [r4, #0]
 80011a0:	0002      	movs	r2, r0
 80011a2:	d106      	bne.n	80011b2 <SIGFOX_API_receive_test_frame+0x7e>
 80011a4:	6860      	ldr	r0, [r4, #4]
 80011a6:	226a      	movs	r2, #106	; 0x6a
 80011a8:	5a80      	ldrh	r0, [r0, r2]
 80011aa:	9a06      	ldr	r2, [sp, #24]
 80011ac:	8010      	strh	r0, [r2, #0]
 80011ae:	7021      	strb	r1, [r4, #0]
 80011b0:	2000      	movs	r0, #0
 80011b2:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080011b4 <SIGFOX_API_get_info>:
 80011b4:	2100      	movs	r1, #0
 80011b6:	7001      	strb	r1, [r0, #0]
 80011b8:	4919      	ldr	r1, [pc, #100]	; (8001220 <.text_29>)
 80011ba:	780a      	ldrb	r2, [r1, #0]
 80011bc:	2a00      	cmp	r2, #0
 80011be:	d006      	beq.n	80011ce <SIGFOX_API_get_info+0x1a>
 80011c0:	6849      	ldr	r1, [r1, #4]
 80011c2:	225d      	movs	r2, #93	; 0x5d
 80011c4:	5c8a      	ldrb	r2, [r1, r2]
 80011c6:	2a02      	cmp	r2, #2
 80011c8:	d101      	bne.n	80011ce <SIGFOX_API_get_info+0x1a>
 80011ca:	6909      	ldr	r1, [r1, #16]
 80011cc:	7001      	strb	r1, [r0, #0]
 80011ce:	2000      	movs	r0, #0
 80011d0:	4770      	bx	lr

080011d2 <SIGFOX_API_get_device_id>:
 80011d2:	b580      	push	{r7, lr}
 80011d4:	4669      	mov	r1, sp
 80011d6:	f000 ff6b 	bl	80020b0 <SIGFOX_INT_get_device_id_and_payload_encryption_flag>
 80011da:	bd02      	pop	{r1, pc}

080011dc <SIGFOX_API_get_initial_pac>:
 80011dc:	b580      	push	{r7, lr}
 80011de:	f007 f863 	bl	80082a8 <MCU_API_get_initial_pac>
 80011e2:	0001      	movs	r1, r0
 80011e4:	d003      	beq.n	80011ee <SIGFOX_API_get_initial_pac+0x12>
 80011e6:	215b      	movs	r1, #91	; 0x5b
 80011e8:	f000 f88c 	bl	8001304 <RETURN_CODE>
 80011ec:	bd02      	pop	{r1, pc}
 80011ee:	2000      	movs	r0, #0
 80011f0:	bd02      	pop	{r1, pc}

080011f2 <SIGFOX_API_switch_public_key>:
 80011f2:	490b      	ldr	r1, [pc, #44]	; (8001220 <.text_29>)
 80011f4:	780a      	ldrb	r2, [r1, #0]
 80011f6:	2a02      	cmp	r2, #2
 80011f8:	d001      	beq.n	80011fe <SIGFOX_API_switch_public_key+0xc>
 80011fa:	205e      	movs	r0, #94	; 0x5e
 80011fc:	4770      	bx	lr
 80011fe:	6849      	ldr	r1, [r1, #4]
 8001200:	2256      	movs	r2, #86	; 0x56
 8001202:	5488      	strb	r0, [r1, r2]
 8001204:	2000      	movs	r0, #0
 8001206:	4770      	bx	lr

08001208 <SIGFOX_API_set_rc_sync_period>:
 8001208:	4906      	ldr	r1, [pc, #24]	; (8001224 <.text_30>)
 800120a:	4288      	cmp	r0, r1
 800120c:	db01      	blt.n	8001212 <SIGFOX_API_set_rc_sync_period+0xa>
 800120e:	20b1      	movs	r0, #177	; 0xb1
 8001210:	4770      	bx	lr
 8001212:	1c40      	adds	r0, r0, #1
 8001214:	4902      	ldr	r1, [pc, #8]	; (8001220 <.text_29>)
 8001216:	6849      	ldr	r1, [r1, #4]
 8001218:	2258      	movs	r2, #88	; 0x58
 800121a:	5288      	strh	r0, [r1, r2]
 800121c:	2000      	movs	r0, #0
 800121e:	4770      	bx	lr

08001220 <.text_29>:
 8001220:	20000294 	.word	0x20000294

08001224 <.text_30>:
 8001224:	00000fff 	.word	0x00000fff

08001228 <.text_31>:
 8001228:	fedcba98 	.word	0xfedcba98

0800122c <.text_32>:
 800122c:	fedcba98 	.word	0xfedcba98

08001230 <SIGFOX_INT_randomize>:
 8001230:	0001      	movs	r1, r0
 8001232:	78c8      	ldrb	r0, [r1, #3]
 8001234:	0202      	lsls	r2, r0, #8
 8001236:	7888      	ldrb	r0, [r1, #2]
 8001238:	4302      	orrs	r2, r0
 800123a:	7848      	ldrb	r0, [r1, #1]
 800123c:	0200      	lsls	r0, r0, #8
 800123e:	7809      	ldrb	r1, [r1, #0]
 8001240:	4308      	orrs	r0, r1
 8001242:	4050      	eors	r0, r2
 8001244:	4770      	bx	lr

08001246 <SIGFOX_INT_get_max_micro_channel>:
 8001246:	b520      	push	{r5, lr}
 8001248:	0003      	movs	r3, r0
 800124a:	2200      	movs	r2, #0
 800124c:	2000      	movs	r0, #0
 800124e:	2100      	movs	r1, #0
 8001250:	0085      	lsls	r5, r0, #2
 8001252:	195d      	adds	r5, r3, r5
 8001254:	68ad      	ldr	r5, [r5, #8]
 8001256:	40cd      	lsrs	r5, r1
 8001258:	07ed      	lsls	r5, r5, #31
 800125a:	d500      	bpl.n	800125e <SIGFOX_INT_get_max_micro_channel+0x18>
 800125c:	1c52      	adds	r2, r2, #1
 800125e:	1c49      	adds	r1, r1, #1
 8001260:	2920      	cmp	r1, #32
 8001262:	dbf5      	blt.n	8001250 <SIGFOX_INT_get_max_micro_channel+0xa>
 8001264:	1c40      	adds	r0, r0, #1
 8001266:	2803      	cmp	r0, #3
 8001268:	dbf1      	blt.n	800124e <SIGFOX_INT_get_max_micro_channel+0x8>
 800126a:	2006      	movs	r0, #6
 800126c:	4342      	muls	r2, r0
 800126e:	b290      	uxth	r0, r2
 8001270:	bd20      	pop	{r5, pc}

08001272 <SIGFOX_INT_get_macro_channel_index>:
 8001272:	b5b0      	push	{r4, r5, r7, lr}
 8001274:	0004      	movs	r4, r0
 8001276:	2500      	movs	r5, #0
 8001278:	2700      	movs	r7, #0
 800127a:	1e48      	subs	r0, r1, #1
 800127c:	2106      	movs	r1, #6
 800127e:	f001 f9a1 	bl	80025c4 <__divsi3>
 8001282:	1c40      	adds	r0, r0, #1
 8001284:	b2c0      	uxtb	r0, r0
 8001286:	2200      	movs	r2, #0
 8001288:	4287      	cmp	r7, r0
 800128a:	d016      	beq.n	80012ba <SIGFOX_INT_get_macro_channel_index+0x48>
 800128c:	2300      	movs	r3, #0
 800128e:	0039      	movs	r1, r7
 8001290:	4281      	cmp	r1, r0
 8001292:	d00e      	beq.n	80012b2 <SIGFOX_INT_get_macro_channel_index+0x40>
 8001294:	0097      	lsls	r7, r2, #2
 8001296:	19e7      	adds	r7, r4, r7
 8001298:	68bf      	ldr	r7, [r7, #8]
 800129a:	40df      	lsrs	r7, r3
 800129c:	07ff      	lsls	r7, r7, #31
 800129e:	d505      	bpl.n	80012ac <SIGFOX_INT_get_macro_channel_index+0x3a>
 80012a0:	1c49      	adds	r1, r1, #1
 80012a2:	b2c9      	uxtb	r1, r1
 80012a4:	4288      	cmp	r0, r1
 80012a6:	d101      	bne.n	80012ac <SIGFOX_INT_get_macro_channel_index+0x3a>
 80012a8:	0155      	lsls	r5, r2, #5
 80012aa:	18ed      	adds	r5, r5, r3
 80012ac:	1c5b      	adds	r3, r3, #1
 80012ae:	2b20      	cmp	r3, #32
 80012b0:	dbee      	blt.n	8001290 <SIGFOX_INT_get_macro_channel_index+0x1e>
 80012b2:	000f      	movs	r7, r1
 80012b4:	1c52      	adds	r2, r2, #1
 80012b6:	2a03      	cmp	r2, #3
 80012b8:	dbe6      	blt.n	8001288 <SIGFOX_INT_get_macro_channel_index+0x16>
 80012ba:	b2e8      	uxtb	r0, r5
 80012bc:	bdb0      	pop	{r4, r5, r7, pc}

080012be <SIGFOX_INT_dc_lbt_channel_pn_max>:
 80012be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80012c0:	000c      	movs	r4, r1
 80012c2:	0005      	movs	r5, r0
 80012c4:	3560      	adds	r5, #96	; 0x60
 80012c6:	88ae      	ldrh	r6, [r5, #4]
 80012c8:	6e00      	ldr	r0, [r0, #96]	; 0x60
 80012ca:	0031      	movs	r1, r6
 80012cc:	f001 f8f0 	bl	80024b0 <__udivsi3>
 80012d0:	0007      	movs	r7, r0
 80012d2:	8928      	ldrh	r0, [r5, #8]
 80012d4:	0031      	movs	r1, r6
 80012d6:	f001 f975 	bl	80025c4 <__divsi3>
 80012da:	1a38      	subs	r0, r7, r0
 80012dc:	88e9      	ldrh	r1, [r5, #6]
 80012de:	4361      	muls	r1, r4
 80012e0:	1a40      	subs	r0, r0, r1
 80012e2:	b280      	uxth	r0, r0
 80012e4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012e6 <SIGFOX_INT_dc_lbt_channel_pn_min>:
 80012e6:	b530      	push	{r4, r5, lr}
 80012e8:	0002      	movs	r2, r0
 80012ea:	000c      	movs	r4, r1
 80012ec:	0015      	movs	r5, r2
 80012ee:	3564      	adds	r5, #100	; 0x64
 80012f0:	88a8      	ldrh	r0, [r5, #4]
 80012f2:	2164      	movs	r1, #100	; 0x64
 80012f4:	5a51      	ldrh	r1, [r2, r1]
 80012f6:	f001 f965 	bl	80025c4 <__divsi3>
 80012fa:	8869      	ldrh	r1, [r5, #2]
 80012fc:	434c      	muls	r4, r1
 80012fe:	1900      	adds	r0, r0, r4
 8001300:	b280      	uxth	r0, r0
 8001302:	bd30      	pop	{r4, r5, pc}

08001304 <RETURN_CODE>:
 8001304:	0202      	lsls	r2, r0, #8
 8001306:	b2c8      	uxtb	r0, r1
 8001308:	4310      	orrs	r0, r2
 800130a:	4770      	bx	lr

0800130c <SIGFOX_INT_compute_channels>:
 800130c:	b5f4      	push	{r2, r4, r5, r6, r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	0004      	movs	r4, r0
 8001312:	205d      	movs	r0, #93	; 0x5d
 8001314:	5c20      	ldrb	r0, [r4, r0]
 8001316:	1c49      	adds	r1, r1, #1
 8001318:	9100      	str	r1, [sp, #0]
 800131a:	4f55      	ldr	r7, [pc, #340]	; (8001470 <.text_9>)
 800131c:	2804      	cmp	r0, #4
 800131e:	d001      	beq.n	8001324 <SIGFOX_INT_compute_channels+0x18>
 8001320:	2802      	cmp	r0, #2
 8001322:	d147      	bne.n	80013b4 <SIGFOX_INT_compute_channels+0xa8>
 8001324:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8001326:	2800      	cmp	r0, #0
 8001328:	d002      	beq.n	8001330 <SIGFOX_INT_compute_channels+0x24>
 800132a:	1c79      	adds	r1, r7, #1
 800132c:	4288      	cmp	r0, r1
 800132e:	db05      	blt.n	800133c <SIGFOX_INT_compute_channels+0x30>
 8001330:	0020      	movs	r0, r4
 8001332:	306c      	adds	r0, #108	; 0x6c
 8001334:	f7ff ff7c 	bl	8001230 <SIGFOX_INT_randomize>
 8001338:	4038      	ands	r0, r7
 800133a:	84a0      	strh	r0, [r4, #36]	; 0x24
 800133c:	4668      	mov	r0, sp
 800133e:	7a00      	ldrb	r0, [r0, #8]
 8001340:	2801      	cmp	r0, #1
 8001342:	d11b      	bne.n	800137c <SIGFOX_INT_compute_channels+0x70>
 8001344:	2101      	movs	r1, #1
 8001346:	0020      	movs	r0, r4
 8001348:	f7ff ffb9 	bl	80012be <SIGFOX_INT_dc_lbt_channel_pn_max>
 800134c:	0005      	movs	r5, r0
 800134e:	2101      	movs	r1, #1
 8001350:	0020      	movs	r0, r4
 8001352:	f7ff ffc8 	bl	80012e6 <SIGFOX_INT_dc_lbt_channel_pn_min>
 8001356:	2301      	movs	r3, #1
 8001358:	002a      	movs	r2, r5
 800135a:	0001      	movs	r1, r0
 800135c:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 800135e:	f000 feb9 	bl	80020d4 <SIGFOX_PN_next_pn>
 8001362:	84a0      	strh	r0, [r4, #36]	; 0x24
 8001364:	8320      	strh	r0, [r4, #24]
 8001366:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8001368:	2166      	movs	r1, #102	; 0x66
 800136a:	5a61      	ldrh	r1, [r4, r1]
 800136c:	1840      	adds	r0, r0, r1
 800136e:	8360      	strh	r0, [r4, #26]
 8001370:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8001372:	2166      	movs	r1, #102	; 0x66
 8001374:	5a61      	ldrh	r1, [r4, r1]
 8001376:	1a40      	subs	r0, r0, r1
 8001378:	83a0      	strh	r0, [r4, #28]
 800137a:	e01b      	b.n	80013b4 <SIGFOX_INT_compute_channels+0xa8>
 800137c:	2500      	movs	r5, #0
 800137e:	0026      	movs	r6, r4
 8001380:	2100      	movs	r1, #0
 8001382:	0030      	movs	r0, r6
 8001384:	f7ff ff9b 	bl	80012be <SIGFOX_INT_dc_lbt_channel_pn_max>
 8001388:	0004      	movs	r4, r0
 800138a:	2100      	movs	r1, #0
 800138c:	0030      	movs	r0, r6
 800138e:	f7ff ffaa 	bl	80012e6 <SIGFOX_INT_dc_lbt_channel_pn_min>
 8001392:	2301      	movs	r3, #1
 8001394:	0022      	movs	r2, r4
 8001396:	0001      	movs	r1, r0
 8001398:	8cb0      	ldrh	r0, [r6, #36]	; 0x24
 800139a:	f000 fe9b 	bl	80020d4 <SIGFOX_PN_next_pn>
 800139e:	84b0      	strh	r0, [r6, #36]	; 0x24
 80013a0:	0031      	movs	r1, r6
 80013a2:	3118      	adds	r1, #24
 80013a4:	006a      	lsls	r2, r5, #1
 80013a6:	5288      	strh	r0, [r1, r2]
 80013a8:	1c6d      	adds	r5, r5, #1
 80013aa:	b2ed      	uxtb	r5, r5
 80013ac:	9800      	ldr	r0, [sp, #0]
 80013ae:	4285      	cmp	r5, r0
 80013b0:	dbe6      	blt.n	8001380 <SIGFOX_INT_compute_channels+0x74>
 80013b2:	0034      	movs	r4, r6
 80013b4:	205d      	movs	r0, #93	; 0x5d
 80013b6:	5c20      	ldrb	r0, [r4, r0]
 80013b8:	2801      	cmp	r0, #1
 80013ba:	d158      	bne.n	800146e <SIGFOX_INT_compute_channels+0x162>
 80013bc:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 80013be:	2800      	cmp	r0, #0
 80013c0:	d002      	beq.n	80013c8 <SIGFOX_INT_compute_channels+0xbc>
 80013c2:	1c79      	adds	r1, r7, #1
 80013c4:	4288      	cmp	r0, r1
 80013c6:	db05      	blt.n	80013d4 <SIGFOX_INT_compute_channels+0xc8>
 80013c8:	0020      	movs	r0, r4
 80013ca:	306c      	adds	r0, #108	; 0x6c
 80013cc:	f7ff ff30 	bl	8001230 <SIGFOX_INT_randomize>
 80013d0:	4007      	ands	r7, r0
 80013d2:	86a7      	strh	r7, [r4, #52]	; 0x34
 80013d4:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 80013d6:	2800      	cmp	r0, #0
 80013d8:	d001      	beq.n	80013de <SIGFOX_INT_compute_channels+0xd2>
 80013da:	2880      	cmp	r0, #128	; 0x80
 80013dc:	db06      	blt.n	80013ec <SIGFOX_INT_compute_channels+0xe0>
 80013de:	0020      	movs	r0, r4
 80013e0:	306c      	adds	r0, #108	; 0x6c
 80013e2:	f7ff ff25 	bl	8001230 <SIGFOX_INT_randomize>
 80013e6:	0640      	lsls	r0, r0, #25
 80013e8:	0e40      	lsrs	r0, r0, #25
 80013ea:	84a0      	strh	r0, [r4, #36]	; 0x24
 80013ec:	4668      	mov	r0, sp
 80013ee:	7a00      	ldrb	r0, [r0, #8]
 80013f0:	2801      	cmp	r0, #1
 80013f2:	d11e      	bne.n	8001432 <SIGFOX_INT_compute_channels+0x126>
 80013f4:	2301      	movs	r3, #1
 80013f6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 80013f8:	1d52      	adds	r2, r2, #5
 80013fa:	b292      	uxth	r2, r2
 80013fc:	2108      	movs	r1, #8
 80013fe:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001400:	f000 fe68 	bl	80020d4 <SIGFOX_PN_next_pn>
 8001404:	86a0      	strh	r0, [r4, #52]	; 0x34
 8001406:	2300      	movs	r3, #0
 8001408:	2226      	movs	r2, #38	; 0x26
 800140a:	2104      	movs	r1, #4
 800140c:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 800140e:	f000 fe61 	bl	80020d4 <SIGFOX_PN_next_pn>
 8001412:	84a0      	strh	r0, [r4, #36]	; 0x24
 8001414:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001416:	8720      	strh	r0, [r4, #56]	; 0x38
 8001418:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 800141a:	1c40      	adds	r0, r0, #1
 800141c:	8760      	strh	r0, [r4, #58]	; 0x3a
 800141e:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001420:	1e40      	subs	r0, r0, #1
 8001422:	87a0      	strh	r0, [r4, #60]	; 0x3c
 8001424:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 8001426:	8320      	strh	r0, [r4, #24]
 8001428:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 800142a:	8360      	strh	r0, [r4, #26]
 800142c:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 800142e:	83a0      	strh	r0, [r4, #28]
 8001430:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8001432:	2500      	movs	r5, #0
 8001434:	2301      	movs	r3, #1
 8001436:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8001438:	1d92      	adds	r2, r2, #6
 800143a:	b292      	uxth	r2, r2
 800143c:	2107      	movs	r1, #7
 800143e:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8001440:	f000 fe48 	bl	80020d4 <SIGFOX_PN_next_pn>
 8001444:	86a0      	strh	r0, [r4, #52]	; 0x34
 8001446:	2300      	movs	r3, #0
 8001448:	2226      	movs	r2, #38	; 0x26
 800144a:	2104      	movs	r1, #4
 800144c:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
 800144e:	f000 fe41 	bl	80020d4 <SIGFOX_PN_next_pn>
 8001452:	84a0      	strh	r0, [r4, #36]	; 0x24
 8001454:	0068      	lsls	r0, r5, #1
 8001456:	8ea1      	ldrh	r1, [r4, #52]	; 0x34
 8001458:	1822      	adds	r2, r4, r0
 800145a:	8711      	strh	r1, [r2, #56]	; 0x38
 800145c:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
 800145e:	0022      	movs	r2, r4
 8001460:	3218      	adds	r2, #24
 8001462:	5211      	strh	r1, [r2, r0]
 8001464:	1c6d      	adds	r5, r5, #1
 8001466:	b2ed      	uxtb	r5, r5
 8001468:	9800      	ldr	r0, [sp, #0]
 800146a:	4285      	cmp	r5, r0
 800146c:	dbe2      	blt.n	8001434 <SIGFOX_INT_compute_channels+0x128>
 800146e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}

08001470 <.text_9>:
 8001470:	000007ff 	.word	0x000007ff

08001474 <SIGFOX_INT_compute_carrier_sense_frequency>:
 8001474:	6802      	ldr	r2, [r0, #0]
 8001476:	0049      	lsls	r1, r1, #1
 8001478:	1841      	adds	r1, r0, r1
 800147a:	8b09      	ldrh	r1, [r1, #24]
 800147c:	2364      	movs	r3, #100	; 0x64
 800147e:	5ac3      	ldrh	r3, [r0, r3]
 8001480:	4359      	muls	r1, r3
 8001482:	1851      	adds	r1, r2, r1
 8001484:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8001486:	085b      	lsrs	r3, r3, #1
 8001488:	1ac9      	subs	r1, r1, r3
 800148a:	4291      	cmp	r1, r2
 800148c:	d301      	bcc.n	8001492 <SIGFOX_INT_compute_carrier_sense_frequency+0x1e>
 800148e:	2101      	movs	r1, #1
 8001490:	e001      	b.n	8001496 <SIGFOX_INT_compute_carrier_sense_frequency+0x22>
 8001492:	2100      	movs	r1, #0
 8001494:	43c9      	mvns	r1, r1
 8001496:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8001498:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800149a:	4341      	muls	r1, r0
 800149c:	1850      	adds	r0, r2, r1
 800149e:	4770      	bx	lr

080014a0 <SIGFOX_INT_store_nvm>:
 80014a0:	b500      	push	{lr}
 80014a2:	b083      	sub	sp, #12
 80014a4:	4669      	mov	r1, sp
 80014a6:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 80014a8:	700a      	strb	r2, [r1, #0]
 80014aa:	8c82      	ldrh	r2, [r0, #36]	; 0x24
 80014ac:	0a12      	lsrs	r2, r2, #8
 80014ae:	704a      	strb	r2, [r1, #1]
 80014b0:	0002      	movs	r2, r0
 80014b2:	3254      	adds	r2, #84	; 0x54
 80014b4:	7a53      	ldrb	r3, [r2, #9]
 80014b6:	2b01      	cmp	r3, #1
 80014b8:	d104      	bne.n	80014c4 <SIGFOX_INT_store_nvm+0x24>
 80014ba:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 80014bc:	710b      	strb	r3, [r1, #4]
 80014be:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 80014c0:	0a1b      	lsrs	r3, r3, #8
 80014c2:	714b      	strb	r3, [r1, #5]
 80014c4:	2354      	movs	r3, #84	; 0x54
 80014c6:	5ac3      	ldrh	r3, [r0, r3]
 80014c8:	708b      	strb	r3, [r1, #2]
 80014ca:	2354      	movs	r3, #84	; 0x54
 80014cc:	5ac0      	ldrh	r0, [r0, r3]
 80014ce:	0a00      	lsrs	r0, r0, #8
 80014d0:	70c8      	strb	r0, [r1, #3]
 80014d2:	7990      	ldrb	r0, [r2, #6]
 80014d4:	7188      	strb	r0, [r1, #6]
 80014d6:	4668      	mov	r0, sp
 80014d8:	f006 fefd 	bl	80082d6 <MCU_API_set_nv_mem>
 80014dc:	bd0e      	pop	{r1, r2, r3, pc}

080014de <SIGFOX_INT_execute_communication_sequence>:
 80014de:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 80014e0:	b086      	sub	sp, #24
 80014e2:	0005      	movs	r5, r0
 80014e4:	2700      	movs	r7, #0
 80014e6:	9703      	str	r7, [sp, #12]
 80014e8:	2600      	movs	r6, #0
 80014ea:	a80e      	add	r0, sp, #56	; 0x38
 80014ec:	7800      	ldrb	r0, [r0, #0]
 80014ee:	9004      	str	r0, [sp, #16]
 80014f0:	2801      	cmp	r0, #1
 80014f2:	d100      	bne.n	80014f6 <SIGFOX_INT_execute_communication_sequence+0x18>
 80014f4:	2601      	movs	r6, #1
 80014f6:	48cb      	ldr	r0, [pc, #812]	; (8001824 <.text_16>)
 80014f8:	7800      	ldrb	r0, [r0, #0]
 80014fa:	2802      	cmp	r0, #2
 80014fc:	d001      	beq.n	8001502 <SIGFOX_INT_execute_communication_sequence+0x24>
 80014fe:	2060      	movs	r0, #96	; 0x60
 8001500:	e0a5      	b.n	800164e <SIGFOX_INT_execute_communication_sequence+0x170>
 8001502:	2003      	movs	r0, #3
 8001504:	49c7      	ldr	r1, [pc, #796]	; (8001824 <.text_16>)
 8001506:	7008      	strb	r0, [r1, #0]
 8001508:	215b      	movs	r1, #91	; 0x5b
 800150a:	546f      	strb	r7, [r5, r1]
 800150c:	2402      	movs	r4, #2
 800150e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8001510:	2800      	cmp	r0, #0
 8001512:	4669      	mov	r1, sp
 8001514:	d101      	bne.n	800151a <SIGFOX_INT_execute_communication_sequence+0x3c>
 8001516:	720f      	strb	r7, [r1, #8]
 8001518:	e000      	b.n	800151c <SIGFOX_INT_execute_communication_sequence+0x3e>
 800151a:	720c      	strb	r4, [r1, #8]
 800151c:	9601      	str	r6, [sp, #4]
 800151e:	4668      	mov	r0, sp
 8001520:	7a00      	ldrb	r0, [r0, #8]
 8001522:	9000      	str	r0, [sp, #0]
 8001524:	4668      	mov	r0, sp
 8001526:	7e01      	ldrb	r1, [r0, #24]
 8001528:	0028      	movs	r0, r5
 800152a:	f000 f893 	bl	8001654 <SIGFOX_INT_prepare_transmission>
 800152e:	0001      	movs	r1, r0
 8001530:	d1e6      	bne.n	8001500 <SIGFOX_INT_execute_communication_sequence+0x22>
 8001532:	0028      	movs	r0, r5
 8001534:	f7ff ffb4 	bl	80014a0 <SIGFOX_INT_store_nvm>
 8001538:	2800      	cmp	r0, #0
 800153a:	d002      	beq.n	8001542 <SIGFOX_INT_execute_communication_sequence+0x64>
 800153c:	0201      	lsls	r1, r0, #8
 800153e:	2061      	movs	r0, #97	; 0x61
 8001540:	e070      	b.n	8001624 <SIGFOX_INT_execute_communication_sequence+0x146>
 8001542:	0028      	movs	r0, r5
 8001544:	305b      	adds	r0, #91	; 0x5b
 8001546:	7880      	ldrb	r0, [r0, #2]
 8001548:	2802      	cmp	r0, #2
 800154a:	d105      	bne.n	8001558 <SIGFOX_INT_execute_communication_sequence+0x7a>
 800154c:	68e8      	ldr	r0, [r5, #12]
 800154e:	9003      	str	r0, [sp, #12]
 8001550:	6928      	ldr	r0, [r5, #16]
 8001552:	21ff      	movs	r1, #255	; 0xff
 8001554:	4388      	bics	r0, r1
 8001556:	6128      	str	r0, [r5, #16]
 8001558:	9b03      	ldr	r3, [sp, #12]
 800155a:	b29b      	uxth	r3, r3
 800155c:	4668      	mov	r0, sp
 800155e:	7a02      	ldrb	r2, [r0, #8]
 8001560:	a80e      	add	r0, sp, #56	; 0x38
 8001562:	7801      	ldrb	r1, [r0, #0]
 8001564:	0028      	movs	r0, r5
 8001566:	f000 fb4c 	bl	8001c02 <SIGFOX_INT_process_uplink>
 800156a:	0001      	movs	r1, r0
 800156c:	d13e      	bne.n	80015ec <SIGFOX_INT_execute_communication_sequence+0x10e>
 800156e:	2e00      	cmp	r6, #0
 8001570:	d041      	beq.n	80015f6 <SIGFOX_INT_execute_communication_sequence+0x118>
 8001572:	2004      	movs	r0, #4
 8001574:	49ab      	ldr	r1, [pc, #684]	; (8001824 <.text_16>)
 8001576:	7008      	strb	r0, [r1, #0]
 8001578:	a80e      	add	r0, sp, #56	; 0x38
 800157a:	7802      	ldrb	r2, [r0, #0]
 800157c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800157e:	0028      	movs	r0, r5
 8001580:	f000 fc7b 	bl	8001e7a <SIGFOX_INT_process_downlink>
 8001584:	0001      	movs	r1, r0
 8001586:	d001      	beq.n	800158c <SIGFOX_INT_execute_communication_sequence+0xae>
 8001588:	289b      	cmp	r0, #155	; 0x9b
 800158a:	e030      	b.n	80015ee <SIGFOX_INT_execute_communication_sequence+0x110>
 800158c:	9804      	ldr	r0, [sp, #16]
 800158e:	2801      	cmp	r0, #1
 8001590:	d131      	bne.n	80015f6 <SIGFOX_INT_execute_communication_sequence+0x118>
 8001592:	2003      	movs	r0, #3
 8001594:	49a3      	ldr	r1, [pc, #652]	; (8001824 <.text_16>)
 8001596:	7008      	strb	r0, [r1, #0]
 8001598:	2002      	movs	r0, #2
 800159a:	f006 fea9 	bl	80082f0 <MCU_API_delay>
 800159e:	2800      	cmp	r0, #0
 80015a0:	d002      	beq.n	80015a8 <SIGFOX_INT_execute_communication_sequence+0xca>
 80015a2:	0201      	lsls	r1, r0, #8
 80015a4:	2064      	movs	r0, #100	; 0x64
 80015a6:	e03d      	b.n	8001624 <SIGFOX_INT_execute_communication_sequence+0x146>
 80015a8:	9001      	str	r0, [sp, #4]
 80015aa:	9000      	str	r0, [sp, #0]
 80015ac:	2308      	movs	r3, #8
 80015ae:	2200      	movs	r2, #0
 80015b0:	2102      	movs	r1, #2
 80015b2:	0028      	movs	r0, r5
 80015b4:	f000 f84e 	bl	8001654 <SIGFOX_INT_prepare_transmission>
 80015b8:	0001      	movs	r1, r0
 80015ba:	d148      	bne.n	800164e <SIGFOX_INT_execute_communication_sequence+0x170>
 80015bc:	0028      	movs	r0, r5
 80015be:	f7ff ff6f 	bl	80014a0 <SIGFOX_INT_store_nvm>
 80015c2:	2800      	cmp	r0, #0
 80015c4:	d002      	beq.n	80015cc <SIGFOX_INT_execute_communication_sequence+0xee>
 80015c6:	0201      	lsls	r1, r0, #8
 80015c8:	2062      	movs	r0, #98	; 0x62
 80015ca:	e02b      	b.n	8001624 <SIGFOX_INT_execute_communication_sequence+0x146>
 80015cc:	0028      	movs	r0, r5
 80015ce:	305b      	adds	r0, #91	; 0x5b
 80015d0:	7880      	ldrb	r0, [r0, #2]
 80015d2:	2802      	cmp	r0, #2
 80015d4:	d101      	bne.n	80015da <SIGFOX_INT_execute_communication_sequence+0xfc>
 80015d6:	4894      	ldr	r0, [pc, #592]	; (8001828 <.text_17>)
 80015d8:	9003      	str	r0, [sp, #12]
 80015da:	9b03      	ldr	r3, [sp, #12]
 80015dc:	b29b      	uxth	r3, r3
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	0028      	movs	r0, r5
 80015e4:	f000 fb0d 	bl	8001c02 <SIGFOX_INT_process_uplink>
 80015e8:	0001      	movs	r1, r0
 80015ea:	d004      	beq.n	80015f6 <SIGFOX_INT_execute_communication_sequence+0x118>
 80015ec:	287e      	cmp	r0, #126	; 0x7e
 80015ee:	d12e      	bne.n	800164e <SIGFOX_INT_execute_communication_sequence+0x170>
 80015f0:	498c      	ldr	r1, [pc, #560]	; (8001824 <.text_16>)
 80015f2:	700c      	strb	r4, [r1, #0]
 80015f4:	e02b      	b.n	800164e <SIGFOX_INT_execute_communication_sequence+0x170>
 80015f6:	205b      	movs	r0, #91	; 0x5b
 80015f8:	5c28      	ldrb	r0, [r5, r0]
 80015fa:	2801      	cmp	r0, #1
 80015fc:	d124      	bne.n	8001648 <SIGFOX_INT_execute_communication_sequence+0x16a>
 80015fe:	205b      	movs	r0, #91	; 0x5b
 8001600:	542f      	strb	r7, [r5, r0]
 8001602:	9701      	str	r7, [sp, #4]
 8001604:	9700      	str	r7, [sp, #0]
 8001606:	2305      	movs	r3, #5
 8001608:	2200      	movs	r2, #0
 800160a:	2104      	movs	r1, #4
 800160c:	0028      	movs	r0, r5
 800160e:	f000 f821 	bl	8001654 <SIGFOX_INT_prepare_transmission>
 8001612:	0001      	movs	r1, r0
 8001614:	d11b      	bne.n	800164e <SIGFOX_INT_execute_communication_sequence+0x170>
 8001616:	0028      	movs	r0, r5
 8001618:	f7ff ff42 	bl	80014a0 <SIGFOX_INT_store_nvm>
 800161c:	2800      	cmp	r0, #0
 800161e:	d003      	beq.n	8001628 <SIGFOX_INT_execute_communication_sequence+0x14a>
 8001620:	0201      	lsls	r1, r0, #8
 8001622:	2063      	movs	r0, #99	; 0x63
 8001624:	4308      	orrs	r0, r1
 8001626:	e012      	b.n	800164e <SIGFOX_INT_execute_communication_sequence+0x170>
 8001628:	0028      	movs	r0, r5
 800162a:	305b      	adds	r0, #91	; 0x5b
 800162c:	7880      	ldrb	r0, [r0, #2]
 800162e:	2802      	cmp	r0, #2
 8001630:	d101      	bne.n	8001636 <SIGFOX_INT_execute_communication_sequence+0x158>
 8001632:	68e8      	ldr	r0, [r5, #12]
 8001634:	9003      	str	r0, [sp, #12]
 8001636:	9b03      	ldr	r3, [sp, #12]
 8001638:	b29b      	uxth	r3, r3
 800163a:	2202      	movs	r2, #2
 800163c:	2100      	movs	r1, #0
 800163e:	0028      	movs	r0, r5
 8001640:	f000 fadf 	bl	8001c02 <SIGFOX_INT_process_uplink>
 8001644:	0001      	movs	r1, r0
 8001646:	d102      	bne.n	800164e <SIGFOX_INT_execute_communication_sequence+0x170>
 8001648:	4876      	ldr	r0, [pc, #472]	; (8001824 <.text_16>)
 800164a:	7004      	strb	r4, [r0, #0]
 800164c:	2000      	movs	r0, #0
 800164e:	b007      	add	sp, #28
 8001650:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001654 <SIGFOX_INT_prepare_transmission>:
 8001654:	b570      	push	{r4, r5, r6, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	0004      	movs	r4, r0
 800165a:	000d      	movs	r5, r1
 800165c:	9e07      	ldr	r6, [sp, #28]
 800165e:	9600      	str	r6, [sp, #0]
 8001660:	f000 f8f2 	bl	8001848 <SIGFOX_INT_build_frame>
 8001664:	0001      	movs	r1, r0
 8001666:	d13a      	bne.n	80016de <SIGFOX_INT_prepare_transmission+0x8a>
 8001668:	2d02      	cmp	r5, #2
 800166a:	db05      	blt.n	8001678 <SIGFOX_INT_prepare_transmission+0x24>
 800166c:	486f      	ldr	r0, [pc, #444]	; (800182c <.text_18>)
 800166e:	83e0      	strh	r0, [r4, #30]
 8001670:	3062      	adds	r0, #98	; 0x62
 8001672:	8420      	strh	r0, [r4, #32]
 8001674:	486e      	ldr	r0, [pc, #440]	; (8001830 <.text_19>)
 8001676:	e02b      	b.n	80016d0 <SIGFOX_INT_prepare_transmission+0x7c>
 8001678:	205c      	movs	r0, #92	; 0x5c
 800167a:	5c21      	ldrb	r1, [r4, r0]
 800167c:	a018      	add	r0, pc, #96	; (adr r0, 80016e0 <fsync_lut_tx>)
 800167e:	2910      	cmp	r1, #16
 8001680:	da12      	bge.n	80016a8 <SIGFOX_INT_prepare_transmission+0x54>
 8001682:	0049      	lsls	r1, r1, #1
 8001684:	1841      	adds	r1, r0, r1
 8001686:	391c      	subs	r1, #28
 8001688:	8809      	ldrh	r1, [r1, #0]
 800168a:	83e1      	strh	r1, [r4, #30]
 800168c:	215c      	movs	r1, #92	; 0x5c
 800168e:	5c61      	ldrb	r1, [r4, r1]
 8001690:	0049      	lsls	r1, r1, #1
 8001692:	1841      	adds	r1, r0, r1
 8001694:	3910      	subs	r1, #16
 8001696:	8809      	ldrh	r1, [r1, #0]
 8001698:	8421      	strh	r1, [r4, #32]
 800169a:	215c      	movs	r1, #92	; 0x5c
 800169c:	5c61      	ldrb	r1, [r4, r1]
 800169e:	0049      	lsls	r1, r1, #1
 80016a0:	1840      	adds	r0, r0, r1
 80016a2:	1f00      	subs	r0, r0, #4
 80016a4:	8800      	ldrh	r0, [r0, #0]
 80016a6:	e013      	b.n	80016d0 <SIGFOX_INT_prepare_transmission+0x7c>
 80016a8:	390a      	subs	r1, #10
 80016aa:	1089      	asrs	r1, r1, #2
 80016ac:	0049      	lsls	r1, r1, #1
 80016ae:	5a41      	ldrh	r1, [r0, r1]
 80016b0:	83e1      	strh	r1, [r4, #30]
 80016b2:	215c      	movs	r1, #92	; 0x5c
 80016b4:	5c61      	ldrb	r1, [r4, r1]
 80016b6:	390a      	subs	r1, #10
 80016b8:	1089      	asrs	r1, r1, #2
 80016ba:	0049      	lsls	r1, r1, #1
 80016bc:	1841      	adds	r1, r0, r1
 80016be:	8989      	ldrh	r1, [r1, #12]
 80016c0:	8421      	strh	r1, [r4, #32]
 80016c2:	215c      	movs	r1, #92	; 0x5c
 80016c4:	5c61      	ldrb	r1, [r4, r1]
 80016c6:	390a      	subs	r1, #10
 80016c8:	1089      	asrs	r1, r1, #2
 80016ca:	0049      	lsls	r1, r1, #1
 80016cc:	1840      	adds	r0, r0, r1
 80016ce:	8b00      	ldrh	r0, [r0, #24]
 80016d0:	8460      	strh	r0, [r4, #34]	; 0x22
 80016d2:	0032      	movs	r2, r6
 80016d4:	9906      	ldr	r1, [sp, #24]
 80016d6:	0020      	movs	r0, r4
 80016d8:	f7ff fe18 	bl	800130c <SIGFOX_INT_compute_channels>
 80016dc:	2000      	movs	r0, #0
 80016de:	bd76      	pop	{r1, r2, r4, r5, r6, pc}

080016e0 <fsync_lut_tx>:
 80016e0:	a06b a08d a35f a611 a94c af67 a6e0 a0d2     k..._...L.g.....
 80016f0:	a598 a6bf a971 afc9 a034 a302 a5a3 a72c     ....q...4.....,.
 8001700:	a997 b1be                                   ....

08001704 <SIGFOX_INT_encrypt_decrypt_frame>:
 8001704:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001706:	b08e      	sub	sp, #56	; 0x38
 8001708:	001f      	movs	r7, r3
 800170a:	484a      	ldr	r0, [pc, #296]	; (8001834 <.text_20>)
 800170c:	6800      	ldr	r0, [r0, #0]
 800170e:	2156      	movs	r1, #86	; 0x56
 8001710:	5c40      	ldrb	r0, [r0, r1]
 8001712:	2801      	cmp	r0, #1
 8001714:	d101      	bne.n	800171a <SIGFOX_INT_encrypt_decrypt_frame+0x16>
 8001716:	2601      	movs	r6, #1
 8001718:	e000      	b.n	800171c <SIGFOX_INT_encrypt_decrypt_frame+0x18>
 800171a:	2600      	movs	r6, #0
 800171c:	9d18      	ldr	r5, [sp, #96]	; 0x60
 800171e:	9c17      	ldr	r4, [sp, #92]	; 0x5c
 8001720:	210b      	movs	r1, #11
 8001722:	1d68      	adds	r0, r5, #5
 8001724:	f007 fede 	bl	80094e4 <__aeabi_memclr>
 8001728:	78e0      	ldrb	r0, [r4, #3]
 800172a:	01c0      	lsls	r0, r0, #7
 800172c:	7128      	strb	r0, [r5, #4]
 800172e:	78a0      	ldrb	r0, [r4, #2]
 8001730:	01c0      	lsls	r0, r0, #7
 8001732:	78e1      	ldrb	r1, [r4, #3]
 8001734:	0849      	lsrs	r1, r1, #1
 8001736:	4301      	orrs	r1, r0
 8001738:	70e9      	strb	r1, [r5, #3]
 800173a:	7860      	ldrb	r0, [r4, #1]
 800173c:	01c0      	lsls	r0, r0, #7
 800173e:	78a1      	ldrb	r1, [r4, #2]
 8001740:	0849      	lsrs	r1, r1, #1
 8001742:	4301      	orrs	r1, r0
 8001744:	70a9      	strb	r1, [r5, #2]
 8001746:	7820      	ldrb	r0, [r4, #0]
 8001748:	01c0      	lsls	r0, r0, #7
 800174a:	7861      	ldrb	r1, [r4, #1]
 800174c:	0849      	lsrs	r1, r1, #1
 800174e:	4301      	orrs	r1, r0
 8001750:	7069      	strb	r1, [r5, #1]
 8001752:	7820      	ldrb	r0, [r4, #0]
 8001754:	0840      	lsrs	r0, r0, #1
 8001756:	2180      	movs	r1, #128	; 0x80
 8001758:	4301      	orrs	r1, r0
 800175a:	7029      	strb	r1, [r5, #0]
 800175c:	9600      	str	r6, [sp, #0]
 800175e:	bf00      	nop
 8001760:	a335      	add	r3, pc, #212	; (adr r3, 8001838 <public_key>)
 8001762:	2210      	movs	r2, #16
 8001764:	0029      	movs	r1, r5
 8001766:	a801      	add	r0, sp, #4
 8001768:	f006 fdd6 	bl	8008318 <MCU_API_aes_128_cbc_encrypt>
 800176c:	0001      	movs	r1, r0
 800176e:	d156      	bne.n	800181e <SIGFOX_INT_encrypt_decrypt_frame+0x11a>
 8001770:	a801      	add	r0, sp, #4
 8001772:	7b01      	ldrb	r1, [r0, #12]
 8001774:	22fe      	movs	r2, #254	; 0xfe
 8001776:	400a      	ands	r2, r1
 8001778:	7302      	strb	r2, [r0, #12]
 800177a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800177c:	0909      	lsrs	r1, r1, #4
 800177e:	7341      	strb	r1, [r0, #13]
 8001780:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8001782:	2a00      	cmp	r2, #0
 8001784:	d102      	bne.n	800178c <SIGFOX_INT_encrypt_decrypt_frame+0x88>
 8001786:	2210      	movs	r2, #16
 8001788:	430a      	orrs	r2, r1
 800178a:	7342      	strb	r2, [r0, #13]
 800178c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800178e:	0109      	lsls	r1, r1, #4
 8001790:	053a      	lsls	r2, r7, #20
 8001792:	0f12      	lsrs	r2, r2, #28
 8001794:	430a      	orrs	r2, r1
 8001796:	7382      	strb	r2, [r0, #14]
 8001798:	73c7      	strb	r7, [r0, #15]
 800179a:	78e0      	ldrb	r0, [r4, #3]
 800179c:	01c0      	lsls	r0, r0, #7
 800179e:	7128      	strb	r0, [r5, #4]
 80017a0:	78a0      	ldrb	r0, [r4, #2]
 80017a2:	01c0      	lsls	r0, r0, #7
 80017a4:	78e1      	ldrb	r1, [r4, #3]
 80017a6:	0849      	lsrs	r1, r1, #1
 80017a8:	4301      	orrs	r1, r0
 80017aa:	70e9      	strb	r1, [r5, #3]
 80017ac:	7860      	ldrb	r0, [r4, #1]
 80017ae:	01c0      	lsls	r0, r0, #7
 80017b0:	78a1      	ldrb	r1, [r4, #2]
 80017b2:	0849      	lsrs	r1, r1, #1
 80017b4:	4301      	orrs	r1, r0
 80017b6:	70a9      	strb	r1, [r5, #2]
 80017b8:	7820      	ldrb	r0, [r4, #0]
 80017ba:	01c0      	lsls	r0, r0, #7
 80017bc:	7861      	ldrb	r1, [r4, #1]
 80017be:	0849      	lsrs	r1, r1, #1
 80017c0:	4301      	orrs	r1, r0
 80017c2:	7069      	strb	r1, [r5, #1]
 80017c4:	7820      	ldrb	r0, [r4, #0]
 80017c6:	0840      	lsrs	r0, r0, #1
 80017c8:	7028      	strb	r0, [r5, #0]
 80017ca:	9600      	str	r6, [sp, #0]
 80017cc:	a31a      	add	r3, pc, #104	; (adr r3, 8001838 <public_key>)
 80017ce:	2210      	movs	r2, #16
 80017d0:	0029      	movs	r1, r5
 80017d2:	a809      	add	r0, sp, #36	; 0x24
 80017d4:	f006 fda0 	bl	8008318 <MCU_API_aes_128_cbc_encrypt>
 80017d8:	0001      	movs	r1, r0
 80017da:	d120      	bne.n	800181e <SIGFOX_INT_encrypt_decrypt_frame+0x11a>
 80017dc:	2001      	movs	r0, #1
 80017de:	9000      	str	r0, [sp, #0]
 80017e0:	ab09      	add	r3, sp, #36	; 0x24
 80017e2:	2210      	movs	r2, #16
 80017e4:	a901      	add	r1, sp, #4
 80017e6:	a805      	add	r0, sp, #20
 80017e8:	f006 fd96 	bl	8008318 <MCU_API_aes_128_cbc_encrypt>
 80017ec:	0001      	movs	r1, r0
 80017ee:	d116      	bne.n	800181e <SIGFOX_INT_encrypt_decrypt_frame+0x11a>
 80017f0:	a810      	add	r0, sp, #64	; 0x40
 80017f2:	7803      	ldrb	r3, [r0, #0]
 80017f4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80017f6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80017f8:	2000      	movs	r0, #0
 80017fa:	910e      	str	r1, [sp, #56]	; 0x38
 80017fc:	920f      	str	r2, [sp, #60]	; 0x3c
 80017fe:	a910      	add	r1, sp, #64	; 0x40
 8001800:	700b      	strb	r3, [r1, #0]
 8001802:	e007      	b.n	8001814 <SIGFOX_INT_encrypt_decrypt_frame+0x110>
 8001804:	a905      	add	r1, sp, #20
 8001806:	5c09      	ldrb	r1, [r1, r0]
 8001808:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800180a:	5c12      	ldrb	r2, [r2, r0]
 800180c:	404a      	eors	r2, r1
 800180e:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001810:	540a      	strb	r2, [r1, r0]
 8001812:	1c40      	adds	r0, r0, #1
 8001814:	a910      	add	r1, sp, #64	; 0x40
 8001816:	7809      	ldrb	r1, [r1, #0]
 8001818:	4288      	cmp	r0, r1
 800181a:	dbf3      	blt.n	8001804 <SIGFOX_INT_encrypt_decrypt_frame+0x100>
 800181c:	2000      	movs	r0, #0
 800181e:	b011      	add	sp, #68	; 0x44
 8001820:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001824 <.text_16>:
 8001824:	20000294 	.word	0x20000294

08001828 <.text_17>:
 8001828:	00000a28 	.word	0x00000a28

0800182c <.text_18>:
 800182c:	0000af67 	.word	0x0000af67

08001830 <.text_19>:
 8001830:	0000b1be 	.word	0x0000b1be

08001834 <.text_20>:
 8001834:	20000298 	.word	0x20000298

08001838 <public_key>:
 8001838:	33221100 77665544 bbaa9988 ffeeddcc     .."3DUfw........

08001848 <SIGFOX_INT_build_frame>:
 8001848:	b5f6      	push	{r1, r2, r4, r5, r6, r7, lr}
 800184a:	b095      	sub	sp, #84	; 0x54
 800184c:	0004      	movs	r4, r0
 800184e:	001d      	movs	r5, r3
 8001850:	2702      	movs	r7, #2
 8001852:	9706      	str	r7, [sp, #24]
 8001854:	2054      	movs	r0, #84	; 0x54
 8001856:	5a20      	ldrh	r0, [r4, r0]
 8001858:	1c40      	adds	r0, r0, #1
 800185a:	2154      	movs	r1, #84	; 0x54
 800185c:	5260      	strh	r0, [r4, r1]
 800185e:	49b8      	ldr	r1, [pc, #736]	; (8001b40 <.text_23>)
 8001860:	4008      	ands	r0, r1
 8001862:	2254      	movs	r2, #84	; 0x54
 8001864:	52a0      	strh	r0, [r4, r2]
 8001866:	aa15      	add	r2, sp, #84	; 0x54
 8001868:	7812      	ldrb	r2, [r2, #0]
 800186a:	9200      	str	r2, [sp, #0]
 800186c:	2257      	movs	r2, #87	; 0x57
 800186e:	5ca2      	ldrb	r2, [r4, r2]
 8001870:	2a01      	cmp	r2, #1
 8001872:	d119      	bne.n	80018a8 <SIGFOX_INT_build_frame+0x60>
 8001874:	2800      	cmp	r0, #0
 8001876:	d104      	bne.n	8001882 <SIGFOX_INT_build_frame+0x3a>
 8001878:	205a      	movs	r0, #90	; 0x5a
 800187a:	5c20      	ldrb	r0, [r4, r0]
 800187c:	1c40      	adds	r0, r0, #1
 800187e:	225a      	movs	r2, #90	; 0x5a
 8001880:	54a0      	strb	r0, [r4, r2]
 8001882:	9800      	ldr	r0, [sp, #0]
 8001884:	2804      	cmp	r0, #4
 8001886:	d00f      	beq.n	80018a8 <SIGFOX_INT_build_frame+0x60>
 8001888:	2054      	movs	r0, #84	; 0x54
 800188a:	5a20      	ldrh	r0, [r4, r0]
 800188c:	4208      	tst	r0, r1
 800188e:	d009      	beq.n	80018a4 <SIGFOX_INT_build_frame+0x5c>
 8001890:	2158      	movs	r1, #88	; 0x58
 8001892:	5a61      	ldrh	r1, [r4, r1]
 8001894:	2900      	cmp	r1, #0
 8001896:	d007      	beq.n	80018a8 <SIGFOX_INT_build_frame+0x60>
 8001898:	f000 ff7a 	bl	8002790 <__aeabi_idivmod>
 800189c:	1e4e      	subs	r6, r1, #1
 800189e:	41b6      	sbcs	r6, r6
 80018a0:	0ff6      	lsrs	r6, r6, #31
 80018a2:	e002      	b.n	80018aa <SIGFOX_INT_build_frame+0x62>
 80018a4:	2601      	movs	r6, #1
 80018a6:	e000      	b.n	80018aa <SIGFOX_INT_build_frame+0x62>
 80018a8:	2600      	movs	r6, #0
 80018aa:	0028      	movs	r0, r5
 80018ac:	d105      	bne.n	80018ba <SIGFOX_INT_build_frame+0x72>
 80018ae:	9816      	ldr	r0, [sp, #88]	; 0x58
 80018b0:	7800      	ldrb	r0, [r0, #0]
 80018b2:	07c1      	lsls	r1, r0, #31
 80018b4:	0fc9      	lsrs	r1, r1, #31
 80018b6:	430f      	orrs	r7, r1
 80018b8:	e010      	b.n	80018dc <SIGFOX_INT_build_frame+0x94>
 80018ba:	2d01      	cmp	r5, #1
 80018bc:	d101      	bne.n	80018c2 <SIGFOX_INT_build_frame+0x7a>
 80018be:	2700      	movs	r7, #0
 80018c0:	e00c      	b.n	80018dc <SIGFOX_INT_build_frame+0x94>
 80018c2:	1e68      	subs	r0, r5, #1
 80018c4:	2103      	movs	r1, #3
 80018c6:	1042      	asrs	r2, r0, #1
 80018c8:	0f92      	lsrs	r2, r2, #30
 80018ca:	1812      	adds	r2, r2, r0
 80018cc:	1092      	asrs	r2, r2, #2
 80018ce:	0092      	lsls	r2, r2, #2
 80018d0:	1a80      	subs	r0, r0, r2
 80018d2:	1a0f      	subs	r7, r1, r0
 80018d4:	b2ff      	uxtb	r7, r7
 80018d6:	1cb8      	adds	r0, r7, #2
 80018d8:	b2c0      	uxtb	r0, r0
 80018da:	9006      	str	r0, [sp, #24]
 80018dc:	01b9      	lsls	r1, r7, #6
 80018de:	0027      	movs	r7, r4
 80018e0:	373e      	adds	r7, #62	; 0x3e
 80018e2:	a815      	add	r0, sp, #84	; 0x54
 80018e4:	7800      	ldrb	r0, [r0, #0]
 80018e6:	2800      	cmp	r0, #0
 80018e8:	d012      	beq.n	8001910 <SIGFOX_INT_build_frame+0xc8>
 80018ea:	2802      	cmp	r0, #2
 80018ec:	d040      	beq.n	8001970 <SIGFOX_INT_build_frame+0x128>
 80018ee:	d303      	bcc.n	80018f8 <SIGFOX_INT_build_frame+0xb0>
 80018f0:	2804      	cmp	r0, #4
 80018f2:	d06d      	beq.n	80019d0 <SIGFOX_INT_build_frame+0x188>
 80018f4:	d311      	bcc.n	800191a <SIGFOX_INT_build_frame+0xd2>
 80018f6:	e094      	b.n	8001a22 <SIGFOX_INT_build_frame+0x1da>
 80018f8:	2000      	movs	r0, #0
 80018fa:	e005      	b.n	8001908 <SIGFOX_INT_build_frame+0xc0>
 80018fc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80018fe:	5c12      	ldrb	r2, [r2, r0]
 8001900:	1d83      	adds	r3, r0, #6
 8001902:	b2db      	uxtb	r3, r3
 8001904:	54fa      	strb	r2, [r7, r3]
 8001906:	1c40      	adds	r0, r0, #1
 8001908:	42a8      	cmp	r0, r5
 800190a:	dbf7      	blt.n	80018fc <SIGFOX_INT_build_frame+0xb4>
 800190c:	7039      	strb	r1, [r7, #0]
 800190e:	e088      	b.n	8001a22 <SIGFOX_INT_build_frame+0x1da>
 8001910:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001912:	7800      	ldrb	r0, [r0, #0]
 8001914:	0180      	lsls	r0, r0, #6
 8001916:	7038      	strb	r0, [r7, #0]
 8001918:	e083      	b.n	8001a22 <SIGFOX_INT_build_frame+0x1da>
 800191a:	7039      	strb	r1, [r7, #0]
 800191c:	aa04      	add	r2, sp, #16
 800191e:	1c92      	adds	r2, r2, #2
 8001920:	a905      	add	r1, sp, #20
 8001922:	a805      	add	r0, sp, #20
 8001924:	1c80      	adds	r0, r0, #2
 8001926:	f006 fcdd 	bl	80082e4 <MCU_API_get_voltage_temperature>
 800192a:	2800      	cmp	r0, #0
 800192c:	d002      	beq.n	8001934 <SIGFOX_INT_build_frame+0xec>
 800192e:	0201      	lsls	r1, r0, #8
 8001930:	2092      	movs	r0, #146	; 0x92
 8001932:	e0d2      	b.n	8001ada <SIGFOX_INT_build_frame+0x292>
 8001934:	2008      	movs	r0, #8
 8001936:	2144      	movs	r1, #68	; 0x44
 8001938:	5460      	strb	r0, [r4, r1]
 800193a:	4668      	mov	r0, sp
 800193c:	8ac0      	ldrh	r0, [r0, #22]
 800193e:	2145      	movs	r1, #69	; 0x45
 8001940:	5460      	strb	r0, [r4, r1]
 8001942:	4668      	mov	r0, sp
 8001944:	8ac0      	ldrh	r0, [r0, #22]
 8001946:	0a00      	lsrs	r0, r0, #8
 8001948:	2146      	movs	r1, #70	; 0x46
 800194a:	5460      	strb	r0, [r4, r1]
 800194c:	4668      	mov	r0, sp
 800194e:	8a80      	ldrh	r0, [r0, #20]
 8001950:	2147      	movs	r1, #71	; 0x47
 8001952:	5460      	strb	r0, [r4, r1]
 8001954:	4668      	mov	r0, sp
 8001956:	8a80      	ldrh	r0, [r0, #20]
 8001958:	0a00      	lsrs	r0, r0, #8
 800195a:	2148      	movs	r1, #72	; 0x48
 800195c:	5460      	strb	r0, [r4, r1]
 800195e:	9804      	ldr	r0, [sp, #16]
 8001960:	1400      	asrs	r0, r0, #16
 8001962:	2149      	movs	r1, #73	; 0x49
 8001964:	5460      	strb	r0, [r4, r1]
 8001966:	9804      	ldr	r0, [sp, #16]
 8001968:	1400      	asrs	r0, r0, #16
 800196a:	1200      	asrs	r0, r0, #8
 800196c:	214a      	movs	r1, #74	; 0x4a
 800196e:	e057      	b.n	8001a20 <SIGFOX_INT_build_frame+0x1d8>
 8001970:	7039      	strb	r1, [r7, #0]
 8001972:	aa04      	add	r2, sp, #16
 8001974:	1c92      	adds	r2, r2, #2
 8001976:	a905      	add	r1, sp, #20
 8001978:	a805      	add	r0, sp, #20
 800197a:	1c80      	adds	r0, r0, #2
 800197c:	f006 fcb2 	bl	80082e4 <MCU_API_get_voltage_temperature>
 8001980:	2800      	cmp	r0, #0
 8001982:	d002      	beq.n	800198a <SIGFOX_INT_build_frame+0x142>
 8001984:	0201      	lsls	r1, r0, #8
 8001986:	2093      	movs	r0, #147	; 0x93
 8001988:	e0a7      	b.n	8001ada <SIGFOX_INT_build_frame+0x292>
 800198a:	2009      	movs	r0, #9
 800198c:	2144      	movs	r1, #68	; 0x44
 800198e:	5460      	strb	r0, [r4, r1]
 8001990:	4668      	mov	r0, sp
 8001992:	8ac0      	ldrh	r0, [r0, #22]
 8001994:	2145      	movs	r1, #69	; 0x45
 8001996:	5460      	strb	r0, [r4, r1]
 8001998:	4668      	mov	r0, sp
 800199a:	8ac0      	ldrh	r0, [r0, #22]
 800199c:	0a00      	lsrs	r0, r0, #8
 800199e:	2146      	movs	r1, #70	; 0x46
 80019a0:	5460      	strb	r0, [r4, r1]
 80019a2:	4668      	mov	r0, sp
 80019a4:	8a80      	ldrh	r0, [r0, #20]
 80019a6:	2147      	movs	r1, #71	; 0x47
 80019a8:	5460      	strb	r0, [r4, r1]
 80019aa:	4668      	mov	r0, sp
 80019ac:	8a80      	ldrh	r0, [r0, #20]
 80019ae:	0a00      	lsrs	r0, r0, #8
 80019b0:	2148      	movs	r1, #72	; 0x48
 80019b2:	5460      	strb	r0, [r4, r1]
 80019b4:	9804      	ldr	r0, [sp, #16]
 80019b6:	1400      	asrs	r0, r0, #16
 80019b8:	2149      	movs	r1, #73	; 0x49
 80019ba:	5460      	strb	r0, [r4, r1]
 80019bc:	9804      	ldr	r0, [sp, #16]
 80019be:	1400      	asrs	r0, r0, #16
 80019c0:	1200      	asrs	r0, r0, #8
 80019c2:	214a      	movs	r1, #74	; 0x4a
 80019c4:	5460      	strb	r0, [r4, r1]
 80019c6:	206a      	movs	r0, #106	; 0x6a
 80019c8:	5a20      	ldrh	r0, [r4, r0]
 80019ca:	3064      	adds	r0, #100	; 0x64
 80019cc:	214b      	movs	r1, #75	; 0x4b
 80019ce:	e027      	b.n	8001a20 <SIGFOX_INT_build_frame+0x1d8>
 80019d0:	7039      	strb	r1, [r7, #0]
 80019d2:	aa04      	add	r2, sp, #16
 80019d4:	1c92      	adds	r2, r2, #2
 80019d6:	a905      	add	r1, sp, #20
 80019d8:	a805      	add	r0, sp, #20
 80019da:	1c80      	adds	r0, r0, #2
 80019dc:	f006 fc82 	bl	80082e4 <MCU_API_get_voltage_temperature>
 80019e0:	2800      	cmp	r0, #0
 80019e2:	d002      	beq.n	80019ea <SIGFOX_INT_build_frame+0x1a2>
 80019e4:	0201      	lsls	r1, r0, #8
 80019e6:	2095      	movs	r0, #149	; 0x95
 80019e8:	e077      	b.n	8001ada <SIGFOX_INT_build_frame+0x292>
 80019ea:	200a      	movs	r0, #10
 80019ec:	2144      	movs	r1, #68	; 0x44
 80019ee:	5460      	strb	r0, [r4, r1]
 80019f0:	4668      	mov	r0, sp
 80019f2:	8ac0      	ldrh	r0, [r0, #22]
 80019f4:	21c8      	movs	r1, #200	; 0xc8
 80019f6:	f000 fde5 	bl	80025c4 <__divsi3>
 80019fa:	2145      	movs	r1, #69	; 0x45
 80019fc:	5460      	strb	r0, [r4, r1]
 80019fe:	4668      	mov	r0, sp
 8001a00:	8a80      	ldrh	r0, [r0, #20]
 8001a02:	21c8      	movs	r1, #200	; 0xc8
 8001a04:	f000 fdde 	bl	80025c4 <__divsi3>
 8001a08:	2146      	movs	r1, #70	; 0x46
 8001a0a:	5460      	strb	r0, [r4, r1]
 8001a0c:	9804      	ldr	r0, [sp, #16]
 8001a0e:	1400      	asrs	r0, r0, #16
 8001a10:	210a      	movs	r1, #10
 8001a12:	f000 fdd7 	bl	80025c4 <__divsi3>
 8001a16:	2147      	movs	r1, #71	; 0x47
 8001a18:	5460      	strb	r0, [r4, r1]
 8001a1a:	205a      	movs	r0, #90	; 0x5a
 8001a1c:	5c20      	ldrb	r0, [r4, r0]
 8001a1e:	2148      	movs	r1, #72	; 0x48
 8001a20:	5460      	strb	r0, [r4, r1]
 8001a22:	203e      	movs	r0, #62	; 0x3e
 8001a24:	5c21      	ldrb	r1, [r4, r0]
 8001a26:	981c      	ldr	r0, [sp, #112]	; 0x70
 8001a28:	0140      	lsls	r0, r0, #5
 8001a2a:	2220      	movs	r2, #32
 8001a2c:	4010      	ands	r0, r2
 8001a2e:	4308      	orrs	r0, r1
 8001a30:	7038      	strb	r0, [r7, #0]
 8001a32:	2154      	movs	r1, #84	; 0x54
 8001a34:	5a61      	ldrh	r1, [r4, r1]
 8001a36:	0509      	lsls	r1, r1, #20
 8001a38:	0f09      	lsrs	r1, r1, #28
 8001a3a:	4301      	orrs	r1, r0
 8001a3c:	7039      	strb	r1, [r7, #0]
 8001a3e:	2054      	movs	r0, #84	; 0x54
 8001a40:	5a20      	ldrh	r0, [r4, r0]
 8001a42:	213f      	movs	r1, #63	; 0x3f
 8001a44:	5460      	strb	r0, [r4, r1]
 8001a46:	2000      	movs	r0, #0
 8001a48:	2340      	movs	r3, #64	; 0x40
 8001a4a:	1821      	adds	r1, r4, r0
 8001a4c:	226c      	movs	r2, #108	; 0x6c
 8001a4e:	5c8a      	ldrb	r2, [r1, r2]
 8001a50:	54ca      	strb	r2, [r1, r3]
 8001a52:	1c40      	adds	r0, r0, #1
 8001a54:	2804      	cmp	r0, #4
 8001a56:	dbf8      	blt.n	8001a4a <SIGFOX_INT_build_frame+0x202>
 8001a58:	2057      	movs	r0, #87	; 0x57
 8001a5a:	5c20      	ldrb	r0, [r4, r0]
 8001a5c:	2801      	cmp	r0, #1
 8001a5e:	d131      	bne.n	8001ac4 <SIGFOX_INT_build_frame+0x27c>
 8001a60:	9800      	ldr	r0, [sp, #0]
 8001a62:	2804      	cmp	r0, #4
 8001a64:	d02e      	beq.n	8001ac4 <SIGFOX_INT_build_frame+0x27c>
 8001a66:	0028      	movs	r0, r5
 8001a68:	d014      	beq.n	8001a94 <SIGFOX_INT_build_frame+0x24c>
 8001a6a:	2001      	movs	r0, #1
 8001a6c:	9003      	str	r0, [sp, #12]
 8001a6e:	a807      	add	r0, sp, #28
 8001a70:	9002      	str	r0, [sp, #8]
 8001a72:	0020      	movs	r0, r4
 8001a74:	306c      	adds	r0, #108	; 0x6c
 8001a76:	9001      	str	r0, [sp, #4]
 8001a78:	205a      	movs	r0, #90	; 0x5a
 8001a7a:	5c20      	ldrb	r0, [r4, r0]
 8001a7c:	9000      	str	r0, [sp, #0]
 8001a7e:	2054      	movs	r0, #84	; 0x54
 8001a80:	5a23      	ldrh	r3, [r4, r0]
 8001a82:	002a      	movs	r2, r5
 8001a84:	0021      	movs	r1, r4
 8001a86:	3144      	adds	r1, #68	; 0x44
 8001a88:	0020      	movs	r0, r4
 8001a8a:	3044      	adds	r0, #68	; 0x44
 8001a8c:	f7ff fe3a 	bl	8001704 <SIGFOX_INT_encrypt_decrypt_frame>
 8001a90:	2800      	cmp	r0, #0
 8001a92:	d120      	bne.n	8001ad6 <SIGFOX_INT_build_frame+0x28e>
 8001a94:	a907      	add	r1, sp, #28
 8001a96:	205a      	movs	r0, #90	; 0x5a
 8001a98:	5c20      	ldrb	r0, [r4, r0]
 8001a9a:	7008      	strb	r0, [r1, #0]
 8001a9c:	2000      	movs	r0, #0
 8001a9e:	5c3a      	ldrb	r2, [r7, r0]
 8001aa0:	180b      	adds	r3, r1, r0
 8001aa2:	705a      	strb	r2, [r3, #1]
 8001aa4:	1c40      	adds	r0, r0, #1
 8001aa6:	b2c0      	uxtb	r0, r0
 8001aa8:	1daa      	adds	r2, r5, #6
 8001aaa:	4290      	cmp	r0, r2
 8001aac:	dbf7      	blt.n	8001a9e <SIGFOX_INT_build_frame+0x256>
 8001aae:	ab04      	add	r3, sp, #16
 8001ab0:	1dea      	adds	r2, r5, #7
 8001ab2:	b2d2      	uxtb	r2, r2
 8001ab4:	a80c      	add	r0, sp, #48	; 0x30
 8001ab6:	f000 fcab 	bl	8002410 <SIGFOX_HMAC_compute_aes>
 8001aba:	2800      	cmp	r0, #0
 8001abc:	d00f      	beq.n	8001ade <SIGFOX_INT_build_frame+0x296>
 8001abe:	0201      	lsls	r1, r0, #8
 8001ac0:	2096      	movs	r0, #150	; 0x96
 8001ac2:	e00a      	b.n	8001ada <SIGFOX_INT_build_frame+0x292>
 8001ac4:	ab04      	add	r3, sp, #16
 8001ac6:	1daa      	adds	r2, r5, #6
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	0039      	movs	r1, r7
 8001acc:	a80c      	add	r0, sp, #48	; 0x30
 8001ace:	f000 fc9f 	bl	8002410 <SIGFOX_HMAC_compute_aes>
 8001ad2:	2800      	cmp	r0, #0
 8001ad4:	d003      	beq.n	8001ade <SIGFOX_INT_build_frame+0x296>
 8001ad6:	0201      	lsls	r1, r0, #8
 8001ad8:	2091      	movs	r0, #145	; 0x91
 8001ada:	4308      	orrs	r0, r1
 8001adc:	e02e      	b.n	8001b3c <SIGFOX_INT_build_frame+0x2f4>
 8001ade:	2000      	movs	r0, #0
 8001ae0:	e00b      	b.n	8001afa <SIGFOX_INT_build_frame+0x2b2>
 8001ae2:	1829      	adds	r1, r5, r0
 8001ae4:	1d89      	adds	r1, r1, #6
 8001ae6:	b2c9      	uxtb	r1, r1
 8001ae8:	aa0c      	add	r2, sp, #48	; 0x30
 8001aea:	466b      	mov	r3, sp
 8001aec:	7c1b      	ldrb	r3, [r3, #16]
 8001aee:	181b      	adds	r3, r3, r0
 8001af0:	18d2      	adds	r2, r2, r3
 8001af2:	3a10      	subs	r2, #16
 8001af4:	7812      	ldrb	r2, [r2, #0]
 8001af6:	547a      	strb	r2, [r7, r1]
 8001af8:	1c40      	adds	r0, r0, #1
 8001afa:	9906      	ldr	r1, [sp, #24]
 8001afc:	4288      	cmp	r0, r1
 8001afe:	dbf0      	blt.n	8001ae2 <SIGFOX_INT_build_frame+0x29a>
 8001b00:	186d      	adds	r5, r5, r1
 8001b02:	4669      	mov	r1, sp
 8001b04:	1da8      	adds	r0, r5, #6
 8001b06:	7008      	strb	r0, [r1, #0]
 8001b08:	4668      	mov	r0, sp
 8001b0a:	7800      	ldrb	r0, [r0, #0]
 8001b0c:	215c      	movs	r1, #92	; 0x5c
 8001b0e:	5460      	strb	r0, [r4, r1]
 8001b10:	5c61      	ldrb	r1, [r4, r1]
 8001b12:	0038      	movs	r0, r7
 8001b14:	f000 fb58 	bl	80021c8 <SIGFOX_CRC_crc16>
 8001b18:	0a01      	lsrs	r1, r0, #8
 8001b1a:	466a      	mov	r2, sp
 8001b1c:	7812      	ldrb	r2, [r2, #0]
 8001b1e:	54b9      	strb	r1, [r7, r2]
 8001b20:	1ded      	adds	r5, r5, #7
 8001b22:	b2ed      	uxtb	r5, r5
 8001b24:	5578      	strb	r0, [r7, r5]
 8001b26:	205c      	movs	r0, #92	; 0x5c
 8001b28:	5c20      	ldrb	r0, [r4, r0]
 8001b2a:	1d80      	adds	r0, r0, #6
 8001b2c:	215c      	movs	r1, #92	; 0x5c
 8001b2e:	5460      	strb	r0, [r4, r1]
 8001b30:	205b      	movs	r0, #91	; 0x5b
 8001b32:	5c20      	ldrb	r0, [r4, r0]
 8001b34:	4306      	orrs	r6, r0
 8001b36:	205b      	movs	r0, #91	; 0x5b
 8001b38:	5426      	strb	r6, [r4, r0]
 8001b3a:	2000      	movs	r0, #0
 8001b3c:	b017      	add	sp, #92	; 0x5c
 8001b3e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b40 <.text_23>:
 8001b40:	00000fff 	.word	0x00000fff

08001b44 <SIGFOX_INT_send_single_frame>:
 8001b44:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 8001b46:	b088      	sub	sp, #32
 8001b48:	0004      	movs	r4, r0
 8001b4a:	0017      	movs	r7, r2
 8001b4c:	2000      	movs	r0, #0
 8001b4e:	f006 ff61 	bl	8008a14 <RF_API_init>
 8001b52:	2597      	movs	r5, #151	; 0x97
 8001b54:	2800      	cmp	r0, #0
 8001b56:	d12d      	bne.n	8001bb4 <SIGFOX_INT_send_single_frame+0x70>
 8001b58:	0038      	movs	r0, r7
 8001b5a:	f007 f957 	bl	8008e0c <RF_API_change_frequency>
 8001b5e:	0006      	movs	r6, r0
 8001b60:	d120      	bne.n	8001ba4 <SIGFOX_INT_send_single_frame+0x60>
 8001b62:	21aa      	movs	r1, #170	; 0xaa
 8001b64:	4668      	mov	r0, sp
 8001b66:	7001      	strb	r1, [r0, #0]
 8001b68:	7041      	strb	r1, [r0, #1]
 8001b6a:	a908      	add	r1, sp, #32
 8001b6c:	7809      	ldrb	r1, [r1, #0]
 8001b6e:	0049      	lsls	r1, r1, #1
 8001b70:	1861      	adds	r1, r4, r1
 8001b72:	8bca      	ldrh	r2, [r1, #30]
 8001b74:	0a12      	lsrs	r2, r2, #8
 8001b76:	7082      	strb	r2, [r0, #2]
 8001b78:	8bc9      	ldrh	r1, [r1, #30]
 8001b7a:	70c1      	strb	r1, [r0, #3]
 8001b7c:	a908      	add	r1, sp, #32
 8001b7e:	780b      	ldrb	r3, [r1, #0]
 8001b80:	215c      	movs	r1, #92	; 0x5c
 8001b82:	5c61      	ldrb	r1, [r4, r1]
 8001b84:	1f0a      	subs	r2, r1, #4
 8001b86:	b2d2      	uxtb	r2, r2
 8001b88:	1d01      	adds	r1, r0, #4
 8001b8a:	0020      	movs	r0, r4
 8001b8c:	303e      	adds	r0, #62	; 0x3e
 8001b8e:	f000 fad3 	bl	8002138 <SIGFOX_SCRAMB_compute>
 8001b92:	205c      	movs	r0, #92	; 0x5c
 8001b94:	5c22      	ldrb	r2, [r4, r0]
 8001b96:	2070      	movs	r0, #112	; 0x70
 8001b98:	5c21      	ldrb	r1, [r4, r0]
 8001b9a:	4668      	mov	r0, sp
 8001b9c:	f007 fa14 	bl	8008fc8 <RF_API_send>
 8001ba0:	0006      	movs	r6, r0
 8001ba2:	d003      	beq.n	8001bac <SIGFOX_INT_send_single_frame+0x68>
 8001ba4:	f007 fa98 	bl	80090d8 <RF_API_stop>
 8001ba8:	0230      	lsls	r0, r6, #8
 8001baa:	e004      	b.n	8001bb6 <SIGFOX_INT_send_single_frame+0x72>
 8001bac:	f007 fa94 	bl	80090d8 <RF_API_stop>
 8001bb0:	0006      	movs	r6, r0
 8001bb2:	d003      	beq.n	8001bbc <SIGFOX_INT_send_single_frame+0x78>
 8001bb4:	0200      	lsls	r0, r0, #8
 8001bb6:	4305      	orrs	r5, r0
 8001bb8:	0028      	movs	r0, r5
 8001bba:	e000      	b.n	8001bbe <SIGFOX_INT_send_single_frame+0x7a>
 8001bbc:	2000      	movs	r0, #0
 8001bbe:	b009      	add	sp, #36	; 0x24
 8001bc0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001bc2 <SIGFOX_INT_execute_carrier_sense>:
 8001bc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001bc4:	0004      	movs	r4, r0
 8001bc6:	0008      	movs	r0, r1
 8001bc8:	0017      	movs	r7, r2
 8001bca:	001d      	movs	r5, r3
 8001bcc:	f006 ff22 	bl	8008a14 <RF_API_init>
 8001bd0:	0006      	movs	r6, r0
 8001bd2:	d115      	bne.n	8001c00 <SIGFOX_INT_execute_carrier_sense+0x3e>
 8001bd4:	0038      	movs	r0, r7
 8001bd6:	f007 f919 	bl	8008e0c <RF_API_change_frequency>
 8001bda:	0006      	movs	r6, r0
 8001bdc:	d107      	bne.n	8001bee <SIGFOX_INT_execute_carrier_sense+0x2c>
 8001bde:	002a      	movs	r2, r5
 8001be0:	2030      	movs	r0, #48	; 0x30
 8001be2:	5621      	ldrsb	r1, [r4, r0]
 8001be4:	2005      	movs	r0, #5
 8001be6:	f007 fb29 	bl	800923c <RF_API_wait_for_clear_channel>
 8001bea:	0006      	movs	r6, r0
 8001bec:	d003      	beq.n	8001bf6 <SIGFOX_INT_execute_carrier_sense+0x34>
 8001bee:	f007 fa73 	bl	80090d8 <RF_API_stop>
 8001bf2:	0030      	movs	r0, r6
 8001bf4:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8001bf6:	f007 fa6f 	bl	80090d8 <RF_API_stop>
 8001bfa:	0006      	movs	r6, r0
 8001bfc:	d100      	bne.n	8001c00 <SIGFOX_INT_execute_carrier_sense+0x3e>
 8001bfe:	2000      	movs	r0, #0
 8001c00:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08001c02 <SIGFOX_INT_process_uplink>:
 8001c02:	b5f2      	push	{r1, r4, r5, r6, r7, lr}
 8001c04:	b086      	sub	sp, #24
 8001c06:	001f      	movs	r7, r3
 8001c08:	2600      	movs	r6, #0
 8001c0a:	2500      	movs	r5, #0
 8001c0c:	9601      	str	r6, [sp, #4]
 8001c0e:	9603      	str	r6, [sp, #12]
 8001c10:	4669      	mov	r1, sp
 8001c12:	7e09      	ldrb	r1, [r1, #24]
 8001c14:	2901      	cmp	r1, #1
 8001c16:	d100      	bne.n	8001c1a <SIGFOX_INT_process_uplink+0x18>
 8001c18:	9103      	str	r1, [sp, #12]
 8001c1a:	4669      	mov	r1, sp
 8001c1c:	708a      	strb	r2, [r1, #2]
 8001c1e:	0004      	movs	r4, r0
 8001c20:	205d      	movs	r0, #93	; 0x5d
 8001c22:	5c20      	ldrb	r0, [r4, r0]
 8001c24:	2801      	cmp	r0, #1
 8001c26:	d111      	bne.n	8001c4c <SIGFOX_INT_process_uplink+0x4a>
 8001c28:	704e      	strb	r6, [r1, #1]
 8001c2a:	2032      	movs	r0, #50	; 0x32
 8001c2c:	5c20      	ldrb	r0, [r4, r0]
 8001c2e:	2801      	cmp	r0, #1
 8001c30:	d111      	bne.n	8001c56 <SIGFOX_INT_process_uplink+0x54>
 8001c32:	2a00      	cmp	r2, #0
 8001c34:	d00f      	beq.n	8001c56 <SIGFOX_INT_process_uplink+0x54>
 8001c36:	9803      	ldr	r0, [sp, #12]
 8001c38:	2800      	cmp	r0, #0
 8001c3a:	d00c      	beq.n	8001c56 <SIGFOX_INT_process_uplink+0x54>
 8001c3c:	200a      	movs	r0, #10
 8001c3e:	f003 fda5 	bl	800578c <MCU_API_timer_start>
 8001c42:	2800      	cmp	r0, #0
 8001c44:	d032      	beq.n	8001cac <SIGFOX_INT_process_uplink+0xaa>
 8001c46:	0201      	lsls	r1, r0, #8
 8001c48:	2070      	movs	r0, #112	; 0x70
 8001c4a:	e10b      	b.n	8001e64 <SIGFOX_INT_process_uplink+0x262>
 8001c4c:	4668      	mov	r0, sp
 8001c4e:	9903      	ldr	r1, [sp, #12]
 8001c50:	2201      	movs	r2, #1
 8001c52:	404a      	eors	r2, r1
 8001c54:	7042      	strb	r2, [r0, #1]
 8001c56:	0038      	movs	r0, r7
 8001c58:	d04b      	beq.n	8001cf2 <SIGFOX_INT_process_uplink+0xf0>
 8001c5a:	205d      	movs	r0, #93	; 0x5d
 8001c5c:	5c20      	ldrb	r0, [r4, r0]
 8001c5e:	2802      	cmp	r0, #2
 8001c60:	d147      	bne.n	8001cf2 <SIGFOX_INT_process_uplink+0xf0>
 8001c62:	0038      	movs	r0, r7
 8001c64:	f003 fd22 	bl	80056ac <MCU_API_timer_start_carrier_sense>
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	d11c      	bne.n	8001ca6 <SIGFOX_INT_process_uplink+0xa4>
 8001c6c:	2100      	movs	r1, #0
 8001c6e:	0020      	movs	r0, r4
 8001c70:	f7ff fc00 	bl	8001474 <SIGFOX_INT_compute_carrier_sense_frequency>
 8001c74:	466b      	mov	r3, sp
 8001c76:	0002      	movs	r2, r0
 8001c78:	2031      	movs	r0, #49	; 0x31
 8001c7a:	5c21      	ldrb	r1, [r4, r0]
 8001c7c:	0020      	movs	r0, r4
 8001c7e:	f7ff ffa0 	bl	8001bc2 <SIGFOX_INT_execute_carrier_sense>
 8001c82:	2800      	cmp	r0, #0
 8001c84:	d119      	bne.n	8001cba <SIGFOX_INT_process_uplink+0xb8>
 8001c86:	4668      	mov	r0, sp
 8001c88:	7800      	ldrb	r0, [r0, #0]
 8001c8a:	2800      	cmp	r0, #0
 8001c8c:	d118      	bne.n	8001cc0 <SIGFOX_INT_process_uplink+0xbe>
 8001c8e:	68a0      	ldr	r0, [r4, #8]
 8001c90:	1e40      	subs	r0, r0, #1
 8001c92:	4285      	cmp	r5, r0
 8001c94:	d21c      	bcs.n	8001cd0 <SIGFOX_INT_process_uplink+0xce>
 8001c96:	2003      	movs	r0, #3
 8001c98:	f006 fb2a 	bl	80082f0 <MCU_API_delay>
 8001c9c:	2800      	cmp	r0, #0
 8001c9e:	d017      	beq.n	8001cd0 <SIGFOX_INT_process_uplink+0xce>
 8001ca0:	0201      	lsls	r1, r0, #8
 8001ca2:	2079      	movs	r0, #121	; 0x79
 8001ca4:	e0de      	b.n	8001e64 <SIGFOX_INT_process_uplink+0x262>
 8001ca6:	0201      	lsls	r1, r0, #8
 8001ca8:	2077      	movs	r0, #119	; 0x77
 8001caa:	e0db      	b.n	8001e64 <SIGFOX_INT_process_uplink+0x262>
 8001cac:	f003 fdf3 	bl	8005896 <MCU_API_timer_wait_for_end>
 8001cb0:	2800      	cmp	r0, #0
 8001cb2:	d0d0      	beq.n	8001c56 <SIGFOX_INT_process_uplink+0x54>
 8001cb4:	0201      	lsls	r1, r0, #8
 8001cb6:	2071      	movs	r0, #113	; 0x71
 8001cb8:	e0d4      	b.n	8001e64 <SIGFOX_INT_process_uplink+0x262>
 8001cba:	0201      	lsls	r1, r0, #8
 8001cbc:	2076      	movs	r0, #118	; 0x76
 8001cbe:	e0d1      	b.n	8001e64 <SIGFOX_INT_process_uplink+0x262>
 8001cc0:	4668      	mov	r0, sp
 8001cc2:	7800      	ldrb	r0, [r0, #0]
 8001cc4:	2801      	cmp	r0, #1
 8001cc6:	d103      	bne.n	8001cd0 <SIGFOX_INT_process_uplink+0xce>
 8001cc8:	f003 fdba 	bl	8005840 <MCU_API_timer_stop_carrier_sense>
 8001ccc:	2800      	cmp	r0, #0
 8001cce:	d13f      	bne.n	8001d50 <SIGFOX_INT_process_uplink+0x14e>
 8001cd0:	1c6d      	adds	r5, r5, #1
 8001cd2:	b2ed      	uxtb	r5, r5
 8001cd4:	68a1      	ldr	r1, [r4, #8]
 8001cd6:	428d      	cmp	r5, r1
 8001cd8:	d203      	bcs.n	8001ce2 <SIGFOX_INT_process_uplink+0xe0>
 8001cda:	4669      	mov	r1, sp
 8001cdc:	7809      	ldrb	r1, [r1, #0]
 8001cde:	2901      	cmp	r1, #1
 8001ce0:	d1bf      	bne.n	8001c62 <SIGFOX_INT_process_uplink+0x60>
 8001ce2:	6921      	ldr	r1, [r4, #16]
 8001ce4:	074a      	lsls	r2, r1, #29
 8001ce6:	0f52      	lsrs	r2, r2, #29
 8001ce8:	08c9      	lsrs	r1, r1, #3
 8001cea:	1948      	adds	r0, r1, r5
 8001cec:	00c0      	lsls	r0, r0, #3
 8001cee:	1810      	adds	r0, r2, r0
 8001cf0:	6120      	str	r0, [r4, #16]
 8001cf2:	205d      	movs	r0, #93	; 0x5d
 8001cf4:	5c20      	ldrb	r0, [r4, r0]
 8001cf6:	2802      	cmp	r0, #2
 8001cf8:	d104      	bne.n	8001d04 <SIGFOX_INT_process_uplink+0x102>
 8001cfa:	4668      	mov	r0, sp
 8001cfc:	7800      	ldrb	r0, [r0, #0]
 8001cfe:	2801      	cmp	r0, #1
 8001d00:	d000      	beq.n	8001d04 <SIGFOX_INT_process_uplink+0x102>
 8001d02:	e0b1      	b.n	8001e68 <SIGFOX_INT_process_uplink+0x266>
 8001d04:	2700      	movs	r7, #0
 8001d06:	4668      	mov	r0, sp
 8001d08:	7880      	ldrb	r0, [r0, #2]
 8001d0a:	9002      	str	r0, [sp, #8]
 8001d0c:	1c40      	adds	r0, r0, #1
 8001d0e:	9004      	str	r0, [sp, #16]
 8001d10:	2500      	movs	r5, #0
 8001d12:	0029      	movs	r1, r5
 8001d14:	0020      	movs	r0, r4
 8001d16:	f000 f981 	bl	800201c <SIGFOX_INT_compute_uplink_frequency>
 8001d1a:	0002      	movs	r2, r0
 8001d1c:	0029      	movs	r1, r5
 8001d1e:	0020      	movs	r0, r4
 8001d20:	f7ff ff10 	bl	8001b44 <SIGFOX_INT_send_single_frame>
 8001d24:	0001      	movs	r1, r0
 8001d26:	d000      	beq.n	8001d2a <SIGFOX_INT_process_uplink+0x128>
 8001d28:	e0a5      	b.n	8001e76 <SIGFOX_INT_process_uplink+0x274>
 8001d2a:	205d      	movs	r0, #93	; 0x5d
 8001d2c:	5c20      	ldrb	r0, [r4, r0]
 8001d2e:	2802      	cmp	r0, #2
 8001d30:	d102      	bne.n	8001d38 <SIGFOX_INT_process_uplink+0x136>
 8001d32:	6920      	ldr	r0, [r4, #16]
 8001d34:	1c40      	adds	r0, r0, #1
 8001d36:	6120      	str	r0, [r4, #16]
 8001d38:	2d00      	cmp	r5, #0
 8001d3a:	d12a      	bne.n	8001d92 <SIGFOX_INT_process_uplink+0x190>
 8001d3c:	205d      	movs	r0, #93	; 0x5d
 8001d3e:	5c20      	ldrb	r0, [r4, r0]
 8001d40:	4669      	mov	r1, sp
 8001d42:	7e09      	ldrb	r1, [r1, #24]
 8001d44:	2901      	cmp	r1, #1
 8001d46:	d10e      	bne.n	8001d66 <SIGFOX_INT_process_uplink+0x164>
 8001d48:	2802      	cmp	r0, #2
 8001d4a:	d104      	bne.n	8001d56 <SIGFOX_INT_process_uplink+0x154>
 8001d4c:	2013      	movs	r0, #19
 8001d4e:	e003      	b.n	8001d58 <SIGFOX_INT_process_uplink+0x156>
 8001d50:	0201      	lsls	r1, r0, #8
 8001d52:	2078      	movs	r0, #120	; 0x78
 8001d54:	e086      	b.n	8001e64 <SIGFOX_INT_process_uplink+0x262>
 8001d56:	2014      	movs	r0, #20
 8001d58:	f003 fd18 	bl	800578c <MCU_API_timer_start>
 8001d5c:	2800      	cmp	r0, #0
 8001d5e:	d018      	beq.n	8001d92 <SIGFOX_INT_process_uplink+0x190>
 8001d60:	0201      	lsls	r1, r0, #8
 8001d62:	2075      	movs	r0, #117	; 0x75
 8001d64:	e07e      	b.n	8001e64 <SIGFOX_INT_process_uplink+0x262>
 8001d66:	2801      	cmp	r0, #1
 8001d68:	d113      	bne.n	8001d92 <SIGFOX_INT_process_uplink+0x190>
 8001d6a:	2032      	movs	r0, #50	; 0x32
 8001d6c:	5c20      	ldrb	r0, [r4, r0]
 8001d6e:	2801      	cmp	r0, #1
 8001d70:	d10f      	bne.n	8001d92 <SIGFOX_INT_process_uplink+0x190>
 8001d72:	8ee0      	ldrh	r0, [r4, #54]	; 0x36
 8001d74:	9904      	ldr	r1, [sp, #16]
 8001d76:	f000 fc25 	bl	80025c4 <__divsi3>
 8001d7a:	0001      	movs	r1, r0
 8001d7c:	2014      	movs	r0, #20
 8001d7e:	f000 fb97 	bl	80024b0 <__udivsi3>
 8001d82:	b280      	uxth	r0, r0
 8001d84:	2800      	cmp	r0, #0
 8001d86:	9001      	str	r0, [sp, #4]
 8001d88:	d003      	beq.n	8001d92 <SIGFOX_INT_process_uplink+0x190>
 8001d8a:	f003 fcff 	bl	800578c <MCU_API_timer_start>
 8001d8e:	2800      	cmp	r0, #0
 8001d90:	d133      	bne.n	8001dfa <SIGFOX_INT_process_uplink+0x1f8>
 8001d92:	205d      	movs	r0, #93	; 0x5d
 8001d94:	5c20      	ldrb	r0, [r4, r0]
 8001d96:	2802      	cmp	r0, #2
 8001d98:	d10a      	bne.n	8001db0 <SIGFOX_INT_process_uplink+0x1ae>
 8001d9a:	9802      	ldr	r0, [sp, #8]
 8001d9c:	4285      	cmp	r5, r0
 8001d9e:	da07      	bge.n	8001db0 <SIGFOX_INT_process_uplink+0x1ae>
 8001da0:	2d00      	cmp	r5, #0
 8001da2:	d105      	bne.n	8001db0 <SIGFOX_INT_process_uplink+0x1ae>
 8001da4:	20fa      	movs	r0, #250	; 0xfa
 8001da6:	0140      	lsls	r0, r0, #5
 8001da8:	f003 fc80 	bl	80056ac <MCU_API_timer_start_carrier_sense>
 8001dac:	2800      	cmp	r0, #0
 8001dae:	d127      	bne.n	8001e00 <SIGFOX_INT_process_uplink+0x1fe>
 8001db0:	4668      	mov	r0, sp
 8001db2:	7840      	ldrb	r0, [r0, #1]
 8001db4:	f006 fa9c 	bl	80082f0 <MCU_API_delay>
 8001db8:	2800      	cmp	r0, #0
 8001dba:	d124      	bne.n	8001e06 <SIGFOX_INT_process_uplink+0x204>
 8001dbc:	1c6e      	adds	r6, r5, #1
 8001dbe:	205d      	movs	r0, #93	; 0x5d
 8001dc0:	5c20      	ldrb	r0, [r4, r0]
 8001dc2:	2802      	cmp	r0, #2
 8001dc4:	d130      	bne.n	8001e28 <SIGFOX_INT_process_uplink+0x226>
 8001dc6:	9802      	ldr	r0, [sp, #8]
 8001dc8:	4285      	cmp	r5, r0
 8001dca:	da2d      	bge.n	8001e28 <SIGFOX_INT_process_uplink+0x226>
 8001dcc:	b2f1      	uxtb	r1, r6
 8001dce:	0020      	movs	r0, r4
 8001dd0:	f7ff fb50 	bl	8001474 <SIGFOX_INT_compute_carrier_sense_frequency>
 8001dd4:	466b      	mov	r3, sp
 8001dd6:	0002      	movs	r2, r0
 8001dd8:	2031      	movs	r0, #49	; 0x31
 8001dda:	5c21      	ldrb	r1, [r4, r0]
 8001ddc:	0020      	movs	r0, r4
 8001dde:	f7ff fef0 	bl	8001bc2 <SIGFOX_INT_execute_carrier_sense>
 8001de2:	2800      	cmp	r0, #0
 8001de4:	d112      	bne.n	8001e0c <SIGFOX_INT_process_uplink+0x20a>
 8001de6:	4668      	mov	r0, sp
 8001de8:	7800      	ldrb	r0, [r0, #0]
 8001dea:	2800      	cmp	r0, #0
 8001dec:	d114      	bne.n	8001e18 <SIGFOX_INT_process_uplink+0x216>
 8001dee:	f003 fd27 	bl	8005840 <MCU_API_timer_stop_carrier_sense>
 8001df2:	2800      	cmp	r0, #0
 8001df4:	d10d      	bne.n	8001e12 <SIGFOX_INT_process_uplink+0x210>
 8001df6:	2701      	movs	r7, #1
 8001df8:	e016      	b.n	8001e28 <SIGFOX_INT_process_uplink+0x226>
 8001dfa:	0201      	lsls	r1, r0, #8
 8001dfc:	2072      	movs	r0, #114	; 0x72
 8001dfe:	e031      	b.n	8001e64 <SIGFOX_INT_process_uplink+0x262>
 8001e00:	0201      	lsls	r1, r0, #8
 8001e02:	207b      	movs	r0, #123	; 0x7b
 8001e04:	e02e      	b.n	8001e64 <SIGFOX_INT_process_uplink+0x262>
 8001e06:	0201      	lsls	r1, r0, #8
 8001e08:	2074      	movs	r0, #116	; 0x74
 8001e0a:	e02b      	b.n	8001e64 <SIGFOX_INT_process_uplink+0x262>
 8001e0c:	0201      	lsls	r1, r0, #8
 8001e0e:	207a      	movs	r0, #122	; 0x7a
 8001e10:	e028      	b.n	8001e64 <SIGFOX_INT_process_uplink+0x262>
 8001e12:	0201      	lsls	r1, r0, #8
 8001e14:	207c      	movs	r0, #124	; 0x7c
 8001e16:	e025      	b.n	8001e64 <SIGFOX_INT_process_uplink+0x262>
 8001e18:	9802      	ldr	r0, [sp, #8]
 8001e1a:	1e40      	subs	r0, r0, #1
 8001e1c:	4285      	cmp	r5, r0
 8001e1e:	d103      	bne.n	8001e28 <SIGFOX_INT_process_uplink+0x226>
 8001e20:	f003 fd0e 	bl	8005840 <MCU_API_timer_stop_carrier_sense>
 8001e24:	2800      	cmp	r0, #0
 8001e26:	d11b      	bne.n	8001e60 <SIGFOX_INT_process_uplink+0x25e>
 8001e28:	b2f5      	uxtb	r5, r6
 8001e2a:	9804      	ldr	r0, [sp, #16]
 8001e2c:	4285      	cmp	r5, r0
 8001e2e:	da02      	bge.n	8001e36 <SIGFOX_INT_process_uplink+0x234>
 8001e30:	0038      	movs	r0, r7
 8001e32:	d100      	bne.n	8001e36 <SIGFOX_INT_process_uplink+0x234>
 8001e34:	e76d      	b.n	8001d12 <SIGFOX_INT_process_uplink+0x110>
 8001e36:	205d      	movs	r0, #93	; 0x5d
 8001e38:	5c20      	ldrb	r0, [r4, r0]
 8001e3a:	2801      	cmp	r0, #1
 8001e3c:	d11a      	bne.n	8001e74 <SIGFOX_INT_process_uplink+0x272>
 8001e3e:	2032      	movs	r0, #50	; 0x32
 8001e40:	5c20      	ldrb	r0, [r4, r0]
 8001e42:	2801      	cmp	r0, #1
 8001e44:	d116      	bne.n	8001e74 <SIGFOX_INT_process_uplink+0x272>
 8001e46:	9801      	ldr	r0, [sp, #4]
 8001e48:	0400      	lsls	r0, r0, #16
 8001e4a:	d013      	beq.n	8001e74 <SIGFOX_INT_process_uplink+0x272>
 8001e4c:	9803      	ldr	r0, [sp, #12]
 8001e4e:	2800      	cmp	r0, #0
 8001e50:	d110      	bne.n	8001e74 <SIGFOX_INT_process_uplink+0x272>
 8001e52:	f003 fd20 	bl	8005896 <MCU_API_timer_wait_for_end>
 8001e56:	2800      	cmp	r0, #0
 8001e58:	d00c      	beq.n	8001e74 <SIGFOX_INT_process_uplink+0x272>
 8001e5a:	0201      	lsls	r1, r0, #8
 8001e5c:	2073      	movs	r0, #115	; 0x73
 8001e5e:	e001      	b.n	8001e64 <SIGFOX_INT_process_uplink+0x262>
 8001e60:	0201      	lsls	r1, r0, #8
 8001e62:	207d      	movs	r0, #125	; 0x7d
 8001e64:	4308      	orrs	r0, r1
 8001e66:	e006      	b.n	8001e76 <SIGFOX_INT_process_uplink+0x274>
 8001e68:	4668      	mov	r0, sp
 8001e6a:	7800      	ldrb	r0, [r0, #0]
 8001e6c:	2800      	cmp	r0, #0
 8001e6e:	d101      	bne.n	8001e74 <SIGFOX_INT_process_uplink+0x272>
 8001e70:	207e      	movs	r0, #126	; 0x7e
 8001e72:	e000      	b.n	8001e76 <SIGFOX_INT_process_uplink+0x274>
 8001e74:	2000      	movs	r0, #0
 8001e76:	b007      	add	sp, #28
 8001e78:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001e7a <SIGFOX_INT_process_downlink>:
 8001e7a:	b570      	push	{r4, r5, r6, lr}
 8001e7c:	0004      	movs	r4, r0
 8001e7e:	000d      	movs	r5, r1
 8001e80:	0016      	movs	r6, r2
 8001e82:	2e01      	cmp	r6, #1
 8001e84:	d107      	bne.n	8001e96 <SIGFOX_INT_process_downlink+0x1c>
 8001e86:	f003 fd06 	bl	8005896 <MCU_API_timer_wait_for_end>
 8001e8a:	2800      	cmp	r0, #0
 8001e8c:	d003      	beq.n	8001e96 <SIGFOX_INT_process_downlink+0x1c>
 8001e8e:	0201      	lsls	r1, r0, #8
 8001e90:	2098      	movs	r0, #152	; 0x98
 8001e92:	4308      	orrs	r0, r1
 8001e94:	bd70      	pop	{r4, r5, r6, pc}
 8001e96:	6962      	ldr	r2, [r4, #20]
 8001e98:	205d      	movs	r0, #93	; 0x5d
 8001e9a:	5c20      	ldrb	r0, [r4, r0]
 8001e9c:	2802      	cmp	r0, #2
 8001e9e:	d101      	bne.n	8001ea4 <SIGFOX_INT_process_downlink+0x2a>
 8001ea0:	2122      	movs	r1, #34	; 0x22
 8001ea2:	e000      	b.n	8001ea6 <SIGFOX_INT_process_downlink+0x2c>
 8001ea4:	2119      	movs	r1, #25
 8001ea6:	0033      	movs	r3, r6
 8001ea8:	2001      	movs	r0, #1
 8001eaa:	f000 f80b 	bl	8001ec4 <SIGFOX_INT_downlink_configuration>
 8001eae:	0001      	movs	r1, r0
 8001eb0:	d107      	bne.n	8001ec2 <SIGFOX_INT_process_downlink+0x48>
 8001eb2:	002a      	movs	r2, r5
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	0020      	movs	r0, r4
 8001eb8:	f000 f821 	bl	8001efe <SIGFOX_INT_get_received_frames>
 8001ebc:	0001      	movs	r1, r0
 8001ebe:	d100      	bne.n	8001ec2 <SIGFOX_INT_process_downlink+0x48>
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	bd70      	pop	{r4, r5, r6, pc}

08001ec4 <SIGFOX_INT_downlink_configuration>:
 8001ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001ec6:	000f      	movs	r7, r1
 8001ec8:	0014      	movs	r4, r2
 8001eca:	2001      	movs	r0, #1
 8001ecc:	f006 fda2 	bl	8008a14 <RF_API_init>
 8001ed0:	26e0      	movs	r6, #224	; 0xe0
 8001ed2:	2800      	cmp	r0, #0
 8001ed4:	d001      	beq.n	8001eda <SIGFOX_INT_downlink_configuration+0x16>
 8001ed6:	0200      	lsls	r0, r0, #8
 8001ed8:	e00c      	b.n	8001ef4 <SIGFOX_INT_downlink_configuration+0x30>
 8001eda:	0020      	movs	r0, r4
 8001edc:	f006 ff96 	bl	8008e0c <RF_API_change_frequency>
 8001ee0:	0005      	movs	r5, r0
 8001ee2:	d104      	bne.n	8001eee <SIGFOX_INT_downlink_configuration+0x2a>
 8001ee4:	0038      	movs	r0, r7
 8001ee6:	f003 fc51 	bl	800578c <MCU_API_timer_start>
 8001eea:	0005      	movs	r5, r0
 8001eec:	d005      	beq.n	8001efa <SIGFOX_INT_downlink_configuration+0x36>
 8001eee:	f007 f8f3 	bl	80090d8 <RF_API_stop>
 8001ef2:	0228      	lsls	r0, r5, #8
 8001ef4:	4306      	orrs	r6, r0
 8001ef6:	0030      	movs	r0, r6
 8001ef8:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8001efa:	2000      	movs	r0, #0
 8001efc:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

08001efe <SIGFOX_INT_get_received_frames>:
 8001efe:	b5f3      	push	{r0, r1, r4, r5, r6, r7, lr}
 8001f00:	b091      	sub	sp, #68	; 0x44
 8001f02:	0017      	movs	r7, r2
 8001f04:	2400      	movs	r4, #0
 8001f06:	9406      	str	r4, [sp, #24]
 8001f08:	2600      	movs	r6, #0
 8001f0a:	9405      	str	r4, [sp, #20]
 8001f0c:	2500      	movs	r5, #0
 8001f0e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001f10:	3054      	adds	r0, #84	; 0x54
 8001f12:	9008      	str	r0, [sp, #32]
 8001f14:	aa04      	add	r2, sp, #16
 8001f16:	9911      	ldr	r1, [sp, #68]	; 0x44
 8001f18:	316a      	adds	r1, #106	; 0x6a
 8001f1a:	a809      	add	r0, sp, #36	; 0x24
 8001f1c:	f007 f908 	bl	8009130 <RF_API_wait_frame>
 8001f20:	9007      	str	r0, [sp, #28]
 8001f22:	4668      	mov	r0, sp
 8001f24:	7c00      	ldrb	r0, [r0, #16]
 8001f26:	2801      	cmp	r0, #1
 8001f28:	d14b      	bne.n	8001fc2 <SIGFOX_INT_get_received_frames+0xc4>
 8001f2a:	a812      	add	r0, sp, #72	; 0x48
 8001f2c:	7800      	ldrb	r0, [r0, #0]
 8001f2e:	2801      	cmp	r0, #1
 8001f30:	d131      	bne.n	8001f96 <SIGFOX_INT_get_received_frames+0x98>
 8001f32:	ab04      	add	r3, sp, #16
 8001f34:	1c5b      	adds	r3, r3, #1
 8001f36:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001f38:	2154      	movs	r1, #84	; 0x54
 8001f3a:	5a42      	ldrh	r2, [r0, r1]
 8001f3c:	4601      	mov	r1, r0
 8001f3e:	316c      	adds	r1, #108	; 0x6c
 8001f40:	a809      	add	r0, sp, #36	; 0x24
 8001f42:	f000 f97b 	bl	800223c <SIGFOX_DECODE_decode_frame>
 8001f46:	9006      	str	r0, [sp, #24]
 8001f48:	2800      	cmp	r0, #0
 8001f4a:	d13a      	bne.n	8001fc2 <SIGFOX_INT_get_received_frames+0xc4>
 8001f4c:	4668      	mov	r0, sp
 8001f4e:	7c40      	ldrb	r0, [r0, #17]
 8001f50:	2801      	cmp	r0, #1
 8001f52:	d133      	bne.n	8001fbc <SIGFOX_INT_get_received_frames+0xbe>
 8001f54:	9808      	ldr	r0, [sp, #32]
 8001f56:	78c0      	ldrb	r0, [r0, #3]
 8001f58:	2801      	cmp	r0, #1
 8001f5a:	d113      	bne.n	8001f84 <SIGFOX_INT_get_received_frames+0x86>
 8001f5c:	9403      	str	r4, [sp, #12]
 8001f5e:	a80d      	add	r0, sp, #52	; 0x34
 8001f60:	9002      	str	r0, [sp, #8]
 8001f62:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001f64:	306c      	adds	r0, #108	; 0x6c
 8001f66:	9001      	str	r0, [sp, #4]
 8001f68:	9808      	ldr	r0, [sp, #32]
 8001f6a:	7980      	ldrb	r0, [r0, #6]
 8001f6c:	9000      	str	r0, [sp, #0]
 8001f6e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001f70:	2154      	movs	r1, #84	; 0x54
 8001f72:	5a43      	ldrh	r3, [r0, r1]
 8001f74:	2208      	movs	r2, #8
 8001f76:	a809      	add	r0, sp, #36	; 0x24
 8001f78:	1d01      	adds	r1, r0, #4
 8001f7a:	0038      	movs	r0, r7
 8001f7c:	f7ff fbc2 	bl	8001704 <SIGFOX_INT_encrypt_decrypt_frame>
 8001f80:	0005      	movs	r5, r0
 8001f82:	e01e      	b.n	8001fc2 <SIGFOX_INT_get_received_frames+0xc4>
 8001f84:	2100      	movs	r1, #0
 8001f86:	a809      	add	r0, sp, #36	; 0x24
 8001f88:	1d00      	adds	r0, r0, #4
 8001f8a:	5c40      	ldrb	r0, [r0, r1]
 8001f8c:	5478      	strb	r0, [r7, r1]
 8001f8e:	1c49      	adds	r1, r1, #1
 8001f90:	2908      	cmp	r1, #8
 8001f92:	da16      	bge.n	8001fc2 <SIGFOX_INT_get_received_frames+0xc4>
 8001f94:	e7f7      	b.n	8001f86 <SIGFOX_INT_get_received_frames+0x88>
 8001f96:	2001      	movs	r0, #1
 8001f98:	2100      	movs	r1, #0
 8001f9a:	5c7a      	ldrb	r2, [r7, r1]
 8001f9c:	ab09      	add	r3, sp, #36	; 0x24
 8001f9e:	5c5b      	ldrb	r3, [r3, r1]
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d000      	beq.n	8001fa6 <SIGFOX_INT_get_received_frames+0xa8>
 8001fa4:	2000      	movs	r0, #0
 8001fa6:	1c49      	adds	r1, r1, #1
 8001fa8:	290f      	cmp	r1, #15
 8001faa:	dbf6      	blt.n	8001f9a <SIGFOX_INT_get_received_frames+0x9c>
 8001fac:	9908      	ldr	r1, [sp, #32]
 8001fae:	2216      	movs	r2, #22
 8001fb0:	5e89      	ldrsh	r1, [r1, r2]
 8001fb2:	f006 f9c1 	bl	8008338 <MCU_API_report_test_result>
 8001fb6:	9005      	str	r0, [sp, #20]
 8001fb8:	2800      	cmp	r0, #0
 8001fba:	d102      	bne.n	8001fc2 <SIGFOX_INT_get_received_frames+0xc4>
 8001fbc:	9807      	ldr	r0, [sp, #28]
 8001fbe:	2800      	cmp	r0, #0
 8001fc0:	d0a8      	beq.n	8001f14 <SIGFOX_INT_get_received_frames+0x16>
 8001fc2:	f007 f889 	bl	80090d8 <RF_API_stop>
 8001fc6:	0004      	movs	r4, r0
 8001fc8:	4668      	mov	r0, sp
 8001fca:	7c00      	ldrb	r0, [r0, #16]
 8001fcc:	2800      	cmp	r0, #0
 8001fce:	d002      	beq.n	8001fd6 <SIGFOX_INT_get_received_frames+0xd8>
 8001fd0:	f003 fc28 	bl	8005824 <MCU_API_timer_stop>
 8001fd4:	0006      	movs	r6, r0
 8001fd6:	209a      	movs	r0, #154	; 0x9a
 8001fd8:	9906      	ldr	r1, [sp, #24]
 8001fda:	2900      	cmp	r1, #0
 8001fdc:	d10d      	bne.n	8001ffa <SIGFOX_INT_get_received_frames+0xfc>
 8001fde:	9907      	ldr	r1, [sp, #28]
 8001fe0:	2900      	cmp	r1, #0
 8001fe2:	d10a      	bne.n	8001ffa <SIGFOX_INT_get_received_frames+0xfc>
 8001fe4:	2c00      	cmp	r4, #0
 8001fe6:	d001      	beq.n	8001fec <SIGFOX_INT_get_received_frames+0xee>
 8001fe8:	0221      	lsls	r1, r4, #8
 8001fea:	e00c      	b.n	8002006 <SIGFOX_INT_get_received_frames+0x108>
 8001fec:	0031      	movs	r1, r6
 8001fee:	d001      	beq.n	8001ff4 <SIGFOX_INT_get_received_frames+0xf6>
 8001ff0:	0231      	lsls	r1, r6, #8
 8001ff2:	e008      	b.n	8002006 <SIGFOX_INT_get_received_frames+0x108>
 8001ff4:	9905      	ldr	r1, [sp, #20]
 8001ff6:	2900      	cmp	r1, #0
 8001ff8:	d002      	beq.n	8002000 <SIGFOX_INT_get_received_frames+0x102>
 8001ffa:	0609      	lsls	r1, r1, #24
 8001ffc:	0c09      	lsrs	r1, r1, #16
 8001ffe:	e002      	b.n	8002006 <SIGFOX_INT_get_received_frames+0x108>
 8002000:	0029      	movs	r1, r5
 8002002:	d002      	beq.n	800200a <SIGFOX_INT_get_received_frames+0x10c>
 8002004:	0229      	lsls	r1, r5, #8
 8002006:	4308      	orrs	r0, r1
 8002008:	e006      	b.n	8002018 <SIGFOX_INT_get_received_frames+0x11a>
 800200a:	4668      	mov	r0, sp
 800200c:	7c00      	ldrb	r0, [r0, #16]
 800200e:	2800      	cmp	r0, #0
 8002010:	d101      	bne.n	8002016 <SIGFOX_INT_get_received_frames+0x118>
 8002012:	209b      	movs	r0, #155	; 0x9b
 8002014:	e000      	b.n	8002018 <SIGFOX_INT_get_received_frames+0x11a>
 8002016:	2000      	movs	r0, #0
 8002018:	b013      	add	sp, #76	; 0x4c
 800201a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800201c <SIGFOX_INT_compute_uplink_frequency>:
 800201c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800201e:	0004      	movs	r4, r0
 8002020:	000d      	movs	r5, r1
 8002022:	2000      	movs	r0, #0
 8002024:	2100      	movs	r1, #0
 8002026:	006a      	lsls	r2, r5, #1
 8002028:	18a2      	adds	r2, r4, r2
 800202a:	9200      	str	r2, [sp, #0]
 800202c:	225d      	movs	r2, #93	; 0x5d
 800202e:	5ca2      	ldrb	r2, [r4, r2]
 8002030:	0026      	movs	r6, r4
 8002032:	3660      	adds	r6, #96	; 0x60
 8002034:	2a04      	cmp	r2, #4
 8002036:	d001      	beq.n	800203c <SIGFOX_INT_compute_uplink_frequency+0x20>
 8002038:	2a02      	cmp	r2, #2
 800203a:	d108      	bne.n	800204e <SIGFOX_INT_compute_uplink_frequency+0x32>
 800203c:	9800      	ldr	r0, [sp, #0]
 800203e:	8b01      	ldrh	r1, [r0, #24]
 8002040:	88b0      	ldrh	r0, [r6, #4]
 8002042:	4341      	muls	r1, r0
 8002044:	6820      	ldr	r0, [r4, #0]
 8002046:	1840      	adds	r0, r0, r1
 8002048:	6e23      	ldr	r3, [r4, #96]	; 0x60
 800204a:	085b      	lsrs	r3, r3, #1
 800204c:	1ac0      	subs	r0, r0, r3
 800204e:	2a01      	cmp	r2, #1
 8002050:	d11f      	bne.n	8002092 <SIGFOX_INT_compute_uplink_frequency+0x76>
 8002052:	9800      	ldr	r0, [sp, #0]
 8002054:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8002056:	1f81      	subs	r1, r0, #6
 8002058:	b289      	uxth	r1, r1
 800205a:	0020      	movs	r0, r4
 800205c:	f7ff f909 	bl	8001272 <SIGFOX_INT_get_macro_channel_index>
 8002060:	0007      	movs	r7, r0
 8002062:	8936      	ldrh	r6, [r6, #8]
 8002064:	9800      	ldr	r0, [sp, #0]
 8002066:	8f00      	ldrh	r0, [r0, #56]	; 0x38
 8002068:	1e40      	subs	r0, r0, #1
 800206a:	2106      	movs	r1, #6
 800206c:	f000 faa6 	bl	80025bc <__aeabi_uidivmod>
 8002070:	480c      	ldr	r0, [pc, #48]	; (80020a4 <.text_31>)
 8002072:	4341      	muls	r1, r0
 8002074:	1870      	adds	r0, r6, r1
 8002076:	9900      	ldr	r1, [sp, #0]
 8002078:	8b09      	ldrh	r1, [r1, #24]
 800207a:	2296      	movs	r2, #150	; 0x96
 800207c:	0092      	lsls	r2, r2, #2
 800207e:	434a      	muls	r2, r1
 8002080:	1881      	adds	r1, r0, r2
 8002082:	6820      	ldr	r0, [r4, #0]
 8002084:	1840      	adds	r0, r0, r1
 8002086:	4a08      	ldr	r2, [pc, #32]	; (80020a8 <.text_32>)
 8002088:	4357      	muls	r7, r2
 800208a:	19c0      	adds	r0, r0, r7
 800208c:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800208e:	0852      	lsrs	r2, r2, #1
 8002090:	1a80      	subs	r0, r0, r2
 8002092:	2d00      	cmp	r5, #0
 8002094:	d105      	bne.n	80020a2 <SIGFOX_INT_compute_uplink_frequency+0x86>
 8002096:	6862      	ldr	r2, [r4, #4]
 8002098:	1851      	adds	r1, r2, r1
 800209a:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800209c:	0852      	lsrs	r2, r2, #1
 800209e:	1a89      	subs	r1, r1, r2
 80020a0:	6161      	str	r1, [r4, #20]
 80020a2:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}

080020a4 <.text_31>:
 80020a4:	000061a8 	.word	0x000061a8

080020a8 <.text_32>:
 80020a8:	000493e0 	.word	0x000493e0

080020ac <SIGFOX_INT_compute_downlink_frequency>:
 80020ac:	6940      	ldr	r0, [r0, #20]
 80020ae:	4770      	bx	lr

080020b0 <SIGFOX_INT_get_device_id_and_payload_encryption_flag>:
 80020b0:	b510      	push	{r4, lr}
 80020b2:	000c      	movs	r4, r1
 80020b4:	f006 f8ec 	bl	8008290 <MCU_API_get_device_id_and_payload_encryption_flag>
 80020b8:	2800      	cmp	r0, #0
 80020ba:	d003      	beq.n	80020c4 <SIGFOX_INT_get_device_id_and_payload_encryption_flag+0x14>
 80020bc:	0201      	lsls	r1, r0, #8
 80020be:	2099      	movs	r0, #153	; 0x99
 80020c0:	4308      	orrs	r0, r1
 80020c2:	bd10      	pop	{r4, pc}
 80020c4:	7820      	ldrb	r0, [r4, #0]
 80020c6:	2801      	cmp	r0, #1
 80020c8:	d001      	beq.n	80020ce <SIGFOX_INT_get_device_id_and_payload_encryption_flag+0x1e>
 80020ca:	2000      	movs	r0, #0
 80020cc:	7020      	strb	r0, [r4, #0]
 80020ce:	2000      	movs	r0, #0
 80020d0:	bd10      	pop	{r4, pc}
	...

080020d4 <SIGFOX_PN_next_pn>:
 80020d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80020d6:	0005      	movs	r5, r0
 80020d8:	000c      	movs	r4, r1
 80020da:	0016      	movs	r6, r2
 80020dc:	2b01      	cmp	r3, #1
 80020de:	d103      	bne.n	80020e8 <SIGFOX_PN_next_pn+0x14>
 80020e0:	2008      	movs	r0, #8
 80020e2:	4914      	ldr	r1, [pc, #80]	; (8002134 <SIGFOX_PN_next_pn+0x60>)
 80020e4:	220a      	movs	r2, #10
 80020e6:	e002      	b.n	80020ee <SIGFOX_PN_next_pn+0x1a>
 80020e8:	2005      	movs	r0, #5
 80020ea:	217f      	movs	r1, #127	; 0x7f
 80020ec:	2206      	movs	r2, #6
 80020ee:	002b      	movs	r3, r5
 80020f0:	466d      	mov	r5, sp
 80020f2:	806c      	strh	r4, [r5, #2]
 80020f4:	466c      	mov	r4, sp
 80020f6:	8026      	strh	r6, [r4, #0]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d100      	bne.n	80020fe <SIGFOX_PN_next_pn+0x2a>
 80020fc:	000b      	movs	r3, r1
 80020fe:	001e      	movs	r6, r3
 8002100:	4116      	asrs	r6, r2
 8002102:	2501      	movs	r5, #1
 8002104:	4035      	ands	r5, r6
 8002106:	001f      	movs	r7, r3
 8002108:	4107      	asrs	r7, r0
 800210a:	2601      	movs	r6, #1
 800210c:	403e      	ands	r6, r7
 800210e:	045b      	lsls	r3, r3, #17
 8002110:	0c1b      	lsrs	r3, r3, #16
 8002112:	406e      	eors	r6, r5
 8002114:	d002      	beq.n	800211c <SIGFOX_PN_next_pn+0x48>
 8002116:	001d      	movs	r5, r3
 8002118:	2301      	movs	r3, #1
 800211a:	432b      	orrs	r3, r5
 800211c:	400b      	ands	r3, r1
 800211e:	466c      	mov	r4, sp
 8002120:	8824      	ldrh	r4, [r4, #0]
 8002122:	429c      	cmp	r4, r3
 8002124:	dbe8      	blt.n	80020f8 <SIGFOX_PN_next_pn+0x24>
 8002126:	466c      	mov	r4, sp
 8002128:	8864      	ldrh	r4, [r4, #2]
 800212a:	42a3      	cmp	r3, r4
 800212c:	dbe4      	blt.n	80020f8 <SIGFOX_PN_next_pn+0x24>
 800212e:	0018      	movs	r0, r3
 8002130:	bdf2      	pop	{r1, r4, r5, r6, r7, pc}
 8002132:	bf00      	nop
 8002134:	000007ff 	.word	0x000007ff

08002138 <SIGFOX_SCRAMB_compute>:
 8002138:	b5f6      	push	{r1, r2, r4, r5, r6, r7, lr}
 800213a:	b083      	sub	sp, #12
 800213c:	0006      	movs	r6, r0
 800213e:	001f      	movs	r7, r3
 8002140:	2400      	movs	r4, #0
 8002142:	2a00      	cmp	r2, #0
 8002144:	d003      	beq.n	800214e <SIGFOX_SCRAMB_compute+0x16>
 8002146:	4611      	mov	r1, r2
 8002148:	9803      	ldr	r0, [sp, #12]
 800214a:	f007 f9cb 	bl	80094e4 <__aeabi_memclr>
 800214e:	0033      	movs	r3, r6
 8002150:	2200      	movs	r2, #0
 8002152:	e02a      	b.n	80021aa <SIGFOX_SCRAMB_compute+0x72>
 8002154:	001e      	movs	r6, r3
 8002156:	4366      	muls	r6, r4
 8002158:	432e      	orrs	r6, r5
 800215a:	9c00      	ldr	r4, [sp, #0]
 800215c:	7026      	strb	r6, [r4, #0]
 800215e:	bf00      	nop
 8002160:	a415      	add	r4, pc, #84	; (adr r4, 80021b8 <lut_in>)
 8002162:	5c61      	ldrb	r1, [r4, r1]
 8002164:	e01c      	b.n	80021a0 <SIGFOX_SCRAMB_compute+0x68>
 8002166:	9903      	ldr	r1, [sp, #12]
 8002168:	1889      	adds	r1, r1, r2
 800216a:	9100      	str	r1, [sp, #0]
 800216c:	9301      	str	r3, [sp, #4]
 800216e:	0021      	movs	r1, r4
 8002170:	2380      	movs	r3, #128	; 0x80
 8002172:	bf00      	nop
 8002174:	a411      	add	r4, pc, #68	; (adr r4, 80021bc <lut_in_out>)
 8002176:	00bd      	lsls	r5, r7, #2
 8002178:	1964      	adds	r4, r4, r5
 800217a:	5c64      	ldrb	r4, [r4, r1]
 800217c:	9d00      	ldr	r5, [sp, #0]
 800217e:	782d      	ldrb	r5, [r5, #0]
 8002180:	9e01      	ldr	r6, [sp, #4]
 8002182:	5cb6      	ldrb	r6, [r6, r2]
 8002184:	421e      	tst	r6, r3
 8002186:	d0e5      	beq.n	8002154 <SIGFOX_SCRAMB_compute+0x1c>
 8002188:	1e64      	subs	r4, r4, #1
 800218a:	41a4      	sbcs	r4, r4
 800218c:	0fe4      	lsrs	r4, r4, #31
 800218e:	001e      	movs	r6, r3
 8002190:	4366      	muls	r6, r4
 8002192:	432e      	orrs	r6, r5
 8002194:	9c00      	ldr	r4, [sp, #0]
 8002196:	7026      	strb	r6, [r4, #0]
 8002198:	a407      	add	r4, pc, #28	; (adr r4, 80021b8 <lut_in>)
 800219a:	5c61      	ldrb	r1, [r4, r1]
 800219c:	1c89      	adds	r1, r1, #2
 800219e:	b2c9      	uxtb	r1, r1
 80021a0:	085b      	lsrs	r3, r3, #1
 80021a2:	d1e6      	bne.n	8002172 <SIGFOX_SCRAMB_compute+0x3a>
 80021a4:	9b01      	ldr	r3, [sp, #4]
 80021a6:	000c      	movs	r4, r1
 80021a8:	1c52      	adds	r2, r2, #1
 80021aa:	4669      	mov	r1, sp
 80021ac:	7c09      	ldrb	r1, [r1, #16]
 80021ae:	428a      	cmp	r2, r1
 80021b0:	dbd9      	blt.n	8002166 <SIGFOX_SCRAMB_compute+0x2e>
 80021b2:	b005      	add	sp, #20
 80021b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080021b8 <lut_in>:
 80021b8:	0000 0101                                   ....

080021bc <lut_in_out>:
 80021bc:	0000 0000 0100 0001 0100 0100               ............

080021c8 <SIGFOX_CRC_crc16>:
 80021c8:	b530      	push	{r4, r5, lr}
 80021ca:	0002      	movs	r2, r0
 80021cc:	2300      	movs	r3, #0
 80021ce:	2000      	movs	r0, #0
 80021d0:	e010      	b.n	80021f4 <SIGFOX_CRC_crc16+0x2c>
 80021d2:	b2a0      	uxth	r0, r4
 80021d4:	e00b      	b.n	80021ee <SIGFOX_CRC_crc16+0x26>
 80021d6:	0004      	movs	r4, r0
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	5cd0      	ldrb	r0, [r2, r3]
 80021dc:	0200      	lsls	r0, r0, #8
 80021de:	4060      	eors	r0, r4
 80021e0:	2508      	movs	r5, #8
 80021e2:	0044      	lsls	r4, r0, #1
 80021e4:	0400      	lsls	r0, r0, #16
 80021e6:	d5f4      	bpl.n	80021d2 <SIGFOX_CRC_crc16+0xa>
 80021e8:	4806      	ldr	r0, [pc, #24]	; (8002204 <.text_3>)
 80021ea:	4060      	eors	r0, r4
 80021ec:	b280      	uxth	r0, r0
 80021ee:	1e6d      	subs	r5, r5, #1
 80021f0:	d1f7      	bne.n	80021e2 <SIGFOX_CRC_crc16+0x1a>
 80021f2:	1c5b      	adds	r3, r3, #1
 80021f4:	b2dc      	uxtb	r4, r3
 80021f6:	428c      	cmp	r4, r1
 80021f8:	d3ed      	bcc.n	80021d6 <SIGFOX_CRC_crc16+0xe>
 80021fa:	4903      	ldr	r1, [pc, #12]	; (8002208 <.text_4>)
 80021fc:	4041      	eors	r1, r0
 80021fe:	0008      	movs	r0, r1
 8002200:	bd30      	pop	{r4, r5, pc}
	...

08002204 <.text_3>:
 8002204:	00001021 	.word	0x00001021

08002208 <.text_4>:
 8002208:	0000ffff 	.word	0x0000ffff

0800220c <SIGFOX_CRC_crc8>:
 800220c:	b530      	push	{r4, r5, lr}
 800220e:	0002      	movs	r2, r0
 8002210:	2300      	movs	r3, #0
 8002212:	2000      	movs	r0, #0
 8002214:	e00e      	b.n	8002234 <SIGFOX_CRC_crc8+0x28>
 8002216:	b2e0      	uxtb	r0, r4
 8002218:	e009      	b.n	800222e <SIGFOX_CRC_crc8+0x22>
 800221a:	b2db      	uxtb	r3, r3
 800221c:	5cd4      	ldrb	r4, [r2, r3]
 800221e:	4060      	eors	r0, r4
 8002220:	2508      	movs	r5, #8
 8002222:	0044      	lsls	r4, r0, #1
 8002224:	0600      	lsls	r0, r0, #24
 8002226:	d5f6      	bpl.n	8002216 <SIGFOX_CRC_crc8+0xa>
 8002228:	202f      	movs	r0, #47	; 0x2f
 800222a:	4060      	eors	r0, r4
 800222c:	b2c0      	uxtb	r0, r0
 800222e:	1e6d      	subs	r5, r5, #1
 8002230:	d1f7      	bne.n	8002222 <SIGFOX_CRC_crc8+0x16>
 8002232:	1c5b      	adds	r3, r3, #1
 8002234:	b2dc      	uxtb	r4, r3
 8002236:	428c      	cmp	r4, r1
 8002238:	d3ef      	bcc.n	800221a <SIGFOX_CRC_crc8+0xe>
 800223a:	bd30      	pop	{r4, r5, pc}

0800223c <SIGFOX_DECODE_decode_frame>:
 800223c:	b5fe      	push	{r1, r2, r3, r4, r5, r6, r7, lr}
 800223e:	b08a      	sub	sp, #40	; 0x28
 8002240:	0005      	movs	r5, r0
 8002242:	2000      	movs	r0, #0
 8002244:	7018      	strb	r0, [r3, #0]
 8002246:	4668      	mov	r0, sp
 8002248:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
 800224a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800224c:	0028      	movs	r0, r5
 800224e:	f000 f866 	bl	800231e <SIGFOX_DECODE_dewhitening>
 8002252:	2000      	movs	r0, #0
 8002254:	2401      	movs	r4, #1
 8002256:	2100      	movs	r1, #0
 8002258:	2200      	movs	r2, #0
 800225a:	bf00      	nop
 800225c:	a364      	add	r3, pc, #400	; (adr r3, 80023f0 <pow_alpha>)
 800225e:	5c9f      	ldrb	r7, [r3, r2]
 8002260:	5cab      	ldrb	r3, [r5, r2]
 8002262:	40c3      	lsrs	r3, r0
 8002264:	2601      	movs	r6, #1
 8002266:	401e      	ands	r6, r3
 8002268:	4377      	muls	r7, r6
 800226a:	404f      	eors	r7, r1
 800226c:	b2f9      	uxtb	r1, r7
 800226e:	1c52      	adds	r2, r2, #1
 8002270:	2a0e      	cmp	r2, #14
 8002272:	ddf2      	ble.n	800225a <SIGFOX_DECODE_decode_frame+0x1e>
 8002274:	a262      	add	r2, pc, #392	; (adr r2, 8002400 <log_alpha>)
 8002276:	5c51      	ldrb	r1, [r2, r1]
 8002278:	1869      	adds	r1, r5, r1
 800227a:	780a      	ldrb	r2, [r1, #0]
 800227c:	2301      	movs	r3, #1
 800227e:	4083      	lsls	r3, r0
 8002280:	4053      	eors	r3, r2
 8002282:	700b      	strb	r3, [r1, #0]
 8002284:	1c40      	adds	r0, r0, #1
 8002286:	2808      	cmp	r0, #8
 8002288:	dbe5      	blt.n	8002256 <SIGFOX_DECODE_decode_frame+0x1a>
 800228a:	210a      	movs	r1, #10
 800228c:	1d28      	adds	r0, r5, #4
 800228e:	f7ff ffbd 	bl	800220c <SIGFOX_CRC_crc8>
 8002292:	7ba9      	ldrb	r1, [r5, #14]
 8002294:	4281      	cmp	r1, r0
 8002296:	d13f      	bne.n	8002318 <SIGFOX_DECODE_decode_frame+0xdc>
 8002298:	ae01      	add	r6, sp, #4
 800229a:	980a      	ldr	r0, [sp, #40]	; 0x28
 800229c:	7800      	ldrb	r0, [r0, #0]
 800229e:	7030      	strb	r0, [r6, #0]
 80022a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80022a2:	7840      	ldrb	r0, [r0, #1]
 80022a4:	7070      	strb	r0, [r6, #1]
 80022a6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80022a8:	7880      	ldrb	r0, [r0, #2]
 80022aa:	70b0      	strb	r0, [r6, #2]
 80022ac:	980a      	ldr	r0, [sp, #40]	; 0x28
 80022ae:	78c0      	ldrb	r0, [r0, #3]
 80022b0:	70f0      	strb	r0, [r6, #3]
 80022b2:	4668      	mov	r0, sp
 80022b4:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
 80022b6:	7130      	strb	r0, [r6, #4]
 80022b8:	4668      	mov	r0, sp
 80022ba:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
 80022bc:	0a00      	lsrs	r0, r0, #8
 80022be:	7170      	strb	r0, [r6, #5]
 80022c0:	2000      	movs	r0, #0
 80022c2:	1d29      	adds	r1, r5, #4
 80022c4:	5c09      	ldrb	r1, [r1, r0]
 80022c6:	1832      	adds	r2, r6, r0
 80022c8:	7191      	strb	r1, [r2, #6]
 80022ca:	1c40      	adds	r0, r0, #1
 80022cc:	2808      	cmp	r0, #8
 80022ce:	dbf8      	blt.n	80022c2 <SIGFOX_DECODE_decode_frame+0x86>
 80022d0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80022d2:	7800      	ldrb	r0, [r0, #0]
 80022d4:	73b0      	strb	r0, [r6, #14]
 80022d6:	980a      	ldr	r0, [sp, #40]	; 0x28
 80022d8:	7840      	ldrb	r0, [r0, #1]
 80022da:	73f0      	strb	r0, [r6, #15]
 80022dc:	4838      	ldr	r0, [pc, #224]	; (80023c0 <.text_4>)
 80022de:	6800      	ldr	r0, [r0, #0]
 80022e0:	2156      	movs	r1, #86	; 0x56
 80022e2:	5c40      	ldrb	r0, [r0, r1]
 80022e4:	2801      	cmp	r0, #1
 80022e6:	d000      	beq.n	80022ea <SIGFOX_DECODE_decode_frame+0xae>
 80022e8:	2000      	movs	r0, #0
 80022ea:	9000      	str	r0, [sp, #0]
 80022ec:	4b35      	ldr	r3, [pc, #212]	; (80023c4 <.text_5>)
 80022ee:	2210      	movs	r2, #16
 80022f0:	a901      	add	r1, sp, #4
 80022f2:	a801      	add	r0, sp, #4
 80022f4:	f006 f810 	bl	8008318 <MCU_API_aes_128_cbc_encrypt>
 80022f8:	0001      	movs	r1, r0
 80022fa:	d10e      	bne.n	800231a <SIGFOX_DECODE_decode_frame+0xde>
 80022fc:	7b28      	ldrb	r0, [r5, #12]
 80022fe:	7831      	ldrb	r1, [r6, #0]
 8002300:	4288      	cmp	r0, r1
 8002302:	d106      	bne.n	8002312 <SIGFOX_DECODE_decode_frame+0xd6>
 8002304:	7b68      	ldrb	r0, [r5, #13]
 8002306:	7871      	ldrb	r1, [r6, #1]
 8002308:	4288      	cmp	r0, r1
 800230a:	d102      	bne.n	8002312 <SIGFOX_DECODE_decode_frame+0xd6>
 800230c:	980c      	ldr	r0, [sp, #48]	; 0x30
 800230e:	7004      	strb	r4, [r0, #0]
 8002310:	e002      	b.n	8002318 <SIGFOX_DECODE_decode_frame+0xdc>
 8002312:	2000      	movs	r0, #0
 8002314:	990c      	ldr	r1, [sp, #48]	; 0x30
 8002316:	7008      	strb	r0, [r1, #0]
 8002318:	2000      	movs	r0, #0
 800231a:	b00d      	add	sp, #52	; 0x34
 800231c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800231e <SIGFOX_DECODE_dewhitening>:
 800231e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002320:	0003      	movs	r3, r0
 8002322:	4c29      	ldr	r4, [pc, #164]	; (80023c8 <.text_6>)
 8002324:	780d      	ldrb	r5, [r1, #0]
 8002326:	7848      	ldrb	r0, [r1, #1]
 8002328:	0200      	lsls	r0, r0, #8
 800232a:	4328      	orrs	r0, r5
 800232c:	4350      	muls	r0, r2
 800232e:	4020      	ands	r0, r4
 8002330:	d100      	bne.n	8002334 <SIGFOX_DECODE_dewhitening+0x16>
 8002332:	0020      	movs	r0, r4
 8002334:	2400      	movs	r4, #0
 8002336:	2600      	movs	r6, #0
 8002338:	9300      	str	r3, [sp, #0]
 800233a:	f000 f847 	bl	80023cc <SIGFOX_DECODE_dewhitening_pn>
 800233e:	1c72      	adds	r2, r6, #1
 8002340:	9900      	ldr	r1, [sp, #0]
 8002342:	1989      	adds	r1, r1, r6
 8002344:	780b      	ldrb	r3, [r1, #0]
 8002346:	0007      	movs	r7, r0
 8002348:	40d7      	lsrs	r7, r2
 800234a:	405f      	eors	r7, r3
 800234c:	700f      	strb	r7, [r1, #0]
 800234e:	9900      	ldr	r1, [sp, #0]
 8002350:	1c49      	adds	r1, r1, #1
 8002352:	1989      	adds	r1, r1, r6
 8002354:	780f      	ldrb	r7, [r1, #0]
 8002356:	2301      	movs	r3, #1
 8002358:	4093      	lsls	r3, r2
 800235a:	1e5b      	subs	r3, r3, #1
 800235c:	4003      	ands	r3, r0
 800235e:	469c      	mov	ip, r3
 8002360:	2307      	movs	r3, #7
 8002362:	1b9a      	subs	r2, r3, r6
 8002364:	4663      	mov	r3, ip
 8002366:	4093      	lsls	r3, r2
 8002368:	407b      	eors	r3, r7
 800236a:	700b      	strb	r3, [r1, #0]
 800236c:	1c76      	adds	r6, r6, #1
 800236e:	2e08      	cmp	r6, #8
 8002370:	dbe3      	blt.n	800233a <SIGFOX_DECODE_dewhitening+0x1c>
 8002372:	9900      	ldr	r1, [sp, #0]
 8002374:	2600      	movs	r6, #0
 8002376:	9100      	str	r1, [sp, #0]
 8002378:	f000 f828 	bl	80023cc <SIGFOX_DECODE_dewhitening_pn>
 800237c:	1c72      	adds	r2, r6, #1
 800237e:	9900      	ldr	r1, [sp, #0]
 8002380:	1989      	adds	r1, r1, r6
 8002382:	7a4b      	ldrb	r3, [r1, #9]
 8002384:	0007      	movs	r7, r0
 8002386:	40d7      	lsrs	r7, r2
 8002388:	405f      	eors	r7, r3
 800238a:	724f      	strb	r7, [r1, #9]
 800238c:	7a8f      	ldrb	r7, [r1, #10]
 800238e:	2301      	movs	r3, #1
 8002390:	4093      	lsls	r3, r2
 8002392:	1e5b      	subs	r3, r3, #1
 8002394:	4003      	ands	r3, r0
 8002396:	469c      	mov	ip, r3
 8002398:	2307      	movs	r3, #7
 800239a:	1b9a      	subs	r2, r3, r6
 800239c:	4663      	mov	r3, ip
 800239e:	4093      	lsls	r3, r2
 80023a0:	407b      	eors	r3, r7
 80023a2:	728b      	strb	r3, [r1, #10]
 80023a4:	1c76      	adds	r6, r6, #1
 80023a6:	2e05      	cmp	r6, #5
 80023a8:	dbe6      	blt.n	8002378 <SIGFOX_DECODE_dewhitening+0x5a>
 80023aa:	9d00      	ldr	r5, [sp, #0]
 80023ac:	f000 f80e 	bl	80023cc <SIGFOX_DECODE_dewhitening_pn>
 80023b0:	7ba9      	ldrb	r1, [r5, #14]
 80023b2:	1c76      	adds	r6, r6, #1
 80023b4:	40f0      	lsrs	r0, r6
 80023b6:	4048      	eors	r0, r1
 80023b8:	73a8      	strb	r0, [r5, #14]
 80023ba:	73ec      	strb	r4, [r5, #15]
 80023bc:	bdf1      	pop	{r0, r4, r5, r6, r7, pc}
	...

080023c0 <.text_4>:
 80023c0:	20000298 	.word	0x20000298

080023c4 <.text_5>:
 80023c4:	08001838 	.word	0x08001838

080023c8 <.text_6>:
 80023c8:	000001ff 	.word	0x000001ff

080023cc <SIGFOX_DECODE_dewhitening_pn>:
 80023cc:	2208      	movs	r2, #8
 80023ce:	2321      	movs	r3, #33	; 0x21
 80023d0:	4003      	ands	r3, r0
 80023d2:	0841      	lsrs	r1, r0, #1
 80023d4:	2b20      	cmp	r3, #32
 80023d6:	d001      	beq.n	80023dc <SIGFOX_DECODE_dewhitening_pn+0x10>
 80023d8:	2b01      	cmp	r3, #1
 80023da:	d102      	bne.n	80023e2 <SIGFOX_DECODE_dewhitening_pn+0x16>
 80023dc:	2080      	movs	r0, #128	; 0x80
 80023de:	0040      	lsls	r0, r0, #1
 80023e0:	e000      	b.n	80023e4 <SIGFOX_DECODE_dewhitening_pn+0x18>
 80023e2:	2000      	movs	r0, #0
 80023e4:	4308      	orrs	r0, r1
 80023e6:	1e52      	subs	r2, r2, #1
 80023e8:	d1f1      	bne.n	80023ce <SIGFOX_DECODE_dewhitening_pn+0x2>
 80023ea:	b280      	uxth	r0, r0
 80023ec:	4770      	bx	lr
	...

080023f0 <pow_alpha>:
 80023f0:	0201 0804 0603 0b0c 0a05 0e07 0d0f 0009     ................

08002400 <log_alpha>:
 8002400:	000f 0401 0802 0a05 0e03 0709 0d06 0c0b     ................

08002410 <SIGFOX_HMAC_compute_aes>:
 8002410:	b579      	push	{r0, r3, r4, r5, r6, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	001e      	movs	r6, r3
 8002416:	2300      	movs	r3, #0
 8002418:	2000      	movs	r0, #0
 800241a:	2a11      	cmp	r2, #17
 800241c:	db01      	blt.n	8002422 <SIGFOX_HMAC_compute_aes+0x12>
 800241e:	2420      	movs	r4, #32
 8002420:	e000      	b.n	8002424 <SIGFOX_HMAC_compute_aes+0x14>
 8002422:	2410      	movs	r4, #16
 8002424:	7034      	strb	r4, [r6, #0]
 8002426:	2500      	movs	r5, #0
 8002428:	4c14      	ldr	r4, [pc, #80]	; (800247c <SIGFOX_HMAC_compute_aes+0x6c>)
 800242a:	9101      	str	r1, [sp, #4]
 800242c:	9600      	str	r6, [sp, #0]
 800242e:	9900      	ldr	r1, [sp, #0]
 8002430:	7809      	ldrb	r1, [r1, #0]
 8002432:	b2ee      	uxtb	r6, r5
 8002434:	428e      	cmp	r6, r1
 8002436:	d218      	bcs.n	800246a <SIGFOX_HMAC_compute_aes+0x5a>
 8002438:	9901      	ldr	r1, [sp, #4]
 800243a:	5c09      	ldrb	r1, [r1, r0]
 800243c:	b2ed      	uxtb	r5, r5
 800243e:	5561      	strb	r1, [r4, r5]
 8002440:	1e51      	subs	r1, r2, #1
 8002442:	4288      	cmp	r0, r1
 8002444:	d002      	beq.n	800244c <SIGFOX_HMAC_compute_aes+0x3c>
 8002446:	1c40      	adds	r0, r0, #1
 8002448:	b2c0      	uxtb	r0, r0
 800244a:	e000      	b.n	800244e <SIGFOX_HMAC_compute_aes+0x3e>
 800244c:	2000      	movs	r0, #0
 800244e:	1c6d      	adds	r5, r5, #1
 8002450:	e7ed      	b.n	800242e <SIGFOX_HMAC_compute_aes+0x1e>
 8002452:	9802      	ldr	r0, [sp, #8]
 8002454:	9300      	str	r3, [sp, #0]
 8002456:	4b0a      	ldr	r3, [pc, #40]	; (8002480 <SIGFOX_HMAC_compute_aes+0x70>)
 8002458:	000a      	movs	r2, r1
 800245a:	0021      	movs	r1, r4
 800245c:	f005 ff5c 	bl	8008318 <MCU_API_aes_128_cbc_encrypt>
 8002460:	0001      	movs	r1, r0
 8002462:	d100      	bne.n	8002466 <SIGFOX_HMAC_compute_aes+0x56>
 8002464:	2000      	movs	r0, #0
 8002466:	b004      	add	sp, #16
 8002468:	bd70      	pop	{r4, r5, r6, pc}
 800246a:	4806      	ldr	r0, [pc, #24]	; (8002484 <SIGFOX_HMAC_compute_aes+0x74>)
 800246c:	6800      	ldr	r0, [r0, #0]
 800246e:	2256      	movs	r2, #86	; 0x56
 8002470:	5c80      	ldrb	r0, [r0, r2]
 8002472:	2801      	cmp	r0, #1
 8002474:	d1ed      	bne.n	8002452 <SIGFOX_HMAC_compute_aes+0x42>
 8002476:	2301      	movs	r3, #1
 8002478:	e7eb      	b.n	8002452 <SIGFOX_HMAC_compute_aes+0x42>
 800247a:	bf00      	nop
 800247c:	2000029c 	.word	0x2000029c
 8002480:	08001838 	.word	0x08001838
 8002484:	20000298 	.word	0x20000298

08002488 <__gnu_thumb1_case_uqi>:
 8002488:	b402      	push	{r1}
 800248a:	4671      	mov	r1, lr
 800248c:	0849      	lsrs	r1, r1, #1
 800248e:	0049      	lsls	r1, r1, #1
 8002490:	5c09      	ldrb	r1, [r1, r0]
 8002492:	0049      	lsls	r1, r1, #1
 8002494:	448e      	add	lr, r1
 8002496:	bc02      	pop	{r1}
 8002498:	4770      	bx	lr
 800249a:	46c0      	nop			; (mov r8, r8)

0800249c <__gnu_thumb1_case_shi>:
 800249c:	b403      	push	{r0, r1}
 800249e:	4671      	mov	r1, lr
 80024a0:	0849      	lsrs	r1, r1, #1
 80024a2:	0040      	lsls	r0, r0, #1
 80024a4:	0049      	lsls	r1, r1, #1
 80024a6:	5e09      	ldrsh	r1, [r1, r0]
 80024a8:	0049      	lsls	r1, r1, #1
 80024aa:	448e      	add	lr, r1
 80024ac:	bc03      	pop	{r0, r1}
 80024ae:	4770      	bx	lr

080024b0 <__udivsi3>:
 80024b0:	2200      	movs	r2, #0
 80024b2:	0843      	lsrs	r3, r0, #1
 80024b4:	428b      	cmp	r3, r1
 80024b6:	d374      	bcc.n	80025a2 <__udivsi3+0xf2>
 80024b8:	0903      	lsrs	r3, r0, #4
 80024ba:	428b      	cmp	r3, r1
 80024bc:	d35f      	bcc.n	800257e <__udivsi3+0xce>
 80024be:	0a03      	lsrs	r3, r0, #8
 80024c0:	428b      	cmp	r3, r1
 80024c2:	d344      	bcc.n	800254e <__udivsi3+0x9e>
 80024c4:	0b03      	lsrs	r3, r0, #12
 80024c6:	428b      	cmp	r3, r1
 80024c8:	d328      	bcc.n	800251c <__udivsi3+0x6c>
 80024ca:	0c03      	lsrs	r3, r0, #16
 80024cc:	428b      	cmp	r3, r1
 80024ce:	d30d      	bcc.n	80024ec <__udivsi3+0x3c>
 80024d0:	22ff      	movs	r2, #255	; 0xff
 80024d2:	0209      	lsls	r1, r1, #8
 80024d4:	ba12      	rev	r2, r2
 80024d6:	0c03      	lsrs	r3, r0, #16
 80024d8:	428b      	cmp	r3, r1
 80024da:	d302      	bcc.n	80024e2 <__udivsi3+0x32>
 80024dc:	1212      	asrs	r2, r2, #8
 80024de:	0209      	lsls	r1, r1, #8
 80024e0:	d065      	beq.n	80025ae <__udivsi3+0xfe>
 80024e2:	0b03      	lsrs	r3, r0, #12
 80024e4:	428b      	cmp	r3, r1
 80024e6:	d319      	bcc.n	800251c <__udivsi3+0x6c>
 80024e8:	e000      	b.n	80024ec <__udivsi3+0x3c>
 80024ea:	0a09      	lsrs	r1, r1, #8
 80024ec:	0bc3      	lsrs	r3, r0, #15
 80024ee:	428b      	cmp	r3, r1
 80024f0:	d301      	bcc.n	80024f6 <__udivsi3+0x46>
 80024f2:	03cb      	lsls	r3, r1, #15
 80024f4:	1ac0      	subs	r0, r0, r3
 80024f6:	4152      	adcs	r2, r2
 80024f8:	0b83      	lsrs	r3, r0, #14
 80024fa:	428b      	cmp	r3, r1
 80024fc:	d301      	bcc.n	8002502 <__udivsi3+0x52>
 80024fe:	038b      	lsls	r3, r1, #14
 8002500:	1ac0      	subs	r0, r0, r3
 8002502:	4152      	adcs	r2, r2
 8002504:	0b43      	lsrs	r3, r0, #13
 8002506:	428b      	cmp	r3, r1
 8002508:	d301      	bcc.n	800250e <__udivsi3+0x5e>
 800250a:	034b      	lsls	r3, r1, #13
 800250c:	1ac0      	subs	r0, r0, r3
 800250e:	4152      	adcs	r2, r2
 8002510:	0b03      	lsrs	r3, r0, #12
 8002512:	428b      	cmp	r3, r1
 8002514:	d301      	bcc.n	800251a <__udivsi3+0x6a>
 8002516:	030b      	lsls	r3, r1, #12
 8002518:	1ac0      	subs	r0, r0, r3
 800251a:	4152      	adcs	r2, r2
 800251c:	0ac3      	lsrs	r3, r0, #11
 800251e:	428b      	cmp	r3, r1
 8002520:	d301      	bcc.n	8002526 <__udivsi3+0x76>
 8002522:	02cb      	lsls	r3, r1, #11
 8002524:	1ac0      	subs	r0, r0, r3
 8002526:	4152      	adcs	r2, r2
 8002528:	0a83      	lsrs	r3, r0, #10
 800252a:	428b      	cmp	r3, r1
 800252c:	d301      	bcc.n	8002532 <__udivsi3+0x82>
 800252e:	028b      	lsls	r3, r1, #10
 8002530:	1ac0      	subs	r0, r0, r3
 8002532:	4152      	adcs	r2, r2
 8002534:	0a43      	lsrs	r3, r0, #9
 8002536:	428b      	cmp	r3, r1
 8002538:	d301      	bcc.n	800253e <__udivsi3+0x8e>
 800253a:	024b      	lsls	r3, r1, #9
 800253c:	1ac0      	subs	r0, r0, r3
 800253e:	4152      	adcs	r2, r2
 8002540:	0a03      	lsrs	r3, r0, #8
 8002542:	428b      	cmp	r3, r1
 8002544:	d301      	bcc.n	800254a <__udivsi3+0x9a>
 8002546:	020b      	lsls	r3, r1, #8
 8002548:	1ac0      	subs	r0, r0, r3
 800254a:	4152      	adcs	r2, r2
 800254c:	d2cd      	bcs.n	80024ea <__udivsi3+0x3a>
 800254e:	09c3      	lsrs	r3, r0, #7
 8002550:	428b      	cmp	r3, r1
 8002552:	d301      	bcc.n	8002558 <__udivsi3+0xa8>
 8002554:	01cb      	lsls	r3, r1, #7
 8002556:	1ac0      	subs	r0, r0, r3
 8002558:	4152      	adcs	r2, r2
 800255a:	0983      	lsrs	r3, r0, #6
 800255c:	428b      	cmp	r3, r1
 800255e:	d301      	bcc.n	8002564 <__udivsi3+0xb4>
 8002560:	018b      	lsls	r3, r1, #6
 8002562:	1ac0      	subs	r0, r0, r3
 8002564:	4152      	adcs	r2, r2
 8002566:	0943      	lsrs	r3, r0, #5
 8002568:	428b      	cmp	r3, r1
 800256a:	d301      	bcc.n	8002570 <__udivsi3+0xc0>
 800256c:	014b      	lsls	r3, r1, #5
 800256e:	1ac0      	subs	r0, r0, r3
 8002570:	4152      	adcs	r2, r2
 8002572:	0903      	lsrs	r3, r0, #4
 8002574:	428b      	cmp	r3, r1
 8002576:	d301      	bcc.n	800257c <__udivsi3+0xcc>
 8002578:	010b      	lsls	r3, r1, #4
 800257a:	1ac0      	subs	r0, r0, r3
 800257c:	4152      	adcs	r2, r2
 800257e:	08c3      	lsrs	r3, r0, #3
 8002580:	428b      	cmp	r3, r1
 8002582:	d301      	bcc.n	8002588 <__udivsi3+0xd8>
 8002584:	00cb      	lsls	r3, r1, #3
 8002586:	1ac0      	subs	r0, r0, r3
 8002588:	4152      	adcs	r2, r2
 800258a:	0883      	lsrs	r3, r0, #2
 800258c:	428b      	cmp	r3, r1
 800258e:	d301      	bcc.n	8002594 <__udivsi3+0xe4>
 8002590:	008b      	lsls	r3, r1, #2
 8002592:	1ac0      	subs	r0, r0, r3
 8002594:	4152      	adcs	r2, r2
 8002596:	0843      	lsrs	r3, r0, #1
 8002598:	428b      	cmp	r3, r1
 800259a:	d301      	bcc.n	80025a0 <__udivsi3+0xf0>
 800259c:	004b      	lsls	r3, r1, #1
 800259e:	1ac0      	subs	r0, r0, r3
 80025a0:	4152      	adcs	r2, r2
 80025a2:	1a41      	subs	r1, r0, r1
 80025a4:	d200      	bcs.n	80025a8 <__udivsi3+0xf8>
 80025a6:	4601      	mov	r1, r0
 80025a8:	4152      	adcs	r2, r2
 80025aa:	4610      	mov	r0, r2
 80025ac:	4770      	bx	lr
 80025ae:	e7ff      	b.n	80025b0 <__udivsi3+0x100>
 80025b0:	b501      	push	{r0, lr}
 80025b2:	2000      	movs	r0, #0
 80025b4:	f000 f8f0 	bl	8002798 <__aeabi_idiv0>
 80025b8:	bd02      	pop	{r1, pc}
 80025ba:	46c0      	nop			; (mov r8, r8)

080025bc <__aeabi_uidivmod>:
 80025bc:	2900      	cmp	r1, #0
 80025be:	d0f7      	beq.n	80025b0 <__udivsi3+0x100>
 80025c0:	e776      	b.n	80024b0 <__udivsi3>
 80025c2:	4770      	bx	lr

080025c4 <__divsi3>:
 80025c4:	4603      	mov	r3, r0
 80025c6:	430b      	orrs	r3, r1
 80025c8:	d47f      	bmi.n	80026ca <__divsi3+0x106>
 80025ca:	2200      	movs	r2, #0
 80025cc:	0843      	lsrs	r3, r0, #1
 80025ce:	428b      	cmp	r3, r1
 80025d0:	d374      	bcc.n	80026bc <__divsi3+0xf8>
 80025d2:	0903      	lsrs	r3, r0, #4
 80025d4:	428b      	cmp	r3, r1
 80025d6:	d35f      	bcc.n	8002698 <__divsi3+0xd4>
 80025d8:	0a03      	lsrs	r3, r0, #8
 80025da:	428b      	cmp	r3, r1
 80025dc:	d344      	bcc.n	8002668 <__divsi3+0xa4>
 80025de:	0b03      	lsrs	r3, r0, #12
 80025e0:	428b      	cmp	r3, r1
 80025e2:	d328      	bcc.n	8002636 <__divsi3+0x72>
 80025e4:	0c03      	lsrs	r3, r0, #16
 80025e6:	428b      	cmp	r3, r1
 80025e8:	d30d      	bcc.n	8002606 <__divsi3+0x42>
 80025ea:	22ff      	movs	r2, #255	; 0xff
 80025ec:	0209      	lsls	r1, r1, #8
 80025ee:	ba12      	rev	r2, r2
 80025f0:	0c03      	lsrs	r3, r0, #16
 80025f2:	428b      	cmp	r3, r1
 80025f4:	d302      	bcc.n	80025fc <__divsi3+0x38>
 80025f6:	1212      	asrs	r2, r2, #8
 80025f8:	0209      	lsls	r1, r1, #8
 80025fa:	d065      	beq.n	80026c8 <__divsi3+0x104>
 80025fc:	0b03      	lsrs	r3, r0, #12
 80025fe:	428b      	cmp	r3, r1
 8002600:	d319      	bcc.n	8002636 <__divsi3+0x72>
 8002602:	e000      	b.n	8002606 <__divsi3+0x42>
 8002604:	0a09      	lsrs	r1, r1, #8
 8002606:	0bc3      	lsrs	r3, r0, #15
 8002608:	428b      	cmp	r3, r1
 800260a:	d301      	bcc.n	8002610 <__divsi3+0x4c>
 800260c:	03cb      	lsls	r3, r1, #15
 800260e:	1ac0      	subs	r0, r0, r3
 8002610:	4152      	adcs	r2, r2
 8002612:	0b83      	lsrs	r3, r0, #14
 8002614:	428b      	cmp	r3, r1
 8002616:	d301      	bcc.n	800261c <__divsi3+0x58>
 8002618:	038b      	lsls	r3, r1, #14
 800261a:	1ac0      	subs	r0, r0, r3
 800261c:	4152      	adcs	r2, r2
 800261e:	0b43      	lsrs	r3, r0, #13
 8002620:	428b      	cmp	r3, r1
 8002622:	d301      	bcc.n	8002628 <__divsi3+0x64>
 8002624:	034b      	lsls	r3, r1, #13
 8002626:	1ac0      	subs	r0, r0, r3
 8002628:	4152      	adcs	r2, r2
 800262a:	0b03      	lsrs	r3, r0, #12
 800262c:	428b      	cmp	r3, r1
 800262e:	d301      	bcc.n	8002634 <__divsi3+0x70>
 8002630:	030b      	lsls	r3, r1, #12
 8002632:	1ac0      	subs	r0, r0, r3
 8002634:	4152      	adcs	r2, r2
 8002636:	0ac3      	lsrs	r3, r0, #11
 8002638:	428b      	cmp	r3, r1
 800263a:	d301      	bcc.n	8002640 <__divsi3+0x7c>
 800263c:	02cb      	lsls	r3, r1, #11
 800263e:	1ac0      	subs	r0, r0, r3
 8002640:	4152      	adcs	r2, r2
 8002642:	0a83      	lsrs	r3, r0, #10
 8002644:	428b      	cmp	r3, r1
 8002646:	d301      	bcc.n	800264c <__divsi3+0x88>
 8002648:	028b      	lsls	r3, r1, #10
 800264a:	1ac0      	subs	r0, r0, r3
 800264c:	4152      	adcs	r2, r2
 800264e:	0a43      	lsrs	r3, r0, #9
 8002650:	428b      	cmp	r3, r1
 8002652:	d301      	bcc.n	8002658 <__divsi3+0x94>
 8002654:	024b      	lsls	r3, r1, #9
 8002656:	1ac0      	subs	r0, r0, r3
 8002658:	4152      	adcs	r2, r2
 800265a:	0a03      	lsrs	r3, r0, #8
 800265c:	428b      	cmp	r3, r1
 800265e:	d301      	bcc.n	8002664 <__divsi3+0xa0>
 8002660:	020b      	lsls	r3, r1, #8
 8002662:	1ac0      	subs	r0, r0, r3
 8002664:	4152      	adcs	r2, r2
 8002666:	d2cd      	bcs.n	8002604 <__divsi3+0x40>
 8002668:	09c3      	lsrs	r3, r0, #7
 800266a:	428b      	cmp	r3, r1
 800266c:	d301      	bcc.n	8002672 <__divsi3+0xae>
 800266e:	01cb      	lsls	r3, r1, #7
 8002670:	1ac0      	subs	r0, r0, r3
 8002672:	4152      	adcs	r2, r2
 8002674:	0983      	lsrs	r3, r0, #6
 8002676:	428b      	cmp	r3, r1
 8002678:	d301      	bcc.n	800267e <__divsi3+0xba>
 800267a:	018b      	lsls	r3, r1, #6
 800267c:	1ac0      	subs	r0, r0, r3
 800267e:	4152      	adcs	r2, r2
 8002680:	0943      	lsrs	r3, r0, #5
 8002682:	428b      	cmp	r3, r1
 8002684:	d301      	bcc.n	800268a <__divsi3+0xc6>
 8002686:	014b      	lsls	r3, r1, #5
 8002688:	1ac0      	subs	r0, r0, r3
 800268a:	4152      	adcs	r2, r2
 800268c:	0903      	lsrs	r3, r0, #4
 800268e:	428b      	cmp	r3, r1
 8002690:	d301      	bcc.n	8002696 <__divsi3+0xd2>
 8002692:	010b      	lsls	r3, r1, #4
 8002694:	1ac0      	subs	r0, r0, r3
 8002696:	4152      	adcs	r2, r2
 8002698:	08c3      	lsrs	r3, r0, #3
 800269a:	428b      	cmp	r3, r1
 800269c:	d301      	bcc.n	80026a2 <__divsi3+0xde>
 800269e:	00cb      	lsls	r3, r1, #3
 80026a0:	1ac0      	subs	r0, r0, r3
 80026a2:	4152      	adcs	r2, r2
 80026a4:	0883      	lsrs	r3, r0, #2
 80026a6:	428b      	cmp	r3, r1
 80026a8:	d301      	bcc.n	80026ae <__divsi3+0xea>
 80026aa:	008b      	lsls	r3, r1, #2
 80026ac:	1ac0      	subs	r0, r0, r3
 80026ae:	4152      	adcs	r2, r2
 80026b0:	0843      	lsrs	r3, r0, #1
 80026b2:	428b      	cmp	r3, r1
 80026b4:	d301      	bcc.n	80026ba <__divsi3+0xf6>
 80026b6:	004b      	lsls	r3, r1, #1
 80026b8:	1ac0      	subs	r0, r0, r3
 80026ba:	4152      	adcs	r2, r2
 80026bc:	1a41      	subs	r1, r0, r1
 80026be:	d200      	bcs.n	80026c2 <__divsi3+0xfe>
 80026c0:	4601      	mov	r1, r0
 80026c2:	4152      	adcs	r2, r2
 80026c4:	4610      	mov	r0, r2
 80026c6:	4770      	bx	lr
 80026c8:	e05d      	b.n	8002786 <__divsi3+0x1c2>
 80026ca:	0fca      	lsrs	r2, r1, #31
 80026cc:	d000      	beq.n	80026d0 <__divsi3+0x10c>
 80026ce:	4249      	negs	r1, r1
 80026d0:	1003      	asrs	r3, r0, #32
 80026d2:	d300      	bcc.n	80026d6 <__divsi3+0x112>
 80026d4:	4240      	negs	r0, r0
 80026d6:	4053      	eors	r3, r2
 80026d8:	2200      	movs	r2, #0
 80026da:	469c      	mov	ip, r3
 80026dc:	0903      	lsrs	r3, r0, #4
 80026de:	428b      	cmp	r3, r1
 80026e0:	d32d      	bcc.n	800273e <__divsi3+0x17a>
 80026e2:	0a03      	lsrs	r3, r0, #8
 80026e4:	428b      	cmp	r3, r1
 80026e6:	d312      	bcc.n	800270e <__divsi3+0x14a>
 80026e8:	22fc      	movs	r2, #252	; 0xfc
 80026ea:	0189      	lsls	r1, r1, #6
 80026ec:	ba12      	rev	r2, r2
 80026ee:	0a03      	lsrs	r3, r0, #8
 80026f0:	428b      	cmp	r3, r1
 80026f2:	d30c      	bcc.n	800270e <__divsi3+0x14a>
 80026f4:	0189      	lsls	r1, r1, #6
 80026f6:	1192      	asrs	r2, r2, #6
 80026f8:	428b      	cmp	r3, r1
 80026fa:	d308      	bcc.n	800270e <__divsi3+0x14a>
 80026fc:	0189      	lsls	r1, r1, #6
 80026fe:	1192      	asrs	r2, r2, #6
 8002700:	428b      	cmp	r3, r1
 8002702:	d304      	bcc.n	800270e <__divsi3+0x14a>
 8002704:	0189      	lsls	r1, r1, #6
 8002706:	d03a      	beq.n	800277e <__divsi3+0x1ba>
 8002708:	1192      	asrs	r2, r2, #6
 800270a:	e000      	b.n	800270e <__divsi3+0x14a>
 800270c:	0989      	lsrs	r1, r1, #6
 800270e:	09c3      	lsrs	r3, r0, #7
 8002710:	428b      	cmp	r3, r1
 8002712:	d301      	bcc.n	8002718 <__divsi3+0x154>
 8002714:	01cb      	lsls	r3, r1, #7
 8002716:	1ac0      	subs	r0, r0, r3
 8002718:	4152      	adcs	r2, r2
 800271a:	0983      	lsrs	r3, r0, #6
 800271c:	428b      	cmp	r3, r1
 800271e:	d301      	bcc.n	8002724 <__divsi3+0x160>
 8002720:	018b      	lsls	r3, r1, #6
 8002722:	1ac0      	subs	r0, r0, r3
 8002724:	4152      	adcs	r2, r2
 8002726:	0943      	lsrs	r3, r0, #5
 8002728:	428b      	cmp	r3, r1
 800272a:	d301      	bcc.n	8002730 <__divsi3+0x16c>
 800272c:	014b      	lsls	r3, r1, #5
 800272e:	1ac0      	subs	r0, r0, r3
 8002730:	4152      	adcs	r2, r2
 8002732:	0903      	lsrs	r3, r0, #4
 8002734:	428b      	cmp	r3, r1
 8002736:	d301      	bcc.n	800273c <__divsi3+0x178>
 8002738:	010b      	lsls	r3, r1, #4
 800273a:	1ac0      	subs	r0, r0, r3
 800273c:	4152      	adcs	r2, r2
 800273e:	08c3      	lsrs	r3, r0, #3
 8002740:	428b      	cmp	r3, r1
 8002742:	d301      	bcc.n	8002748 <__divsi3+0x184>
 8002744:	00cb      	lsls	r3, r1, #3
 8002746:	1ac0      	subs	r0, r0, r3
 8002748:	4152      	adcs	r2, r2
 800274a:	0883      	lsrs	r3, r0, #2
 800274c:	428b      	cmp	r3, r1
 800274e:	d301      	bcc.n	8002754 <__divsi3+0x190>
 8002750:	008b      	lsls	r3, r1, #2
 8002752:	1ac0      	subs	r0, r0, r3
 8002754:	4152      	adcs	r2, r2
 8002756:	d2d9      	bcs.n	800270c <__divsi3+0x148>
 8002758:	0843      	lsrs	r3, r0, #1
 800275a:	428b      	cmp	r3, r1
 800275c:	d301      	bcc.n	8002762 <__divsi3+0x19e>
 800275e:	004b      	lsls	r3, r1, #1
 8002760:	1ac0      	subs	r0, r0, r3
 8002762:	4152      	adcs	r2, r2
 8002764:	1a41      	subs	r1, r0, r1
 8002766:	d200      	bcs.n	800276a <__divsi3+0x1a6>
 8002768:	4601      	mov	r1, r0
 800276a:	4663      	mov	r3, ip
 800276c:	4152      	adcs	r2, r2
 800276e:	105b      	asrs	r3, r3, #1
 8002770:	4610      	mov	r0, r2
 8002772:	d301      	bcc.n	8002778 <__divsi3+0x1b4>
 8002774:	4240      	negs	r0, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d500      	bpl.n	800277c <__divsi3+0x1b8>
 800277a:	4249      	negs	r1, r1
 800277c:	4770      	bx	lr
 800277e:	4663      	mov	r3, ip
 8002780:	105b      	asrs	r3, r3, #1
 8002782:	d300      	bcc.n	8002786 <__divsi3+0x1c2>
 8002784:	4240      	negs	r0, r0
 8002786:	b501      	push	{r0, lr}
 8002788:	2000      	movs	r0, #0
 800278a:	f000 f805 	bl	8002798 <__aeabi_idiv0>
 800278e:	bd02      	pop	{r1, pc}

08002790 <__aeabi_idivmod>:
 8002790:	2900      	cmp	r1, #0
 8002792:	d0f8      	beq.n	8002786 <__divsi3+0x1c2>
 8002794:	e716      	b.n	80025c4 <__divsi3>
 8002796:	4770      	bx	lr

08002798 <__aeabi_idiv0>:
 8002798:	4770      	bx	lr
 800279a:	46c0      	nop			; (mov r8, r8)

0800279c <__aeabi_llsr>:
 800279c:	40d0      	lsrs	r0, r2
 800279e:	1c0b      	adds	r3, r1, #0
 80027a0:	40d1      	lsrs	r1, r2
 80027a2:	469c      	mov	ip, r3
 80027a4:	3a20      	subs	r2, #32
 80027a6:	40d3      	lsrs	r3, r2
 80027a8:	4318      	orrs	r0, r3
 80027aa:	4252      	negs	r2, r2
 80027ac:	4663      	mov	r3, ip
 80027ae:	4093      	lsls	r3, r2
 80027b0:	4318      	orrs	r0, r3
 80027b2:	4770      	bx	lr

080027b4 <__aeabi_uldivmod>:
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d111      	bne.n	80027dc <__aeabi_uldivmod+0x28>
 80027b8:	2a00      	cmp	r2, #0
 80027ba:	d10f      	bne.n	80027dc <__aeabi_uldivmod+0x28>
 80027bc:	2900      	cmp	r1, #0
 80027be:	d100      	bne.n	80027c2 <__aeabi_uldivmod+0xe>
 80027c0:	2800      	cmp	r0, #0
 80027c2:	d002      	beq.n	80027ca <__aeabi_uldivmod+0x16>
 80027c4:	2100      	movs	r1, #0
 80027c6:	43c9      	mvns	r1, r1
 80027c8:	1c08      	adds	r0, r1, #0
 80027ca:	b407      	push	{r0, r1, r2}
 80027cc:	4802      	ldr	r0, [pc, #8]	; (80027d8 <__aeabi_uldivmod+0x24>)
 80027ce:	a102      	add	r1, pc, #8	; (adr r1, 80027d8 <__aeabi_uldivmod+0x24>)
 80027d0:	1840      	adds	r0, r0, r1
 80027d2:	9002      	str	r0, [sp, #8]
 80027d4:	bd03      	pop	{r0, r1, pc}
 80027d6:	46c0      	nop			; (mov r8, r8)
 80027d8:	ffffffc1 	.word	0xffffffc1
 80027dc:	b403      	push	{r0, r1}
 80027de:	4668      	mov	r0, sp
 80027e0:	b501      	push	{r0, lr}
 80027e2:	9802      	ldr	r0, [sp, #8]
 80027e4:	f000 f864 	bl	80028b0 <__udivmoddi4>
 80027e8:	9b01      	ldr	r3, [sp, #4]
 80027ea:	469e      	mov	lr, r3
 80027ec:	b002      	add	sp, #8
 80027ee:	bc0c      	pop	{r2, r3}
 80027f0:	4770      	bx	lr
 80027f2:	46c0      	nop			; (mov r8, r8)

080027f4 <__aeabi_lmul>:
 80027f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f6:	0415      	lsls	r5, r2, #16
 80027f8:	0c2d      	lsrs	r5, r5, #16
 80027fa:	000f      	movs	r7, r1
 80027fc:	0001      	movs	r1, r0
 80027fe:	002e      	movs	r6, r5
 8002800:	46c6      	mov	lr, r8
 8002802:	4684      	mov	ip, r0
 8002804:	0400      	lsls	r0, r0, #16
 8002806:	0c14      	lsrs	r4, r2, #16
 8002808:	0c00      	lsrs	r0, r0, #16
 800280a:	0c09      	lsrs	r1, r1, #16
 800280c:	4346      	muls	r6, r0
 800280e:	434d      	muls	r5, r1
 8002810:	4360      	muls	r0, r4
 8002812:	4361      	muls	r1, r4
 8002814:	1940      	adds	r0, r0, r5
 8002816:	0c34      	lsrs	r4, r6, #16
 8002818:	1824      	adds	r4, r4, r0
 800281a:	b500      	push	{lr}
 800281c:	42a5      	cmp	r5, r4
 800281e:	d903      	bls.n	8002828 <__aeabi_lmul+0x34>
 8002820:	2080      	movs	r0, #128	; 0x80
 8002822:	0240      	lsls	r0, r0, #9
 8002824:	4680      	mov	r8, r0
 8002826:	4441      	add	r1, r8
 8002828:	0c25      	lsrs	r5, r4, #16
 800282a:	186d      	adds	r5, r5, r1
 800282c:	4661      	mov	r1, ip
 800282e:	4359      	muls	r1, r3
 8002830:	437a      	muls	r2, r7
 8002832:	0430      	lsls	r0, r6, #16
 8002834:	1949      	adds	r1, r1, r5
 8002836:	0424      	lsls	r4, r4, #16
 8002838:	0c00      	lsrs	r0, r0, #16
 800283a:	1820      	adds	r0, r4, r0
 800283c:	1889      	adds	r1, r1, r2
 800283e:	bc80      	pop	{r7}
 8002840:	46b8      	mov	r8, r7
 8002842:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002844 <__aeabi_f2uiz>:
 8002844:	219e      	movs	r1, #158	; 0x9e
 8002846:	b510      	push	{r4, lr}
 8002848:	05c9      	lsls	r1, r1, #23
 800284a:	1c04      	adds	r4, r0, #0
 800284c:	f001 fb96 	bl	8003f7c <__aeabi_fcmpge>
 8002850:	2800      	cmp	r0, #0
 8002852:	d103      	bne.n	800285c <__aeabi_f2uiz+0x18>
 8002854:	1c20      	adds	r0, r4, #0
 8002856:	f000 fbd9 	bl	800300c <__aeabi_f2iz>
 800285a:	bd10      	pop	{r4, pc}
 800285c:	219e      	movs	r1, #158	; 0x9e
 800285e:	1c20      	adds	r0, r4, #0
 8002860:	05c9      	lsls	r1, r1, #23
 8002862:	f000 fa0b 	bl	8002c7c <__aeabi_fsub>
 8002866:	f000 fbd1 	bl	800300c <__aeabi_f2iz>
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	061b      	lsls	r3, r3, #24
 800286e:	469c      	mov	ip, r3
 8002870:	4460      	add	r0, ip
 8002872:	e7f2      	b.n	800285a <__aeabi_f2uiz+0x16>

08002874 <__aeabi_d2uiz>:
 8002874:	b570      	push	{r4, r5, r6, lr}
 8002876:	2200      	movs	r2, #0
 8002878:	4b0c      	ldr	r3, [pc, #48]	; (80028ac <__aeabi_d2uiz+0x38>)
 800287a:	0004      	movs	r4, r0
 800287c:	000d      	movs	r5, r1
 800287e:	f001 fb43 	bl	8003f08 <__aeabi_dcmpge>
 8002882:	2800      	cmp	r0, #0
 8002884:	d104      	bne.n	8002890 <__aeabi_d2uiz+0x1c>
 8002886:	0020      	movs	r0, r4
 8002888:	0029      	movs	r1, r5
 800288a:	f001 f9dd 	bl	8003c48 <__aeabi_d2iz>
 800288e:	bd70      	pop	{r4, r5, r6, pc}
 8002890:	4b06      	ldr	r3, [pc, #24]	; (80028ac <__aeabi_d2uiz+0x38>)
 8002892:	2200      	movs	r2, #0
 8002894:	0020      	movs	r0, r4
 8002896:	0029      	movs	r1, r5
 8002898:	f000 fe44 	bl	8003524 <__aeabi_dsub>
 800289c:	f001 f9d4 	bl	8003c48 <__aeabi_d2iz>
 80028a0:	2380      	movs	r3, #128	; 0x80
 80028a2:	061b      	lsls	r3, r3, #24
 80028a4:	469c      	mov	ip, r3
 80028a6:	4460      	add	r0, ip
 80028a8:	e7f1      	b.n	800288e <__aeabi_d2uiz+0x1a>
 80028aa:	46c0      	nop			; (mov r8, r8)
 80028ac:	41e00000 	.word	0x41e00000

080028b0 <__udivmoddi4>:
 80028b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028b2:	4657      	mov	r7, sl
 80028b4:	464e      	mov	r6, r9
 80028b6:	4645      	mov	r5, r8
 80028b8:	46de      	mov	lr, fp
 80028ba:	b5e0      	push	{r5, r6, r7, lr}
 80028bc:	0004      	movs	r4, r0
 80028be:	000d      	movs	r5, r1
 80028c0:	4692      	mov	sl, r2
 80028c2:	4699      	mov	r9, r3
 80028c4:	b083      	sub	sp, #12
 80028c6:	428b      	cmp	r3, r1
 80028c8:	d830      	bhi.n	800292c <__udivmoddi4+0x7c>
 80028ca:	d02d      	beq.n	8002928 <__udivmoddi4+0x78>
 80028cc:	4649      	mov	r1, r9
 80028ce:	4650      	mov	r0, sl
 80028d0:	f001 fb7c 	bl	8003fcc <__clzdi2>
 80028d4:	0029      	movs	r1, r5
 80028d6:	0006      	movs	r6, r0
 80028d8:	0020      	movs	r0, r4
 80028da:	f001 fb77 	bl	8003fcc <__clzdi2>
 80028de:	1a33      	subs	r3, r6, r0
 80028e0:	4698      	mov	r8, r3
 80028e2:	3b20      	subs	r3, #32
 80028e4:	469b      	mov	fp, r3
 80028e6:	d433      	bmi.n	8002950 <__udivmoddi4+0xa0>
 80028e8:	465a      	mov	r2, fp
 80028ea:	4653      	mov	r3, sl
 80028ec:	4093      	lsls	r3, r2
 80028ee:	4642      	mov	r2, r8
 80028f0:	001f      	movs	r7, r3
 80028f2:	4653      	mov	r3, sl
 80028f4:	4093      	lsls	r3, r2
 80028f6:	001e      	movs	r6, r3
 80028f8:	42af      	cmp	r7, r5
 80028fa:	d83a      	bhi.n	8002972 <__udivmoddi4+0xc2>
 80028fc:	42af      	cmp	r7, r5
 80028fe:	d100      	bne.n	8002902 <__udivmoddi4+0x52>
 8002900:	e078      	b.n	80029f4 <__udivmoddi4+0x144>
 8002902:	465b      	mov	r3, fp
 8002904:	1ba4      	subs	r4, r4, r6
 8002906:	41bd      	sbcs	r5, r7
 8002908:	2b00      	cmp	r3, #0
 800290a:	da00      	bge.n	800290e <__udivmoddi4+0x5e>
 800290c:	e075      	b.n	80029fa <__udivmoddi4+0x14a>
 800290e:	2200      	movs	r2, #0
 8002910:	2300      	movs	r3, #0
 8002912:	9200      	str	r2, [sp, #0]
 8002914:	9301      	str	r3, [sp, #4]
 8002916:	2301      	movs	r3, #1
 8002918:	465a      	mov	r2, fp
 800291a:	4093      	lsls	r3, r2
 800291c:	9301      	str	r3, [sp, #4]
 800291e:	2301      	movs	r3, #1
 8002920:	4642      	mov	r2, r8
 8002922:	4093      	lsls	r3, r2
 8002924:	9300      	str	r3, [sp, #0]
 8002926:	e028      	b.n	800297a <__udivmoddi4+0xca>
 8002928:	4282      	cmp	r2, r0
 800292a:	d9cf      	bls.n	80028cc <__udivmoddi4+0x1c>
 800292c:	2200      	movs	r2, #0
 800292e:	2300      	movs	r3, #0
 8002930:	9200      	str	r2, [sp, #0]
 8002932:	9301      	str	r3, [sp, #4]
 8002934:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <__udivmoddi4+0x8e>
 800293a:	601c      	str	r4, [r3, #0]
 800293c:	605d      	str	r5, [r3, #4]
 800293e:	9800      	ldr	r0, [sp, #0]
 8002940:	9901      	ldr	r1, [sp, #4]
 8002942:	b003      	add	sp, #12
 8002944:	bcf0      	pop	{r4, r5, r6, r7}
 8002946:	46bb      	mov	fp, r7
 8002948:	46b2      	mov	sl, r6
 800294a:	46a9      	mov	r9, r5
 800294c:	46a0      	mov	r8, r4
 800294e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002950:	4642      	mov	r2, r8
 8002952:	2320      	movs	r3, #32
 8002954:	1a9b      	subs	r3, r3, r2
 8002956:	4652      	mov	r2, sl
 8002958:	40da      	lsrs	r2, r3
 800295a:	4641      	mov	r1, r8
 800295c:	0013      	movs	r3, r2
 800295e:	464a      	mov	r2, r9
 8002960:	408a      	lsls	r2, r1
 8002962:	0017      	movs	r7, r2
 8002964:	4642      	mov	r2, r8
 8002966:	431f      	orrs	r7, r3
 8002968:	4653      	mov	r3, sl
 800296a:	4093      	lsls	r3, r2
 800296c:	001e      	movs	r6, r3
 800296e:	42af      	cmp	r7, r5
 8002970:	d9c4      	bls.n	80028fc <__udivmoddi4+0x4c>
 8002972:	2200      	movs	r2, #0
 8002974:	2300      	movs	r3, #0
 8002976:	9200      	str	r2, [sp, #0]
 8002978:	9301      	str	r3, [sp, #4]
 800297a:	4643      	mov	r3, r8
 800297c:	2b00      	cmp	r3, #0
 800297e:	d0d9      	beq.n	8002934 <__udivmoddi4+0x84>
 8002980:	07fb      	lsls	r3, r7, #31
 8002982:	0872      	lsrs	r2, r6, #1
 8002984:	431a      	orrs	r2, r3
 8002986:	4646      	mov	r6, r8
 8002988:	087b      	lsrs	r3, r7, #1
 800298a:	e00e      	b.n	80029aa <__udivmoddi4+0xfa>
 800298c:	42ab      	cmp	r3, r5
 800298e:	d101      	bne.n	8002994 <__udivmoddi4+0xe4>
 8002990:	42a2      	cmp	r2, r4
 8002992:	d80c      	bhi.n	80029ae <__udivmoddi4+0xfe>
 8002994:	1aa4      	subs	r4, r4, r2
 8002996:	419d      	sbcs	r5, r3
 8002998:	2001      	movs	r0, #1
 800299a:	1924      	adds	r4, r4, r4
 800299c:	416d      	adcs	r5, r5
 800299e:	2100      	movs	r1, #0
 80029a0:	3e01      	subs	r6, #1
 80029a2:	1824      	adds	r4, r4, r0
 80029a4:	414d      	adcs	r5, r1
 80029a6:	2e00      	cmp	r6, #0
 80029a8:	d006      	beq.n	80029b8 <__udivmoddi4+0x108>
 80029aa:	42ab      	cmp	r3, r5
 80029ac:	d9ee      	bls.n	800298c <__udivmoddi4+0xdc>
 80029ae:	3e01      	subs	r6, #1
 80029b0:	1924      	adds	r4, r4, r4
 80029b2:	416d      	adcs	r5, r5
 80029b4:	2e00      	cmp	r6, #0
 80029b6:	d1f8      	bne.n	80029aa <__udivmoddi4+0xfa>
 80029b8:	9800      	ldr	r0, [sp, #0]
 80029ba:	9901      	ldr	r1, [sp, #4]
 80029bc:	465b      	mov	r3, fp
 80029be:	1900      	adds	r0, r0, r4
 80029c0:	4169      	adcs	r1, r5
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	db24      	blt.n	8002a10 <__udivmoddi4+0x160>
 80029c6:	002b      	movs	r3, r5
 80029c8:	465a      	mov	r2, fp
 80029ca:	4644      	mov	r4, r8
 80029cc:	40d3      	lsrs	r3, r2
 80029ce:	002a      	movs	r2, r5
 80029d0:	40e2      	lsrs	r2, r4
 80029d2:	001c      	movs	r4, r3
 80029d4:	465b      	mov	r3, fp
 80029d6:	0015      	movs	r5, r2
 80029d8:	2b00      	cmp	r3, #0
 80029da:	db2a      	blt.n	8002a32 <__udivmoddi4+0x182>
 80029dc:	0026      	movs	r6, r4
 80029de:	409e      	lsls	r6, r3
 80029e0:	0033      	movs	r3, r6
 80029e2:	0026      	movs	r6, r4
 80029e4:	4647      	mov	r7, r8
 80029e6:	40be      	lsls	r6, r7
 80029e8:	0032      	movs	r2, r6
 80029ea:	1a80      	subs	r0, r0, r2
 80029ec:	4199      	sbcs	r1, r3
 80029ee:	9000      	str	r0, [sp, #0]
 80029f0:	9101      	str	r1, [sp, #4]
 80029f2:	e79f      	b.n	8002934 <__udivmoddi4+0x84>
 80029f4:	42a3      	cmp	r3, r4
 80029f6:	d8bc      	bhi.n	8002972 <__udivmoddi4+0xc2>
 80029f8:	e783      	b.n	8002902 <__udivmoddi4+0x52>
 80029fa:	4642      	mov	r2, r8
 80029fc:	2320      	movs	r3, #32
 80029fe:	2100      	movs	r1, #0
 8002a00:	1a9b      	subs	r3, r3, r2
 8002a02:	2200      	movs	r2, #0
 8002a04:	9100      	str	r1, [sp, #0]
 8002a06:	9201      	str	r2, [sp, #4]
 8002a08:	2201      	movs	r2, #1
 8002a0a:	40da      	lsrs	r2, r3
 8002a0c:	9201      	str	r2, [sp, #4]
 8002a0e:	e786      	b.n	800291e <__udivmoddi4+0x6e>
 8002a10:	4642      	mov	r2, r8
 8002a12:	2320      	movs	r3, #32
 8002a14:	1a9b      	subs	r3, r3, r2
 8002a16:	002a      	movs	r2, r5
 8002a18:	4646      	mov	r6, r8
 8002a1a:	409a      	lsls	r2, r3
 8002a1c:	0023      	movs	r3, r4
 8002a1e:	40f3      	lsrs	r3, r6
 8002a20:	4644      	mov	r4, r8
 8002a22:	4313      	orrs	r3, r2
 8002a24:	002a      	movs	r2, r5
 8002a26:	40e2      	lsrs	r2, r4
 8002a28:	001c      	movs	r4, r3
 8002a2a:	465b      	mov	r3, fp
 8002a2c:	0015      	movs	r5, r2
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	dad4      	bge.n	80029dc <__udivmoddi4+0x12c>
 8002a32:	4642      	mov	r2, r8
 8002a34:	002f      	movs	r7, r5
 8002a36:	2320      	movs	r3, #32
 8002a38:	0026      	movs	r6, r4
 8002a3a:	4097      	lsls	r7, r2
 8002a3c:	1a9b      	subs	r3, r3, r2
 8002a3e:	40de      	lsrs	r6, r3
 8002a40:	003b      	movs	r3, r7
 8002a42:	4333      	orrs	r3, r6
 8002a44:	e7cd      	b.n	80029e2 <__udivmoddi4+0x132>
 8002a46:	46c0      	nop			; (mov r8, r8)

08002a48 <__aeabi_fmul>:
 8002a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a4a:	4657      	mov	r7, sl
 8002a4c:	464e      	mov	r6, r9
 8002a4e:	4645      	mov	r5, r8
 8002a50:	46de      	mov	lr, fp
 8002a52:	0244      	lsls	r4, r0, #9
 8002a54:	b5e0      	push	{r5, r6, r7, lr}
 8002a56:	0045      	lsls	r5, r0, #1
 8002a58:	1c0f      	adds	r7, r1, #0
 8002a5a:	0a64      	lsrs	r4, r4, #9
 8002a5c:	0e2d      	lsrs	r5, r5, #24
 8002a5e:	0fc6      	lsrs	r6, r0, #31
 8002a60:	2d00      	cmp	r5, #0
 8002a62:	d047      	beq.n	8002af4 <__aeabi_fmul+0xac>
 8002a64:	2dff      	cmp	r5, #255	; 0xff
 8002a66:	d04d      	beq.n	8002b04 <__aeabi_fmul+0xbc>
 8002a68:	2300      	movs	r3, #0
 8002a6a:	2080      	movs	r0, #128	; 0x80
 8002a6c:	469a      	mov	sl, r3
 8002a6e:	469b      	mov	fp, r3
 8002a70:	00e4      	lsls	r4, r4, #3
 8002a72:	04c0      	lsls	r0, r0, #19
 8002a74:	4304      	orrs	r4, r0
 8002a76:	3d7f      	subs	r5, #127	; 0x7f
 8002a78:	0278      	lsls	r0, r7, #9
 8002a7a:	0a43      	lsrs	r3, r0, #9
 8002a7c:	4699      	mov	r9, r3
 8002a7e:	007a      	lsls	r2, r7, #1
 8002a80:	0ffb      	lsrs	r3, r7, #31
 8002a82:	4698      	mov	r8, r3
 8002a84:	0e12      	lsrs	r2, r2, #24
 8002a86:	464b      	mov	r3, r9
 8002a88:	d044      	beq.n	8002b14 <__aeabi_fmul+0xcc>
 8002a8a:	2aff      	cmp	r2, #255	; 0xff
 8002a8c:	d011      	beq.n	8002ab2 <__aeabi_fmul+0x6a>
 8002a8e:	00d8      	lsls	r0, r3, #3
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	04db      	lsls	r3, r3, #19
 8002a94:	4303      	orrs	r3, r0
 8002a96:	4699      	mov	r9, r3
 8002a98:	2000      	movs	r0, #0
 8002a9a:	3a7f      	subs	r2, #127	; 0x7f
 8002a9c:	18ad      	adds	r5, r5, r2
 8002a9e:	4647      	mov	r7, r8
 8002aa0:	4653      	mov	r3, sl
 8002aa2:	4077      	eors	r7, r6
 8002aa4:	1c69      	adds	r1, r5, #1
 8002aa6:	2b0f      	cmp	r3, #15
 8002aa8:	d83f      	bhi.n	8002b2a <__aeabi_fmul+0xe2>
 8002aaa:	4a72      	ldr	r2, [pc, #456]	; (8002c74 <__aeabi_fmul+0x22c>)
 8002aac:	009b      	lsls	r3, r3, #2
 8002aae:	58d3      	ldr	r3, [r2, r3]
 8002ab0:	469f      	mov	pc, r3
 8002ab2:	35ff      	adds	r5, #255	; 0xff
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d000      	beq.n	8002aba <__aeabi_fmul+0x72>
 8002ab8:	e079      	b.n	8002bae <__aeabi_fmul+0x166>
 8002aba:	4652      	mov	r2, sl
 8002abc:	2302      	movs	r3, #2
 8002abe:	431a      	orrs	r2, r3
 8002ac0:	4692      	mov	sl, r2
 8002ac2:	2002      	movs	r0, #2
 8002ac4:	e7eb      	b.n	8002a9e <__aeabi_fmul+0x56>
 8002ac6:	4647      	mov	r7, r8
 8002ac8:	464c      	mov	r4, r9
 8002aca:	4683      	mov	fp, r0
 8002acc:	465b      	mov	r3, fp
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d028      	beq.n	8002b24 <__aeabi_fmul+0xdc>
 8002ad2:	2b03      	cmp	r3, #3
 8002ad4:	d100      	bne.n	8002ad8 <__aeabi_fmul+0x90>
 8002ad6:	e0c6      	b.n	8002c66 <__aeabi_fmul+0x21e>
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d14f      	bne.n	8002b7c <__aeabi_fmul+0x134>
 8002adc:	2000      	movs	r0, #0
 8002ade:	2400      	movs	r4, #0
 8002ae0:	05c0      	lsls	r0, r0, #23
 8002ae2:	07ff      	lsls	r7, r7, #31
 8002ae4:	4320      	orrs	r0, r4
 8002ae6:	4338      	orrs	r0, r7
 8002ae8:	bcf0      	pop	{r4, r5, r6, r7}
 8002aea:	46bb      	mov	fp, r7
 8002aec:	46b2      	mov	sl, r6
 8002aee:	46a9      	mov	r9, r5
 8002af0:	46a0      	mov	r8, r4
 8002af2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002af4:	2c00      	cmp	r4, #0
 8002af6:	d171      	bne.n	8002bdc <__aeabi_fmul+0x194>
 8002af8:	2304      	movs	r3, #4
 8002afa:	469a      	mov	sl, r3
 8002afc:	3b03      	subs	r3, #3
 8002afe:	2500      	movs	r5, #0
 8002b00:	469b      	mov	fp, r3
 8002b02:	e7b9      	b.n	8002a78 <__aeabi_fmul+0x30>
 8002b04:	2c00      	cmp	r4, #0
 8002b06:	d163      	bne.n	8002bd0 <__aeabi_fmul+0x188>
 8002b08:	2308      	movs	r3, #8
 8002b0a:	469a      	mov	sl, r3
 8002b0c:	3b06      	subs	r3, #6
 8002b0e:	25ff      	movs	r5, #255	; 0xff
 8002b10:	469b      	mov	fp, r3
 8002b12:	e7b1      	b.n	8002a78 <__aeabi_fmul+0x30>
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d150      	bne.n	8002bba <__aeabi_fmul+0x172>
 8002b18:	4652      	mov	r2, sl
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	431a      	orrs	r2, r3
 8002b1e:	4692      	mov	sl, r2
 8002b20:	2001      	movs	r0, #1
 8002b22:	e7bc      	b.n	8002a9e <__aeabi_fmul+0x56>
 8002b24:	20ff      	movs	r0, #255	; 0xff
 8002b26:	2400      	movs	r4, #0
 8002b28:	e7da      	b.n	8002ae0 <__aeabi_fmul+0x98>
 8002b2a:	4648      	mov	r0, r9
 8002b2c:	0c26      	lsrs	r6, r4, #16
 8002b2e:	0424      	lsls	r4, r4, #16
 8002b30:	0c22      	lsrs	r2, r4, #16
 8002b32:	0404      	lsls	r4, r0, #16
 8002b34:	0c24      	lsrs	r4, r4, #16
 8002b36:	464b      	mov	r3, r9
 8002b38:	0020      	movs	r0, r4
 8002b3a:	0c1b      	lsrs	r3, r3, #16
 8002b3c:	4350      	muls	r0, r2
 8002b3e:	4374      	muls	r4, r6
 8002b40:	435a      	muls	r2, r3
 8002b42:	435e      	muls	r6, r3
 8002b44:	1912      	adds	r2, r2, r4
 8002b46:	0c03      	lsrs	r3, r0, #16
 8002b48:	189b      	adds	r3, r3, r2
 8002b4a:	429c      	cmp	r4, r3
 8002b4c:	d903      	bls.n	8002b56 <__aeabi_fmul+0x10e>
 8002b4e:	2280      	movs	r2, #128	; 0x80
 8002b50:	0252      	lsls	r2, r2, #9
 8002b52:	4694      	mov	ip, r2
 8002b54:	4466      	add	r6, ip
 8002b56:	0400      	lsls	r0, r0, #16
 8002b58:	041a      	lsls	r2, r3, #16
 8002b5a:	0c00      	lsrs	r0, r0, #16
 8002b5c:	1812      	adds	r2, r2, r0
 8002b5e:	0194      	lsls	r4, r2, #6
 8002b60:	1e60      	subs	r0, r4, #1
 8002b62:	4184      	sbcs	r4, r0
 8002b64:	0c1b      	lsrs	r3, r3, #16
 8002b66:	0e92      	lsrs	r2, r2, #26
 8002b68:	199b      	adds	r3, r3, r6
 8002b6a:	4314      	orrs	r4, r2
 8002b6c:	019b      	lsls	r3, r3, #6
 8002b6e:	431c      	orrs	r4, r3
 8002b70:	011b      	lsls	r3, r3, #4
 8002b72:	d572      	bpl.n	8002c5a <__aeabi_fmul+0x212>
 8002b74:	2001      	movs	r0, #1
 8002b76:	0863      	lsrs	r3, r4, #1
 8002b78:	4004      	ands	r4, r0
 8002b7a:	431c      	orrs	r4, r3
 8002b7c:	0008      	movs	r0, r1
 8002b7e:	307f      	adds	r0, #127	; 0x7f
 8002b80:	2800      	cmp	r0, #0
 8002b82:	dd3c      	ble.n	8002bfe <__aeabi_fmul+0x1b6>
 8002b84:	0763      	lsls	r3, r4, #29
 8002b86:	d004      	beq.n	8002b92 <__aeabi_fmul+0x14a>
 8002b88:	230f      	movs	r3, #15
 8002b8a:	4023      	ands	r3, r4
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d000      	beq.n	8002b92 <__aeabi_fmul+0x14a>
 8002b90:	3404      	adds	r4, #4
 8002b92:	0123      	lsls	r3, r4, #4
 8002b94:	d503      	bpl.n	8002b9e <__aeabi_fmul+0x156>
 8002b96:	3180      	adds	r1, #128	; 0x80
 8002b98:	0008      	movs	r0, r1
 8002b9a:	4b37      	ldr	r3, [pc, #220]	; (8002c78 <__aeabi_fmul+0x230>)
 8002b9c:	401c      	ands	r4, r3
 8002b9e:	28fe      	cmp	r0, #254	; 0xfe
 8002ba0:	dcc0      	bgt.n	8002b24 <__aeabi_fmul+0xdc>
 8002ba2:	01a4      	lsls	r4, r4, #6
 8002ba4:	0a64      	lsrs	r4, r4, #9
 8002ba6:	b2c0      	uxtb	r0, r0
 8002ba8:	e79a      	b.n	8002ae0 <__aeabi_fmul+0x98>
 8002baa:	0037      	movs	r7, r6
 8002bac:	e78e      	b.n	8002acc <__aeabi_fmul+0x84>
 8002bae:	4652      	mov	r2, sl
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	431a      	orrs	r2, r3
 8002bb4:	4692      	mov	sl, r2
 8002bb6:	2003      	movs	r0, #3
 8002bb8:	e771      	b.n	8002a9e <__aeabi_fmul+0x56>
 8002bba:	4648      	mov	r0, r9
 8002bbc:	f001 f9e8 	bl	8003f90 <__clzsi2>
 8002bc0:	464a      	mov	r2, r9
 8002bc2:	1f43      	subs	r3, r0, #5
 8002bc4:	409a      	lsls	r2, r3
 8002bc6:	1a2d      	subs	r5, r5, r0
 8002bc8:	4691      	mov	r9, r2
 8002bca:	2000      	movs	r0, #0
 8002bcc:	3d76      	subs	r5, #118	; 0x76
 8002bce:	e766      	b.n	8002a9e <__aeabi_fmul+0x56>
 8002bd0:	230c      	movs	r3, #12
 8002bd2:	469a      	mov	sl, r3
 8002bd4:	3b09      	subs	r3, #9
 8002bd6:	25ff      	movs	r5, #255	; 0xff
 8002bd8:	469b      	mov	fp, r3
 8002bda:	e74d      	b.n	8002a78 <__aeabi_fmul+0x30>
 8002bdc:	0020      	movs	r0, r4
 8002bde:	f001 f9d7 	bl	8003f90 <__clzsi2>
 8002be2:	2576      	movs	r5, #118	; 0x76
 8002be4:	1f43      	subs	r3, r0, #5
 8002be6:	409c      	lsls	r4, r3
 8002be8:	2300      	movs	r3, #0
 8002bea:	426d      	negs	r5, r5
 8002bec:	469a      	mov	sl, r3
 8002bee:	469b      	mov	fp, r3
 8002bf0:	1a2d      	subs	r5, r5, r0
 8002bf2:	e741      	b.n	8002a78 <__aeabi_fmul+0x30>
 8002bf4:	2480      	movs	r4, #128	; 0x80
 8002bf6:	2700      	movs	r7, #0
 8002bf8:	20ff      	movs	r0, #255	; 0xff
 8002bfa:	03e4      	lsls	r4, r4, #15
 8002bfc:	e770      	b.n	8002ae0 <__aeabi_fmul+0x98>
 8002bfe:	2301      	movs	r3, #1
 8002c00:	1a1b      	subs	r3, r3, r0
 8002c02:	2b1b      	cmp	r3, #27
 8002c04:	dd00      	ble.n	8002c08 <__aeabi_fmul+0x1c0>
 8002c06:	e769      	b.n	8002adc <__aeabi_fmul+0x94>
 8002c08:	319e      	adds	r1, #158	; 0x9e
 8002c0a:	0020      	movs	r0, r4
 8002c0c:	408c      	lsls	r4, r1
 8002c0e:	40d8      	lsrs	r0, r3
 8002c10:	1e63      	subs	r3, r4, #1
 8002c12:	419c      	sbcs	r4, r3
 8002c14:	4304      	orrs	r4, r0
 8002c16:	0763      	lsls	r3, r4, #29
 8002c18:	d004      	beq.n	8002c24 <__aeabi_fmul+0x1dc>
 8002c1a:	230f      	movs	r3, #15
 8002c1c:	4023      	ands	r3, r4
 8002c1e:	2b04      	cmp	r3, #4
 8002c20:	d000      	beq.n	8002c24 <__aeabi_fmul+0x1dc>
 8002c22:	3404      	adds	r4, #4
 8002c24:	0163      	lsls	r3, r4, #5
 8002c26:	d51a      	bpl.n	8002c5e <__aeabi_fmul+0x216>
 8002c28:	2001      	movs	r0, #1
 8002c2a:	2400      	movs	r4, #0
 8002c2c:	e758      	b.n	8002ae0 <__aeabi_fmul+0x98>
 8002c2e:	2080      	movs	r0, #128	; 0x80
 8002c30:	03c0      	lsls	r0, r0, #15
 8002c32:	4204      	tst	r4, r0
 8002c34:	d009      	beq.n	8002c4a <__aeabi_fmul+0x202>
 8002c36:	464b      	mov	r3, r9
 8002c38:	4203      	tst	r3, r0
 8002c3a:	d106      	bne.n	8002c4a <__aeabi_fmul+0x202>
 8002c3c:	464c      	mov	r4, r9
 8002c3e:	4304      	orrs	r4, r0
 8002c40:	0264      	lsls	r4, r4, #9
 8002c42:	4647      	mov	r7, r8
 8002c44:	20ff      	movs	r0, #255	; 0xff
 8002c46:	0a64      	lsrs	r4, r4, #9
 8002c48:	e74a      	b.n	8002ae0 <__aeabi_fmul+0x98>
 8002c4a:	2080      	movs	r0, #128	; 0x80
 8002c4c:	03c0      	lsls	r0, r0, #15
 8002c4e:	4304      	orrs	r4, r0
 8002c50:	0264      	lsls	r4, r4, #9
 8002c52:	0037      	movs	r7, r6
 8002c54:	20ff      	movs	r0, #255	; 0xff
 8002c56:	0a64      	lsrs	r4, r4, #9
 8002c58:	e742      	b.n	8002ae0 <__aeabi_fmul+0x98>
 8002c5a:	0029      	movs	r1, r5
 8002c5c:	e78e      	b.n	8002b7c <__aeabi_fmul+0x134>
 8002c5e:	01a4      	lsls	r4, r4, #6
 8002c60:	2000      	movs	r0, #0
 8002c62:	0a64      	lsrs	r4, r4, #9
 8002c64:	e73c      	b.n	8002ae0 <__aeabi_fmul+0x98>
 8002c66:	2080      	movs	r0, #128	; 0x80
 8002c68:	03c0      	lsls	r0, r0, #15
 8002c6a:	4304      	orrs	r4, r0
 8002c6c:	0264      	lsls	r4, r4, #9
 8002c6e:	20ff      	movs	r0, #255	; 0xff
 8002c70:	0a64      	lsrs	r4, r4, #9
 8002c72:	e735      	b.n	8002ae0 <__aeabi_fmul+0x98>
 8002c74:	0800ade0 	.word	0x0800ade0
 8002c78:	f7ffffff 	.word	0xf7ffffff

08002c7c <__aeabi_fsub>:
 8002c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c7e:	4646      	mov	r6, r8
 8002c80:	46d6      	mov	lr, sl
 8002c82:	464f      	mov	r7, r9
 8002c84:	0243      	lsls	r3, r0, #9
 8002c86:	0a5b      	lsrs	r3, r3, #9
 8002c88:	00da      	lsls	r2, r3, #3
 8002c8a:	4694      	mov	ip, r2
 8002c8c:	024a      	lsls	r2, r1, #9
 8002c8e:	b5c0      	push	{r6, r7, lr}
 8002c90:	0044      	lsls	r4, r0, #1
 8002c92:	0a56      	lsrs	r6, r2, #9
 8002c94:	1c05      	adds	r5, r0, #0
 8002c96:	46b0      	mov	r8, r6
 8002c98:	0e24      	lsrs	r4, r4, #24
 8002c9a:	004e      	lsls	r6, r1, #1
 8002c9c:	0992      	lsrs	r2, r2, #6
 8002c9e:	001f      	movs	r7, r3
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	4692      	mov	sl, r2
 8002ca4:	0fed      	lsrs	r5, r5, #31
 8002ca6:	0e36      	lsrs	r6, r6, #24
 8002ca8:	0fc9      	lsrs	r1, r1, #31
 8002caa:	2eff      	cmp	r6, #255	; 0xff
 8002cac:	d100      	bne.n	8002cb0 <__aeabi_fsub+0x34>
 8002cae:	e07f      	b.n	8002db0 <__aeabi_fsub+0x134>
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	4051      	eors	r1, r2
 8002cb4:	428d      	cmp	r5, r1
 8002cb6:	d051      	beq.n	8002d5c <__aeabi_fsub+0xe0>
 8002cb8:	1ba2      	subs	r2, r4, r6
 8002cba:	4691      	mov	r9, r2
 8002cbc:	2a00      	cmp	r2, #0
 8002cbe:	dc00      	bgt.n	8002cc2 <__aeabi_fsub+0x46>
 8002cc0:	e07e      	b.n	8002dc0 <__aeabi_fsub+0x144>
 8002cc2:	2e00      	cmp	r6, #0
 8002cc4:	d100      	bne.n	8002cc8 <__aeabi_fsub+0x4c>
 8002cc6:	e099      	b.n	8002dfc <__aeabi_fsub+0x180>
 8002cc8:	2cff      	cmp	r4, #255	; 0xff
 8002cca:	d100      	bne.n	8002cce <__aeabi_fsub+0x52>
 8002ccc:	e08c      	b.n	8002de8 <__aeabi_fsub+0x16c>
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	4652      	mov	r2, sl
 8002cd2:	04db      	lsls	r3, r3, #19
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	4692      	mov	sl, r2
 8002cd8:	464a      	mov	r2, r9
 8002cda:	2301      	movs	r3, #1
 8002cdc:	2a1b      	cmp	r2, #27
 8002cde:	dc08      	bgt.n	8002cf2 <__aeabi_fsub+0x76>
 8002ce0:	4653      	mov	r3, sl
 8002ce2:	2120      	movs	r1, #32
 8002ce4:	40d3      	lsrs	r3, r2
 8002ce6:	1a89      	subs	r1, r1, r2
 8002ce8:	4652      	mov	r2, sl
 8002cea:	408a      	lsls	r2, r1
 8002cec:	1e51      	subs	r1, r2, #1
 8002cee:	418a      	sbcs	r2, r1
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	4662      	mov	r2, ip
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	015a      	lsls	r2, r3, #5
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_fsub+0x80>
 8002cfa:	e0f3      	b.n	8002ee4 <__aeabi_fsub+0x268>
 8002cfc:	019b      	lsls	r3, r3, #6
 8002cfe:	099e      	lsrs	r6, r3, #6
 8002d00:	0030      	movs	r0, r6
 8002d02:	f001 f945 	bl	8003f90 <__clzsi2>
 8002d06:	3805      	subs	r0, #5
 8002d08:	4086      	lsls	r6, r0
 8002d0a:	4284      	cmp	r4, r0
 8002d0c:	dd00      	ble.n	8002d10 <__aeabi_fsub+0x94>
 8002d0e:	e0f7      	b.n	8002f00 <__aeabi_fsub+0x284>
 8002d10:	0032      	movs	r2, r6
 8002d12:	1b04      	subs	r4, r0, r4
 8002d14:	2020      	movs	r0, #32
 8002d16:	3401      	adds	r4, #1
 8002d18:	40e2      	lsrs	r2, r4
 8002d1a:	1b04      	subs	r4, r0, r4
 8002d1c:	40a6      	lsls	r6, r4
 8002d1e:	0033      	movs	r3, r6
 8002d20:	1e5e      	subs	r6, r3, #1
 8002d22:	41b3      	sbcs	r3, r6
 8002d24:	2400      	movs	r4, #0
 8002d26:	4313      	orrs	r3, r2
 8002d28:	075a      	lsls	r2, r3, #29
 8002d2a:	d004      	beq.n	8002d36 <__aeabi_fsub+0xba>
 8002d2c:	220f      	movs	r2, #15
 8002d2e:	401a      	ands	r2, r3
 8002d30:	2a04      	cmp	r2, #4
 8002d32:	d000      	beq.n	8002d36 <__aeabi_fsub+0xba>
 8002d34:	3304      	adds	r3, #4
 8002d36:	015a      	lsls	r2, r3, #5
 8002d38:	d400      	bmi.n	8002d3c <__aeabi_fsub+0xc0>
 8002d3a:	e0d6      	b.n	8002eea <__aeabi_fsub+0x26e>
 8002d3c:	1c62      	adds	r2, r4, #1
 8002d3e:	2cfe      	cmp	r4, #254	; 0xfe
 8002d40:	d100      	bne.n	8002d44 <__aeabi_fsub+0xc8>
 8002d42:	e0da      	b.n	8002efa <__aeabi_fsub+0x27e>
 8002d44:	019b      	lsls	r3, r3, #6
 8002d46:	0a5f      	lsrs	r7, r3, #9
 8002d48:	b2d0      	uxtb	r0, r2
 8002d4a:	05c0      	lsls	r0, r0, #23
 8002d4c:	4338      	orrs	r0, r7
 8002d4e:	07ed      	lsls	r5, r5, #31
 8002d50:	4328      	orrs	r0, r5
 8002d52:	bce0      	pop	{r5, r6, r7}
 8002d54:	46ba      	mov	sl, r7
 8002d56:	46b1      	mov	r9, r6
 8002d58:	46a8      	mov	r8, r5
 8002d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d5c:	1ba2      	subs	r2, r4, r6
 8002d5e:	4691      	mov	r9, r2
 8002d60:	2a00      	cmp	r2, #0
 8002d62:	dd63      	ble.n	8002e2c <__aeabi_fsub+0x1b0>
 8002d64:	2e00      	cmp	r6, #0
 8002d66:	d100      	bne.n	8002d6a <__aeabi_fsub+0xee>
 8002d68:	e099      	b.n	8002e9e <__aeabi_fsub+0x222>
 8002d6a:	2cff      	cmp	r4, #255	; 0xff
 8002d6c:	d03c      	beq.n	8002de8 <__aeabi_fsub+0x16c>
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	4652      	mov	r2, sl
 8002d72:	04db      	lsls	r3, r3, #19
 8002d74:	431a      	orrs	r2, r3
 8002d76:	4692      	mov	sl, r2
 8002d78:	464a      	mov	r2, r9
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	2a1b      	cmp	r2, #27
 8002d7e:	dc08      	bgt.n	8002d92 <__aeabi_fsub+0x116>
 8002d80:	4653      	mov	r3, sl
 8002d82:	2120      	movs	r1, #32
 8002d84:	40d3      	lsrs	r3, r2
 8002d86:	1a89      	subs	r1, r1, r2
 8002d88:	4652      	mov	r2, sl
 8002d8a:	408a      	lsls	r2, r1
 8002d8c:	1e51      	subs	r1, r2, #1
 8002d8e:	418a      	sbcs	r2, r1
 8002d90:	4313      	orrs	r3, r2
 8002d92:	4463      	add	r3, ip
 8002d94:	015a      	lsls	r2, r3, #5
 8002d96:	d400      	bmi.n	8002d9a <__aeabi_fsub+0x11e>
 8002d98:	e0a4      	b.n	8002ee4 <__aeabi_fsub+0x268>
 8002d9a:	3401      	adds	r4, #1
 8002d9c:	2cff      	cmp	r4, #255	; 0xff
 8002d9e:	d100      	bne.n	8002da2 <__aeabi_fsub+0x126>
 8002da0:	e0ab      	b.n	8002efa <__aeabi_fsub+0x27e>
 8002da2:	2201      	movs	r2, #1
 8002da4:	4997      	ldr	r1, [pc, #604]	; (8003004 <__aeabi_fsub+0x388>)
 8002da6:	401a      	ands	r2, r3
 8002da8:	085b      	lsrs	r3, r3, #1
 8002daa:	400b      	ands	r3, r1
 8002dac:	4313      	orrs	r3, r2
 8002dae:	e7bb      	b.n	8002d28 <__aeabi_fsub+0xac>
 8002db0:	2a00      	cmp	r2, #0
 8002db2:	d032      	beq.n	8002e1a <__aeabi_fsub+0x19e>
 8002db4:	428d      	cmp	r5, r1
 8002db6:	d035      	beq.n	8002e24 <__aeabi_fsub+0x1a8>
 8002db8:	22ff      	movs	r2, #255	; 0xff
 8002dba:	4252      	negs	r2, r2
 8002dbc:	4691      	mov	r9, r2
 8002dbe:	44a1      	add	r9, r4
 8002dc0:	464a      	mov	r2, r9
 8002dc2:	2a00      	cmp	r2, #0
 8002dc4:	d051      	beq.n	8002e6a <__aeabi_fsub+0x1ee>
 8002dc6:	1b30      	subs	r0, r6, r4
 8002dc8:	2c00      	cmp	r4, #0
 8002dca:	d000      	beq.n	8002dce <__aeabi_fsub+0x152>
 8002dcc:	e09c      	b.n	8002f08 <__aeabi_fsub+0x28c>
 8002dce:	4663      	mov	r3, ip
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d100      	bne.n	8002dd6 <__aeabi_fsub+0x15a>
 8002dd4:	e0df      	b.n	8002f96 <__aeabi_fsub+0x31a>
 8002dd6:	3801      	subs	r0, #1
 8002dd8:	2800      	cmp	r0, #0
 8002dda:	d100      	bne.n	8002dde <__aeabi_fsub+0x162>
 8002ddc:	e0f7      	b.n	8002fce <__aeabi_fsub+0x352>
 8002dde:	2eff      	cmp	r6, #255	; 0xff
 8002de0:	d000      	beq.n	8002de4 <__aeabi_fsub+0x168>
 8002de2:	e099      	b.n	8002f18 <__aeabi_fsub+0x29c>
 8002de4:	000d      	movs	r5, r1
 8002de6:	4643      	mov	r3, r8
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d100      	bne.n	8002dee <__aeabi_fsub+0x172>
 8002dec:	e085      	b.n	8002efa <__aeabi_fsub+0x27e>
 8002dee:	2780      	movs	r7, #128	; 0x80
 8002df0:	03ff      	lsls	r7, r7, #15
 8002df2:	431f      	orrs	r7, r3
 8002df4:	027f      	lsls	r7, r7, #9
 8002df6:	20ff      	movs	r0, #255	; 0xff
 8002df8:	0a7f      	lsrs	r7, r7, #9
 8002dfa:	e7a6      	b.n	8002d4a <__aeabi_fsub+0xce>
 8002dfc:	4652      	mov	r2, sl
 8002dfe:	2a00      	cmp	r2, #0
 8002e00:	d074      	beq.n	8002eec <__aeabi_fsub+0x270>
 8002e02:	2201      	movs	r2, #1
 8002e04:	4252      	negs	r2, r2
 8002e06:	4690      	mov	r8, r2
 8002e08:	44c1      	add	r9, r8
 8002e0a:	464a      	mov	r2, r9
 8002e0c:	2a00      	cmp	r2, #0
 8002e0e:	d100      	bne.n	8002e12 <__aeabi_fsub+0x196>
 8002e10:	e0c8      	b.n	8002fa4 <__aeabi_fsub+0x328>
 8002e12:	2cff      	cmp	r4, #255	; 0xff
 8002e14:	d000      	beq.n	8002e18 <__aeabi_fsub+0x19c>
 8002e16:	e75f      	b.n	8002cd8 <__aeabi_fsub+0x5c>
 8002e18:	e7e6      	b.n	8002de8 <__aeabi_fsub+0x16c>
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	4051      	eors	r1, r2
 8002e1e:	42a9      	cmp	r1, r5
 8002e20:	d000      	beq.n	8002e24 <__aeabi_fsub+0x1a8>
 8002e22:	e749      	b.n	8002cb8 <__aeabi_fsub+0x3c>
 8002e24:	22ff      	movs	r2, #255	; 0xff
 8002e26:	4252      	negs	r2, r2
 8002e28:	4691      	mov	r9, r2
 8002e2a:	44a1      	add	r9, r4
 8002e2c:	464a      	mov	r2, r9
 8002e2e:	2a00      	cmp	r2, #0
 8002e30:	d043      	beq.n	8002eba <__aeabi_fsub+0x23e>
 8002e32:	1b31      	subs	r1, r6, r4
 8002e34:	2c00      	cmp	r4, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_fsub+0x1be>
 8002e38:	e08c      	b.n	8002f54 <__aeabi_fsub+0x2d8>
 8002e3a:	2eff      	cmp	r6, #255	; 0xff
 8002e3c:	d100      	bne.n	8002e40 <__aeabi_fsub+0x1c4>
 8002e3e:	e092      	b.n	8002f66 <__aeabi_fsub+0x2ea>
 8002e40:	2380      	movs	r3, #128	; 0x80
 8002e42:	4662      	mov	r2, ip
 8002e44:	04db      	lsls	r3, r3, #19
 8002e46:	431a      	orrs	r2, r3
 8002e48:	4694      	mov	ip, r2
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	291b      	cmp	r1, #27
 8002e4e:	dc09      	bgt.n	8002e64 <__aeabi_fsub+0x1e8>
 8002e50:	2020      	movs	r0, #32
 8002e52:	4663      	mov	r3, ip
 8002e54:	4662      	mov	r2, ip
 8002e56:	40cb      	lsrs	r3, r1
 8002e58:	1a41      	subs	r1, r0, r1
 8002e5a:	408a      	lsls	r2, r1
 8002e5c:	0011      	movs	r1, r2
 8002e5e:	1e48      	subs	r0, r1, #1
 8002e60:	4181      	sbcs	r1, r0
 8002e62:	430b      	orrs	r3, r1
 8002e64:	0034      	movs	r4, r6
 8002e66:	4453      	add	r3, sl
 8002e68:	e794      	b.n	8002d94 <__aeabi_fsub+0x118>
 8002e6a:	22fe      	movs	r2, #254	; 0xfe
 8002e6c:	1c66      	adds	r6, r4, #1
 8002e6e:	4232      	tst	r2, r6
 8002e70:	d164      	bne.n	8002f3c <__aeabi_fsub+0x2c0>
 8002e72:	2c00      	cmp	r4, #0
 8002e74:	d000      	beq.n	8002e78 <__aeabi_fsub+0x1fc>
 8002e76:	e082      	b.n	8002f7e <__aeabi_fsub+0x302>
 8002e78:	4663      	mov	r3, ip
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d100      	bne.n	8002e80 <__aeabi_fsub+0x204>
 8002e7e:	e0ab      	b.n	8002fd8 <__aeabi_fsub+0x35c>
 8002e80:	4653      	mov	r3, sl
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d100      	bne.n	8002e88 <__aeabi_fsub+0x20c>
 8002e86:	e760      	b.n	8002d4a <__aeabi_fsub+0xce>
 8002e88:	4663      	mov	r3, ip
 8002e8a:	4652      	mov	r2, sl
 8002e8c:	1a9b      	subs	r3, r3, r2
 8002e8e:	015a      	lsls	r2, r3, #5
 8002e90:	d400      	bmi.n	8002e94 <__aeabi_fsub+0x218>
 8002e92:	e0aa      	b.n	8002fea <__aeabi_fsub+0x36e>
 8002e94:	4663      	mov	r3, ip
 8002e96:	4652      	mov	r2, sl
 8002e98:	000d      	movs	r5, r1
 8002e9a:	1ad3      	subs	r3, r2, r3
 8002e9c:	e744      	b.n	8002d28 <__aeabi_fsub+0xac>
 8002e9e:	4652      	mov	r2, sl
 8002ea0:	2a00      	cmp	r2, #0
 8002ea2:	d023      	beq.n	8002eec <__aeabi_fsub+0x270>
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	4252      	negs	r2, r2
 8002ea8:	4690      	mov	r8, r2
 8002eaa:	44c1      	add	r9, r8
 8002eac:	464a      	mov	r2, r9
 8002eae:	2a00      	cmp	r2, #0
 8002eb0:	d075      	beq.n	8002f9e <__aeabi_fsub+0x322>
 8002eb2:	2cff      	cmp	r4, #255	; 0xff
 8002eb4:	d000      	beq.n	8002eb8 <__aeabi_fsub+0x23c>
 8002eb6:	e75f      	b.n	8002d78 <__aeabi_fsub+0xfc>
 8002eb8:	e796      	b.n	8002de8 <__aeabi_fsub+0x16c>
 8002eba:	26fe      	movs	r6, #254	; 0xfe
 8002ebc:	3401      	adds	r4, #1
 8002ebe:	4226      	tst	r6, r4
 8002ec0:	d153      	bne.n	8002f6a <__aeabi_fsub+0x2ee>
 8002ec2:	2800      	cmp	r0, #0
 8002ec4:	d172      	bne.n	8002fac <__aeabi_fsub+0x330>
 8002ec6:	4663      	mov	r3, ip
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d100      	bne.n	8002ece <__aeabi_fsub+0x252>
 8002ecc:	e093      	b.n	8002ff6 <__aeabi_fsub+0x37a>
 8002ece:	4653      	mov	r3, sl
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d100      	bne.n	8002ed6 <__aeabi_fsub+0x25a>
 8002ed4:	e739      	b.n	8002d4a <__aeabi_fsub+0xce>
 8002ed6:	4463      	add	r3, ip
 8002ed8:	2400      	movs	r4, #0
 8002eda:	015a      	lsls	r2, r3, #5
 8002edc:	d502      	bpl.n	8002ee4 <__aeabi_fsub+0x268>
 8002ede:	4a4a      	ldr	r2, [pc, #296]	; (8003008 <__aeabi_fsub+0x38c>)
 8002ee0:	3401      	adds	r4, #1
 8002ee2:	4013      	ands	r3, r2
 8002ee4:	075a      	lsls	r2, r3, #29
 8002ee6:	d000      	beq.n	8002eea <__aeabi_fsub+0x26e>
 8002ee8:	e720      	b.n	8002d2c <__aeabi_fsub+0xb0>
 8002eea:	08db      	lsrs	r3, r3, #3
 8002eec:	2cff      	cmp	r4, #255	; 0xff
 8002eee:	d100      	bne.n	8002ef2 <__aeabi_fsub+0x276>
 8002ef0:	e77a      	b.n	8002de8 <__aeabi_fsub+0x16c>
 8002ef2:	025b      	lsls	r3, r3, #9
 8002ef4:	0a5f      	lsrs	r7, r3, #9
 8002ef6:	b2e0      	uxtb	r0, r4
 8002ef8:	e727      	b.n	8002d4a <__aeabi_fsub+0xce>
 8002efa:	20ff      	movs	r0, #255	; 0xff
 8002efc:	2700      	movs	r7, #0
 8002efe:	e724      	b.n	8002d4a <__aeabi_fsub+0xce>
 8002f00:	4b41      	ldr	r3, [pc, #260]	; (8003008 <__aeabi_fsub+0x38c>)
 8002f02:	1a24      	subs	r4, r4, r0
 8002f04:	4033      	ands	r3, r6
 8002f06:	e70f      	b.n	8002d28 <__aeabi_fsub+0xac>
 8002f08:	2eff      	cmp	r6, #255	; 0xff
 8002f0a:	d100      	bne.n	8002f0e <__aeabi_fsub+0x292>
 8002f0c:	e76a      	b.n	8002de4 <__aeabi_fsub+0x168>
 8002f0e:	2380      	movs	r3, #128	; 0x80
 8002f10:	4662      	mov	r2, ip
 8002f12:	04db      	lsls	r3, r3, #19
 8002f14:	431a      	orrs	r2, r3
 8002f16:	4694      	mov	ip, r2
 8002f18:	2301      	movs	r3, #1
 8002f1a:	281b      	cmp	r0, #27
 8002f1c:	dc09      	bgt.n	8002f32 <__aeabi_fsub+0x2b6>
 8002f1e:	2420      	movs	r4, #32
 8002f20:	4663      	mov	r3, ip
 8002f22:	4662      	mov	r2, ip
 8002f24:	40c3      	lsrs	r3, r0
 8002f26:	1a20      	subs	r0, r4, r0
 8002f28:	4082      	lsls	r2, r0
 8002f2a:	0010      	movs	r0, r2
 8002f2c:	1e44      	subs	r4, r0, #1
 8002f2e:	41a0      	sbcs	r0, r4
 8002f30:	4303      	orrs	r3, r0
 8002f32:	4652      	mov	r2, sl
 8002f34:	000d      	movs	r5, r1
 8002f36:	0034      	movs	r4, r6
 8002f38:	1ad3      	subs	r3, r2, r3
 8002f3a:	e6dc      	b.n	8002cf6 <__aeabi_fsub+0x7a>
 8002f3c:	4663      	mov	r3, ip
 8002f3e:	4652      	mov	r2, sl
 8002f40:	1a9e      	subs	r6, r3, r2
 8002f42:	0173      	lsls	r3, r6, #5
 8002f44:	d417      	bmi.n	8002f76 <__aeabi_fsub+0x2fa>
 8002f46:	2e00      	cmp	r6, #0
 8002f48:	d000      	beq.n	8002f4c <__aeabi_fsub+0x2d0>
 8002f4a:	e6d9      	b.n	8002d00 <__aeabi_fsub+0x84>
 8002f4c:	2500      	movs	r5, #0
 8002f4e:	2000      	movs	r0, #0
 8002f50:	2700      	movs	r7, #0
 8002f52:	e6fa      	b.n	8002d4a <__aeabi_fsub+0xce>
 8002f54:	4663      	mov	r3, ip
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d044      	beq.n	8002fe4 <__aeabi_fsub+0x368>
 8002f5a:	3901      	subs	r1, #1
 8002f5c:	2900      	cmp	r1, #0
 8002f5e:	d04c      	beq.n	8002ffa <__aeabi_fsub+0x37e>
 8002f60:	2eff      	cmp	r6, #255	; 0xff
 8002f62:	d000      	beq.n	8002f66 <__aeabi_fsub+0x2ea>
 8002f64:	e771      	b.n	8002e4a <__aeabi_fsub+0x1ce>
 8002f66:	4643      	mov	r3, r8
 8002f68:	e73e      	b.n	8002de8 <__aeabi_fsub+0x16c>
 8002f6a:	2cff      	cmp	r4, #255	; 0xff
 8002f6c:	d0c5      	beq.n	8002efa <__aeabi_fsub+0x27e>
 8002f6e:	4652      	mov	r2, sl
 8002f70:	4462      	add	r2, ip
 8002f72:	0853      	lsrs	r3, r2, #1
 8002f74:	e7b6      	b.n	8002ee4 <__aeabi_fsub+0x268>
 8002f76:	4663      	mov	r3, ip
 8002f78:	000d      	movs	r5, r1
 8002f7a:	1ad6      	subs	r6, r2, r3
 8002f7c:	e6c0      	b.n	8002d00 <__aeabi_fsub+0x84>
 8002f7e:	4662      	mov	r2, ip
 8002f80:	2a00      	cmp	r2, #0
 8002f82:	d116      	bne.n	8002fb2 <__aeabi_fsub+0x336>
 8002f84:	4653      	mov	r3, sl
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d000      	beq.n	8002f8c <__aeabi_fsub+0x310>
 8002f8a:	e72b      	b.n	8002de4 <__aeabi_fsub+0x168>
 8002f8c:	2780      	movs	r7, #128	; 0x80
 8002f8e:	2500      	movs	r5, #0
 8002f90:	20ff      	movs	r0, #255	; 0xff
 8002f92:	03ff      	lsls	r7, r7, #15
 8002f94:	e6d9      	b.n	8002d4a <__aeabi_fsub+0xce>
 8002f96:	000d      	movs	r5, r1
 8002f98:	4643      	mov	r3, r8
 8002f9a:	0034      	movs	r4, r6
 8002f9c:	e7a6      	b.n	8002eec <__aeabi_fsub+0x270>
 8002f9e:	4653      	mov	r3, sl
 8002fa0:	4463      	add	r3, ip
 8002fa2:	e6f7      	b.n	8002d94 <__aeabi_fsub+0x118>
 8002fa4:	4663      	mov	r3, ip
 8002fa6:	4652      	mov	r2, sl
 8002fa8:	1a9b      	subs	r3, r3, r2
 8002faa:	e6a4      	b.n	8002cf6 <__aeabi_fsub+0x7a>
 8002fac:	4662      	mov	r2, ip
 8002fae:	2a00      	cmp	r2, #0
 8002fb0:	d0d9      	beq.n	8002f66 <__aeabi_fsub+0x2ea>
 8002fb2:	4652      	mov	r2, sl
 8002fb4:	2a00      	cmp	r2, #0
 8002fb6:	d100      	bne.n	8002fba <__aeabi_fsub+0x33e>
 8002fb8:	e716      	b.n	8002de8 <__aeabi_fsub+0x16c>
 8002fba:	2280      	movs	r2, #128	; 0x80
 8002fbc:	03d2      	lsls	r2, r2, #15
 8002fbe:	4213      	tst	r3, r2
 8002fc0:	d100      	bne.n	8002fc4 <__aeabi_fsub+0x348>
 8002fc2:	e711      	b.n	8002de8 <__aeabi_fsub+0x16c>
 8002fc4:	4640      	mov	r0, r8
 8002fc6:	4210      	tst	r0, r2
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_fsub+0x350>
 8002fca:	e70d      	b.n	8002de8 <__aeabi_fsub+0x16c>
 8002fcc:	e70a      	b.n	8002de4 <__aeabi_fsub+0x168>
 8002fce:	4652      	mov	r2, sl
 8002fd0:	000d      	movs	r5, r1
 8002fd2:	0034      	movs	r4, r6
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	e68e      	b.n	8002cf6 <__aeabi_fsub+0x7a>
 8002fd8:	4653      	mov	r3, sl
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d008      	beq.n	8002ff0 <__aeabi_fsub+0x374>
 8002fde:	000d      	movs	r5, r1
 8002fe0:	4647      	mov	r7, r8
 8002fe2:	e6b2      	b.n	8002d4a <__aeabi_fsub+0xce>
 8002fe4:	4643      	mov	r3, r8
 8002fe6:	0034      	movs	r4, r6
 8002fe8:	e780      	b.n	8002eec <__aeabi_fsub+0x270>
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d000      	beq.n	8002ff0 <__aeabi_fsub+0x374>
 8002fee:	e779      	b.n	8002ee4 <__aeabi_fsub+0x268>
 8002ff0:	2500      	movs	r5, #0
 8002ff2:	2700      	movs	r7, #0
 8002ff4:	e6a9      	b.n	8002d4a <__aeabi_fsub+0xce>
 8002ff6:	4647      	mov	r7, r8
 8002ff8:	e6a7      	b.n	8002d4a <__aeabi_fsub+0xce>
 8002ffa:	4653      	mov	r3, sl
 8002ffc:	0034      	movs	r4, r6
 8002ffe:	4463      	add	r3, ip
 8003000:	e6c8      	b.n	8002d94 <__aeabi_fsub+0x118>
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	7dffffff 	.word	0x7dffffff
 8003008:	fbffffff 	.word	0xfbffffff

0800300c <__aeabi_f2iz>:
 800300c:	0241      	lsls	r1, r0, #9
 800300e:	0042      	lsls	r2, r0, #1
 8003010:	0fc3      	lsrs	r3, r0, #31
 8003012:	0a49      	lsrs	r1, r1, #9
 8003014:	2000      	movs	r0, #0
 8003016:	0e12      	lsrs	r2, r2, #24
 8003018:	2a7e      	cmp	r2, #126	; 0x7e
 800301a:	d903      	bls.n	8003024 <__aeabi_f2iz+0x18>
 800301c:	2a9d      	cmp	r2, #157	; 0x9d
 800301e:	d902      	bls.n	8003026 <__aeabi_f2iz+0x1a>
 8003020:	4a09      	ldr	r2, [pc, #36]	; (8003048 <__aeabi_f2iz+0x3c>)
 8003022:	1898      	adds	r0, r3, r2
 8003024:	4770      	bx	lr
 8003026:	2080      	movs	r0, #128	; 0x80
 8003028:	0400      	lsls	r0, r0, #16
 800302a:	4301      	orrs	r1, r0
 800302c:	2a95      	cmp	r2, #149	; 0x95
 800302e:	dc07      	bgt.n	8003040 <__aeabi_f2iz+0x34>
 8003030:	2096      	movs	r0, #150	; 0x96
 8003032:	1a82      	subs	r2, r0, r2
 8003034:	40d1      	lsrs	r1, r2
 8003036:	4248      	negs	r0, r1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1f3      	bne.n	8003024 <__aeabi_f2iz+0x18>
 800303c:	0008      	movs	r0, r1
 800303e:	e7f1      	b.n	8003024 <__aeabi_f2iz+0x18>
 8003040:	3a96      	subs	r2, #150	; 0x96
 8003042:	4091      	lsls	r1, r2
 8003044:	e7f7      	b.n	8003036 <__aeabi_f2iz+0x2a>
 8003046:	46c0      	nop			; (mov r8, r8)
 8003048:	7fffffff 	.word	0x7fffffff

0800304c <__aeabi_dmul>:
 800304c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800304e:	4657      	mov	r7, sl
 8003050:	464e      	mov	r6, r9
 8003052:	4645      	mov	r5, r8
 8003054:	46de      	mov	lr, fp
 8003056:	b5e0      	push	{r5, r6, r7, lr}
 8003058:	4698      	mov	r8, r3
 800305a:	030c      	lsls	r4, r1, #12
 800305c:	004b      	lsls	r3, r1, #1
 800305e:	0006      	movs	r6, r0
 8003060:	4692      	mov	sl, r2
 8003062:	b087      	sub	sp, #28
 8003064:	0b24      	lsrs	r4, r4, #12
 8003066:	0d5b      	lsrs	r3, r3, #21
 8003068:	0fcf      	lsrs	r7, r1, #31
 800306a:	2b00      	cmp	r3, #0
 800306c:	d06c      	beq.n	8003148 <__aeabi_dmul+0xfc>
 800306e:	4add      	ldr	r2, [pc, #884]	; (80033e4 <__aeabi_dmul+0x398>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d100      	bne.n	8003076 <__aeabi_dmul+0x2a>
 8003074:	e086      	b.n	8003184 <__aeabi_dmul+0x138>
 8003076:	0f42      	lsrs	r2, r0, #29
 8003078:	00e4      	lsls	r4, r4, #3
 800307a:	4314      	orrs	r4, r2
 800307c:	2280      	movs	r2, #128	; 0x80
 800307e:	0412      	lsls	r2, r2, #16
 8003080:	4314      	orrs	r4, r2
 8003082:	4ad9      	ldr	r2, [pc, #868]	; (80033e8 <__aeabi_dmul+0x39c>)
 8003084:	00c5      	lsls	r5, r0, #3
 8003086:	4694      	mov	ip, r2
 8003088:	4463      	add	r3, ip
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	2300      	movs	r3, #0
 800308e:	4699      	mov	r9, r3
 8003090:	469b      	mov	fp, r3
 8003092:	4643      	mov	r3, r8
 8003094:	4642      	mov	r2, r8
 8003096:	031e      	lsls	r6, r3, #12
 8003098:	0fd2      	lsrs	r2, r2, #31
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	4650      	mov	r0, sl
 800309e:	4690      	mov	r8, r2
 80030a0:	0b36      	lsrs	r6, r6, #12
 80030a2:	0d5b      	lsrs	r3, r3, #21
 80030a4:	d100      	bne.n	80030a8 <__aeabi_dmul+0x5c>
 80030a6:	e078      	b.n	800319a <__aeabi_dmul+0x14e>
 80030a8:	4ace      	ldr	r2, [pc, #824]	; (80033e4 <__aeabi_dmul+0x398>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d01d      	beq.n	80030ea <__aeabi_dmul+0x9e>
 80030ae:	49ce      	ldr	r1, [pc, #824]	; (80033e8 <__aeabi_dmul+0x39c>)
 80030b0:	0f42      	lsrs	r2, r0, #29
 80030b2:	468c      	mov	ip, r1
 80030b4:	9900      	ldr	r1, [sp, #0]
 80030b6:	4463      	add	r3, ip
 80030b8:	00f6      	lsls	r6, r6, #3
 80030ba:	468c      	mov	ip, r1
 80030bc:	4316      	orrs	r6, r2
 80030be:	2280      	movs	r2, #128	; 0x80
 80030c0:	449c      	add	ip, r3
 80030c2:	0412      	lsls	r2, r2, #16
 80030c4:	4663      	mov	r3, ip
 80030c6:	4316      	orrs	r6, r2
 80030c8:	00c2      	lsls	r2, r0, #3
 80030ca:	2000      	movs	r0, #0
 80030cc:	9300      	str	r3, [sp, #0]
 80030ce:	9900      	ldr	r1, [sp, #0]
 80030d0:	4643      	mov	r3, r8
 80030d2:	3101      	adds	r1, #1
 80030d4:	468c      	mov	ip, r1
 80030d6:	4649      	mov	r1, r9
 80030d8:	407b      	eors	r3, r7
 80030da:	9301      	str	r3, [sp, #4]
 80030dc:	290f      	cmp	r1, #15
 80030de:	d900      	bls.n	80030e2 <__aeabi_dmul+0x96>
 80030e0:	e07e      	b.n	80031e0 <__aeabi_dmul+0x194>
 80030e2:	4bc2      	ldr	r3, [pc, #776]	; (80033ec <__aeabi_dmul+0x3a0>)
 80030e4:	0089      	lsls	r1, r1, #2
 80030e6:	5859      	ldr	r1, [r3, r1]
 80030e8:	468f      	mov	pc, r1
 80030ea:	4652      	mov	r2, sl
 80030ec:	9b00      	ldr	r3, [sp, #0]
 80030ee:	4332      	orrs	r2, r6
 80030f0:	d000      	beq.n	80030f4 <__aeabi_dmul+0xa8>
 80030f2:	e156      	b.n	80033a2 <__aeabi_dmul+0x356>
 80030f4:	49bb      	ldr	r1, [pc, #748]	; (80033e4 <__aeabi_dmul+0x398>)
 80030f6:	2600      	movs	r6, #0
 80030f8:	468c      	mov	ip, r1
 80030fa:	4463      	add	r3, ip
 80030fc:	4649      	mov	r1, r9
 80030fe:	9300      	str	r3, [sp, #0]
 8003100:	2302      	movs	r3, #2
 8003102:	4319      	orrs	r1, r3
 8003104:	4689      	mov	r9, r1
 8003106:	2002      	movs	r0, #2
 8003108:	e7e1      	b.n	80030ce <__aeabi_dmul+0x82>
 800310a:	4643      	mov	r3, r8
 800310c:	9301      	str	r3, [sp, #4]
 800310e:	0034      	movs	r4, r6
 8003110:	0015      	movs	r5, r2
 8003112:	4683      	mov	fp, r0
 8003114:	465b      	mov	r3, fp
 8003116:	2b02      	cmp	r3, #2
 8003118:	d05e      	beq.n	80031d8 <__aeabi_dmul+0x18c>
 800311a:	2b03      	cmp	r3, #3
 800311c:	d100      	bne.n	8003120 <__aeabi_dmul+0xd4>
 800311e:	e1f3      	b.n	8003508 <__aeabi_dmul+0x4bc>
 8003120:	2b01      	cmp	r3, #1
 8003122:	d000      	beq.n	8003126 <__aeabi_dmul+0xda>
 8003124:	e118      	b.n	8003358 <__aeabi_dmul+0x30c>
 8003126:	2200      	movs	r2, #0
 8003128:	2400      	movs	r4, #0
 800312a:	2500      	movs	r5, #0
 800312c:	9b01      	ldr	r3, [sp, #4]
 800312e:	0512      	lsls	r2, r2, #20
 8003130:	4322      	orrs	r2, r4
 8003132:	07db      	lsls	r3, r3, #31
 8003134:	431a      	orrs	r2, r3
 8003136:	0028      	movs	r0, r5
 8003138:	0011      	movs	r1, r2
 800313a:	b007      	add	sp, #28
 800313c:	bcf0      	pop	{r4, r5, r6, r7}
 800313e:	46bb      	mov	fp, r7
 8003140:	46b2      	mov	sl, r6
 8003142:	46a9      	mov	r9, r5
 8003144:	46a0      	mov	r8, r4
 8003146:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003148:	0025      	movs	r5, r4
 800314a:	4305      	orrs	r5, r0
 800314c:	d100      	bne.n	8003150 <__aeabi_dmul+0x104>
 800314e:	e141      	b.n	80033d4 <__aeabi_dmul+0x388>
 8003150:	2c00      	cmp	r4, #0
 8003152:	d100      	bne.n	8003156 <__aeabi_dmul+0x10a>
 8003154:	e1ad      	b.n	80034b2 <__aeabi_dmul+0x466>
 8003156:	0020      	movs	r0, r4
 8003158:	f000 ff1a 	bl	8003f90 <__clzsi2>
 800315c:	0001      	movs	r1, r0
 800315e:	0002      	movs	r2, r0
 8003160:	390b      	subs	r1, #11
 8003162:	231d      	movs	r3, #29
 8003164:	0010      	movs	r0, r2
 8003166:	1a5b      	subs	r3, r3, r1
 8003168:	0031      	movs	r1, r6
 800316a:	0035      	movs	r5, r6
 800316c:	3808      	subs	r0, #8
 800316e:	4084      	lsls	r4, r0
 8003170:	40d9      	lsrs	r1, r3
 8003172:	4085      	lsls	r5, r0
 8003174:	430c      	orrs	r4, r1
 8003176:	489e      	ldr	r0, [pc, #632]	; (80033f0 <__aeabi_dmul+0x3a4>)
 8003178:	1a83      	subs	r3, r0, r2
 800317a:	9300      	str	r3, [sp, #0]
 800317c:	2300      	movs	r3, #0
 800317e:	4699      	mov	r9, r3
 8003180:	469b      	mov	fp, r3
 8003182:	e786      	b.n	8003092 <__aeabi_dmul+0x46>
 8003184:	0005      	movs	r5, r0
 8003186:	4325      	orrs	r5, r4
 8003188:	d000      	beq.n	800318c <__aeabi_dmul+0x140>
 800318a:	e11c      	b.n	80033c6 <__aeabi_dmul+0x37a>
 800318c:	2208      	movs	r2, #8
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	2302      	movs	r3, #2
 8003192:	2400      	movs	r4, #0
 8003194:	4691      	mov	r9, r2
 8003196:	469b      	mov	fp, r3
 8003198:	e77b      	b.n	8003092 <__aeabi_dmul+0x46>
 800319a:	4652      	mov	r2, sl
 800319c:	4332      	orrs	r2, r6
 800319e:	d100      	bne.n	80031a2 <__aeabi_dmul+0x156>
 80031a0:	e10a      	b.n	80033b8 <__aeabi_dmul+0x36c>
 80031a2:	2e00      	cmp	r6, #0
 80031a4:	d100      	bne.n	80031a8 <__aeabi_dmul+0x15c>
 80031a6:	e176      	b.n	8003496 <__aeabi_dmul+0x44a>
 80031a8:	0030      	movs	r0, r6
 80031aa:	f000 fef1 	bl	8003f90 <__clzsi2>
 80031ae:	0002      	movs	r2, r0
 80031b0:	3a0b      	subs	r2, #11
 80031b2:	231d      	movs	r3, #29
 80031b4:	0001      	movs	r1, r0
 80031b6:	1a9b      	subs	r3, r3, r2
 80031b8:	4652      	mov	r2, sl
 80031ba:	3908      	subs	r1, #8
 80031bc:	40da      	lsrs	r2, r3
 80031be:	408e      	lsls	r6, r1
 80031c0:	4316      	orrs	r6, r2
 80031c2:	4652      	mov	r2, sl
 80031c4:	408a      	lsls	r2, r1
 80031c6:	9b00      	ldr	r3, [sp, #0]
 80031c8:	4989      	ldr	r1, [pc, #548]	; (80033f0 <__aeabi_dmul+0x3a4>)
 80031ca:	1a18      	subs	r0, r3, r0
 80031cc:	0003      	movs	r3, r0
 80031ce:	468c      	mov	ip, r1
 80031d0:	4463      	add	r3, ip
 80031d2:	2000      	movs	r0, #0
 80031d4:	9300      	str	r3, [sp, #0]
 80031d6:	e77a      	b.n	80030ce <__aeabi_dmul+0x82>
 80031d8:	2400      	movs	r4, #0
 80031da:	2500      	movs	r5, #0
 80031dc:	4a81      	ldr	r2, [pc, #516]	; (80033e4 <__aeabi_dmul+0x398>)
 80031de:	e7a5      	b.n	800312c <__aeabi_dmul+0xe0>
 80031e0:	0c2f      	lsrs	r7, r5, #16
 80031e2:	042d      	lsls	r5, r5, #16
 80031e4:	0c2d      	lsrs	r5, r5, #16
 80031e6:	002b      	movs	r3, r5
 80031e8:	0c11      	lsrs	r1, r2, #16
 80031ea:	0412      	lsls	r2, r2, #16
 80031ec:	0c12      	lsrs	r2, r2, #16
 80031ee:	4353      	muls	r3, r2
 80031f0:	4698      	mov	r8, r3
 80031f2:	0013      	movs	r3, r2
 80031f4:	0028      	movs	r0, r5
 80031f6:	437b      	muls	r3, r7
 80031f8:	4699      	mov	r9, r3
 80031fa:	4348      	muls	r0, r1
 80031fc:	4448      	add	r0, r9
 80031fe:	4683      	mov	fp, r0
 8003200:	4640      	mov	r0, r8
 8003202:	000b      	movs	r3, r1
 8003204:	0c00      	lsrs	r0, r0, #16
 8003206:	4682      	mov	sl, r0
 8003208:	4658      	mov	r0, fp
 800320a:	437b      	muls	r3, r7
 800320c:	4450      	add	r0, sl
 800320e:	9302      	str	r3, [sp, #8]
 8003210:	4581      	cmp	r9, r0
 8003212:	d906      	bls.n	8003222 <__aeabi_dmul+0x1d6>
 8003214:	469a      	mov	sl, r3
 8003216:	2380      	movs	r3, #128	; 0x80
 8003218:	025b      	lsls	r3, r3, #9
 800321a:	4699      	mov	r9, r3
 800321c:	44ca      	add	sl, r9
 800321e:	4653      	mov	r3, sl
 8003220:	9302      	str	r3, [sp, #8]
 8003222:	0c03      	lsrs	r3, r0, #16
 8003224:	469b      	mov	fp, r3
 8003226:	4643      	mov	r3, r8
 8003228:	041b      	lsls	r3, r3, #16
 800322a:	0400      	lsls	r0, r0, #16
 800322c:	0c1b      	lsrs	r3, r3, #16
 800322e:	4698      	mov	r8, r3
 8003230:	0003      	movs	r3, r0
 8003232:	4443      	add	r3, r8
 8003234:	9304      	str	r3, [sp, #16]
 8003236:	0c33      	lsrs	r3, r6, #16
 8003238:	4699      	mov	r9, r3
 800323a:	002b      	movs	r3, r5
 800323c:	0436      	lsls	r6, r6, #16
 800323e:	0c36      	lsrs	r6, r6, #16
 8003240:	4373      	muls	r3, r6
 8003242:	4698      	mov	r8, r3
 8003244:	0033      	movs	r3, r6
 8003246:	437b      	muls	r3, r7
 8003248:	469a      	mov	sl, r3
 800324a:	464b      	mov	r3, r9
 800324c:	435d      	muls	r5, r3
 800324e:	435f      	muls	r7, r3
 8003250:	4643      	mov	r3, r8
 8003252:	4455      	add	r5, sl
 8003254:	0c18      	lsrs	r0, r3, #16
 8003256:	1940      	adds	r0, r0, r5
 8003258:	4582      	cmp	sl, r0
 800325a:	d903      	bls.n	8003264 <__aeabi_dmul+0x218>
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	025b      	lsls	r3, r3, #9
 8003260:	469a      	mov	sl, r3
 8003262:	4457      	add	r7, sl
 8003264:	0c05      	lsrs	r5, r0, #16
 8003266:	19eb      	adds	r3, r5, r7
 8003268:	9305      	str	r3, [sp, #20]
 800326a:	4643      	mov	r3, r8
 800326c:	041d      	lsls	r5, r3, #16
 800326e:	0c2d      	lsrs	r5, r5, #16
 8003270:	0400      	lsls	r0, r0, #16
 8003272:	1940      	adds	r0, r0, r5
 8003274:	0c25      	lsrs	r5, r4, #16
 8003276:	0424      	lsls	r4, r4, #16
 8003278:	0c24      	lsrs	r4, r4, #16
 800327a:	0027      	movs	r7, r4
 800327c:	4357      	muls	r7, r2
 800327e:	436a      	muls	r2, r5
 8003280:	4690      	mov	r8, r2
 8003282:	002a      	movs	r2, r5
 8003284:	0c3b      	lsrs	r3, r7, #16
 8003286:	469a      	mov	sl, r3
 8003288:	434a      	muls	r2, r1
 800328a:	4361      	muls	r1, r4
 800328c:	4441      	add	r1, r8
 800328e:	4451      	add	r1, sl
 8003290:	4483      	add	fp, r0
 8003292:	4588      	cmp	r8, r1
 8003294:	d903      	bls.n	800329e <__aeabi_dmul+0x252>
 8003296:	2380      	movs	r3, #128	; 0x80
 8003298:	025b      	lsls	r3, r3, #9
 800329a:	4698      	mov	r8, r3
 800329c:	4442      	add	r2, r8
 800329e:	043f      	lsls	r7, r7, #16
 80032a0:	0c0b      	lsrs	r3, r1, #16
 80032a2:	0c3f      	lsrs	r7, r7, #16
 80032a4:	0409      	lsls	r1, r1, #16
 80032a6:	19c9      	adds	r1, r1, r7
 80032a8:	0027      	movs	r7, r4
 80032aa:	4698      	mov	r8, r3
 80032ac:	464b      	mov	r3, r9
 80032ae:	4377      	muls	r7, r6
 80032b0:	435c      	muls	r4, r3
 80032b2:	436e      	muls	r6, r5
 80032b4:	435d      	muls	r5, r3
 80032b6:	0c3b      	lsrs	r3, r7, #16
 80032b8:	4699      	mov	r9, r3
 80032ba:	19a4      	adds	r4, r4, r6
 80032bc:	444c      	add	r4, r9
 80032be:	4442      	add	r2, r8
 80032c0:	9503      	str	r5, [sp, #12]
 80032c2:	42a6      	cmp	r6, r4
 80032c4:	d904      	bls.n	80032d0 <__aeabi_dmul+0x284>
 80032c6:	2380      	movs	r3, #128	; 0x80
 80032c8:	025b      	lsls	r3, r3, #9
 80032ca:	4698      	mov	r8, r3
 80032cc:	4445      	add	r5, r8
 80032ce:	9503      	str	r5, [sp, #12]
 80032d0:	9b02      	ldr	r3, [sp, #8]
 80032d2:	043f      	lsls	r7, r7, #16
 80032d4:	445b      	add	r3, fp
 80032d6:	001e      	movs	r6, r3
 80032d8:	4283      	cmp	r3, r0
 80032da:	4180      	sbcs	r0, r0
 80032dc:	0423      	lsls	r3, r4, #16
 80032de:	4698      	mov	r8, r3
 80032e0:	9b05      	ldr	r3, [sp, #20]
 80032e2:	0c3f      	lsrs	r7, r7, #16
 80032e4:	4447      	add	r7, r8
 80032e6:	4698      	mov	r8, r3
 80032e8:	1876      	adds	r6, r6, r1
 80032ea:	428e      	cmp	r6, r1
 80032ec:	4189      	sbcs	r1, r1
 80032ee:	4447      	add	r7, r8
 80032f0:	4240      	negs	r0, r0
 80032f2:	183d      	adds	r5, r7, r0
 80032f4:	46a8      	mov	r8, r5
 80032f6:	4693      	mov	fp, r2
 80032f8:	4249      	negs	r1, r1
 80032fa:	468a      	mov	sl, r1
 80032fc:	44c3      	add	fp, r8
 80032fe:	429f      	cmp	r7, r3
 8003300:	41bf      	sbcs	r7, r7
 8003302:	4580      	cmp	r8, r0
 8003304:	4180      	sbcs	r0, r0
 8003306:	9b03      	ldr	r3, [sp, #12]
 8003308:	44da      	add	sl, fp
 800330a:	4698      	mov	r8, r3
 800330c:	4653      	mov	r3, sl
 800330e:	4240      	negs	r0, r0
 8003310:	427f      	negs	r7, r7
 8003312:	4307      	orrs	r7, r0
 8003314:	0c24      	lsrs	r4, r4, #16
 8003316:	4593      	cmp	fp, r2
 8003318:	4192      	sbcs	r2, r2
 800331a:	458a      	cmp	sl, r1
 800331c:	4189      	sbcs	r1, r1
 800331e:	193f      	adds	r7, r7, r4
 8003320:	0ddc      	lsrs	r4, r3, #23
 8003322:	9b04      	ldr	r3, [sp, #16]
 8003324:	0275      	lsls	r5, r6, #9
 8003326:	431d      	orrs	r5, r3
 8003328:	1e68      	subs	r0, r5, #1
 800332a:	4185      	sbcs	r5, r0
 800332c:	4653      	mov	r3, sl
 800332e:	4252      	negs	r2, r2
 8003330:	4249      	negs	r1, r1
 8003332:	430a      	orrs	r2, r1
 8003334:	18bf      	adds	r7, r7, r2
 8003336:	4447      	add	r7, r8
 8003338:	0df6      	lsrs	r6, r6, #23
 800333a:	027f      	lsls	r7, r7, #9
 800333c:	4335      	orrs	r5, r6
 800333e:	025a      	lsls	r2, r3, #9
 8003340:	433c      	orrs	r4, r7
 8003342:	4315      	orrs	r5, r2
 8003344:	01fb      	lsls	r3, r7, #7
 8003346:	d400      	bmi.n	800334a <__aeabi_dmul+0x2fe>
 8003348:	e0c1      	b.n	80034ce <__aeabi_dmul+0x482>
 800334a:	2101      	movs	r1, #1
 800334c:	086a      	lsrs	r2, r5, #1
 800334e:	400d      	ands	r5, r1
 8003350:	4315      	orrs	r5, r2
 8003352:	07e2      	lsls	r2, r4, #31
 8003354:	4315      	orrs	r5, r2
 8003356:	0864      	lsrs	r4, r4, #1
 8003358:	4926      	ldr	r1, [pc, #152]	; (80033f4 <__aeabi_dmul+0x3a8>)
 800335a:	4461      	add	r1, ip
 800335c:	2900      	cmp	r1, #0
 800335e:	dd56      	ble.n	800340e <__aeabi_dmul+0x3c2>
 8003360:	076b      	lsls	r3, r5, #29
 8003362:	d009      	beq.n	8003378 <__aeabi_dmul+0x32c>
 8003364:	220f      	movs	r2, #15
 8003366:	402a      	ands	r2, r5
 8003368:	2a04      	cmp	r2, #4
 800336a:	d005      	beq.n	8003378 <__aeabi_dmul+0x32c>
 800336c:	1d2a      	adds	r2, r5, #4
 800336e:	42aa      	cmp	r2, r5
 8003370:	41ad      	sbcs	r5, r5
 8003372:	426d      	negs	r5, r5
 8003374:	1964      	adds	r4, r4, r5
 8003376:	0015      	movs	r5, r2
 8003378:	01e3      	lsls	r3, r4, #7
 800337a:	d504      	bpl.n	8003386 <__aeabi_dmul+0x33a>
 800337c:	2180      	movs	r1, #128	; 0x80
 800337e:	4a1e      	ldr	r2, [pc, #120]	; (80033f8 <__aeabi_dmul+0x3ac>)
 8003380:	00c9      	lsls	r1, r1, #3
 8003382:	4014      	ands	r4, r2
 8003384:	4461      	add	r1, ip
 8003386:	4a1d      	ldr	r2, [pc, #116]	; (80033fc <__aeabi_dmul+0x3b0>)
 8003388:	4291      	cmp	r1, r2
 800338a:	dd00      	ble.n	800338e <__aeabi_dmul+0x342>
 800338c:	e724      	b.n	80031d8 <__aeabi_dmul+0x18c>
 800338e:	0762      	lsls	r2, r4, #29
 8003390:	08ed      	lsrs	r5, r5, #3
 8003392:	0264      	lsls	r4, r4, #9
 8003394:	0549      	lsls	r1, r1, #21
 8003396:	4315      	orrs	r5, r2
 8003398:	0b24      	lsrs	r4, r4, #12
 800339a:	0d4a      	lsrs	r2, r1, #21
 800339c:	e6c6      	b.n	800312c <__aeabi_dmul+0xe0>
 800339e:	9701      	str	r7, [sp, #4]
 80033a0:	e6b8      	b.n	8003114 <__aeabi_dmul+0xc8>
 80033a2:	4a10      	ldr	r2, [pc, #64]	; (80033e4 <__aeabi_dmul+0x398>)
 80033a4:	2003      	movs	r0, #3
 80033a6:	4694      	mov	ip, r2
 80033a8:	4463      	add	r3, ip
 80033aa:	464a      	mov	r2, r9
 80033ac:	9300      	str	r3, [sp, #0]
 80033ae:	2303      	movs	r3, #3
 80033b0:	431a      	orrs	r2, r3
 80033b2:	4691      	mov	r9, r2
 80033b4:	4652      	mov	r2, sl
 80033b6:	e68a      	b.n	80030ce <__aeabi_dmul+0x82>
 80033b8:	4649      	mov	r1, r9
 80033ba:	2301      	movs	r3, #1
 80033bc:	4319      	orrs	r1, r3
 80033be:	4689      	mov	r9, r1
 80033c0:	2600      	movs	r6, #0
 80033c2:	2001      	movs	r0, #1
 80033c4:	e683      	b.n	80030ce <__aeabi_dmul+0x82>
 80033c6:	220c      	movs	r2, #12
 80033c8:	9300      	str	r3, [sp, #0]
 80033ca:	2303      	movs	r3, #3
 80033cc:	0005      	movs	r5, r0
 80033ce:	4691      	mov	r9, r2
 80033d0:	469b      	mov	fp, r3
 80033d2:	e65e      	b.n	8003092 <__aeabi_dmul+0x46>
 80033d4:	2304      	movs	r3, #4
 80033d6:	4699      	mov	r9, r3
 80033d8:	2300      	movs	r3, #0
 80033da:	9300      	str	r3, [sp, #0]
 80033dc:	3301      	adds	r3, #1
 80033de:	2400      	movs	r4, #0
 80033e0:	469b      	mov	fp, r3
 80033e2:	e656      	b.n	8003092 <__aeabi_dmul+0x46>
 80033e4:	000007ff 	.word	0x000007ff
 80033e8:	fffffc01 	.word	0xfffffc01
 80033ec:	0800ae20 	.word	0x0800ae20
 80033f0:	fffffc0d 	.word	0xfffffc0d
 80033f4:	000003ff 	.word	0x000003ff
 80033f8:	feffffff 	.word	0xfeffffff
 80033fc:	000007fe 	.word	0x000007fe
 8003400:	2300      	movs	r3, #0
 8003402:	2480      	movs	r4, #128	; 0x80
 8003404:	2500      	movs	r5, #0
 8003406:	4a44      	ldr	r2, [pc, #272]	; (8003518 <__aeabi_dmul+0x4cc>)
 8003408:	9301      	str	r3, [sp, #4]
 800340a:	0324      	lsls	r4, r4, #12
 800340c:	e68e      	b.n	800312c <__aeabi_dmul+0xe0>
 800340e:	2001      	movs	r0, #1
 8003410:	1a40      	subs	r0, r0, r1
 8003412:	2838      	cmp	r0, #56	; 0x38
 8003414:	dd00      	ble.n	8003418 <__aeabi_dmul+0x3cc>
 8003416:	e686      	b.n	8003126 <__aeabi_dmul+0xda>
 8003418:	281f      	cmp	r0, #31
 800341a:	dd5b      	ble.n	80034d4 <__aeabi_dmul+0x488>
 800341c:	221f      	movs	r2, #31
 800341e:	0023      	movs	r3, r4
 8003420:	4252      	negs	r2, r2
 8003422:	1a51      	subs	r1, r2, r1
 8003424:	40cb      	lsrs	r3, r1
 8003426:	0019      	movs	r1, r3
 8003428:	2820      	cmp	r0, #32
 800342a:	d003      	beq.n	8003434 <__aeabi_dmul+0x3e8>
 800342c:	4a3b      	ldr	r2, [pc, #236]	; (800351c <__aeabi_dmul+0x4d0>)
 800342e:	4462      	add	r2, ip
 8003430:	4094      	lsls	r4, r2
 8003432:	4325      	orrs	r5, r4
 8003434:	1e6a      	subs	r2, r5, #1
 8003436:	4195      	sbcs	r5, r2
 8003438:	002a      	movs	r2, r5
 800343a:	430a      	orrs	r2, r1
 800343c:	2107      	movs	r1, #7
 800343e:	000d      	movs	r5, r1
 8003440:	2400      	movs	r4, #0
 8003442:	4015      	ands	r5, r2
 8003444:	4211      	tst	r1, r2
 8003446:	d05b      	beq.n	8003500 <__aeabi_dmul+0x4b4>
 8003448:	210f      	movs	r1, #15
 800344a:	2400      	movs	r4, #0
 800344c:	4011      	ands	r1, r2
 800344e:	2904      	cmp	r1, #4
 8003450:	d053      	beq.n	80034fa <__aeabi_dmul+0x4ae>
 8003452:	1d11      	adds	r1, r2, #4
 8003454:	4291      	cmp	r1, r2
 8003456:	4192      	sbcs	r2, r2
 8003458:	4252      	negs	r2, r2
 800345a:	18a4      	adds	r4, r4, r2
 800345c:	000a      	movs	r2, r1
 800345e:	0223      	lsls	r3, r4, #8
 8003460:	d54b      	bpl.n	80034fa <__aeabi_dmul+0x4ae>
 8003462:	2201      	movs	r2, #1
 8003464:	2400      	movs	r4, #0
 8003466:	2500      	movs	r5, #0
 8003468:	e660      	b.n	800312c <__aeabi_dmul+0xe0>
 800346a:	2380      	movs	r3, #128	; 0x80
 800346c:	031b      	lsls	r3, r3, #12
 800346e:	421c      	tst	r4, r3
 8003470:	d009      	beq.n	8003486 <__aeabi_dmul+0x43a>
 8003472:	421e      	tst	r6, r3
 8003474:	d107      	bne.n	8003486 <__aeabi_dmul+0x43a>
 8003476:	4333      	orrs	r3, r6
 8003478:	031c      	lsls	r4, r3, #12
 800347a:	4643      	mov	r3, r8
 800347c:	0015      	movs	r5, r2
 800347e:	0b24      	lsrs	r4, r4, #12
 8003480:	4a25      	ldr	r2, [pc, #148]	; (8003518 <__aeabi_dmul+0x4cc>)
 8003482:	9301      	str	r3, [sp, #4]
 8003484:	e652      	b.n	800312c <__aeabi_dmul+0xe0>
 8003486:	2280      	movs	r2, #128	; 0x80
 8003488:	0312      	lsls	r2, r2, #12
 800348a:	4314      	orrs	r4, r2
 800348c:	0324      	lsls	r4, r4, #12
 800348e:	4a22      	ldr	r2, [pc, #136]	; (8003518 <__aeabi_dmul+0x4cc>)
 8003490:	0b24      	lsrs	r4, r4, #12
 8003492:	9701      	str	r7, [sp, #4]
 8003494:	e64a      	b.n	800312c <__aeabi_dmul+0xe0>
 8003496:	f000 fd7b 	bl	8003f90 <__clzsi2>
 800349a:	0003      	movs	r3, r0
 800349c:	001a      	movs	r2, r3
 800349e:	3215      	adds	r2, #21
 80034a0:	3020      	adds	r0, #32
 80034a2:	2a1c      	cmp	r2, #28
 80034a4:	dc00      	bgt.n	80034a8 <__aeabi_dmul+0x45c>
 80034a6:	e684      	b.n	80031b2 <__aeabi_dmul+0x166>
 80034a8:	4656      	mov	r6, sl
 80034aa:	3b08      	subs	r3, #8
 80034ac:	2200      	movs	r2, #0
 80034ae:	409e      	lsls	r6, r3
 80034b0:	e689      	b.n	80031c6 <__aeabi_dmul+0x17a>
 80034b2:	f000 fd6d 	bl	8003f90 <__clzsi2>
 80034b6:	0001      	movs	r1, r0
 80034b8:	0002      	movs	r2, r0
 80034ba:	3115      	adds	r1, #21
 80034bc:	3220      	adds	r2, #32
 80034be:	291c      	cmp	r1, #28
 80034c0:	dc00      	bgt.n	80034c4 <__aeabi_dmul+0x478>
 80034c2:	e64e      	b.n	8003162 <__aeabi_dmul+0x116>
 80034c4:	0034      	movs	r4, r6
 80034c6:	3808      	subs	r0, #8
 80034c8:	2500      	movs	r5, #0
 80034ca:	4084      	lsls	r4, r0
 80034cc:	e653      	b.n	8003176 <__aeabi_dmul+0x12a>
 80034ce:	9b00      	ldr	r3, [sp, #0]
 80034d0:	469c      	mov	ip, r3
 80034d2:	e741      	b.n	8003358 <__aeabi_dmul+0x30c>
 80034d4:	4912      	ldr	r1, [pc, #72]	; (8003520 <__aeabi_dmul+0x4d4>)
 80034d6:	0022      	movs	r2, r4
 80034d8:	4461      	add	r1, ip
 80034da:	002e      	movs	r6, r5
 80034dc:	408d      	lsls	r5, r1
 80034de:	408a      	lsls	r2, r1
 80034e0:	40c6      	lsrs	r6, r0
 80034e2:	1e69      	subs	r1, r5, #1
 80034e4:	418d      	sbcs	r5, r1
 80034e6:	4332      	orrs	r2, r6
 80034e8:	432a      	orrs	r2, r5
 80034ea:	40c4      	lsrs	r4, r0
 80034ec:	0753      	lsls	r3, r2, #29
 80034ee:	d0b6      	beq.n	800345e <__aeabi_dmul+0x412>
 80034f0:	210f      	movs	r1, #15
 80034f2:	4011      	ands	r1, r2
 80034f4:	2904      	cmp	r1, #4
 80034f6:	d1ac      	bne.n	8003452 <__aeabi_dmul+0x406>
 80034f8:	e7b1      	b.n	800345e <__aeabi_dmul+0x412>
 80034fa:	0765      	lsls	r5, r4, #29
 80034fc:	0264      	lsls	r4, r4, #9
 80034fe:	0b24      	lsrs	r4, r4, #12
 8003500:	08d2      	lsrs	r2, r2, #3
 8003502:	4315      	orrs	r5, r2
 8003504:	2200      	movs	r2, #0
 8003506:	e611      	b.n	800312c <__aeabi_dmul+0xe0>
 8003508:	2280      	movs	r2, #128	; 0x80
 800350a:	0312      	lsls	r2, r2, #12
 800350c:	4314      	orrs	r4, r2
 800350e:	0324      	lsls	r4, r4, #12
 8003510:	4a01      	ldr	r2, [pc, #4]	; (8003518 <__aeabi_dmul+0x4cc>)
 8003512:	0b24      	lsrs	r4, r4, #12
 8003514:	e60a      	b.n	800312c <__aeabi_dmul+0xe0>
 8003516:	46c0      	nop			; (mov r8, r8)
 8003518:	000007ff 	.word	0x000007ff
 800351c:	0000043e 	.word	0x0000043e
 8003520:	0000041e 	.word	0x0000041e

08003524 <__aeabi_dsub>:
 8003524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003526:	4657      	mov	r7, sl
 8003528:	464e      	mov	r6, r9
 800352a:	4645      	mov	r5, r8
 800352c:	46de      	mov	lr, fp
 800352e:	0004      	movs	r4, r0
 8003530:	b5e0      	push	{r5, r6, r7, lr}
 8003532:	001f      	movs	r7, r3
 8003534:	0010      	movs	r0, r2
 8003536:	030b      	lsls	r3, r1, #12
 8003538:	0f62      	lsrs	r2, r4, #29
 800353a:	004e      	lsls	r6, r1, #1
 800353c:	0fcd      	lsrs	r5, r1, #31
 800353e:	0a5b      	lsrs	r3, r3, #9
 8003540:	0339      	lsls	r1, r7, #12
 8003542:	4313      	orrs	r3, r2
 8003544:	0a49      	lsrs	r1, r1, #9
 8003546:	00e2      	lsls	r2, r4, #3
 8003548:	0f44      	lsrs	r4, r0, #29
 800354a:	4321      	orrs	r1, r4
 800354c:	4cc2      	ldr	r4, [pc, #776]	; (8003858 <__aeabi_dsub+0x334>)
 800354e:	4691      	mov	r9, r2
 8003550:	4692      	mov	sl, r2
 8003552:	00c0      	lsls	r0, r0, #3
 8003554:	007a      	lsls	r2, r7, #1
 8003556:	4680      	mov	r8, r0
 8003558:	0d76      	lsrs	r6, r6, #21
 800355a:	0d52      	lsrs	r2, r2, #21
 800355c:	0fff      	lsrs	r7, r7, #31
 800355e:	42a2      	cmp	r2, r4
 8003560:	d100      	bne.n	8003564 <__aeabi_dsub+0x40>
 8003562:	e0b4      	b.n	80036ce <__aeabi_dsub+0x1aa>
 8003564:	2401      	movs	r4, #1
 8003566:	4067      	eors	r7, r4
 8003568:	46bb      	mov	fp, r7
 800356a:	42bd      	cmp	r5, r7
 800356c:	d100      	bne.n	8003570 <__aeabi_dsub+0x4c>
 800356e:	e088      	b.n	8003682 <__aeabi_dsub+0x15e>
 8003570:	1ab4      	subs	r4, r6, r2
 8003572:	46a4      	mov	ip, r4
 8003574:	2c00      	cmp	r4, #0
 8003576:	dc00      	bgt.n	800357a <__aeabi_dsub+0x56>
 8003578:	e0b2      	b.n	80036e0 <__aeabi_dsub+0x1bc>
 800357a:	2a00      	cmp	r2, #0
 800357c:	d100      	bne.n	8003580 <__aeabi_dsub+0x5c>
 800357e:	e0c5      	b.n	800370c <__aeabi_dsub+0x1e8>
 8003580:	4ab5      	ldr	r2, [pc, #724]	; (8003858 <__aeabi_dsub+0x334>)
 8003582:	4296      	cmp	r6, r2
 8003584:	d100      	bne.n	8003588 <__aeabi_dsub+0x64>
 8003586:	e28b      	b.n	8003aa0 <__aeabi_dsub+0x57c>
 8003588:	2280      	movs	r2, #128	; 0x80
 800358a:	0412      	lsls	r2, r2, #16
 800358c:	4311      	orrs	r1, r2
 800358e:	4662      	mov	r2, ip
 8003590:	2a38      	cmp	r2, #56	; 0x38
 8003592:	dd00      	ble.n	8003596 <__aeabi_dsub+0x72>
 8003594:	e1a1      	b.n	80038da <__aeabi_dsub+0x3b6>
 8003596:	2a1f      	cmp	r2, #31
 8003598:	dd00      	ble.n	800359c <__aeabi_dsub+0x78>
 800359a:	e216      	b.n	80039ca <__aeabi_dsub+0x4a6>
 800359c:	2720      	movs	r7, #32
 800359e:	000c      	movs	r4, r1
 80035a0:	1abf      	subs	r7, r7, r2
 80035a2:	40bc      	lsls	r4, r7
 80035a4:	0002      	movs	r2, r0
 80035a6:	46a0      	mov	r8, r4
 80035a8:	4664      	mov	r4, ip
 80035aa:	40b8      	lsls	r0, r7
 80035ac:	40e2      	lsrs	r2, r4
 80035ae:	4644      	mov	r4, r8
 80035b0:	4314      	orrs	r4, r2
 80035b2:	0002      	movs	r2, r0
 80035b4:	1e50      	subs	r0, r2, #1
 80035b6:	4182      	sbcs	r2, r0
 80035b8:	4660      	mov	r0, ip
 80035ba:	40c1      	lsrs	r1, r0
 80035bc:	4322      	orrs	r2, r4
 80035be:	1a5b      	subs	r3, r3, r1
 80035c0:	4649      	mov	r1, r9
 80035c2:	1a8c      	subs	r4, r1, r2
 80035c4:	45a1      	cmp	r9, r4
 80035c6:	4192      	sbcs	r2, r2
 80035c8:	4252      	negs	r2, r2
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	4698      	mov	r8, r3
 80035ce:	4643      	mov	r3, r8
 80035d0:	021b      	lsls	r3, r3, #8
 80035d2:	d400      	bmi.n	80035d6 <__aeabi_dsub+0xb2>
 80035d4:	e117      	b.n	8003806 <__aeabi_dsub+0x2e2>
 80035d6:	4643      	mov	r3, r8
 80035d8:	025b      	lsls	r3, r3, #9
 80035da:	0a5b      	lsrs	r3, r3, #9
 80035dc:	4698      	mov	r8, r3
 80035de:	4643      	mov	r3, r8
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d100      	bne.n	80035e6 <__aeabi_dsub+0xc2>
 80035e4:	e16c      	b.n	80038c0 <__aeabi_dsub+0x39c>
 80035e6:	4640      	mov	r0, r8
 80035e8:	f000 fcd2 	bl	8003f90 <__clzsi2>
 80035ec:	0002      	movs	r2, r0
 80035ee:	3a08      	subs	r2, #8
 80035f0:	2120      	movs	r1, #32
 80035f2:	0020      	movs	r0, r4
 80035f4:	4643      	mov	r3, r8
 80035f6:	1a89      	subs	r1, r1, r2
 80035f8:	4093      	lsls	r3, r2
 80035fa:	40c8      	lsrs	r0, r1
 80035fc:	4094      	lsls	r4, r2
 80035fe:	4303      	orrs	r3, r0
 8003600:	4296      	cmp	r6, r2
 8003602:	dd00      	ble.n	8003606 <__aeabi_dsub+0xe2>
 8003604:	e157      	b.n	80038b6 <__aeabi_dsub+0x392>
 8003606:	1b96      	subs	r6, r2, r6
 8003608:	1c71      	adds	r1, r6, #1
 800360a:	291f      	cmp	r1, #31
 800360c:	dd00      	ble.n	8003610 <__aeabi_dsub+0xec>
 800360e:	e1cb      	b.n	80039a8 <__aeabi_dsub+0x484>
 8003610:	2220      	movs	r2, #32
 8003612:	0018      	movs	r0, r3
 8003614:	0026      	movs	r6, r4
 8003616:	1a52      	subs	r2, r2, r1
 8003618:	4094      	lsls	r4, r2
 800361a:	4090      	lsls	r0, r2
 800361c:	40ce      	lsrs	r6, r1
 800361e:	40cb      	lsrs	r3, r1
 8003620:	1e62      	subs	r2, r4, #1
 8003622:	4194      	sbcs	r4, r2
 8003624:	4330      	orrs	r0, r6
 8003626:	4698      	mov	r8, r3
 8003628:	2600      	movs	r6, #0
 800362a:	4304      	orrs	r4, r0
 800362c:	0763      	lsls	r3, r4, #29
 800362e:	d009      	beq.n	8003644 <__aeabi_dsub+0x120>
 8003630:	230f      	movs	r3, #15
 8003632:	4023      	ands	r3, r4
 8003634:	2b04      	cmp	r3, #4
 8003636:	d005      	beq.n	8003644 <__aeabi_dsub+0x120>
 8003638:	1d23      	adds	r3, r4, #4
 800363a:	42a3      	cmp	r3, r4
 800363c:	41a4      	sbcs	r4, r4
 800363e:	4264      	negs	r4, r4
 8003640:	44a0      	add	r8, r4
 8003642:	001c      	movs	r4, r3
 8003644:	4643      	mov	r3, r8
 8003646:	021b      	lsls	r3, r3, #8
 8003648:	d400      	bmi.n	800364c <__aeabi_dsub+0x128>
 800364a:	e0df      	b.n	800380c <__aeabi_dsub+0x2e8>
 800364c:	4b82      	ldr	r3, [pc, #520]	; (8003858 <__aeabi_dsub+0x334>)
 800364e:	3601      	adds	r6, #1
 8003650:	429e      	cmp	r6, r3
 8003652:	d100      	bne.n	8003656 <__aeabi_dsub+0x132>
 8003654:	e0fb      	b.n	800384e <__aeabi_dsub+0x32a>
 8003656:	4642      	mov	r2, r8
 8003658:	4b80      	ldr	r3, [pc, #512]	; (800385c <__aeabi_dsub+0x338>)
 800365a:	08e4      	lsrs	r4, r4, #3
 800365c:	401a      	ands	r2, r3
 800365e:	0013      	movs	r3, r2
 8003660:	0571      	lsls	r1, r6, #21
 8003662:	0752      	lsls	r2, r2, #29
 8003664:	025b      	lsls	r3, r3, #9
 8003666:	4322      	orrs	r2, r4
 8003668:	0b1b      	lsrs	r3, r3, #12
 800366a:	0d49      	lsrs	r1, r1, #21
 800366c:	0509      	lsls	r1, r1, #20
 800366e:	07ed      	lsls	r5, r5, #31
 8003670:	4319      	orrs	r1, r3
 8003672:	4329      	orrs	r1, r5
 8003674:	0010      	movs	r0, r2
 8003676:	bcf0      	pop	{r4, r5, r6, r7}
 8003678:	46bb      	mov	fp, r7
 800367a:	46b2      	mov	sl, r6
 800367c:	46a9      	mov	r9, r5
 800367e:	46a0      	mov	r8, r4
 8003680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003682:	1ab4      	subs	r4, r6, r2
 8003684:	46a4      	mov	ip, r4
 8003686:	2c00      	cmp	r4, #0
 8003688:	dd58      	ble.n	800373c <__aeabi_dsub+0x218>
 800368a:	2a00      	cmp	r2, #0
 800368c:	d100      	bne.n	8003690 <__aeabi_dsub+0x16c>
 800368e:	e09e      	b.n	80037ce <__aeabi_dsub+0x2aa>
 8003690:	4a71      	ldr	r2, [pc, #452]	; (8003858 <__aeabi_dsub+0x334>)
 8003692:	4296      	cmp	r6, r2
 8003694:	d100      	bne.n	8003698 <__aeabi_dsub+0x174>
 8003696:	e13b      	b.n	8003910 <__aeabi_dsub+0x3ec>
 8003698:	2280      	movs	r2, #128	; 0x80
 800369a:	0412      	lsls	r2, r2, #16
 800369c:	4311      	orrs	r1, r2
 800369e:	4662      	mov	r2, ip
 80036a0:	2a38      	cmp	r2, #56	; 0x38
 80036a2:	dd00      	ble.n	80036a6 <__aeabi_dsub+0x182>
 80036a4:	e0c1      	b.n	800382a <__aeabi_dsub+0x306>
 80036a6:	2a1f      	cmp	r2, #31
 80036a8:	dc00      	bgt.n	80036ac <__aeabi_dsub+0x188>
 80036aa:	e1bb      	b.n	8003a24 <__aeabi_dsub+0x500>
 80036ac:	000c      	movs	r4, r1
 80036ae:	3a20      	subs	r2, #32
 80036b0:	40d4      	lsrs	r4, r2
 80036b2:	0022      	movs	r2, r4
 80036b4:	4664      	mov	r4, ip
 80036b6:	2c20      	cmp	r4, #32
 80036b8:	d004      	beq.n	80036c4 <__aeabi_dsub+0x1a0>
 80036ba:	2740      	movs	r7, #64	; 0x40
 80036bc:	1b3f      	subs	r7, r7, r4
 80036be:	40b9      	lsls	r1, r7
 80036c0:	4308      	orrs	r0, r1
 80036c2:	4680      	mov	r8, r0
 80036c4:	4644      	mov	r4, r8
 80036c6:	1e61      	subs	r1, r4, #1
 80036c8:	418c      	sbcs	r4, r1
 80036ca:	4314      	orrs	r4, r2
 80036cc:	e0b1      	b.n	8003832 <__aeabi_dsub+0x30e>
 80036ce:	000c      	movs	r4, r1
 80036d0:	4304      	orrs	r4, r0
 80036d2:	d02a      	beq.n	800372a <__aeabi_dsub+0x206>
 80036d4:	46bb      	mov	fp, r7
 80036d6:	42bd      	cmp	r5, r7
 80036d8:	d02d      	beq.n	8003736 <__aeabi_dsub+0x212>
 80036da:	4c61      	ldr	r4, [pc, #388]	; (8003860 <__aeabi_dsub+0x33c>)
 80036dc:	46a4      	mov	ip, r4
 80036de:	44b4      	add	ip, r6
 80036e0:	4664      	mov	r4, ip
 80036e2:	2c00      	cmp	r4, #0
 80036e4:	d05c      	beq.n	80037a0 <__aeabi_dsub+0x27c>
 80036e6:	1b94      	subs	r4, r2, r6
 80036e8:	46a4      	mov	ip, r4
 80036ea:	2e00      	cmp	r6, #0
 80036ec:	d000      	beq.n	80036f0 <__aeabi_dsub+0x1cc>
 80036ee:	e115      	b.n	800391c <__aeabi_dsub+0x3f8>
 80036f0:	464d      	mov	r5, r9
 80036f2:	431d      	orrs	r5, r3
 80036f4:	d100      	bne.n	80036f8 <__aeabi_dsub+0x1d4>
 80036f6:	e1c3      	b.n	8003a80 <__aeabi_dsub+0x55c>
 80036f8:	1e65      	subs	r5, r4, #1
 80036fa:	2c01      	cmp	r4, #1
 80036fc:	d100      	bne.n	8003700 <__aeabi_dsub+0x1dc>
 80036fe:	e20c      	b.n	8003b1a <__aeabi_dsub+0x5f6>
 8003700:	4e55      	ldr	r6, [pc, #340]	; (8003858 <__aeabi_dsub+0x334>)
 8003702:	42b4      	cmp	r4, r6
 8003704:	d100      	bne.n	8003708 <__aeabi_dsub+0x1e4>
 8003706:	e1f8      	b.n	8003afa <__aeabi_dsub+0x5d6>
 8003708:	46ac      	mov	ip, r5
 800370a:	e10e      	b.n	800392a <__aeabi_dsub+0x406>
 800370c:	000a      	movs	r2, r1
 800370e:	4302      	orrs	r2, r0
 8003710:	d100      	bne.n	8003714 <__aeabi_dsub+0x1f0>
 8003712:	e136      	b.n	8003982 <__aeabi_dsub+0x45e>
 8003714:	0022      	movs	r2, r4
 8003716:	3a01      	subs	r2, #1
 8003718:	2c01      	cmp	r4, #1
 800371a:	d100      	bne.n	800371e <__aeabi_dsub+0x1fa>
 800371c:	e1c6      	b.n	8003aac <__aeabi_dsub+0x588>
 800371e:	4c4e      	ldr	r4, [pc, #312]	; (8003858 <__aeabi_dsub+0x334>)
 8003720:	45a4      	cmp	ip, r4
 8003722:	d100      	bne.n	8003726 <__aeabi_dsub+0x202>
 8003724:	e0f4      	b.n	8003910 <__aeabi_dsub+0x3ec>
 8003726:	4694      	mov	ip, r2
 8003728:	e731      	b.n	800358e <__aeabi_dsub+0x6a>
 800372a:	2401      	movs	r4, #1
 800372c:	4067      	eors	r7, r4
 800372e:	46bb      	mov	fp, r7
 8003730:	42bd      	cmp	r5, r7
 8003732:	d000      	beq.n	8003736 <__aeabi_dsub+0x212>
 8003734:	e71c      	b.n	8003570 <__aeabi_dsub+0x4c>
 8003736:	4c4a      	ldr	r4, [pc, #296]	; (8003860 <__aeabi_dsub+0x33c>)
 8003738:	46a4      	mov	ip, r4
 800373a:	44b4      	add	ip, r6
 800373c:	4664      	mov	r4, ip
 800373e:	2c00      	cmp	r4, #0
 8003740:	d100      	bne.n	8003744 <__aeabi_dsub+0x220>
 8003742:	e0cf      	b.n	80038e4 <__aeabi_dsub+0x3c0>
 8003744:	1b94      	subs	r4, r2, r6
 8003746:	46a4      	mov	ip, r4
 8003748:	2e00      	cmp	r6, #0
 800374a:	d100      	bne.n	800374e <__aeabi_dsub+0x22a>
 800374c:	e15c      	b.n	8003a08 <__aeabi_dsub+0x4e4>
 800374e:	4e42      	ldr	r6, [pc, #264]	; (8003858 <__aeabi_dsub+0x334>)
 8003750:	42b2      	cmp	r2, r6
 8003752:	d100      	bne.n	8003756 <__aeabi_dsub+0x232>
 8003754:	e1ec      	b.n	8003b30 <__aeabi_dsub+0x60c>
 8003756:	2680      	movs	r6, #128	; 0x80
 8003758:	0436      	lsls	r6, r6, #16
 800375a:	4333      	orrs	r3, r6
 800375c:	4664      	mov	r4, ip
 800375e:	2c38      	cmp	r4, #56	; 0x38
 8003760:	dd00      	ble.n	8003764 <__aeabi_dsub+0x240>
 8003762:	e1b3      	b.n	8003acc <__aeabi_dsub+0x5a8>
 8003764:	2c1f      	cmp	r4, #31
 8003766:	dd00      	ble.n	800376a <__aeabi_dsub+0x246>
 8003768:	e238      	b.n	8003bdc <__aeabi_dsub+0x6b8>
 800376a:	2620      	movs	r6, #32
 800376c:	1b36      	subs	r6, r6, r4
 800376e:	001c      	movs	r4, r3
 8003770:	40b4      	lsls	r4, r6
 8003772:	464f      	mov	r7, r9
 8003774:	46a0      	mov	r8, r4
 8003776:	4664      	mov	r4, ip
 8003778:	40e7      	lsrs	r7, r4
 800377a:	4644      	mov	r4, r8
 800377c:	433c      	orrs	r4, r7
 800377e:	464f      	mov	r7, r9
 8003780:	40b7      	lsls	r7, r6
 8003782:	003e      	movs	r6, r7
 8003784:	1e77      	subs	r7, r6, #1
 8003786:	41be      	sbcs	r6, r7
 8003788:	4334      	orrs	r4, r6
 800378a:	4666      	mov	r6, ip
 800378c:	40f3      	lsrs	r3, r6
 800378e:	18c9      	adds	r1, r1, r3
 8003790:	1824      	adds	r4, r4, r0
 8003792:	4284      	cmp	r4, r0
 8003794:	419b      	sbcs	r3, r3
 8003796:	425b      	negs	r3, r3
 8003798:	4698      	mov	r8, r3
 800379a:	0016      	movs	r6, r2
 800379c:	4488      	add	r8, r1
 800379e:	e04e      	b.n	800383e <__aeabi_dsub+0x31a>
 80037a0:	4a30      	ldr	r2, [pc, #192]	; (8003864 <__aeabi_dsub+0x340>)
 80037a2:	1c74      	adds	r4, r6, #1
 80037a4:	4214      	tst	r4, r2
 80037a6:	d000      	beq.n	80037aa <__aeabi_dsub+0x286>
 80037a8:	e0d6      	b.n	8003958 <__aeabi_dsub+0x434>
 80037aa:	464a      	mov	r2, r9
 80037ac:	431a      	orrs	r2, r3
 80037ae:	2e00      	cmp	r6, #0
 80037b0:	d000      	beq.n	80037b4 <__aeabi_dsub+0x290>
 80037b2:	e15b      	b.n	8003a6c <__aeabi_dsub+0x548>
 80037b4:	2a00      	cmp	r2, #0
 80037b6:	d100      	bne.n	80037ba <__aeabi_dsub+0x296>
 80037b8:	e1a5      	b.n	8003b06 <__aeabi_dsub+0x5e2>
 80037ba:	000a      	movs	r2, r1
 80037bc:	4302      	orrs	r2, r0
 80037be:	d000      	beq.n	80037c2 <__aeabi_dsub+0x29e>
 80037c0:	e1bb      	b.n	8003b3a <__aeabi_dsub+0x616>
 80037c2:	464a      	mov	r2, r9
 80037c4:	0759      	lsls	r1, r3, #29
 80037c6:	08d2      	lsrs	r2, r2, #3
 80037c8:	430a      	orrs	r2, r1
 80037ca:	08db      	lsrs	r3, r3, #3
 80037cc:	e027      	b.n	800381e <__aeabi_dsub+0x2fa>
 80037ce:	000a      	movs	r2, r1
 80037d0:	4302      	orrs	r2, r0
 80037d2:	d100      	bne.n	80037d6 <__aeabi_dsub+0x2b2>
 80037d4:	e174      	b.n	8003ac0 <__aeabi_dsub+0x59c>
 80037d6:	0022      	movs	r2, r4
 80037d8:	3a01      	subs	r2, #1
 80037da:	2c01      	cmp	r4, #1
 80037dc:	d005      	beq.n	80037ea <__aeabi_dsub+0x2c6>
 80037de:	4c1e      	ldr	r4, [pc, #120]	; (8003858 <__aeabi_dsub+0x334>)
 80037e0:	45a4      	cmp	ip, r4
 80037e2:	d100      	bne.n	80037e6 <__aeabi_dsub+0x2c2>
 80037e4:	e094      	b.n	8003910 <__aeabi_dsub+0x3ec>
 80037e6:	4694      	mov	ip, r2
 80037e8:	e759      	b.n	800369e <__aeabi_dsub+0x17a>
 80037ea:	4448      	add	r0, r9
 80037ec:	4548      	cmp	r0, r9
 80037ee:	4192      	sbcs	r2, r2
 80037f0:	185b      	adds	r3, r3, r1
 80037f2:	4698      	mov	r8, r3
 80037f4:	0004      	movs	r4, r0
 80037f6:	4252      	negs	r2, r2
 80037f8:	4490      	add	r8, r2
 80037fa:	4643      	mov	r3, r8
 80037fc:	2602      	movs	r6, #2
 80037fe:	021b      	lsls	r3, r3, #8
 8003800:	d500      	bpl.n	8003804 <__aeabi_dsub+0x2e0>
 8003802:	e0c4      	b.n	800398e <__aeabi_dsub+0x46a>
 8003804:	3e01      	subs	r6, #1
 8003806:	0763      	lsls	r3, r4, #29
 8003808:	d000      	beq.n	800380c <__aeabi_dsub+0x2e8>
 800380a:	e711      	b.n	8003630 <__aeabi_dsub+0x10c>
 800380c:	4643      	mov	r3, r8
 800380e:	46b4      	mov	ip, r6
 8003810:	0759      	lsls	r1, r3, #29
 8003812:	08e2      	lsrs	r2, r4, #3
 8003814:	430a      	orrs	r2, r1
 8003816:	08db      	lsrs	r3, r3, #3
 8003818:	490f      	ldr	r1, [pc, #60]	; (8003858 <__aeabi_dsub+0x334>)
 800381a:	458c      	cmp	ip, r1
 800381c:	d040      	beq.n	80038a0 <__aeabi_dsub+0x37c>
 800381e:	4661      	mov	r1, ip
 8003820:	031b      	lsls	r3, r3, #12
 8003822:	0549      	lsls	r1, r1, #21
 8003824:	0b1b      	lsrs	r3, r3, #12
 8003826:	0d49      	lsrs	r1, r1, #21
 8003828:	e720      	b.n	800366c <__aeabi_dsub+0x148>
 800382a:	4301      	orrs	r1, r0
 800382c:	000c      	movs	r4, r1
 800382e:	1e61      	subs	r1, r4, #1
 8003830:	418c      	sbcs	r4, r1
 8003832:	444c      	add	r4, r9
 8003834:	454c      	cmp	r4, r9
 8003836:	4192      	sbcs	r2, r2
 8003838:	4252      	negs	r2, r2
 800383a:	4690      	mov	r8, r2
 800383c:	4498      	add	r8, r3
 800383e:	4643      	mov	r3, r8
 8003840:	021b      	lsls	r3, r3, #8
 8003842:	d5e0      	bpl.n	8003806 <__aeabi_dsub+0x2e2>
 8003844:	4b04      	ldr	r3, [pc, #16]	; (8003858 <__aeabi_dsub+0x334>)
 8003846:	3601      	adds	r6, #1
 8003848:	429e      	cmp	r6, r3
 800384a:	d000      	beq.n	800384e <__aeabi_dsub+0x32a>
 800384c:	e09f      	b.n	800398e <__aeabi_dsub+0x46a>
 800384e:	0031      	movs	r1, r6
 8003850:	2300      	movs	r3, #0
 8003852:	2200      	movs	r2, #0
 8003854:	e70a      	b.n	800366c <__aeabi_dsub+0x148>
 8003856:	46c0      	nop			; (mov r8, r8)
 8003858:	000007ff 	.word	0x000007ff
 800385c:	ff7fffff 	.word	0xff7fffff
 8003860:	fffff801 	.word	0xfffff801
 8003864:	000007fe 	.word	0x000007fe
 8003868:	2a00      	cmp	r2, #0
 800386a:	d100      	bne.n	800386e <__aeabi_dsub+0x34a>
 800386c:	e160      	b.n	8003b30 <__aeabi_dsub+0x60c>
 800386e:	000a      	movs	r2, r1
 8003870:	4302      	orrs	r2, r0
 8003872:	d04d      	beq.n	8003910 <__aeabi_dsub+0x3ec>
 8003874:	464a      	mov	r2, r9
 8003876:	075c      	lsls	r4, r3, #29
 8003878:	08d2      	lsrs	r2, r2, #3
 800387a:	4322      	orrs	r2, r4
 800387c:	2480      	movs	r4, #128	; 0x80
 800387e:	08db      	lsrs	r3, r3, #3
 8003880:	0324      	lsls	r4, r4, #12
 8003882:	4223      	tst	r3, r4
 8003884:	d007      	beq.n	8003896 <__aeabi_dsub+0x372>
 8003886:	08ce      	lsrs	r6, r1, #3
 8003888:	4226      	tst	r6, r4
 800388a:	d104      	bne.n	8003896 <__aeabi_dsub+0x372>
 800388c:	465d      	mov	r5, fp
 800388e:	0033      	movs	r3, r6
 8003890:	08c2      	lsrs	r2, r0, #3
 8003892:	0749      	lsls	r1, r1, #29
 8003894:	430a      	orrs	r2, r1
 8003896:	0f51      	lsrs	r1, r2, #29
 8003898:	00d2      	lsls	r2, r2, #3
 800389a:	08d2      	lsrs	r2, r2, #3
 800389c:	0749      	lsls	r1, r1, #29
 800389e:	430a      	orrs	r2, r1
 80038a0:	0011      	movs	r1, r2
 80038a2:	4319      	orrs	r1, r3
 80038a4:	d100      	bne.n	80038a8 <__aeabi_dsub+0x384>
 80038a6:	e1c8      	b.n	8003c3a <__aeabi_dsub+0x716>
 80038a8:	2180      	movs	r1, #128	; 0x80
 80038aa:	0309      	lsls	r1, r1, #12
 80038ac:	430b      	orrs	r3, r1
 80038ae:	031b      	lsls	r3, r3, #12
 80038b0:	49d5      	ldr	r1, [pc, #852]	; (8003c08 <__aeabi_dsub+0x6e4>)
 80038b2:	0b1b      	lsrs	r3, r3, #12
 80038b4:	e6da      	b.n	800366c <__aeabi_dsub+0x148>
 80038b6:	49d5      	ldr	r1, [pc, #852]	; (8003c0c <__aeabi_dsub+0x6e8>)
 80038b8:	1ab6      	subs	r6, r6, r2
 80038ba:	400b      	ands	r3, r1
 80038bc:	4698      	mov	r8, r3
 80038be:	e6b5      	b.n	800362c <__aeabi_dsub+0x108>
 80038c0:	0020      	movs	r0, r4
 80038c2:	f000 fb65 	bl	8003f90 <__clzsi2>
 80038c6:	0002      	movs	r2, r0
 80038c8:	3218      	adds	r2, #24
 80038ca:	2a1f      	cmp	r2, #31
 80038cc:	dc00      	bgt.n	80038d0 <__aeabi_dsub+0x3ac>
 80038ce:	e68f      	b.n	80035f0 <__aeabi_dsub+0xcc>
 80038d0:	0023      	movs	r3, r4
 80038d2:	3808      	subs	r0, #8
 80038d4:	4083      	lsls	r3, r0
 80038d6:	2400      	movs	r4, #0
 80038d8:	e692      	b.n	8003600 <__aeabi_dsub+0xdc>
 80038da:	4308      	orrs	r0, r1
 80038dc:	0002      	movs	r2, r0
 80038de:	1e50      	subs	r0, r2, #1
 80038e0:	4182      	sbcs	r2, r0
 80038e2:	e66d      	b.n	80035c0 <__aeabi_dsub+0x9c>
 80038e4:	4cca      	ldr	r4, [pc, #808]	; (8003c10 <__aeabi_dsub+0x6ec>)
 80038e6:	1c72      	adds	r2, r6, #1
 80038e8:	4222      	tst	r2, r4
 80038ea:	d000      	beq.n	80038ee <__aeabi_dsub+0x3ca>
 80038ec:	e0ad      	b.n	8003a4a <__aeabi_dsub+0x526>
 80038ee:	464a      	mov	r2, r9
 80038f0:	431a      	orrs	r2, r3
 80038f2:	2e00      	cmp	r6, #0
 80038f4:	d1b8      	bne.n	8003868 <__aeabi_dsub+0x344>
 80038f6:	2a00      	cmp	r2, #0
 80038f8:	d100      	bne.n	80038fc <__aeabi_dsub+0x3d8>
 80038fa:	e158      	b.n	8003bae <__aeabi_dsub+0x68a>
 80038fc:	000a      	movs	r2, r1
 80038fe:	4302      	orrs	r2, r0
 8003900:	d000      	beq.n	8003904 <__aeabi_dsub+0x3e0>
 8003902:	e159      	b.n	8003bb8 <__aeabi_dsub+0x694>
 8003904:	464a      	mov	r2, r9
 8003906:	0759      	lsls	r1, r3, #29
 8003908:	08d2      	lsrs	r2, r2, #3
 800390a:	430a      	orrs	r2, r1
 800390c:	08db      	lsrs	r3, r3, #3
 800390e:	e786      	b.n	800381e <__aeabi_dsub+0x2fa>
 8003910:	464a      	mov	r2, r9
 8003912:	0759      	lsls	r1, r3, #29
 8003914:	08d2      	lsrs	r2, r2, #3
 8003916:	430a      	orrs	r2, r1
 8003918:	08db      	lsrs	r3, r3, #3
 800391a:	e7c1      	b.n	80038a0 <__aeabi_dsub+0x37c>
 800391c:	4dba      	ldr	r5, [pc, #744]	; (8003c08 <__aeabi_dsub+0x6e4>)
 800391e:	42aa      	cmp	r2, r5
 8003920:	d100      	bne.n	8003924 <__aeabi_dsub+0x400>
 8003922:	e11e      	b.n	8003b62 <__aeabi_dsub+0x63e>
 8003924:	2580      	movs	r5, #128	; 0x80
 8003926:	042d      	lsls	r5, r5, #16
 8003928:	432b      	orrs	r3, r5
 800392a:	4664      	mov	r4, ip
 800392c:	2c38      	cmp	r4, #56	; 0x38
 800392e:	dc5d      	bgt.n	80039ec <__aeabi_dsub+0x4c8>
 8003930:	2c1f      	cmp	r4, #31
 8003932:	dd00      	ble.n	8003936 <__aeabi_dsub+0x412>
 8003934:	e0d0      	b.n	8003ad8 <__aeabi_dsub+0x5b4>
 8003936:	2520      	movs	r5, #32
 8003938:	4667      	mov	r7, ip
 800393a:	1b2d      	subs	r5, r5, r4
 800393c:	464e      	mov	r6, r9
 800393e:	001c      	movs	r4, r3
 8003940:	40fe      	lsrs	r6, r7
 8003942:	40ac      	lsls	r4, r5
 8003944:	4334      	orrs	r4, r6
 8003946:	464e      	mov	r6, r9
 8003948:	40ae      	lsls	r6, r5
 800394a:	0035      	movs	r5, r6
 800394c:	40fb      	lsrs	r3, r7
 800394e:	1e6e      	subs	r6, r5, #1
 8003950:	41b5      	sbcs	r5, r6
 8003952:	1ac9      	subs	r1, r1, r3
 8003954:	432c      	orrs	r4, r5
 8003956:	e04e      	b.n	80039f6 <__aeabi_dsub+0x4d2>
 8003958:	464a      	mov	r2, r9
 800395a:	1a14      	subs	r4, r2, r0
 800395c:	45a1      	cmp	r9, r4
 800395e:	4192      	sbcs	r2, r2
 8003960:	4252      	negs	r2, r2
 8003962:	4690      	mov	r8, r2
 8003964:	1a5f      	subs	r7, r3, r1
 8003966:	003a      	movs	r2, r7
 8003968:	4647      	mov	r7, r8
 800396a:	1bd2      	subs	r2, r2, r7
 800396c:	4690      	mov	r8, r2
 800396e:	0212      	lsls	r2, r2, #8
 8003970:	d500      	bpl.n	8003974 <__aeabi_dsub+0x450>
 8003972:	e08b      	b.n	8003a8c <__aeabi_dsub+0x568>
 8003974:	4642      	mov	r2, r8
 8003976:	4322      	orrs	r2, r4
 8003978:	d000      	beq.n	800397c <__aeabi_dsub+0x458>
 800397a:	e630      	b.n	80035de <__aeabi_dsub+0xba>
 800397c:	2300      	movs	r3, #0
 800397e:	2500      	movs	r5, #0
 8003980:	e74d      	b.n	800381e <__aeabi_dsub+0x2fa>
 8003982:	464a      	mov	r2, r9
 8003984:	0759      	lsls	r1, r3, #29
 8003986:	08d2      	lsrs	r2, r2, #3
 8003988:	430a      	orrs	r2, r1
 800398a:	08db      	lsrs	r3, r3, #3
 800398c:	e744      	b.n	8003818 <__aeabi_dsub+0x2f4>
 800398e:	4642      	mov	r2, r8
 8003990:	4b9e      	ldr	r3, [pc, #632]	; (8003c0c <__aeabi_dsub+0x6e8>)
 8003992:	0861      	lsrs	r1, r4, #1
 8003994:	401a      	ands	r2, r3
 8003996:	0013      	movs	r3, r2
 8003998:	2201      	movs	r2, #1
 800399a:	4014      	ands	r4, r2
 800399c:	430c      	orrs	r4, r1
 800399e:	07da      	lsls	r2, r3, #31
 80039a0:	085b      	lsrs	r3, r3, #1
 80039a2:	4698      	mov	r8, r3
 80039a4:	4314      	orrs	r4, r2
 80039a6:	e641      	b.n	800362c <__aeabi_dsub+0x108>
 80039a8:	001a      	movs	r2, r3
 80039aa:	3e1f      	subs	r6, #31
 80039ac:	40f2      	lsrs	r2, r6
 80039ae:	0016      	movs	r6, r2
 80039b0:	2920      	cmp	r1, #32
 80039b2:	d003      	beq.n	80039bc <__aeabi_dsub+0x498>
 80039b4:	2240      	movs	r2, #64	; 0x40
 80039b6:	1a51      	subs	r1, r2, r1
 80039b8:	408b      	lsls	r3, r1
 80039ba:	431c      	orrs	r4, r3
 80039bc:	1e62      	subs	r2, r4, #1
 80039be:	4194      	sbcs	r4, r2
 80039c0:	2300      	movs	r3, #0
 80039c2:	4334      	orrs	r4, r6
 80039c4:	4698      	mov	r8, r3
 80039c6:	2600      	movs	r6, #0
 80039c8:	e71d      	b.n	8003806 <__aeabi_dsub+0x2e2>
 80039ca:	000c      	movs	r4, r1
 80039cc:	3a20      	subs	r2, #32
 80039ce:	40d4      	lsrs	r4, r2
 80039d0:	0022      	movs	r2, r4
 80039d2:	4664      	mov	r4, ip
 80039d4:	2c20      	cmp	r4, #32
 80039d6:	d004      	beq.n	80039e2 <__aeabi_dsub+0x4be>
 80039d8:	2740      	movs	r7, #64	; 0x40
 80039da:	1b3f      	subs	r7, r7, r4
 80039dc:	40b9      	lsls	r1, r7
 80039de:	4308      	orrs	r0, r1
 80039e0:	4680      	mov	r8, r0
 80039e2:	4644      	mov	r4, r8
 80039e4:	1e61      	subs	r1, r4, #1
 80039e6:	418c      	sbcs	r4, r1
 80039e8:	4322      	orrs	r2, r4
 80039ea:	e5e9      	b.n	80035c0 <__aeabi_dsub+0x9c>
 80039ec:	464c      	mov	r4, r9
 80039ee:	4323      	orrs	r3, r4
 80039f0:	001c      	movs	r4, r3
 80039f2:	1e63      	subs	r3, r4, #1
 80039f4:	419c      	sbcs	r4, r3
 80039f6:	1b04      	subs	r4, r0, r4
 80039f8:	42a0      	cmp	r0, r4
 80039fa:	419b      	sbcs	r3, r3
 80039fc:	425b      	negs	r3, r3
 80039fe:	1acb      	subs	r3, r1, r3
 8003a00:	4698      	mov	r8, r3
 8003a02:	465d      	mov	r5, fp
 8003a04:	0016      	movs	r6, r2
 8003a06:	e5e2      	b.n	80035ce <__aeabi_dsub+0xaa>
 8003a08:	464e      	mov	r6, r9
 8003a0a:	431e      	orrs	r6, r3
 8003a0c:	d100      	bne.n	8003a10 <__aeabi_dsub+0x4ec>
 8003a0e:	e0ae      	b.n	8003b6e <__aeabi_dsub+0x64a>
 8003a10:	1e66      	subs	r6, r4, #1
 8003a12:	2c01      	cmp	r4, #1
 8003a14:	d100      	bne.n	8003a18 <__aeabi_dsub+0x4f4>
 8003a16:	e0fd      	b.n	8003c14 <__aeabi_dsub+0x6f0>
 8003a18:	4f7b      	ldr	r7, [pc, #492]	; (8003c08 <__aeabi_dsub+0x6e4>)
 8003a1a:	42bc      	cmp	r4, r7
 8003a1c:	d100      	bne.n	8003a20 <__aeabi_dsub+0x4fc>
 8003a1e:	e107      	b.n	8003c30 <__aeabi_dsub+0x70c>
 8003a20:	46b4      	mov	ip, r6
 8003a22:	e69b      	b.n	800375c <__aeabi_dsub+0x238>
 8003a24:	4664      	mov	r4, ip
 8003a26:	2220      	movs	r2, #32
 8003a28:	1b12      	subs	r2, r2, r4
 8003a2a:	000c      	movs	r4, r1
 8003a2c:	4094      	lsls	r4, r2
 8003a2e:	0007      	movs	r7, r0
 8003a30:	4090      	lsls	r0, r2
 8003a32:	46a0      	mov	r8, r4
 8003a34:	4664      	mov	r4, ip
 8003a36:	1e42      	subs	r2, r0, #1
 8003a38:	4190      	sbcs	r0, r2
 8003a3a:	4662      	mov	r2, ip
 8003a3c:	40e7      	lsrs	r7, r4
 8003a3e:	4644      	mov	r4, r8
 8003a40:	40d1      	lsrs	r1, r2
 8003a42:	433c      	orrs	r4, r7
 8003a44:	4304      	orrs	r4, r0
 8003a46:	185b      	adds	r3, r3, r1
 8003a48:	e6f3      	b.n	8003832 <__aeabi_dsub+0x30e>
 8003a4a:	4c6f      	ldr	r4, [pc, #444]	; (8003c08 <__aeabi_dsub+0x6e4>)
 8003a4c:	42a2      	cmp	r2, r4
 8003a4e:	d100      	bne.n	8003a52 <__aeabi_dsub+0x52e>
 8003a50:	e0d5      	b.n	8003bfe <__aeabi_dsub+0x6da>
 8003a52:	4448      	add	r0, r9
 8003a54:	185b      	adds	r3, r3, r1
 8003a56:	4548      	cmp	r0, r9
 8003a58:	4189      	sbcs	r1, r1
 8003a5a:	4249      	negs	r1, r1
 8003a5c:	185b      	adds	r3, r3, r1
 8003a5e:	07dc      	lsls	r4, r3, #31
 8003a60:	0840      	lsrs	r0, r0, #1
 8003a62:	085b      	lsrs	r3, r3, #1
 8003a64:	4698      	mov	r8, r3
 8003a66:	0016      	movs	r6, r2
 8003a68:	4304      	orrs	r4, r0
 8003a6a:	e6cc      	b.n	8003806 <__aeabi_dsub+0x2e2>
 8003a6c:	2a00      	cmp	r2, #0
 8003a6e:	d000      	beq.n	8003a72 <__aeabi_dsub+0x54e>
 8003a70:	e082      	b.n	8003b78 <__aeabi_dsub+0x654>
 8003a72:	000a      	movs	r2, r1
 8003a74:	4302      	orrs	r2, r0
 8003a76:	d140      	bne.n	8003afa <__aeabi_dsub+0x5d6>
 8003a78:	2380      	movs	r3, #128	; 0x80
 8003a7a:	2500      	movs	r5, #0
 8003a7c:	031b      	lsls	r3, r3, #12
 8003a7e:	e713      	b.n	80038a8 <__aeabi_dsub+0x384>
 8003a80:	074b      	lsls	r3, r1, #29
 8003a82:	08c2      	lsrs	r2, r0, #3
 8003a84:	431a      	orrs	r2, r3
 8003a86:	465d      	mov	r5, fp
 8003a88:	08cb      	lsrs	r3, r1, #3
 8003a8a:	e6c5      	b.n	8003818 <__aeabi_dsub+0x2f4>
 8003a8c:	464a      	mov	r2, r9
 8003a8e:	1a84      	subs	r4, r0, r2
 8003a90:	42a0      	cmp	r0, r4
 8003a92:	4192      	sbcs	r2, r2
 8003a94:	1acb      	subs	r3, r1, r3
 8003a96:	4252      	negs	r2, r2
 8003a98:	1a9b      	subs	r3, r3, r2
 8003a9a:	4698      	mov	r8, r3
 8003a9c:	465d      	mov	r5, fp
 8003a9e:	e59e      	b.n	80035de <__aeabi_dsub+0xba>
 8003aa0:	464a      	mov	r2, r9
 8003aa2:	0759      	lsls	r1, r3, #29
 8003aa4:	08d2      	lsrs	r2, r2, #3
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	08db      	lsrs	r3, r3, #3
 8003aaa:	e6f9      	b.n	80038a0 <__aeabi_dsub+0x37c>
 8003aac:	464a      	mov	r2, r9
 8003aae:	1a14      	subs	r4, r2, r0
 8003ab0:	45a1      	cmp	r9, r4
 8003ab2:	4192      	sbcs	r2, r2
 8003ab4:	1a5b      	subs	r3, r3, r1
 8003ab6:	4252      	negs	r2, r2
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	4698      	mov	r8, r3
 8003abc:	2601      	movs	r6, #1
 8003abe:	e586      	b.n	80035ce <__aeabi_dsub+0xaa>
 8003ac0:	464a      	mov	r2, r9
 8003ac2:	0759      	lsls	r1, r3, #29
 8003ac4:	08d2      	lsrs	r2, r2, #3
 8003ac6:	430a      	orrs	r2, r1
 8003ac8:	08db      	lsrs	r3, r3, #3
 8003aca:	e6a5      	b.n	8003818 <__aeabi_dsub+0x2f4>
 8003acc:	464c      	mov	r4, r9
 8003ace:	4323      	orrs	r3, r4
 8003ad0:	001c      	movs	r4, r3
 8003ad2:	1e63      	subs	r3, r4, #1
 8003ad4:	419c      	sbcs	r4, r3
 8003ad6:	e65b      	b.n	8003790 <__aeabi_dsub+0x26c>
 8003ad8:	4665      	mov	r5, ip
 8003ada:	001e      	movs	r6, r3
 8003adc:	3d20      	subs	r5, #32
 8003ade:	40ee      	lsrs	r6, r5
 8003ae0:	2c20      	cmp	r4, #32
 8003ae2:	d005      	beq.n	8003af0 <__aeabi_dsub+0x5cc>
 8003ae4:	2540      	movs	r5, #64	; 0x40
 8003ae6:	1b2d      	subs	r5, r5, r4
 8003ae8:	40ab      	lsls	r3, r5
 8003aea:	464c      	mov	r4, r9
 8003aec:	431c      	orrs	r4, r3
 8003aee:	46a2      	mov	sl, r4
 8003af0:	4654      	mov	r4, sl
 8003af2:	1e63      	subs	r3, r4, #1
 8003af4:	419c      	sbcs	r4, r3
 8003af6:	4334      	orrs	r4, r6
 8003af8:	e77d      	b.n	80039f6 <__aeabi_dsub+0x4d2>
 8003afa:	074b      	lsls	r3, r1, #29
 8003afc:	08c2      	lsrs	r2, r0, #3
 8003afe:	431a      	orrs	r2, r3
 8003b00:	465d      	mov	r5, fp
 8003b02:	08cb      	lsrs	r3, r1, #3
 8003b04:	e6cc      	b.n	80038a0 <__aeabi_dsub+0x37c>
 8003b06:	000a      	movs	r2, r1
 8003b08:	4302      	orrs	r2, r0
 8003b0a:	d100      	bne.n	8003b0e <__aeabi_dsub+0x5ea>
 8003b0c:	e736      	b.n	800397c <__aeabi_dsub+0x458>
 8003b0e:	074b      	lsls	r3, r1, #29
 8003b10:	08c2      	lsrs	r2, r0, #3
 8003b12:	431a      	orrs	r2, r3
 8003b14:	465d      	mov	r5, fp
 8003b16:	08cb      	lsrs	r3, r1, #3
 8003b18:	e681      	b.n	800381e <__aeabi_dsub+0x2fa>
 8003b1a:	464a      	mov	r2, r9
 8003b1c:	1a84      	subs	r4, r0, r2
 8003b1e:	42a0      	cmp	r0, r4
 8003b20:	4192      	sbcs	r2, r2
 8003b22:	1acb      	subs	r3, r1, r3
 8003b24:	4252      	negs	r2, r2
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	4698      	mov	r8, r3
 8003b2a:	465d      	mov	r5, fp
 8003b2c:	2601      	movs	r6, #1
 8003b2e:	e54e      	b.n	80035ce <__aeabi_dsub+0xaa>
 8003b30:	074b      	lsls	r3, r1, #29
 8003b32:	08c2      	lsrs	r2, r0, #3
 8003b34:	431a      	orrs	r2, r3
 8003b36:	08cb      	lsrs	r3, r1, #3
 8003b38:	e6b2      	b.n	80038a0 <__aeabi_dsub+0x37c>
 8003b3a:	464a      	mov	r2, r9
 8003b3c:	1a14      	subs	r4, r2, r0
 8003b3e:	45a1      	cmp	r9, r4
 8003b40:	4192      	sbcs	r2, r2
 8003b42:	1a5f      	subs	r7, r3, r1
 8003b44:	4252      	negs	r2, r2
 8003b46:	1aba      	subs	r2, r7, r2
 8003b48:	4690      	mov	r8, r2
 8003b4a:	0212      	lsls	r2, r2, #8
 8003b4c:	d56b      	bpl.n	8003c26 <__aeabi_dsub+0x702>
 8003b4e:	464a      	mov	r2, r9
 8003b50:	1a84      	subs	r4, r0, r2
 8003b52:	42a0      	cmp	r0, r4
 8003b54:	4192      	sbcs	r2, r2
 8003b56:	1acb      	subs	r3, r1, r3
 8003b58:	4252      	negs	r2, r2
 8003b5a:	1a9b      	subs	r3, r3, r2
 8003b5c:	4698      	mov	r8, r3
 8003b5e:	465d      	mov	r5, fp
 8003b60:	e564      	b.n	800362c <__aeabi_dsub+0x108>
 8003b62:	074b      	lsls	r3, r1, #29
 8003b64:	08c2      	lsrs	r2, r0, #3
 8003b66:	431a      	orrs	r2, r3
 8003b68:	465d      	mov	r5, fp
 8003b6a:	08cb      	lsrs	r3, r1, #3
 8003b6c:	e698      	b.n	80038a0 <__aeabi_dsub+0x37c>
 8003b6e:	074b      	lsls	r3, r1, #29
 8003b70:	08c2      	lsrs	r2, r0, #3
 8003b72:	431a      	orrs	r2, r3
 8003b74:	08cb      	lsrs	r3, r1, #3
 8003b76:	e64f      	b.n	8003818 <__aeabi_dsub+0x2f4>
 8003b78:	000a      	movs	r2, r1
 8003b7a:	4302      	orrs	r2, r0
 8003b7c:	d090      	beq.n	8003aa0 <__aeabi_dsub+0x57c>
 8003b7e:	464a      	mov	r2, r9
 8003b80:	075c      	lsls	r4, r3, #29
 8003b82:	08d2      	lsrs	r2, r2, #3
 8003b84:	4314      	orrs	r4, r2
 8003b86:	2280      	movs	r2, #128	; 0x80
 8003b88:	08db      	lsrs	r3, r3, #3
 8003b8a:	0312      	lsls	r2, r2, #12
 8003b8c:	4213      	tst	r3, r2
 8003b8e:	d008      	beq.n	8003ba2 <__aeabi_dsub+0x67e>
 8003b90:	08ce      	lsrs	r6, r1, #3
 8003b92:	4216      	tst	r6, r2
 8003b94:	d105      	bne.n	8003ba2 <__aeabi_dsub+0x67e>
 8003b96:	08c0      	lsrs	r0, r0, #3
 8003b98:	0749      	lsls	r1, r1, #29
 8003b9a:	4308      	orrs	r0, r1
 8003b9c:	0004      	movs	r4, r0
 8003b9e:	465d      	mov	r5, fp
 8003ba0:	0033      	movs	r3, r6
 8003ba2:	0f61      	lsrs	r1, r4, #29
 8003ba4:	00e2      	lsls	r2, r4, #3
 8003ba6:	0749      	lsls	r1, r1, #29
 8003ba8:	08d2      	lsrs	r2, r2, #3
 8003baa:	430a      	orrs	r2, r1
 8003bac:	e678      	b.n	80038a0 <__aeabi_dsub+0x37c>
 8003bae:	074b      	lsls	r3, r1, #29
 8003bb0:	08c2      	lsrs	r2, r0, #3
 8003bb2:	431a      	orrs	r2, r3
 8003bb4:	08cb      	lsrs	r3, r1, #3
 8003bb6:	e632      	b.n	800381e <__aeabi_dsub+0x2fa>
 8003bb8:	4448      	add	r0, r9
 8003bba:	185b      	adds	r3, r3, r1
 8003bbc:	4548      	cmp	r0, r9
 8003bbe:	4192      	sbcs	r2, r2
 8003bc0:	4698      	mov	r8, r3
 8003bc2:	4252      	negs	r2, r2
 8003bc4:	4490      	add	r8, r2
 8003bc6:	4643      	mov	r3, r8
 8003bc8:	0004      	movs	r4, r0
 8003bca:	021b      	lsls	r3, r3, #8
 8003bcc:	d400      	bmi.n	8003bd0 <__aeabi_dsub+0x6ac>
 8003bce:	e61a      	b.n	8003806 <__aeabi_dsub+0x2e2>
 8003bd0:	4642      	mov	r2, r8
 8003bd2:	4b0e      	ldr	r3, [pc, #56]	; (8003c0c <__aeabi_dsub+0x6e8>)
 8003bd4:	2601      	movs	r6, #1
 8003bd6:	401a      	ands	r2, r3
 8003bd8:	4690      	mov	r8, r2
 8003bda:	e614      	b.n	8003806 <__aeabi_dsub+0x2e2>
 8003bdc:	4666      	mov	r6, ip
 8003bde:	001f      	movs	r7, r3
 8003be0:	3e20      	subs	r6, #32
 8003be2:	40f7      	lsrs	r7, r6
 8003be4:	2c20      	cmp	r4, #32
 8003be6:	d005      	beq.n	8003bf4 <__aeabi_dsub+0x6d0>
 8003be8:	2640      	movs	r6, #64	; 0x40
 8003bea:	1b36      	subs	r6, r6, r4
 8003bec:	40b3      	lsls	r3, r6
 8003bee:	464c      	mov	r4, r9
 8003bf0:	431c      	orrs	r4, r3
 8003bf2:	46a2      	mov	sl, r4
 8003bf4:	4654      	mov	r4, sl
 8003bf6:	1e63      	subs	r3, r4, #1
 8003bf8:	419c      	sbcs	r4, r3
 8003bfa:	433c      	orrs	r4, r7
 8003bfc:	e5c8      	b.n	8003790 <__aeabi_dsub+0x26c>
 8003bfe:	0011      	movs	r1, r2
 8003c00:	2300      	movs	r3, #0
 8003c02:	2200      	movs	r2, #0
 8003c04:	e532      	b.n	800366c <__aeabi_dsub+0x148>
 8003c06:	46c0      	nop			; (mov r8, r8)
 8003c08:	000007ff 	.word	0x000007ff
 8003c0c:	ff7fffff 	.word	0xff7fffff
 8003c10:	000007fe 	.word	0x000007fe
 8003c14:	464a      	mov	r2, r9
 8003c16:	1814      	adds	r4, r2, r0
 8003c18:	4284      	cmp	r4, r0
 8003c1a:	4192      	sbcs	r2, r2
 8003c1c:	185b      	adds	r3, r3, r1
 8003c1e:	4698      	mov	r8, r3
 8003c20:	4252      	negs	r2, r2
 8003c22:	4490      	add	r8, r2
 8003c24:	e5e9      	b.n	80037fa <__aeabi_dsub+0x2d6>
 8003c26:	4642      	mov	r2, r8
 8003c28:	4322      	orrs	r2, r4
 8003c2a:	d100      	bne.n	8003c2e <__aeabi_dsub+0x70a>
 8003c2c:	e6a6      	b.n	800397c <__aeabi_dsub+0x458>
 8003c2e:	e5ea      	b.n	8003806 <__aeabi_dsub+0x2e2>
 8003c30:	074b      	lsls	r3, r1, #29
 8003c32:	08c2      	lsrs	r2, r0, #3
 8003c34:	431a      	orrs	r2, r3
 8003c36:	08cb      	lsrs	r3, r1, #3
 8003c38:	e632      	b.n	80038a0 <__aeabi_dsub+0x37c>
 8003c3a:	2200      	movs	r2, #0
 8003c3c:	4901      	ldr	r1, [pc, #4]	; (8003c44 <__aeabi_dsub+0x720>)
 8003c3e:	0013      	movs	r3, r2
 8003c40:	e514      	b.n	800366c <__aeabi_dsub+0x148>
 8003c42:	46c0      	nop			; (mov r8, r8)
 8003c44:	000007ff 	.word	0x000007ff

08003c48 <__aeabi_d2iz>:
 8003c48:	000a      	movs	r2, r1
 8003c4a:	b530      	push	{r4, r5, lr}
 8003c4c:	4c13      	ldr	r4, [pc, #76]	; (8003c9c <__aeabi_d2iz+0x54>)
 8003c4e:	0053      	lsls	r3, r2, #1
 8003c50:	0309      	lsls	r1, r1, #12
 8003c52:	0005      	movs	r5, r0
 8003c54:	0b09      	lsrs	r1, r1, #12
 8003c56:	2000      	movs	r0, #0
 8003c58:	0d5b      	lsrs	r3, r3, #21
 8003c5a:	0fd2      	lsrs	r2, r2, #31
 8003c5c:	42a3      	cmp	r3, r4
 8003c5e:	dd04      	ble.n	8003c6a <__aeabi_d2iz+0x22>
 8003c60:	480f      	ldr	r0, [pc, #60]	; (8003ca0 <__aeabi_d2iz+0x58>)
 8003c62:	4283      	cmp	r3, r0
 8003c64:	dd02      	ble.n	8003c6c <__aeabi_d2iz+0x24>
 8003c66:	4b0f      	ldr	r3, [pc, #60]	; (8003ca4 <__aeabi_d2iz+0x5c>)
 8003c68:	18d0      	adds	r0, r2, r3
 8003c6a:	bd30      	pop	{r4, r5, pc}
 8003c6c:	2080      	movs	r0, #128	; 0x80
 8003c6e:	0340      	lsls	r0, r0, #13
 8003c70:	4301      	orrs	r1, r0
 8003c72:	480d      	ldr	r0, [pc, #52]	; (8003ca8 <__aeabi_d2iz+0x60>)
 8003c74:	1ac0      	subs	r0, r0, r3
 8003c76:	281f      	cmp	r0, #31
 8003c78:	dd08      	ble.n	8003c8c <__aeabi_d2iz+0x44>
 8003c7a:	480c      	ldr	r0, [pc, #48]	; (8003cac <__aeabi_d2iz+0x64>)
 8003c7c:	1ac3      	subs	r3, r0, r3
 8003c7e:	40d9      	lsrs	r1, r3
 8003c80:	000b      	movs	r3, r1
 8003c82:	4258      	negs	r0, r3
 8003c84:	2a00      	cmp	r2, #0
 8003c86:	d1f0      	bne.n	8003c6a <__aeabi_d2iz+0x22>
 8003c88:	0018      	movs	r0, r3
 8003c8a:	e7ee      	b.n	8003c6a <__aeabi_d2iz+0x22>
 8003c8c:	4c08      	ldr	r4, [pc, #32]	; (8003cb0 <__aeabi_d2iz+0x68>)
 8003c8e:	40c5      	lsrs	r5, r0
 8003c90:	46a4      	mov	ip, r4
 8003c92:	4463      	add	r3, ip
 8003c94:	4099      	lsls	r1, r3
 8003c96:	000b      	movs	r3, r1
 8003c98:	432b      	orrs	r3, r5
 8003c9a:	e7f2      	b.n	8003c82 <__aeabi_d2iz+0x3a>
 8003c9c:	000003fe 	.word	0x000003fe
 8003ca0:	0000041d 	.word	0x0000041d
 8003ca4:	7fffffff 	.word	0x7fffffff
 8003ca8:	00000433 	.word	0x00000433
 8003cac:	00000413 	.word	0x00000413
 8003cb0:	fffffbed 	.word	0xfffffbed

08003cb4 <__aeabi_ui2d>:
 8003cb4:	b510      	push	{r4, lr}
 8003cb6:	1e04      	subs	r4, r0, #0
 8003cb8:	d010      	beq.n	8003cdc <__aeabi_ui2d+0x28>
 8003cba:	f000 f969 	bl	8003f90 <__clzsi2>
 8003cbe:	4b0f      	ldr	r3, [pc, #60]	; (8003cfc <__aeabi_ui2d+0x48>)
 8003cc0:	1a1b      	subs	r3, r3, r0
 8003cc2:	280a      	cmp	r0, #10
 8003cc4:	dc11      	bgt.n	8003cea <__aeabi_ui2d+0x36>
 8003cc6:	220b      	movs	r2, #11
 8003cc8:	0021      	movs	r1, r4
 8003cca:	1a12      	subs	r2, r2, r0
 8003ccc:	40d1      	lsrs	r1, r2
 8003cce:	3015      	adds	r0, #21
 8003cd0:	030a      	lsls	r2, r1, #12
 8003cd2:	055b      	lsls	r3, r3, #21
 8003cd4:	4084      	lsls	r4, r0
 8003cd6:	0b12      	lsrs	r2, r2, #12
 8003cd8:	0d5b      	lsrs	r3, r3, #21
 8003cda:	e001      	b.n	8003ce0 <__aeabi_ui2d+0x2c>
 8003cdc:	2300      	movs	r3, #0
 8003cde:	2200      	movs	r2, #0
 8003ce0:	051b      	lsls	r3, r3, #20
 8003ce2:	4313      	orrs	r3, r2
 8003ce4:	0020      	movs	r0, r4
 8003ce6:	0019      	movs	r1, r3
 8003ce8:	bd10      	pop	{r4, pc}
 8003cea:	0022      	movs	r2, r4
 8003cec:	380b      	subs	r0, #11
 8003cee:	4082      	lsls	r2, r0
 8003cf0:	055b      	lsls	r3, r3, #21
 8003cf2:	0312      	lsls	r2, r2, #12
 8003cf4:	2400      	movs	r4, #0
 8003cf6:	0b12      	lsrs	r2, r2, #12
 8003cf8:	0d5b      	lsrs	r3, r3, #21
 8003cfa:	e7f1      	b.n	8003ce0 <__aeabi_ui2d+0x2c>
 8003cfc:	0000041e 	.word	0x0000041e

08003d00 <__aeabi_f2d>:
 8003d00:	b570      	push	{r4, r5, r6, lr}
 8003d02:	0043      	lsls	r3, r0, #1
 8003d04:	0246      	lsls	r6, r0, #9
 8003d06:	0fc4      	lsrs	r4, r0, #31
 8003d08:	20fe      	movs	r0, #254	; 0xfe
 8003d0a:	0e1b      	lsrs	r3, r3, #24
 8003d0c:	1c59      	adds	r1, r3, #1
 8003d0e:	0a75      	lsrs	r5, r6, #9
 8003d10:	4208      	tst	r0, r1
 8003d12:	d00c      	beq.n	8003d2e <__aeabi_f2d+0x2e>
 8003d14:	22e0      	movs	r2, #224	; 0xe0
 8003d16:	0092      	lsls	r2, r2, #2
 8003d18:	4694      	mov	ip, r2
 8003d1a:	076d      	lsls	r5, r5, #29
 8003d1c:	0b36      	lsrs	r6, r6, #12
 8003d1e:	4463      	add	r3, ip
 8003d20:	051b      	lsls	r3, r3, #20
 8003d22:	4333      	orrs	r3, r6
 8003d24:	07e4      	lsls	r4, r4, #31
 8003d26:	4323      	orrs	r3, r4
 8003d28:	0028      	movs	r0, r5
 8003d2a:	0019      	movs	r1, r3
 8003d2c:	bd70      	pop	{r4, r5, r6, pc}
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d114      	bne.n	8003d5c <__aeabi_f2d+0x5c>
 8003d32:	2d00      	cmp	r5, #0
 8003d34:	d01b      	beq.n	8003d6e <__aeabi_f2d+0x6e>
 8003d36:	0028      	movs	r0, r5
 8003d38:	f000 f92a 	bl	8003f90 <__clzsi2>
 8003d3c:	280a      	cmp	r0, #10
 8003d3e:	dc1c      	bgt.n	8003d7a <__aeabi_f2d+0x7a>
 8003d40:	230b      	movs	r3, #11
 8003d42:	002a      	movs	r2, r5
 8003d44:	1a1b      	subs	r3, r3, r0
 8003d46:	40da      	lsrs	r2, r3
 8003d48:	0003      	movs	r3, r0
 8003d4a:	3315      	adds	r3, #21
 8003d4c:	409d      	lsls	r5, r3
 8003d4e:	4b0e      	ldr	r3, [pc, #56]	; (8003d88 <__aeabi_f2d+0x88>)
 8003d50:	0312      	lsls	r2, r2, #12
 8003d52:	1a1b      	subs	r3, r3, r0
 8003d54:	055b      	lsls	r3, r3, #21
 8003d56:	0b16      	lsrs	r6, r2, #12
 8003d58:	0d5b      	lsrs	r3, r3, #21
 8003d5a:	e7e1      	b.n	8003d20 <__aeabi_f2d+0x20>
 8003d5c:	2d00      	cmp	r5, #0
 8003d5e:	d009      	beq.n	8003d74 <__aeabi_f2d+0x74>
 8003d60:	0b32      	lsrs	r2, r6, #12
 8003d62:	2680      	movs	r6, #128	; 0x80
 8003d64:	0336      	lsls	r6, r6, #12
 8003d66:	4b09      	ldr	r3, [pc, #36]	; (8003d8c <__aeabi_f2d+0x8c>)
 8003d68:	076d      	lsls	r5, r5, #29
 8003d6a:	4316      	orrs	r6, r2
 8003d6c:	e7d8      	b.n	8003d20 <__aeabi_f2d+0x20>
 8003d6e:	2300      	movs	r3, #0
 8003d70:	2600      	movs	r6, #0
 8003d72:	e7d5      	b.n	8003d20 <__aeabi_f2d+0x20>
 8003d74:	2600      	movs	r6, #0
 8003d76:	4b05      	ldr	r3, [pc, #20]	; (8003d8c <__aeabi_f2d+0x8c>)
 8003d78:	e7d2      	b.n	8003d20 <__aeabi_f2d+0x20>
 8003d7a:	0003      	movs	r3, r0
 8003d7c:	002a      	movs	r2, r5
 8003d7e:	3b0b      	subs	r3, #11
 8003d80:	409a      	lsls	r2, r3
 8003d82:	2500      	movs	r5, #0
 8003d84:	e7e3      	b.n	8003d4e <__aeabi_f2d+0x4e>
 8003d86:	46c0      	nop			; (mov r8, r8)
 8003d88:	00000389 	.word	0x00000389
 8003d8c:	000007ff 	.word	0x000007ff

08003d90 <__aeabi_d2f>:
 8003d90:	0002      	movs	r2, r0
 8003d92:	004b      	lsls	r3, r1, #1
 8003d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d96:	0308      	lsls	r0, r1, #12
 8003d98:	0d5b      	lsrs	r3, r3, #21
 8003d9a:	4e3d      	ldr	r6, [pc, #244]	; (8003e90 <__aeabi_d2f+0x100>)
 8003d9c:	0fcc      	lsrs	r4, r1, #31
 8003d9e:	0a40      	lsrs	r0, r0, #9
 8003da0:	0f51      	lsrs	r1, r2, #29
 8003da2:	1c5f      	adds	r7, r3, #1
 8003da4:	4308      	orrs	r0, r1
 8003da6:	00d5      	lsls	r5, r2, #3
 8003da8:	4237      	tst	r7, r6
 8003daa:	d00a      	beq.n	8003dc2 <__aeabi_d2f+0x32>
 8003dac:	4939      	ldr	r1, [pc, #228]	; (8003e94 <__aeabi_d2f+0x104>)
 8003dae:	185e      	adds	r6, r3, r1
 8003db0:	2efe      	cmp	r6, #254	; 0xfe
 8003db2:	dd16      	ble.n	8003de2 <__aeabi_d2f+0x52>
 8003db4:	23ff      	movs	r3, #255	; 0xff
 8003db6:	2100      	movs	r1, #0
 8003db8:	05db      	lsls	r3, r3, #23
 8003dba:	430b      	orrs	r3, r1
 8003dbc:	07e0      	lsls	r0, r4, #31
 8003dbe:	4318      	orrs	r0, r3
 8003dc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <__aeabi_d2f+0x44>
 8003dc6:	4328      	orrs	r0, r5
 8003dc8:	d027      	beq.n	8003e1a <__aeabi_d2f+0x8a>
 8003dca:	2105      	movs	r1, #5
 8003dcc:	0189      	lsls	r1, r1, #6
 8003dce:	0a49      	lsrs	r1, r1, #9
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	e7f1      	b.n	8003db8 <__aeabi_d2f+0x28>
 8003dd4:	4305      	orrs	r5, r0
 8003dd6:	d0ed      	beq.n	8003db4 <__aeabi_d2f+0x24>
 8003dd8:	2180      	movs	r1, #128	; 0x80
 8003dda:	03c9      	lsls	r1, r1, #15
 8003ddc:	23ff      	movs	r3, #255	; 0xff
 8003dde:	4301      	orrs	r1, r0
 8003de0:	e7ea      	b.n	8003db8 <__aeabi_d2f+0x28>
 8003de2:	2e00      	cmp	r6, #0
 8003de4:	dd1c      	ble.n	8003e20 <__aeabi_d2f+0x90>
 8003de6:	0192      	lsls	r2, r2, #6
 8003de8:	0011      	movs	r1, r2
 8003dea:	1e4a      	subs	r2, r1, #1
 8003dec:	4191      	sbcs	r1, r2
 8003dee:	00c0      	lsls	r0, r0, #3
 8003df0:	0f6d      	lsrs	r5, r5, #29
 8003df2:	4301      	orrs	r1, r0
 8003df4:	4329      	orrs	r1, r5
 8003df6:	074b      	lsls	r3, r1, #29
 8003df8:	d048      	beq.n	8003e8c <__aeabi_d2f+0xfc>
 8003dfa:	230f      	movs	r3, #15
 8003dfc:	400b      	ands	r3, r1
 8003dfe:	2b04      	cmp	r3, #4
 8003e00:	d000      	beq.n	8003e04 <__aeabi_d2f+0x74>
 8003e02:	3104      	adds	r1, #4
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	04db      	lsls	r3, r3, #19
 8003e08:	400b      	ands	r3, r1
 8003e0a:	d03f      	beq.n	8003e8c <__aeabi_d2f+0xfc>
 8003e0c:	1c72      	adds	r2, r6, #1
 8003e0e:	2efe      	cmp	r6, #254	; 0xfe
 8003e10:	d0d0      	beq.n	8003db4 <__aeabi_d2f+0x24>
 8003e12:	0189      	lsls	r1, r1, #6
 8003e14:	0a49      	lsrs	r1, r1, #9
 8003e16:	b2d3      	uxtb	r3, r2
 8003e18:	e7ce      	b.n	8003db8 <__aeabi_d2f+0x28>
 8003e1a:	2300      	movs	r3, #0
 8003e1c:	2100      	movs	r1, #0
 8003e1e:	e7cb      	b.n	8003db8 <__aeabi_d2f+0x28>
 8003e20:	0032      	movs	r2, r6
 8003e22:	3217      	adds	r2, #23
 8003e24:	db22      	blt.n	8003e6c <__aeabi_d2f+0xdc>
 8003e26:	2180      	movs	r1, #128	; 0x80
 8003e28:	221e      	movs	r2, #30
 8003e2a:	0409      	lsls	r1, r1, #16
 8003e2c:	4308      	orrs	r0, r1
 8003e2e:	1b92      	subs	r2, r2, r6
 8003e30:	2a1f      	cmp	r2, #31
 8003e32:	dd1d      	ble.n	8003e70 <__aeabi_d2f+0xe0>
 8003e34:	2102      	movs	r1, #2
 8003e36:	4249      	negs	r1, r1
 8003e38:	1b8e      	subs	r6, r1, r6
 8003e3a:	0001      	movs	r1, r0
 8003e3c:	40f1      	lsrs	r1, r6
 8003e3e:	000e      	movs	r6, r1
 8003e40:	2a20      	cmp	r2, #32
 8003e42:	d004      	beq.n	8003e4e <__aeabi_d2f+0xbe>
 8003e44:	4a14      	ldr	r2, [pc, #80]	; (8003e98 <__aeabi_d2f+0x108>)
 8003e46:	4694      	mov	ip, r2
 8003e48:	4463      	add	r3, ip
 8003e4a:	4098      	lsls	r0, r3
 8003e4c:	4305      	orrs	r5, r0
 8003e4e:	0029      	movs	r1, r5
 8003e50:	1e4d      	subs	r5, r1, #1
 8003e52:	41a9      	sbcs	r1, r5
 8003e54:	4331      	orrs	r1, r6
 8003e56:	2600      	movs	r6, #0
 8003e58:	074b      	lsls	r3, r1, #29
 8003e5a:	d1ce      	bne.n	8003dfa <__aeabi_d2f+0x6a>
 8003e5c:	2080      	movs	r0, #128	; 0x80
 8003e5e:	000b      	movs	r3, r1
 8003e60:	04c0      	lsls	r0, r0, #19
 8003e62:	2201      	movs	r2, #1
 8003e64:	4003      	ands	r3, r0
 8003e66:	4201      	tst	r1, r0
 8003e68:	d1d3      	bne.n	8003e12 <__aeabi_d2f+0x82>
 8003e6a:	e7af      	b.n	8003dcc <__aeabi_d2f+0x3c>
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	e7ac      	b.n	8003dca <__aeabi_d2f+0x3a>
 8003e70:	490a      	ldr	r1, [pc, #40]	; (8003e9c <__aeabi_d2f+0x10c>)
 8003e72:	468c      	mov	ip, r1
 8003e74:	0029      	movs	r1, r5
 8003e76:	4463      	add	r3, ip
 8003e78:	40d1      	lsrs	r1, r2
 8003e7a:	409d      	lsls	r5, r3
 8003e7c:	000a      	movs	r2, r1
 8003e7e:	0029      	movs	r1, r5
 8003e80:	4098      	lsls	r0, r3
 8003e82:	1e4d      	subs	r5, r1, #1
 8003e84:	41a9      	sbcs	r1, r5
 8003e86:	4301      	orrs	r1, r0
 8003e88:	4311      	orrs	r1, r2
 8003e8a:	e7e4      	b.n	8003e56 <__aeabi_d2f+0xc6>
 8003e8c:	0033      	movs	r3, r6
 8003e8e:	e79d      	b.n	8003dcc <__aeabi_d2f+0x3c>
 8003e90:	000007fe 	.word	0x000007fe
 8003e94:	fffffc80 	.word	0xfffffc80
 8003e98:	fffffca2 	.word	0xfffffca2
 8003e9c:	fffffc82 	.word	0xfffffc82

08003ea0 <__aeabi_cdrcmple>:
 8003ea0:	4684      	mov	ip, r0
 8003ea2:	1c10      	adds	r0, r2, #0
 8003ea4:	4662      	mov	r2, ip
 8003ea6:	468c      	mov	ip, r1
 8003ea8:	1c19      	adds	r1, r3, #0
 8003eaa:	4663      	mov	r3, ip
 8003eac:	e000      	b.n	8003eb0 <__aeabi_cdcmpeq>
 8003eae:	46c0      	nop			; (mov r8, r8)

08003eb0 <__aeabi_cdcmpeq>:
 8003eb0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003eb2:	f000 fa03 	bl	80042bc <__ledf2>
 8003eb6:	2800      	cmp	r0, #0
 8003eb8:	d401      	bmi.n	8003ebe <__aeabi_cdcmpeq+0xe>
 8003eba:	2100      	movs	r1, #0
 8003ebc:	42c8      	cmn	r0, r1
 8003ebe:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08003ec0 <__aeabi_dcmpeq>:
 8003ec0:	b510      	push	{r4, lr}
 8003ec2:	f000 f94d 	bl	8004160 <__eqdf2>
 8003ec6:	4240      	negs	r0, r0
 8003ec8:	3001      	adds	r0, #1
 8003eca:	bd10      	pop	{r4, pc}

08003ecc <__aeabi_dcmplt>:
 8003ecc:	b510      	push	{r4, lr}
 8003ece:	f000 f9f5 	bl	80042bc <__ledf2>
 8003ed2:	2800      	cmp	r0, #0
 8003ed4:	db01      	blt.n	8003eda <__aeabi_dcmplt+0xe>
 8003ed6:	2000      	movs	r0, #0
 8003ed8:	bd10      	pop	{r4, pc}
 8003eda:	2001      	movs	r0, #1
 8003edc:	bd10      	pop	{r4, pc}
 8003ede:	46c0      	nop			; (mov r8, r8)

08003ee0 <__aeabi_dcmple>:
 8003ee0:	b510      	push	{r4, lr}
 8003ee2:	f000 f9eb 	bl	80042bc <__ledf2>
 8003ee6:	2800      	cmp	r0, #0
 8003ee8:	dd01      	ble.n	8003eee <__aeabi_dcmple+0xe>
 8003eea:	2000      	movs	r0, #0
 8003eec:	bd10      	pop	{r4, pc}
 8003eee:	2001      	movs	r0, #1
 8003ef0:	bd10      	pop	{r4, pc}
 8003ef2:	46c0      	nop			; (mov r8, r8)

08003ef4 <__aeabi_dcmpgt>:
 8003ef4:	b510      	push	{r4, lr}
 8003ef6:	f000 f96f 	bl	80041d8 <__gedf2>
 8003efa:	2800      	cmp	r0, #0
 8003efc:	dc01      	bgt.n	8003f02 <__aeabi_dcmpgt+0xe>
 8003efe:	2000      	movs	r0, #0
 8003f00:	bd10      	pop	{r4, pc}
 8003f02:	2001      	movs	r0, #1
 8003f04:	bd10      	pop	{r4, pc}
 8003f06:	46c0      	nop			; (mov r8, r8)

08003f08 <__aeabi_dcmpge>:
 8003f08:	b510      	push	{r4, lr}
 8003f0a:	f000 f965 	bl	80041d8 <__gedf2>
 8003f0e:	2800      	cmp	r0, #0
 8003f10:	da01      	bge.n	8003f16 <__aeabi_dcmpge+0xe>
 8003f12:	2000      	movs	r0, #0
 8003f14:	bd10      	pop	{r4, pc}
 8003f16:	2001      	movs	r0, #1
 8003f18:	bd10      	pop	{r4, pc}
 8003f1a:	46c0      	nop			; (mov r8, r8)

08003f1c <__aeabi_cfrcmple>:
 8003f1c:	4684      	mov	ip, r0
 8003f1e:	1c08      	adds	r0, r1, #0
 8003f20:	4661      	mov	r1, ip
 8003f22:	e7ff      	b.n	8003f24 <__aeabi_cfcmpeq>

08003f24 <__aeabi_cfcmpeq>:
 8003f24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003f26:	f000 f8d1 	bl	80040cc <__lesf2>
 8003f2a:	2800      	cmp	r0, #0
 8003f2c:	d401      	bmi.n	8003f32 <__aeabi_cfcmpeq+0xe>
 8003f2e:	2100      	movs	r1, #0
 8003f30:	42c8      	cmn	r0, r1
 8003f32:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08003f34 <__aeabi_fcmpeq>:
 8003f34:	b510      	push	{r4, lr}
 8003f36:	f000 f855 	bl	8003fe4 <__eqsf2>
 8003f3a:	4240      	negs	r0, r0
 8003f3c:	3001      	adds	r0, #1
 8003f3e:	bd10      	pop	{r4, pc}

08003f40 <__aeabi_fcmplt>:
 8003f40:	b510      	push	{r4, lr}
 8003f42:	f000 f8c3 	bl	80040cc <__lesf2>
 8003f46:	2800      	cmp	r0, #0
 8003f48:	db01      	blt.n	8003f4e <__aeabi_fcmplt+0xe>
 8003f4a:	2000      	movs	r0, #0
 8003f4c:	bd10      	pop	{r4, pc}
 8003f4e:	2001      	movs	r0, #1
 8003f50:	bd10      	pop	{r4, pc}
 8003f52:	46c0      	nop			; (mov r8, r8)

08003f54 <__aeabi_fcmple>:
 8003f54:	b510      	push	{r4, lr}
 8003f56:	f000 f8b9 	bl	80040cc <__lesf2>
 8003f5a:	2800      	cmp	r0, #0
 8003f5c:	dd01      	ble.n	8003f62 <__aeabi_fcmple+0xe>
 8003f5e:	2000      	movs	r0, #0
 8003f60:	bd10      	pop	{r4, pc}
 8003f62:	2001      	movs	r0, #1
 8003f64:	bd10      	pop	{r4, pc}
 8003f66:	46c0      	nop			; (mov r8, r8)

08003f68 <__aeabi_fcmpgt>:
 8003f68:	b510      	push	{r4, lr}
 8003f6a:	f000 f863 	bl	8004034 <__gesf2>
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	dc01      	bgt.n	8003f76 <__aeabi_fcmpgt+0xe>
 8003f72:	2000      	movs	r0, #0
 8003f74:	bd10      	pop	{r4, pc}
 8003f76:	2001      	movs	r0, #1
 8003f78:	bd10      	pop	{r4, pc}
 8003f7a:	46c0      	nop			; (mov r8, r8)

08003f7c <__aeabi_fcmpge>:
 8003f7c:	b510      	push	{r4, lr}
 8003f7e:	f000 f859 	bl	8004034 <__gesf2>
 8003f82:	2800      	cmp	r0, #0
 8003f84:	da01      	bge.n	8003f8a <__aeabi_fcmpge+0xe>
 8003f86:	2000      	movs	r0, #0
 8003f88:	bd10      	pop	{r4, pc}
 8003f8a:	2001      	movs	r0, #1
 8003f8c:	bd10      	pop	{r4, pc}
 8003f8e:	46c0      	nop			; (mov r8, r8)

08003f90 <__clzsi2>:
 8003f90:	211c      	movs	r1, #28
 8003f92:	2301      	movs	r3, #1
 8003f94:	041b      	lsls	r3, r3, #16
 8003f96:	4298      	cmp	r0, r3
 8003f98:	d301      	bcc.n	8003f9e <__clzsi2+0xe>
 8003f9a:	0c00      	lsrs	r0, r0, #16
 8003f9c:	3910      	subs	r1, #16
 8003f9e:	0a1b      	lsrs	r3, r3, #8
 8003fa0:	4298      	cmp	r0, r3
 8003fa2:	d301      	bcc.n	8003fa8 <__clzsi2+0x18>
 8003fa4:	0a00      	lsrs	r0, r0, #8
 8003fa6:	3908      	subs	r1, #8
 8003fa8:	091b      	lsrs	r3, r3, #4
 8003faa:	4298      	cmp	r0, r3
 8003fac:	d301      	bcc.n	8003fb2 <__clzsi2+0x22>
 8003fae:	0900      	lsrs	r0, r0, #4
 8003fb0:	3904      	subs	r1, #4
 8003fb2:	a202      	add	r2, pc, #8	; (adr r2, 8003fbc <__clzsi2+0x2c>)
 8003fb4:	5c10      	ldrb	r0, [r2, r0]
 8003fb6:	1840      	adds	r0, r0, r1
 8003fb8:	4770      	bx	lr
 8003fba:	46c0      	nop			; (mov r8, r8)
 8003fbc:	02020304 	.word	0x02020304
 8003fc0:	01010101 	.word	0x01010101
	...

08003fcc <__clzdi2>:
 8003fcc:	b510      	push	{r4, lr}
 8003fce:	2900      	cmp	r1, #0
 8003fd0:	d103      	bne.n	8003fda <__clzdi2+0xe>
 8003fd2:	f7ff ffdd 	bl	8003f90 <__clzsi2>
 8003fd6:	3020      	adds	r0, #32
 8003fd8:	e002      	b.n	8003fe0 <__clzdi2+0x14>
 8003fda:	1c08      	adds	r0, r1, #0
 8003fdc:	f7ff ffd8 	bl	8003f90 <__clzsi2>
 8003fe0:	bd10      	pop	{r4, pc}
 8003fe2:	46c0      	nop			; (mov r8, r8)

08003fe4 <__eqsf2>:
 8003fe4:	b570      	push	{r4, r5, r6, lr}
 8003fe6:	0042      	lsls	r2, r0, #1
 8003fe8:	024e      	lsls	r6, r1, #9
 8003fea:	004c      	lsls	r4, r1, #1
 8003fec:	0245      	lsls	r5, r0, #9
 8003fee:	0a6d      	lsrs	r5, r5, #9
 8003ff0:	0e12      	lsrs	r2, r2, #24
 8003ff2:	0fc3      	lsrs	r3, r0, #31
 8003ff4:	0a76      	lsrs	r6, r6, #9
 8003ff6:	0e24      	lsrs	r4, r4, #24
 8003ff8:	0fc9      	lsrs	r1, r1, #31
 8003ffa:	2aff      	cmp	r2, #255	; 0xff
 8003ffc:	d00f      	beq.n	800401e <__eqsf2+0x3a>
 8003ffe:	2cff      	cmp	r4, #255	; 0xff
 8004000:	d011      	beq.n	8004026 <__eqsf2+0x42>
 8004002:	2001      	movs	r0, #1
 8004004:	42a2      	cmp	r2, r4
 8004006:	d000      	beq.n	800400a <__eqsf2+0x26>
 8004008:	bd70      	pop	{r4, r5, r6, pc}
 800400a:	42b5      	cmp	r5, r6
 800400c:	d1fc      	bne.n	8004008 <__eqsf2+0x24>
 800400e:	428b      	cmp	r3, r1
 8004010:	d00d      	beq.n	800402e <__eqsf2+0x4a>
 8004012:	2a00      	cmp	r2, #0
 8004014:	d1f8      	bne.n	8004008 <__eqsf2+0x24>
 8004016:	0028      	movs	r0, r5
 8004018:	1e45      	subs	r5, r0, #1
 800401a:	41a8      	sbcs	r0, r5
 800401c:	e7f4      	b.n	8004008 <__eqsf2+0x24>
 800401e:	2001      	movs	r0, #1
 8004020:	2d00      	cmp	r5, #0
 8004022:	d1f1      	bne.n	8004008 <__eqsf2+0x24>
 8004024:	e7eb      	b.n	8003ffe <__eqsf2+0x1a>
 8004026:	2001      	movs	r0, #1
 8004028:	2e00      	cmp	r6, #0
 800402a:	d1ed      	bne.n	8004008 <__eqsf2+0x24>
 800402c:	e7e9      	b.n	8004002 <__eqsf2+0x1e>
 800402e:	2000      	movs	r0, #0
 8004030:	e7ea      	b.n	8004008 <__eqsf2+0x24>
 8004032:	46c0      	nop			; (mov r8, r8)

08004034 <__gesf2>:
 8004034:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004036:	0042      	lsls	r2, r0, #1
 8004038:	0246      	lsls	r6, r0, #9
 800403a:	024d      	lsls	r5, r1, #9
 800403c:	004c      	lsls	r4, r1, #1
 800403e:	0fc3      	lsrs	r3, r0, #31
 8004040:	0a76      	lsrs	r6, r6, #9
 8004042:	0e12      	lsrs	r2, r2, #24
 8004044:	0a6d      	lsrs	r5, r5, #9
 8004046:	0e24      	lsrs	r4, r4, #24
 8004048:	0fc8      	lsrs	r0, r1, #31
 800404a:	2aff      	cmp	r2, #255	; 0xff
 800404c:	d01f      	beq.n	800408e <__gesf2+0x5a>
 800404e:	2cff      	cmp	r4, #255	; 0xff
 8004050:	d010      	beq.n	8004074 <__gesf2+0x40>
 8004052:	2a00      	cmp	r2, #0
 8004054:	d11f      	bne.n	8004096 <__gesf2+0x62>
 8004056:	4271      	negs	r1, r6
 8004058:	4171      	adcs	r1, r6
 800405a:	2c00      	cmp	r4, #0
 800405c:	d101      	bne.n	8004062 <__gesf2+0x2e>
 800405e:	2d00      	cmp	r5, #0
 8004060:	d01e      	beq.n	80040a0 <__gesf2+0x6c>
 8004062:	2900      	cmp	r1, #0
 8004064:	d10e      	bne.n	8004084 <__gesf2+0x50>
 8004066:	4283      	cmp	r3, r0
 8004068:	d01e      	beq.n	80040a8 <__gesf2+0x74>
 800406a:	2102      	movs	r1, #2
 800406c:	1e58      	subs	r0, r3, #1
 800406e:	4008      	ands	r0, r1
 8004070:	3801      	subs	r0, #1
 8004072:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004074:	2d00      	cmp	r5, #0
 8004076:	d126      	bne.n	80040c6 <__gesf2+0x92>
 8004078:	2a00      	cmp	r2, #0
 800407a:	d1f4      	bne.n	8004066 <__gesf2+0x32>
 800407c:	4271      	negs	r1, r6
 800407e:	4171      	adcs	r1, r6
 8004080:	2900      	cmp	r1, #0
 8004082:	d0f0      	beq.n	8004066 <__gesf2+0x32>
 8004084:	2800      	cmp	r0, #0
 8004086:	d1f4      	bne.n	8004072 <__gesf2+0x3e>
 8004088:	2001      	movs	r0, #1
 800408a:	4240      	negs	r0, r0
 800408c:	e7f1      	b.n	8004072 <__gesf2+0x3e>
 800408e:	2e00      	cmp	r6, #0
 8004090:	d119      	bne.n	80040c6 <__gesf2+0x92>
 8004092:	2cff      	cmp	r4, #255	; 0xff
 8004094:	d0ee      	beq.n	8004074 <__gesf2+0x40>
 8004096:	2c00      	cmp	r4, #0
 8004098:	d1e5      	bne.n	8004066 <__gesf2+0x32>
 800409a:	2d00      	cmp	r5, #0
 800409c:	d1e3      	bne.n	8004066 <__gesf2+0x32>
 800409e:	e7e4      	b.n	800406a <__gesf2+0x36>
 80040a0:	2000      	movs	r0, #0
 80040a2:	2e00      	cmp	r6, #0
 80040a4:	d0e5      	beq.n	8004072 <__gesf2+0x3e>
 80040a6:	e7e0      	b.n	800406a <__gesf2+0x36>
 80040a8:	42a2      	cmp	r2, r4
 80040aa:	dc05      	bgt.n	80040b8 <__gesf2+0x84>
 80040ac:	dbea      	blt.n	8004084 <__gesf2+0x50>
 80040ae:	42ae      	cmp	r6, r5
 80040b0:	d802      	bhi.n	80040b8 <__gesf2+0x84>
 80040b2:	d3e7      	bcc.n	8004084 <__gesf2+0x50>
 80040b4:	2000      	movs	r0, #0
 80040b6:	e7dc      	b.n	8004072 <__gesf2+0x3e>
 80040b8:	4241      	negs	r1, r0
 80040ba:	4141      	adcs	r1, r0
 80040bc:	4248      	negs	r0, r1
 80040be:	2102      	movs	r1, #2
 80040c0:	4008      	ands	r0, r1
 80040c2:	3801      	subs	r0, #1
 80040c4:	e7d5      	b.n	8004072 <__gesf2+0x3e>
 80040c6:	2002      	movs	r0, #2
 80040c8:	4240      	negs	r0, r0
 80040ca:	e7d2      	b.n	8004072 <__gesf2+0x3e>

080040cc <__lesf2>:
 80040cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ce:	0042      	lsls	r2, r0, #1
 80040d0:	0246      	lsls	r6, r0, #9
 80040d2:	024d      	lsls	r5, r1, #9
 80040d4:	004c      	lsls	r4, r1, #1
 80040d6:	0fc3      	lsrs	r3, r0, #31
 80040d8:	0a76      	lsrs	r6, r6, #9
 80040da:	0e12      	lsrs	r2, r2, #24
 80040dc:	0a6d      	lsrs	r5, r5, #9
 80040de:	0e24      	lsrs	r4, r4, #24
 80040e0:	0fc8      	lsrs	r0, r1, #31
 80040e2:	2aff      	cmp	r2, #255	; 0xff
 80040e4:	d00d      	beq.n	8004102 <__lesf2+0x36>
 80040e6:	2cff      	cmp	r4, #255	; 0xff
 80040e8:	d00f      	beq.n	800410a <__lesf2+0x3e>
 80040ea:	2a00      	cmp	r2, #0
 80040ec:	d123      	bne.n	8004136 <__lesf2+0x6a>
 80040ee:	4271      	negs	r1, r6
 80040f0:	4171      	adcs	r1, r6
 80040f2:	2c00      	cmp	r4, #0
 80040f4:	d10f      	bne.n	8004116 <__lesf2+0x4a>
 80040f6:	2d00      	cmp	r5, #0
 80040f8:	d10d      	bne.n	8004116 <__lesf2+0x4a>
 80040fa:	2000      	movs	r0, #0
 80040fc:	2e00      	cmp	r6, #0
 80040fe:	d014      	beq.n	800412a <__lesf2+0x5e>
 8004100:	e00d      	b.n	800411e <__lesf2+0x52>
 8004102:	2e00      	cmp	r6, #0
 8004104:	d110      	bne.n	8004128 <__lesf2+0x5c>
 8004106:	2cff      	cmp	r4, #255	; 0xff
 8004108:	d115      	bne.n	8004136 <__lesf2+0x6a>
 800410a:	2d00      	cmp	r5, #0
 800410c:	d10c      	bne.n	8004128 <__lesf2+0x5c>
 800410e:	2a00      	cmp	r2, #0
 8004110:	d103      	bne.n	800411a <__lesf2+0x4e>
 8004112:	4271      	negs	r1, r6
 8004114:	4171      	adcs	r1, r6
 8004116:	2900      	cmp	r1, #0
 8004118:	d108      	bne.n	800412c <__lesf2+0x60>
 800411a:	4283      	cmp	r3, r0
 800411c:	d010      	beq.n	8004140 <__lesf2+0x74>
 800411e:	2102      	movs	r1, #2
 8004120:	1e58      	subs	r0, r3, #1
 8004122:	4008      	ands	r0, r1
 8004124:	3801      	subs	r0, #1
 8004126:	e000      	b.n	800412a <__lesf2+0x5e>
 8004128:	2002      	movs	r0, #2
 800412a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800412c:	2800      	cmp	r0, #0
 800412e:	d1fc      	bne.n	800412a <__lesf2+0x5e>
 8004130:	2001      	movs	r0, #1
 8004132:	4240      	negs	r0, r0
 8004134:	e7f9      	b.n	800412a <__lesf2+0x5e>
 8004136:	2c00      	cmp	r4, #0
 8004138:	d1ef      	bne.n	800411a <__lesf2+0x4e>
 800413a:	2d00      	cmp	r5, #0
 800413c:	d1ed      	bne.n	800411a <__lesf2+0x4e>
 800413e:	e7ee      	b.n	800411e <__lesf2+0x52>
 8004140:	42a2      	cmp	r2, r4
 8004142:	dc05      	bgt.n	8004150 <__lesf2+0x84>
 8004144:	dbf2      	blt.n	800412c <__lesf2+0x60>
 8004146:	42ae      	cmp	r6, r5
 8004148:	d802      	bhi.n	8004150 <__lesf2+0x84>
 800414a:	d3ef      	bcc.n	800412c <__lesf2+0x60>
 800414c:	2000      	movs	r0, #0
 800414e:	e7ec      	b.n	800412a <__lesf2+0x5e>
 8004150:	4241      	negs	r1, r0
 8004152:	4141      	adcs	r1, r0
 8004154:	4248      	negs	r0, r1
 8004156:	2102      	movs	r1, #2
 8004158:	4008      	ands	r0, r1
 800415a:	3801      	subs	r0, #1
 800415c:	e7e5      	b.n	800412a <__lesf2+0x5e>
 800415e:	46c0      	nop			; (mov r8, r8)

08004160 <__eqdf2>:
 8004160:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004162:	464f      	mov	r7, r9
 8004164:	4646      	mov	r6, r8
 8004166:	46d6      	mov	lr, sl
 8004168:	4694      	mov	ip, r2
 800416a:	4691      	mov	r9, r2
 800416c:	031a      	lsls	r2, r3, #12
 800416e:	0b12      	lsrs	r2, r2, #12
 8004170:	4d18      	ldr	r5, [pc, #96]	; (80041d4 <__eqdf2+0x74>)
 8004172:	b5c0      	push	{r6, r7, lr}
 8004174:	004c      	lsls	r4, r1, #1
 8004176:	030f      	lsls	r7, r1, #12
 8004178:	4692      	mov	sl, r2
 800417a:	005a      	lsls	r2, r3, #1
 800417c:	0006      	movs	r6, r0
 800417e:	4680      	mov	r8, r0
 8004180:	0b3f      	lsrs	r7, r7, #12
 8004182:	2001      	movs	r0, #1
 8004184:	0d64      	lsrs	r4, r4, #21
 8004186:	0fc9      	lsrs	r1, r1, #31
 8004188:	0d52      	lsrs	r2, r2, #21
 800418a:	0fdb      	lsrs	r3, r3, #31
 800418c:	42ac      	cmp	r4, r5
 800418e:	d00a      	beq.n	80041a6 <__eqdf2+0x46>
 8004190:	42aa      	cmp	r2, r5
 8004192:	d003      	beq.n	800419c <__eqdf2+0x3c>
 8004194:	4294      	cmp	r4, r2
 8004196:	d101      	bne.n	800419c <__eqdf2+0x3c>
 8004198:	4557      	cmp	r7, sl
 800419a:	d00d      	beq.n	80041b8 <__eqdf2+0x58>
 800419c:	bce0      	pop	{r5, r6, r7}
 800419e:	46ba      	mov	sl, r7
 80041a0:	46b1      	mov	r9, r6
 80041a2:	46a8      	mov	r8, r5
 80041a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041a6:	003d      	movs	r5, r7
 80041a8:	4335      	orrs	r5, r6
 80041aa:	d1f7      	bne.n	800419c <__eqdf2+0x3c>
 80041ac:	42a2      	cmp	r2, r4
 80041ae:	d1f5      	bne.n	800419c <__eqdf2+0x3c>
 80041b0:	4652      	mov	r2, sl
 80041b2:	4665      	mov	r5, ip
 80041b4:	432a      	orrs	r2, r5
 80041b6:	d1f1      	bne.n	800419c <__eqdf2+0x3c>
 80041b8:	2001      	movs	r0, #1
 80041ba:	45c8      	cmp	r8, r9
 80041bc:	d1ee      	bne.n	800419c <__eqdf2+0x3c>
 80041be:	4299      	cmp	r1, r3
 80041c0:	d006      	beq.n	80041d0 <__eqdf2+0x70>
 80041c2:	2c00      	cmp	r4, #0
 80041c4:	d1ea      	bne.n	800419c <__eqdf2+0x3c>
 80041c6:	433e      	orrs	r6, r7
 80041c8:	0030      	movs	r0, r6
 80041ca:	1e46      	subs	r6, r0, #1
 80041cc:	41b0      	sbcs	r0, r6
 80041ce:	e7e5      	b.n	800419c <__eqdf2+0x3c>
 80041d0:	2000      	movs	r0, #0
 80041d2:	e7e3      	b.n	800419c <__eqdf2+0x3c>
 80041d4:	000007ff 	.word	0x000007ff

080041d8 <__gedf2>:
 80041d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041da:	464e      	mov	r6, r9
 80041dc:	4645      	mov	r5, r8
 80041de:	4657      	mov	r7, sl
 80041e0:	46de      	mov	lr, fp
 80041e2:	0004      	movs	r4, r0
 80041e4:	0018      	movs	r0, r3
 80041e6:	b5e0      	push	{r5, r6, r7, lr}
 80041e8:	0016      	movs	r6, r2
 80041ea:	031b      	lsls	r3, r3, #12
 80041ec:	0b1b      	lsrs	r3, r3, #12
 80041ee:	4d32      	ldr	r5, [pc, #200]	; (80042b8 <__gedf2+0xe0>)
 80041f0:	030f      	lsls	r7, r1, #12
 80041f2:	004a      	lsls	r2, r1, #1
 80041f4:	4699      	mov	r9, r3
 80041f6:	0043      	lsls	r3, r0, #1
 80041f8:	46a4      	mov	ip, r4
 80041fa:	46b0      	mov	r8, r6
 80041fc:	0b3f      	lsrs	r7, r7, #12
 80041fe:	0d52      	lsrs	r2, r2, #21
 8004200:	0fc9      	lsrs	r1, r1, #31
 8004202:	0d5b      	lsrs	r3, r3, #21
 8004204:	0fc0      	lsrs	r0, r0, #31
 8004206:	42aa      	cmp	r2, r5
 8004208:	d029      	beq.n	800425e <__gedf2+0x86>
 800420a:	42ab      	cmp	r3, r5
 800420c:	d018      	beq.n	8004240 <__gedf2+0x68>
 800420e:	2a00      	cmp	r2, #0
 8004210:	d12a      	bne.n	8004268 <__gedf2+0x90>
 8004212:	433c      	orrs	r4, r7
 8004214:	46a3      	mov	fp, r4
 8004216:	4265      	negs	r5, r4
 8004218:	4165      	adcs	r5, r4
 800421a:	2b00      	cmp	r3, #0
 800421c:	d102      	bne.n	8004224 <__gedf2+0x4c>
 800421e:	464c      	mov	r4, r9
 8004220:	4326      	orrs	r6, r4
 8004222:	d027      	beq.n	8004274 <__gedf2+0x9c>
 8004224:	2d00      	cmp	r5, #0
 8004226:	d115      	bne.n	8004254 <__gedf2+0x7c>
 8004228:	4281      	cmp	r1, r0
 800422a:	d028      	beq.n	800427e <__gedf2+0xa6>
 800422c:	2002      	movs	r0, #2
 800422e:	3901      	subs	r1, #1
 8004230:	4008      	ands	r0, r1
 8004232:	3801      	subs	r0, #1
 8004234:	bcf0      	pop	{r4, r5, r6, r7}
 8004236:	46bb      	mov	fp, r7
 8004238:	46b2      	mov	sl, r6
 800423a:	46a9      	mov	r9, r5
 800423c:	46a0      	mov	r8, r4
 800423e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004240:	464d      	mov	r5, r9
 8004242:	432e      	orrs	r6, r5
 8004244:	d12f      	bne.n	80042a6 <__gedf2+0xce>
 8004246:	2a00      	cmp	r2, #0
 8004248:	d1ee      	bne.n	8004228 <__gedf2+0x50>
 800424a:	433c      	orrs	r4, r7
 800424c:	4265      	negs	r5, r4
 800424e:	4165      	adcs	r5, r4
 8004250:	2d00      	cmp	r5, #0
 8004252:	d0e9      	beq.n	8004228 <__gedf2+0x50>
 8004254:	2800      	cmp	r0, #0
 8004256:	d1ed      	bne.n	8004234 <__gedf2+0x5c>
 8004258:	2001      	movs	r0, #1
 800425a:	4240      	negs	r0, r0
 800425c:	e7ea      	b.n	8004234 <__gedf2+0x5c>
 800425e:	003d      	movs	r5, r7
 8004260:	4325      	orrs	r5, r4
 8004262:	d120      	bne.n	80042a6 <__gedf2+0xce>
 8004264:	4293      	cmp	r3, r2
 8004266:	d0eb      	beq.n	8004240 <__gedf2+0x68>
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1dd      	bne.n	8004228 <__gedf2+0x50>
 800426c:	464c      	mov	r4, r9
 800426e:	4326      	orrs	r6, r4
 8004270:	d1da      	bne.n	8004228 <__gedf2+0x50>
 8004272:	e7db      	b.n	800422c <__gedf2+0x54>
 8004274:	465b      	mov	r3, fp
 8004276:	2000      	movs	r0, #0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d0db      	beq.n	8004234 <__gedf2+0x5c>
 800427c:	e7d6      	b.n	800422c <__gedf2+0x54>
 800427e:	429a      	cmp	r2, r3
 8004280:	dc0a      	bgt.n	8004298 <__gedf2+0xc0>
 8004282:	dbe7      	blt.n	8004254 <__gedf2+0x7c>
 8004284:	454f      	cmp	r7, r9
 8004286:	d8d1      	bhi.n	800422c <__gedf2+0x54>
 8004288:	d010      	beq.n	80042ac <__gedf2+0xd4>
 800428a:	2000      	movs	r0, #0
 800428c:	454f      	cmp	r7, r9
 800428e:	d2d1      	bcs.n	8004234 <__gedf2+0x5c>
 8004290:	2900      	cmp	r1, #0
 8004292:	d0e1      	beq.n	8004258 <__gedf2+0x80>
 8004294:	0008      	movs	r0, r1
 8004296:	e7cd      	b.n	8004234 <__gedf2+0x5c>
 8004298:	4243      	negs	r3, r0
 800429a:	4158      	adcs	r0, r3
 800429c:	2302      	movs	r3, #2
 800429e:	4240      	negs	r0, r0
 80042a0:	4018      	ands	r0, r3
 80042a2:	3801      	subs	r0, #1
 80042a4:	e7c6      	b.n	8004234 <__gedf2+0x5c>
 80042a6:	2002      	movs	r0, #2
 80042a8:	4240      	negs	r0, r0
 80042aa:	e7c3      	b.n	8004234 <__gedf2+0x5c>
 80042ac:	45c4      	cmp	ip, r8
 80042ae:	d8bd      	bhi.n	800422c <__gedf2+0x54>
 80042b0:	2000      	movs	r0, #0
 80042b2:	45c4      	cmp	ip, r8
 80042b4:	d2be      	bcs.n	8004234 <__gedf2+0x5c>
 80042b6:	e7eb      	b.n	8004290 <__gedf2+0xb8>
 80042b8:	000007ff 	.word	0x000007ff

080042bc <__ledf2>:
 80042bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042be:	464e      	mov	r6, r9
 80042c0:	4645      	mov	r5, r8
 80042c2:	4657      	mov	r7, sl
 80042c4:	46de      	mov	lr, fp
 80042c6:	0004      	movs	r4, r0
 80042c8:	0018      	movs	r0, r3
 80042ca:	b5e0      	push	{r5, r6, r7, lr}
 80042cc:	0016      	movs	r6, r2
 80042ce:	031b      	lsls	r3, r3, #12
 80042d0:	0b1b      	lsrs	r3, r3, #12
 80042d2:	4d31      	ldr	r5, [pc, #196]	; (8004398 <__ledf2+0xdc>)
 80042d4:	030f      	lsls	r7, r1, #12
 80042d6:	004a      	lsls	r2, r1, #1
 80042d8:	4699      	mov	r9, r3
 80042da:	0043      	lsls	r3, r0, #1
 80042dc:	46a4      	mov	ip, r4
 80042de:	46b0      	mov	r8, r6
 80042e0:	0b3f      	lsrs	r7, r7, #12
 80042e2:	0d52      	lsrs	r2, r2, #21
 80042e4:	0fc9      	lsrs	r1, r1, #31
 80042e6:	0d5b      	lsrs	r3, r3, #21
 80042e8:	0fc0      	lsrs	r0, r0, #31
 80042ea:	42aa      	cmp	r2, r5
 80042ec:	d011      	beq.n	8004312 <__ledf2+0x56>
 80042ee:	42ab      	cmp	r3, r5
 80042f0:	d014      	beq.n	800431c <__ledf2+0x60>
 80042f2:	2a00      	cmp	r2, #0
 80042f4:	d12f      	bne.n	8004356 <__ledf2+0x9a>
 80042f6:	433c      	orrs	r4, r7
 80042f8:	46a3      	mov	fp, r4
 80042fa:	4265      	negs	r5, r4
 80042fc:	4165      	adcs	r5, r4
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d114      	bne.n	800432c <__ledf2+0x70>
 8004302:	464c      	mov	r4, r9
 8004304:	4326      	orrs	r6, r4
 8004306:	d111      	bne.n	800432c <__ledf2+0x70>
 8004308:	465b      	mov	r3, fp
 800430a:	2000      	movs	r0, #0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d017      	beq.n	8004340 <__ledf2+0x84>
 8004310:	e010      	b.n	8004334 <__ledf2+0x78>
 8004312:	003d      	movs	r5, r7
 8004314:	4325      	orrs	r5, r4
 8004316:	d112      	bne.n	800433e <__ledf2+0x82>
 8004318:	4293      	cmp	r3, r2
 800431a:	d11c      	bne.n	8004356 <__ledf2+0x9a>
 800431c:	464d      	mov	r5, r9
 800431e:	432e      	orrs	r6, r5
 8004320:	d10d      	bne.n	800433e <__ledf2+0x82>
 8004322:	2a00      	cmp	r2, #0
 8004324:	d104      	bne.n	8004330 <__ledf2+0x74>
 8004326:	433c      	orrs	r4, r7
 8004328:	4265      	negs	r5, r4
 800432a:	4165      	adcs	r5, r4
 800432c:	2d00      	cmp	r5, #0
 800432e:	d10d      	bne.n	800434c <__ledf2+0x90>
 8004330:	4281      	cmp	r1, r0
 8004332:	d016      	beq.n	8004362 <__ledf2+0xa6>
 8004334:	2002      	movs	r0, #2
 8004336:	3901      	subs	r1, #1
 8004338:	4008      	ands	r0, r1
 800433a:	3801      	subs	r0, #1
 800433c:	e000      	b.n	8004340 <__ledf2+0x84>
 800433e:	2002      	movs	r0, #2
 8004340:	bcf0      	pop	{r4, r5, r6, r7}
 8004342:	46bb      	mov	fp, r7
 8004344:	46b2      	mov	sl, r6
 8004346:	46a9      	mov	r9, r5
 8004348:	46a0      	mov	r8, r4
 800434a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800434c:	2800      	cmp	r0, #0
 800434e:	d1f7      	bne.n	8004340 <__ledf2+0x84>
 8004350:	2001      	movs	r0, #1
 8004352:	4240      	negs	r0, r0
 8004354:	e7f4      	b.n	8004340 <__ledf2+0x84>
 8004356:	2b00      	cmp	r3, #0
 8004358:	d1ea      	bne.n	8004330 <__ledf2+0x74>
 800435a:	464c      	mov	r4, r9
 800435c:	4326      	orrs	r6, r4
 800435e:	d1e7      	bne.n	8004330 <__ledf2+0x74>
 8004360:	e7e8      	b.n	8004334 <__ledf2+0x78>
 8004362:	429a      	cmp	r2, r3
 8004364:	dd06      	ble.n	8004374 <__ledf2+0xb8>
 8004366:	4243      	negs	r3, r0
 8004368:	4158      	adcs	r0, r3
 800436a:	2302      	movs	r3, #2
 800436c:	4240      	negs	r0, r0
 800436e:	4018      	ands	r0, r3
 8004370:	3801      	subs	r0, #1
 8004372:	e7e5      	b.n	8004340 <__ledf2+0x84>
 8004374:	429a      	cmp	r2, r3
 8004376:	dbe9      	blt.n	800434c <__ledf2+0x90>
 8004378:	454f      	cmp	r7, r9
 800437a:	d8db      	bhi.n	8004334 <__ledf2+0x78>
 800437c:	d006      	beq.n	800438c <__ledf2+0xd0>
 800437e:	2000      	movs	r0, #0
 8004380:	454f      	cmp	r7, r9
 8004382:	d2dd      	bcs.n	8004340 <__ledf2+0x84>
 8004384:	2900      	cmp	r1, #0
 8004386:	d0e3      	beq.n	8004350 <__ledf2+0x94>
 8004388:	0008      	movs	r0, r1
 800438a:	e7d9      	b.n	8004340 <__ledf2+0x84>
 800438c:	45c4      	cmp	ip, r8
 800438e:	d8d1      	bhi.n	8004334 <__ledf2+0x78>
 8004390:	2000      	movs	r0, #0
 8004392:	45c4      	cmp	ip, r8
 8004394:	d2d4      	bcs.n	8004340 <__ledf2+0x84>
 8004396:	e7f5      	b.n	8004384 <__ledf2+0xc8>
 8004398:	000007ff 	.word	0x000007ff

0800439c <St_Sigfox_Open_RCZ>:
#include "retriever_api.h"
#include "st_rf_api.h"
#include "st_mcu_api.h"

ST_SFX_ERR St_Sigfox_Open_RCZ(uint8_t rcz)
{
 800439c:	b570      	push	{r4, r5, r6, lr}
 800439e:	3801      	subs	r0, #1

		/* Set the standard configuration with default channel to 63 */
		if(SIGFOX_API_set_std_config(config_words,0)!=0)
		{
			/* Stuck in case of error */
			open_err = ST_SFX_ERR_OPEN;
 80043a0:	2363      	movs	r3, #99	; 0x63
{
 80043a2:	b08c      	sub	sp, #48	; 0x30
 80043a4:	2806      	cmp	r0, #6
 80043a6:	d82f      	bhi.n	8004408 <St_Sigfox_Open_RCZ+0x6c>
 80043a8:	ac05      	add	r4, sp, #20
 80043aa:	f7fe f86d 	bl	8002488 <__gnu_thumb1_case_uqi>
 80043ae:	1304      	.short	0x1304
 80043b0:	7d6b4930 	.word	0x7d6b4930
 80043b4:	80          	.byte	0x80
 80043b5:	00          	.byte	0x00
		if(SIGFOX_API_open(&(sfx_rc_t)RC1)!=0)
 80043b6:	4b3f      	ldr	r3, [pc, #252]	; (80044b4 <St_Sigfox_Open_RCZ+0x118>)
		break;
	}
	case 7:
	{
		/* RCZ7 - open the SigFox library */
		if(SIGFOX_API_open(&(sfx_rc_t)RC7)!=0)
 80043b8:	0022      	movs	r2, r4
 80043ba:	cb23      	ldmia	r3!, {r0, r1, r5}
 80043bc:	c223      	stmia	r2!, {r0, r1, r5}
 80043be:	cb23      	ldmia	r3!, {r0, r1, r5}
 80043c0:	c223      	stmia	r2!, {r0, r1, r5}
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	0020      	movs	r0, r4
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	f7fc fc84 	bl	8000cd4 <SIGFOX_API_open>
 80043cc:	1e43      	subs	r3, r0, #1
 80043ce:	4198      	sbcs	r0, r3
	ST_SFX_ERR open_err = ST_SFX_ERR_NONE;
 80043d0:	b2c3      	uxtb	r3, r0
		{
			/* Stuck in case of error */
			open_err = ST_SFX_ERR_OPEN;
		}
		break;
 80043d2:	e019      	b.n	8004408 <St_Sigfox_Open_RCZ+0x6c>
		if(SIGFOX_API_open(&(sfx_rc_t)RC2)!=0)
 80043d4:	0022      	movs	r2, r4
 80043d6:	4b37      	ldr	r3, [pc, #220]	; (80044b4 <St_Sigfox_Open_RCZ+0x118>)
 80043d8:	331c      	adds	r3, #28
 80043da:	cb23      	ldmia	r3!, {r0, r1, r5}
 80043dc:	c223      	stmia	r2!, {r0, r1, r5}
 80043de:	cb23      	ldmia	r3!, {r0, r1, r5}
 80043e0:	c223      	stmia	r2!, {r0, r1, r5}
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	0020      	movs	r0, r4
 80043e6:	6013      	str	r3, [r2, #0]
 80043e8:	f7fc fc74 	bl	8000cd4 <SIGFOX_API_open>
		sfx_u32 config_words[3]={1,0,0};
 80043ec:	2301      	movs	r3, #1
 80043ee:	2100      	movs	r1, #0
		if(SIGFOX_API_open(&(sfx_rc_t)RC2)!=0)
 80043f0:	0005      	movs	r5, r0
		if(SIGFOX_API_set_std_config(config_words,0)!=0)
 80043f2:	0020      	movs	r0, r4
		sfx_u32 config_words[3]={1,0,0};
 80043f4:	9305      	str	r3, [sp, #20]
 80043f6:	6061      	str	r1, [r4, #4]
 80043f8:	60a1      	str	r1, [r4, #8]
		if(SIGFOX_API_set_std_config(config_words,0)!=0)
 80043fa:	f7fc fdc9 	bl	8000f90 <SIGFOX_API_set_std_config>
 80043fe:	4305      	orrs	r5, r0
 8004400:	b2ab      	uxth	r3, r5
 8004402:	1e5d      	subs	r5, r3, #1
 8004404:	41ab      	sbcs	r3, r5
			open_err = ST_SFX_ERR_OPEN;
 8004406:	b2db      	uxtb	r3, r3
		open_err = ST_SFX_ERR_RC_UNKNOWN;
		break;
	}
	}
	return open_err;
}
 8004408:	0018      	movs	r0, r3
 800440a:	b00c      	add	sp, #48	; 0x30
 800440c:	bd70      	pop	{r4, r5, r6, pc}
		ret=SIGFOX_API_open(&(sfx_rc_t)RC3C);
 800440e:	4d29      	ldr	r5, [pc, #164]	; (80044b4 <St_Sigfox_Open_RCZ+0x118>)
 8004410:	0022      	movs	r2, r4
 8004412:	002b      	movs	r3, r5
 8004414:	3338      	adds	r3, #56	; 0x38
 8004416:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004418:	c243      	stmia	r2!, {r0, r1, r6}
 800441a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800441c:	c243      	stmia	r2!, {r0, r1, r6}
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	0020      	movs	r0, r4
 8004422:	6013      	str	r3, [r2, #0]
 8004424:	f7fc fc56 	bl	8000cd4 <SIGFOX_API_open>
 8004428:	466b      	mov	r3, sp
 800442a:	b2c0      	uxtb	r0, r0
 800442c:	7158      	strb	r0, [r3, #5]
		if(ret!=0)
 800442e:	795c      	ldrb	r4, [r3, #5]
		sfx_u32 config_words[3]=RC5_CONFIG;
 8004430:	a802      	add	r0, sp, #8
 8004432:	0003      	movs	r3, r0
 8004434:	3554      	adds	r5, #84	; 0x54
 8004436:	cd46      	ldmia	r5!, {r1, r2, r6}
 8004438:	c346      	stmia	r3!, {r1, r2, r6}
		if(ret!=0)
 800443a:	b2e4      	uxtb	r4, r4
		if(SIGFOX_API_set_std_config(config_words,0)!=0)
 800443c:	2100      	movs	r1, #0
 800443e:	e018      	b.n	8004472 <St_Sigfox_Open_RCZ+0xd6>
		ret=SIGFOX_API_open(&(sfx_rc_t)RC4);
 8004440:	0022      	movs	r2, r4
 8004442:	4b1c      	ldr	r3, [pc, #112]	; (80044b4 <St_Sigfox_Open_RCZ+0x118>)
 8004444:	3360      	adds	r3, #96	; 0x60
 8004446:	cb23      	ldmia	r3!, {r0, r1, r5}
 8004448:	c223      	stmia	r2!, {r0, r1, r5}
 800444a:	cb23      	ldmia	r3!, {r0, r1, r5}
 800444c:	c223      	stmia	r2!, {r0, r1, r5}
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	0020      	movs	r0, r4
 8004452:	6013      	str	r3, [r2, #0]
 8004454:	f7fc fc3e 	bl	8000cd4 <SIGFOX_API_open>
 8004458:	466b      	mov	r3, sp
 800445a:	b2c0      	uxtb	r0, r0
 800445c:	7198      	strb	r0, [r3, #6]
		sfx_u32 config_words[3]={0,0x40000000,0};
 800445e:	2280      	movs	r2, #128	; 0x80
		if(ret!=0)
 8004460:	799c      	ldrb	r4, [r3, #6]
		sfx_u32 config_words[3]={0,0x40000000,0};
 8004462:	2300      	movs	r3, #0
		if(SIGFOX_API_set_std_config(config_words,1)!=0)
 8004464:	2101      	movs	r1, #1
		sfx_u32 config_words[3]={0,0x40000000,0};
 8004466:	05d2      	lsls	r2, r2, #23
		if(ret!=0)
 8004468:	b2e4      	uxtb	r4, r4
		sfx_u32 config_words[3]={0,0x40000000,0};
 800446a:	9302      	str	r3, [sp, #8]
 800446c:	9203      	str	r2, [sp, #12]
 800446e:	9304      	str	r3, [sp, #16]
		if(SIGFOX_API_set_std_config(config_words,1)!=0)
 8004470:	a802      	add	r0, sp, #8
 8004472:	f7fc fd8d 	bl	8000f90 <SIGFOX_API_set_std_config>
			open_err = ST_SFX_ERR_OPEN;
 8004476:	2301      	movs	r3, #1
		if(SIGFOX_API_set_std_config(config_words,1)!=0)
 8004478:	2800      	cmp	r0, #0
 800447a:	d1c5      	bne.n	8004408 <St_Sigfox_Open_RCZ+0x6c>
		if(ret!=0)
 800447c:	1e63      	subs	r3, r4, #1
 800447e:	419c      	sbcs	r4, r3
	ST_SFX_ERR open_err = ST_SFX_ERR_NONE;
 8004480:	b2e3      	uxtb	r3, r4
 8004482:	e7c1      	b.n	8004408 <St_Sigfox_Open_RCZ+0x6c>
		ret=SIGFOX_API_open(&(sfx_rc_t)RC5);
 8004484:	4d0b      	ldr	r5, [pc, #44]	; (80044b4 <St_Sigfox_Open_RCZ+0x118>)
 8004486:	0022      	movs	r2, r4
 8004488:	002b      	movs	r3, r5
 800448a:	337c      	adds	r3, #124	; 0x7c
 800448c:	cb43      	ldmia	r3!, {r0, r1, r6}
 800448e:	c243      	stmia	r2!, {r0, r1, r6}
 8004490:	cb43      	ldmia	r3!, {r0, r1, r6}
 8004492:	c243      	stmia	r2!, {r0, r1, r6}
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	0020      	movs	r0, r4
 8004498:	6013      	str	r3, [r2, #0]
 800449a:	f7fc fc1b 	bl	8000cd4 <SIGFOX_API_open>
 800449e:	466b      	mov	r3, sp
 80044a0:	b2c0      	uxtb	r0, r0
 80044a2:	71d8      	strb	r0, [r3, #7]
		if(ret!=0)
 80044a4:	79dc      	ldrb	r4, [r3, #7]
 80044a6:	e7c3      	b.n	8004430 <St_Sigfox_Open_RCZ+0x94>
		if(SIGFOX_API_open(&(sfx_rc_t)RC6)!=0)
 80044a8:	4b03      	ldr	r3, [pc, #12]	; (80044b8 <St_Sigfox_Open_RCZ+0x11c>)
 80044aa:	3318      	adds	r3, #24
 80044ac:	e784      	b.n	80043b8 <St_Sigfox_Open_RCZ+0x1c>
		if(SIGFOX_API_open(&(sfx_rc_t)RC7)!=0)
 80044ae:	4b02      	ldr	r3, [pc, #8]	; (80044b8 <St_Sigfox_Open_RCZ+0x11c>)
 80044b0:	3334      	adds	r3, #52	; 0x34
 80044b2:	e781      	b.n	80043b8 <St_Sigfox_Open_RCZ+0x1c>
 80044b4:	0800aa08 	.word	0x0800aa08
 80044b8:	0800aa88 	.word	0x0800aa88

080044bc <ST_Sigfox_Init>:

ST_SFX_ERR ST_Sigfox_Init(NVM_BoardDataType *sfxConfig, uint8_t openAfterInit)
{
 80044bc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ST_SFX_ERR ret_err = ST_SFX_ERR_NONE;

	/* Macro that defines and initializes the nvmconfig structure */
	INIT_NVM_CONFIG(nvmConfig);
 80044be:	2300      	movs	r3, #0
 80044c0:	466a      	mov	r2, sp
{
 80044c2:	0004      	movs	r4, r0
	INIT_NVM_CONFIG(nvmConfig);
 80044c4:	7313      	strb	r3, [r2, #12]

	/* Sigfox Credentials Management */
	nvmConfig.nvmType = NVM_TYPE_FLASH;
 80044c6:	3301      	adds	r3, #1
 80044c8:	7013      	strb	r3, [r2, #0]
	nvmConfig.sfxDataAddress = (uint32_t)FLASH_USER_START_ADDR; /* Set here the address for 'NVM sigfox data' management */
 80044ca:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <ST_Sigfox_Init+0x2c>)
	nvmConfig.boardDataAddress = (uint32_t)FLASH_BOARD_START_ADDR; /* Set here the address for 'NVM board data' management */

	/* Configure the NVM_API */
	SetNVMInitial(&nvmConfig);
 80044cc:	4668      	mov	r0, sp
	nvmConfig.sfxDataAddress = (uint32_t)FLASH_USER_START_ADDR; /* Set here the address for 'NVM sigfox data' management */
 80044ce:	9302      	str	r3, [sp, #8]
	nvmConfig.boardDataAddress = (uint32_t)FLASH_BOARD_START_ADDR; /* Set here the address for 'NVM board data' management */
 80044d0:	4b06      	ldr	r3, [pc, #24]	; (80044ec <ST_Sigfox_Init+0x30>)
 80044d2:	9301      	str	r3, [sp, #4]
	SetNVMInitial(&nvmConfig);
 80044d4:	f004 f810 	bl	80084f8 <SetNVMInitial>

	/* Retrieve Sigfox info from FLASH */
	if(enc_utils_retrieve_data_from_flash(sfxConfig) != 0)
 80044d8:	0020      	movs	r0, r4
 80044da:	f7fc fa4a 	bl	8000972 <enc_utils_retrieve_data_from_flash>
 80044de:	2800      	cmp	r0, #0
 80044e0:	d000      	beq.n	80044e4 <ST_Sigfox_Init+0x28>
		ret_err = ST_SFX_ERR_CREDENTIALS;
 80044e2:	2002      	movs	r0, #2
	return ret_err;
}
 80044e4:	b004      	add	sp, #16
 80044e6:	bd10      	pop	{r4, pc}
 80044e8:	08080080 	.word	0x08080080
 80044ec:	08080000 	.word	0x08080000

080044f0 <MX_ADC_Init>:
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
  hadc.Init.ContinuousConvMode = DISABLE;
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80044f0:	22c2      	movs	r2, #194	; 0xc2
{
 80044f2:	b570      	push	{r4, r5, r6, lr}
  hadc.Init.OversamplingMode = DISABLE;
 80044f4:	4c2c      	ldr	r4, [pc, #176]	; (80045a8 <MX_ADC_Init+0xb8>)
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80044f6:	32ff      	adds	r2, #255	; 0xff
 80044f8:	6262      	str	r2, [r4, #36]	; 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 80044fa:	0022      	movs	r2, r4
  hadc.Init.OversamplingMode = DISABLE;
 80044fc:	2300      	movs	r3, #0
  hadc.Init.DMAContinuousRequests = DISABLE;
 80044fe:	322c      	adds	r2, #44	; 0x2c
 8004500:	7013      	strb	r3, [r2, #0]
  hadc.Instance = ADC1;
 8004502:	4a2a      	ldr	r2, [pc, #168]	; (80045ac <MX_ADC_Init+0xbc>)
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
  hadc.Init.LowPowerAutoWait = DISABLE;
  hadc.Init.LowPowerFrequencyMode = DISABLE;
  hadc.Init.LowPowerAutoPowerOff = DISABLE;

  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004504:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 8004506:	6022      	str	r2, [r4, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8004508:	22c0      	movs	r2, #192	; 0xc0
 800450a:	0612      	lsls	r2, r2, #24
 800450c:	6062      	str	r2, [r4, #4]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800450e:	2201      	movs	r2, #1
  hadc.Init.ContinuousConvMode = DISABLE;
 8004510:	8423      	strh	r3, [r4, #32]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004512:	6122      	str	r2, [r4, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004514:	3203      	adds	r2, #3
  hadc.Init.OversamplingMode = DISABLE;
 8004516:	63e3      	str	r3, [r4, #60]	; 0x3c
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004518:	63a3      	str	r3, [r4, #56]	; 0x38
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800451a:	62a3      	str	r3, [r4, #40]	; 0x28
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800451c:	6323      	str	r3, [r4, #48]	; 0x30
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800451e:	6363      	str	r3, [r4, #52]	; 0x34
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004520:	60a3      	str	r3, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004522:	60e3      	str	r3, [r4, #12]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004524:	6162      	str	r2, [r4, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004526:	61a3      	str	r3, [r4, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004528:	61e3      	str	r3, [r4, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 800452a:	f001 fbc7 	bl	8005cbc <HAL_ADC_Init>
 800452e:	2800      	cmp	r0, #0
 8004530:	d001      	beq.n	8004536 <MX_ADC_Init+0x46>
  {
    Error_Handler();
 8004532:	f000 fbc7 	bl	8004cc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8004536:	4d1e      	ldr	r5, [pc, #120]	; (80045b0 <MX_ADC_Init+0xc0>)
 8004538:	4b1e      	ldr	r3, [pc, #120]	; (80045b4 <MX_ADC_Init+0xc4>)
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800453a:	0029      	movs	r1, r5
  sConfig.Channel = ADC_CHANNEL_3;
 800453c:	602b      	str	r3, [r5, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800453e:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004540:	0020      	movs	r0, r4
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004542:	015b      	lsls	r3, r3, #5
 8004544:	606b      	str	r3, [r5, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004546:	f001 fd3f 	bl	8005fc8 <HAL_ADC_ConfigChannel>
 800454a:	2800      	cmp	r0, #0
 800454c:	d001      	beq.n	8004552 <MX_ADC_Init+0x62>
  {
    Error_Handler();
 800454e:	f000 fbb9 	bl	8004cc4 <Error_Handler>
  }

  if(calibrated == 0)
	{
	  HAL_ADCEx_Calibration_Start(&hadc, 1);
 8004552:	2101      	movs	r1, #1
 8004554:	0020      	movs	r0, r4
 8004556:	f001 fd8b 	bl	8006070 <HAL_ADCEx_Calibration_Start>
	  printf("Calibracao: %li\n", (uint32_t)HAL_ADCEx_Calibration_GetValue(&hadc, 1));
 800455a:	2101      	movs	r1, #1
 800455c:	0020      	movs	r0, r4
 800455e:	f001 fdd7 	bl	8006110 <HAL_ADCEx_Calibration_GetValue>
 8004562:	0001      	movs	r1, r0
 8004564:	4814      	ldr	r0, [pc, #80]	; (80045b8 <MX_ADC_Init+0xc8>)
 8004566:	f005 f809 	bl	800957c <iprintf>
	  printf("Calibrated: %i\n", calibrated);
 800456a:	4e14      	ldr	r6, [pc, #80]	; (80045bc <MX_ADC_Init+0xcc>)
 800456c:	2100      	movs	r1, #0
 800456e:	0030      	movs	r0, r6
 8004570:	f005 f804 	bl	800957c <iprintf>
	  calibrated = 1;
	  printf("Calibrated: %i\n", calibrated);
 8004574:	2101      	movs	r1, #1
 8004576:	0030      	movs	r0, r6
 8004578:	f005 f800 	bl	800957c <iprintf>
	}

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800457c:	4b10      	ldr	r3, [pc, #64]	; (80045c0 <MX_ADC_Init+0xd0>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800457e:	0029      	movs	r1, r5
 8004580:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8004582:	602b      	str	r3, [r5, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004584:	f001 fd20 	bl	8005fc8 <HAL_ADC_ConfigChannel>
 8004588:	2800      	cmp	r0, #0
 800458a:	d001      	beq.n	8004590 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 800458c:	f000 fb9a 	bl	8004cc4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8004590:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <MX_ADC_Init+0xd4>)
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004592:	0029      	movs	r1, r5
 8004594:	0020      	movs	r0, r4
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8004596:	602b      	str	r3, [r5, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004598:	f001 fd16 	bl	8005fc8 <HAL_ADC_ConfigChannel>
 800459c:	2800      	cmp	r0, #0
 800459e:	d001      	beq.n	80045a4 <MX_ADC_Init+0xb4>
  {
    Error_Handler();
 80045a0:	f000 fb90 	bl	8004cc4 <Error_Handler>
  }

}
 80045a4:	bd70      	pop	{r4, r5, r6, pc}
 80045a6:	46c0      	nop			; (mov r8, r8)
 80045a8:	200005fc 	.word	0x200005fc
 80045ac:	40012400 	.word	0x40012400
 80045b0:	200002bc 	.word	0x200002bc
 80045b4:	0c000008 	.word	0x0c000008
 80045b8:	0800ae60 	.word	0x0800ae60
 80045bc:	0800ae71 	.word	0x0800ae71
 80045c0:	48040000 	.word	0x48040000
 80045c4:	44020000 	.word	0x44020000

080045c8 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80045c8:	b510      	push	{r4, lr}
 80045ca:	0004      	movs	r4, r0
 80045cc:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045ce:	2214      	movs	r2, #20
 80045d0:	2100      	movs	r1, #0
 80045d2:	a801      	add	r0, sp, #4
 80045d4:	f004 ffc9 	bl	800956a <memset>
  if(adcHandle->Instance==ADC1)
 80045d8:	4b0f      	ldr	r3, [pc, #60]	; (8004618 <HAL_ADC_MspInit+0x50>)
 80045da:	6822      	ldr	r2, [r4, #0]
 80045dc:	429a      	cmp	r2, r3
 80045de:	d118      	bne.n	8004612 <HAL_ADC_MspInit+0x4a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80045e0:	2280      	movs	r2, #128	; 0x80
 80045e2:	4b0e      	ldr	r3, [pc, #56]	; (800461c <HAL_ADC_MspInit+0x54>)
 80045e4:	0092      	lsls	r2, r2, #2
 80045e6:	6b59      	ldr	r1, [r3, #52]	; 0x34
    PA3     ------> ADC_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045e8:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_ADC1_CLK_ENABLE();
 80045ea:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045ec:	2101      	movs	r1, #1
    __HAL_RCC_ADC1_CLK_ENABLE();
 80045ee:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80045f2:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80045f4:	430a      	orrs	r2, r1
 80045f6:	62da      	str	r2, [r3, #44]	; 0x2c
 80045f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fa:	400b      	ands	r3, r1
 80045fc:	9300      	str	r3, [sp, #0]
 80045fe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004600:	2308      	movs	r3, #8
 8004602:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004604:	3b05      	subs	r3, #5
 8004606:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004608:	2300      	movs	r3, #0
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800460a:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800460c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800460e:	f001 ffa3 	bl	8006558 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004612:	b006      	add	sp, #24
 8004614:	bd10      	pop	{r4, pc}
 8004616:	46c0      	nop			; (mov r8, r8)
 8004618:	40012400 	.word	0x40012400
 800461c:	40021000 	.word	0x40021000

08004620 <lm35_read>:
	temperature += 30;

	return temperature;
}

float lm35_read(){
 8004620:	b5f0      	push	{r4, r5, r6, r7, lr}

	uint32_t AD_RES;
	float Temperature = 0;

	HAL_ADC_Start(&hadc);
 8004622:	4c27      	ldr	r4, [pc, #156]	; (80046c0 <lm35_read+0xa0>)
float lm35_read(){
 8004624:	b085      	sub	sp, #20
	HAL_ADC_Start(&hadc);
 8004626:	0020      	movs	r0, r4
 8004628:	f001 fc22 	bl	8005e70 <HAL_ADC_Start>

	sConfig.Channel = ADC_CHANNEL_3;
 800462c:	4b25      	ldr	r3, [pc, #148]	; (80046c4 <lm35_read+0xa4>)
 800462e:	4926      	ldr	r1, [pc, #152]	; (80046c8 <lm35_read+0xa8>)
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8004630:	0020      	movs	r0, r4
	sConfig.Channel = ADC_CHANNEL_3;
 8004632:	600b      	str	r3, [r1, #0]
	HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8004634:	f001 fcc8 	bl	8005fc8 <HAL_ADC_ConfigChannel>

	// Start ADC Conversion
	HAL_ADC_Start(&hadc);
 8004638:	0020      	movs	r0, r4
 800463a:	f001 fc19 	bl	8005e70 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc, 1);
 800463e:	2101      	movs	r1, #1
 8004640:	0020      	movs	r0, r4
 8004642:	f001 fc5f 	bl	8005f04 <HAL_ADC_PollForConversion>

	// Get The Result & Convert To Temp In c_degrees
	AD_RES = HAL_ADC_GetValue(&hadc);
 8004646:	0020      	movs	r0, r4
 8004648:	f001 fcba 	bl	8005fc0 <HAL_ADC_GetValue>
 800464c:	0005      	movs	r5, r0
	printf("AD_RES: %li\n", AD_RES);
 800464e:	0001      	movs	r1, r0
 8004650:	481e      	ldr	r0, [pc, #120]	; (80046cc <lm35_read+0xac>)
 8004652:	f004 ff93 	bl	800957c <iprintf>

	Temperature = AD_RES * 0.0622045455;
 8004656:	0028      	movs	r0, r5
 8004658:	f7ff fb2c 	bl	8003cb4 <__aeabi_ui2d>
 800465c:	4b1c      	ldr	r3, [pc, #112]	; (80046d0 <lm35_read+0xb0>)
 800465e:	4a1d      	ldr	r2, [pc, #116]	; (80046d4 <lm35_read+0xb4>)
 8004660:	f7fe fcf4 	bl	800304c <__aeabi_dmul>
 8004664:	000f      	movs	r7, r1
 8004666:	0006      	movs	r6, r0
 8004668:	f7ff fb92 	bl	8003d90 <__aeabi_d2f>

	char MSG[16] = {0};
 800466c:	2100      	movs	r1, #0
	Temperature = AD_RES * 0.0622045455;
 800466e:	1c05      	adds	r5, r0, #0
	char MSG[16] = {0};
 8004670:	220c      	movs	r2, #12
 8004672:	a801      	add	r0, sp, #4
 8004674:	9100      	str	r1, [sp, #0]
 8004676:	f004 ff78 	bl	800956a <memset>

	sprintf(MSG, "%.2f", Temperature);
 800467a:	1c28      	adds	r0, r5, #0
 800467c:	f7ff fb40 	bl	8003d00 <__aeabi_f2d>
 8004680:	0002      	movs	r2, r0
 8004682:	000b      	movs	r3, r1
 8004684:	4668      	mov	r0, sp
 8004686:	4914      	ldr	r1, [pc, #80]	; (80046d8 <lm35_read+0xb8>)
 8004688:	f005 f822 	bl	80096d0 <siprintf>

	printf("Temperatura: %d C\n", *MSG);
 800468c:	466b      	mov	r3, sp
 800468e:	4813      	ldr	r0, [pc, #76]	; (80046dc <lm35_read+0xbc>)
 8004690:	7819      	ldrb	r1, [r3, #0]
 8004692:	f004 ff73 	bl	800957c <iprintf>
	//printf("Temperatura: %f C\n", (float32_t)(AD_RES) * 0.0608144796);
	printf("Temperatura: %i C\n", (uint8_t)(AD_RES * 0.0622045455));
 8004696:	0039      	movs	r1, r7
 8004698:	0030      	movs	r0, r6
 800469a:	f7fe f8eb 	bl	8002874 <__aeabi_d2uiz>
 800469e:	b2c1      	uxtb	r1, r0
 80046a0:	480f      	ldr	r0, [pc, #60]	; (80046e0 <lm35_read+0xc0>)
 80046a2:	f004 ff6b 	bl	800957c <iprintf>

	printf("Delay de 100\n");
 80046a6:	480f      	ldr	r0, [pc, #60]	; (80046e4 <lm35_read+0xc4>)
 80046a8:	f005 f808 	bl	80096bc <puts>
	HAL_Delay(100);
 80046ac:	2064      	movs	r0, #100	; 0x64
 80046ae:	f001 fa49 	bl	8005b44 <HAL_Delay>

	HAL_ADC_Stop(&hadc);
 80046b2:	0020      	movs	r0, r4
 80046b4:	f001 fc08 	bl	8005ec8 <HAL_ADC_Stop>

	//Temperature = AD_RES*0.0191174508;

	return Temperature;
}
 80046b8:	1c28      	adds	r0, r5, #0
 80046ba:	b005      	add	sp, #20
 80046bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80046be:	46c0      	nop			; (mov r8, r8)
 80046c0:	200005fc 	.word	0x200005fc
 80046c4:	0c000008 	.word	0x0c000008
 80046c8:	200002bc 	.word	0x200002bc
 80046cc:	0800ae81 	.word	0x0800ae81
 80046d0:	3fafd946 	.word	0x3fafd946
 80046d4:	312b8ae2 	.word	0x312b8ae2
 80046d8:	0800ae8e 	.word	0x0800ae8e
 80046dc:	0800ae93 	.word	0x0800ae93
 80046e0:	0800aea6 	.word	0x0800aea6
 80046e4:	0800aeb9 	.word	0x0800aeb9

080046e8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80046e8:	b507      	push	{r0, r1, r2, lr}

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80046ea:	2101      	movs	r1, #1
 80046ec:	4b0b      	ldr	r3, [pc, #44]	; (800471c <MX_DMA_Init+0x34>)

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 80046ee:	200a      	movs	r0, #10
  __HAL_RCC_DMA1_CLK_ENABLE();
 80046f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f2:	430a      	orrs	r2, r1
 80046f4:	631a      	str	r2, [r3, #48]	; 0x30
 80046f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 80046f8:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 80046fa:	400b      	ands	r3, r1
 80046fc:	9301      	str	r3, [sp, #4]
 80046fe:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 8004700:	f001 fd0c 	bl	800611c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8004704:	200a      	movs	r0, #10
 8004706:	f001 fd33 	bl	8006170 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 800470a:	2200      	movs	r2, #0
 800470c:	200b      	movs	r0, #11
 800470e:	0011      	movs	r1, r2
 8004710:	f001 fd04 	bl	800611c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8004714:	200b      	movs	r0, #11
 8004716:	f001 fd2b 	bl	8006170 <HAL_NVIC_EnableIRQ>

}
 800471a:	bd07      	pop	{r0, r1, r2, pc}
 800471c:	40021000 	.word	0x40021000

08004720 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004720:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004722:	2401      	movs	r4, #1
{
 8004724:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004726:	2214      	movs	r2, #20
 8004728:	2100      	movs	r1, #0
 800472a:	a803      	add	r0, sp, #12
 800472c:	f004 ff1d 	bl	800956a <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004730:	2102      	movs	r1, #2

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(S2LP_SPI_CS_PIN_GPIO_Port, S2LP_SPI_CS_PIN_Pin, GPIO_PIN_SET);
 8004732:	2580      	movs	r5, #128	; 0x80
 8004734:	26a0      	movs	r6, #160	; 0xa0

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8004736:	2780      	movs	r7, #128	; 0x80
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004738:	4b30      	ldr	r3, [pc, #192]	; (80047fc <MX_GPIO_Init+0xdc>)
  HAL_GPIO_WritePin(S2LP_SPI_CS_PIN_GPIO_Port, S2LP_SPI_CS_PIN_Pin, GPIO_PIN_SET);
 800473a:	05f6      	lsls	r6, r6, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800473c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(S2LP_SPI_CS_PIN_GPIO_Port, S2LP_SPI_CS_PIN_Pin, GPIO_PIN_SET);
 800473e:	022d      	lsls	r5, r5, #8
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004740:	4322      	orrs	r2, r4
 8004742:	62da      	str	r2, [r3, #44]	; 0x2c
 8004744:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(S2LP_SPI_CS_PIN_GPIO_Port, S2LP_SPI_CS_PIN_Pin, GPIO_PIN_SET);
 8004746:	0030      	movs	r0, r6
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004748:	4022      	ands	r2, r4
 800474a:	9201      	str	r2, [sp, #4]
 800474c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800474e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8004750:	007f      	lsls	r7, r7, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004752:	430a      	orrs	r2, r1
 8004754:	62da      	str	r2, [r3, #44]	; 0x2c
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  HAL_GPIO_WritePin(S2LP_SPI_CS_PIN_GPIO_Port, S2LP_SPI_CS_PIN_Pin, GPIO_PIN_SET);
 8004758:	0022      	movs	r2, r4
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800475a:	400b      	ands	r3, r1
 800475c:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(S2LP_SPI_CS_PIN_GPIO_Port, S2LP_SPI_CS_PIN_Pin, GPIO_PIN_SET);
 800475e:	0029      	movs	r1, r5
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004760:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(S2LP_SPI_CS_PIN_GPIO_Port, S2LP_SPI_CS_PIN_Pin, GPIO_PIN_SET);
 8004762:	f001 ffb1 	bl	80066c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 8004766:	0039      	movs	r1, r7
 8004768:	2200      	movs	r2, #0
 800476a:	4825      	ldr	r0, [pc, #148]	; (8004800 <MX_GPIO_Init+0xe0>)
 800476c:	f001 ffac 	bl	80066c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USER_LED_GPIO_Port, USER_LED_Pin, GPIO_PIN_RESET);
 8004770:	2200      	movs	r2, #0
 8004772:	0030      	movs	r0, r6
 8004774:	2120      	movs	r1, #32
 8004776:	f001 ffa7 	bl	80066c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = S2LP_SPI_CS_PIN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800477a:	2102      	movs	r1, #2
  HAL_GPIO_Init(S2LP_SPI_CS_PIN_GPIO_Port, &GPIO_InitStruct);
 800477c:	ab03      	add	r3, sp, #12
 800477e:	0030      	movs	r0, r6
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004780:	9106      	str	r1, [sp, #24]
  HAL_GPIO_Init(S2LP_SPI_CS_PIN_GPIO_Port, &GPIO_InitStruct);
 8004782:	0019      	movs	r1, r3
  GPIO_InitStruct.Pin = S2LP_SPI_CS_PIN_Pin;
 8004784:	9503      	str	r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004786:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004788:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(S2LP_SPI_CS_PIN_GPIO_Port, &GPIO_InitStruct);
 800478a:	f001 fee5 	bl	8006558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800478e:	2102      	movs	r1, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004790:	2500      	movs	r5, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004792:	9106      	str	r1, [sp, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004794:	481a      	ldr	r0, [pc, #104]	; (8004800 <MX_GPIO_Init+0xe0>)
 8004796:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8004798:	9703      	str	r7, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800479a:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800479c:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800479e:	f001 fedb 	bl	8006558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80047a2:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80047a4:	4f17      	ldr	r7, [pc, #92]	; (8004804 <MX_GPIO_Init+0xe4>)
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80047a6:	0030      	movs	r0, r6
 80047a8:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = USER_BUTTON_Pin;
 80047aa:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80047ac:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80047ae:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(USER_BUTTON_GPIO_Port, &GPIO_InitStruct);
 80047b0:	f001 fed2 	bl	8006558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80047b4:	2304      	movs	r3, #4
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047b6:	a903      	add	r1, sp, #12
 80047b8:	4811      	ldr	r0, [pc, #68]	; (8004800 <MX_GPIO_Init+0xe0>)
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80047ba:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80047bc:	9704      	str	r7, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047be:	9505      	str	r5, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80047c0:	f001 feca 	bl	8006558 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80047c4:	2320      	movs	r3, #32
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80047c6:	0030      	movs	r0, r6
 80047c8:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = USER_LED_Pin;
 80047ca:	9303      	str	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80047cc:	9404      	str	r4, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ce:	9505      	str	r5, [sp, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047d0:	9506      	str	r5, [sp, #24]
  HAL_GPIO_Init(USER_LED_GPIO_Port, &GPIO_InitStruct);
 80047d2:	f001 fec1 	bl	8006558 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0, 0);
 80047d6:	002a      	movs	r2, r5
 80047d8:	0029      	movs	r1, r5
 80047da:	2006      	movs	r0, #6
 80047dc:	f001 fc9e 	bl	800611c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 80047e0:	2006      	movs	r0, #6
 80047e2:	f001 fcc5 	bl	8006170 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 80047e6:	002a      	movs	r2, r5
 80047e8:	2102      	movs	r1, #2
 80047ea:	2007      	movs	r0, #7
 80047ec:	f001 fc96 	bl	800611c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80047f0:	2007      	movs	r0, #7
 80047f2:	f001 fcbd 	bl	8006170 <HAL_NVIC_EnableIRQ>

}
 80047f6:	b009      	add	sp, #36	; 0x24
 80047f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047fa:	46c0      	nop			; (mov r8, r8)
 80047fc:	40021000 	.word	0x40021000
 8004800:	50000400 	.word	0x50000400
 8004804:	10210000 	.word	0x10210000

08004808 <S2LPShutdownEnter>:
#endif

void S2LPShutdownEnter(void)
{
	/* Puts high the GPIO connected to shutdown pin */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 8004808:	2201      	movs	r2, #1
 800480a:	2180      	movs	r1, #128	; 0x80
{
 800480c:	b510      	push	{r4, lr}
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_SET);
 800480e:	4091      	lsls	r1, r2
 8004810:	4801      	ldr	r0, [pc, #4]	; (8004818 <S2LPShutdownEnter+0x10>)
 8004812:	f001 ff59 	bl	80066c8 <HAL_GPIO_WritePin>
}
 8004816:	bd10      	pop	{r4, pc}
 8004818:	50000400 	.word	0x50000400

0800481c <S2LPShutdownInit>:

void S2LPShutdownInit(void)
{
 800481c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStructure;

	//S2LP_M2S_SDN_CLOCK();
	__GPIOB_CLK_ENABLE();
 800481e:	2002      	movs	r0, #2
 8004820:	4a0c      	ldr	r2, [pc, #48]	; (8004854 <S2LPShutdownInit+0x38>)
 8004822:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8004824:	4301      	orrs	r1, r0
 8004826:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004828:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	GPIO_InitStructure.Pin   = S2LP_M2S_SDN_PIN;
	GPIO_InitStructure.Mode  = S2LP_M2S_SDN_MODE;
	GPIO_InitStructure.Pull  = S2LP_M2S_SDN_PUPD;
	GPIO_InitStructure.Speed = S2LP_M2S_SDN_SPEED;

	HAL_GPIO_Init(S2LP_M2S_SDN_PORT, &GPIO_InitStructure);
 800482a:	a901      	add	r1, sp, #4
	__GPIOB_CLK_ENABLE();
 800482c:	4003      	ands	r3, r0
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	9b00      	ldr	r3, [sp, #0]
	GPIO_InitStructure.Pin   = S2LP_M2S_SDN_PIN;
 8004832:	2380      	movs	r3, #128	; 0x80
 8004834:	005b      	lsls	r3, r3, #1
 8004836:	9301      	str	r3, [sp, #4]
	GPIO_InitStructure.Mode  = S2LP_M2S_SDN_MODE;
 8004838:	3bff      	subs	r3, #255	; 0xff
 800483a:	9302      	str	r3, [sp, #8]
	GPIO_InitStructure.Pull  = S2LP_M2S_SDN_PUPD;
 800483c:	2300      	movs	r3, #0
	HAL_GPIO_Init(S2LP_M2S_SDN_PORT, &GPIO_InitStructure);
 800483e:	4806      	ldr	r0, [pc, #24]	; (8004858 <S2LPShutdownInit+0x3c>)
	GPIO_InitStructure.Pull  = S2LP_M2S_SDN_PUPD;
 8004840:	9303      	str	r3, [sp, #12]
	GPIO_InitStructure.Speed = S2LP_M2S_SDN_SPEED;
 8004842:	3303      	adds	r3, #3
 8004844:	9304      	str	r3, [sp, #16]
	HAL_GPIO_Init(S2LP_M2S_SDN_PORT, &GPIO_InitStructure);
 8004846:	f001 fe87 	bl	8006558 <HAL_GPIO_Init>

	S2LPShutdownEnter();
 800484a:	f7ff ffdd 	bl	8004808 <S2LPShutdownEnter>
}
 800484e:	b007      	add	sp, #28
 8004850:	bd00      	pop	{pc}
 8004852:	46c0      	nop			; (mov r8, r8)
 8004854:	40021000 	.word	0x40021000
 8004858:	50000400 	.word	0x50000400

0800485c <S2LPShutdownExit>:

void S2LPShutdownExit(void)
{
 800485c:	b507      	push	{r0, r1, r2, lr}
	/* Puts low the GPIO connected to shutdown pin */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 800485e:	2180      	movs	r1, #128	; 0x80
 8004860:	2200      	movs	r2, #0
 8004862:	4808      	ldr	r0, [pc, #32]	; (8004884 <S2LPShutdownExit+0x28>)
 8004864:	0049      	lsls	r1, r1, #1
 8004866:	f001 ff2f 	bl	80066c8 <HAL_GPIO_WritePin>

	/* Delay to allow the circuit POR, about 700 us */
	for(volatile uint32_t i=0;i<0x1E00;i++);
 800486a:	2300      	movs	r3, #0
 800486c:	22f0      	movs	r2, #240	; 0xf0
 800486e:	9301      	str	r3, [sp, #4]
 8004870:	0152      	lsls	r2, r2, #5
 8004872:	9b01      	ldr	r3, [sp, #4]
 8004874:	4293      	cmp	r3, r2
 8004876:	d300      	bcc.n	800487a <S2LPShutdownExit+0x1e>
}
 8004878:	bd07      	pop	{r0, r1, r2, pc}
	for(volatile uint32_t i=0;i<0x1E00;i++);
 800487a:	9b01      	ldr	r3, [sp, #4]
 800487c:	3301      	adds	r3, #1
 800487e:	9301      	str	r3, [sp, #4]
 8004880:	e7f7      	b.n	8004872 <S2LPShutdownExit+0x16>
 8004882:	46c0      	nop			; (mov r8, r8)
 8004884:	50000400 	.word	0x50000400

08004888 <ST_MCU_API_Shutdown>:
	/* Gets the GPIO level */
	return (uint8_t)HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
}

void ST_MCU_API_Shutdown(sfx_u8 value)
{
 8004888:	b510      	push	{r4, lr}
	if(value)
 800488a:	2800      	cmp	r0, #0
 800488c:	d002      	beq.n	8004894 <ST_MCU_API_Shutdown+0xc>
	{
		S2LPShutdownEnter();
 800488e:	f7ff ffbb 	bl	8004808 <S2LPShutdownEnter>
	}
	else
	{
		S2LPShutdownExit();
	}
}
 8004892:	bd10      	pop	{r4, pc}
		S2LPShutdownExit();
 8004894:	f7ff ffe2 	bl	800485c <S2LPShutdownExit>
}
 8004898:	e7fb      	b.n	8004892 <ST_MCU_API_Shutdown+0xa>
	...

0800489c <S2LPIRQInit>:

void S2LPIRQInit(void)
{
	GPIO_InitTypeDef GPIO_InitStructure, EXTI_InitStructure;

	__HAL_RCC_GPIOB_CLK_ENABLE();
 800489c:	2002      	movs	r0, #2
{
 800489e:	b5f0      	push	{r4, r5, r6, r7, lr}

	/* Configures MCU GPIO */
	GPIO_InitStructure.Pin   = GPIO_PIN_2;
 80048a0:	2404      	movs	r4, #4
	GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 80048a2:	2500      	movs	r5, #0
	GPIO_InitStructure.Pull  = GPIO_NOPULL;
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80048a4:	2703      	movs	r7, #3
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80048a6:	4a0f      	ldr	r2, [pc, #60]	; (80048e4 <S2LPIRQInit+0x48>)

	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80048a8:	4e0f      	ldr	r6, [pc, #60]	; (80048e8 <S2LPIRQInit+0x4c>)
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80048aa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
{
 80048ac:	b08d      	sub	sp, #52	; 0x34
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80048ae:	4301      	orrs	r1, r0
 80048b0:	62d1      	str	r1, [r2, #44]	; 0x2c
 80048b2:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80048b4:	a902      	add	r1, sp, #8
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80048b6:	4003      	ands	r3, r0
 80048b8:	9301      	str	r3, [sp, #4]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80048ba:	0030      	movs	r0, r6
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80048bc:	9b01      	ldr	r3, [sp, #4]
	GPIO_InitStructure.Pin   = GPIO_PIN_2;
 80048be:	9402      	str	r4, [sp, #8]
	GPIO_InitStructure.Mode  = GPIO_MODE_INPUT;
 80048c0:	9503      	str	r5, [sp, #12]
	GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80048c2:	9504      	str	r5, [sp, #16]
	GPIO_InitStructure.Speed = GPIO_SPEED_HIGH;
 80048c4:	9705      	str	r7, [sp, #20]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80048c6:	f001 fe47 	bl	8006558 <HAL_GPIO_Init>

	/* Configures MCU GPIO EXTI line */
	EXTI_InitStructure.Pin   = GPIO_PIN_2;
	EXTI_InitStructure.Mode  = GPIO_MODE_IT_FALLING;
 80048ca:	4b08      	ldr	r3, [pc, #32]	; (80048ec <S2LPIRQInit+0x50>)
	EXTI_InitStructure.Pin   = GPIO_PIN_2;
 80048cc:	9407      	str	r4, [sp, #28]
	EXTI_InitStructure.Mode  = GPIO_MODE_IT_FALLING;
 80048ce:	9308      	str	r3, [sp, #32]
	EXTI_InitStructure.Pull  = GPIO_NOPULL;
	EXTI_InitStructure.Speed = GPIO_SPEED_HIGH;

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);
 80048d0:	4b07      	ldr	r3, [pc, #28]	; (80048f0 <S2LPIRQInit+0x54>)
	EXTI_InitStructure.Pull  = GPIO_NOPULL;
 80048d2:	9509      	str	r5, [sp, #36]	; 0x24
	EXTI_InitStructure.Speed = GPIO_SPEED_HIGH;
 80048d4:	970a      	str	r7, [sp, #40]	; 0x28
	HAL_GPIO_Init(GPIOB, &EXTI_InitStructure);
 80048d6:	0030      	movs	r0, r6
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);
 80048d8:	615c      	str	r4, [r3, #20]
	HAL_GPIO_Init(GPIOB, &EXTI_InitStructure);
 80048da:	a907      	add	r1, sp, #28
 80048dc:	f001 fe3c 	bl	8006558 <HAL_GPIO_Init>
}
 80048e0:	b00d      	add	sp, #52	; 0x34
 80048e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80048e4:	40021000 	.word	0x40021000
 80048e8:	50000400 	.word	0x50000400
 80048ec:	10210000 	.word	0x10210000
 80048f0:	40010400 	.word	0x40010400

080048f4 <S2LPIRQEnable>:

void S2LPIRQEnable(uint8_t state, uint8_t edge_direction)
{
 80048f4:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t xNewState = state ? ENABLE:DISABLE;
	GPIO_InitTypeDef EXTI_InitStructure;

	/* Configures EXTI line */
	EXTI_InitStructure.Pin   = GPIO_PIN_2;
	EXTI_InitStructure.Mode  = GPIO_MODE_IT_FALLING;
 80048f6:	4b14      	ldr	r3, [pc, #80]	; (8004948 <S2LPIRQEnable+0x54>)
{
 80048f8:	b087      	sub	sp, #28
	EXTI_InitStructure.Mode  = GPIO_MODE_IT_FALLING;
 80048fa:	9302      	str	r3, [sp, #8]
	EXTI_InitStructure.Pull  = GPIO_NOPULL;
 80048fc:	2300      	movs	r3, #0
	EXTI_InitStructure.Pin   = GPIO_PIN_2;
 80048fe:	2504      	movs	r5, #4
	EXTI_InitStructure.Speed = GPIO_SPEED_HIGH;

	/* Clear any pending interrupt before enabling */
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);
 8004900:	4c12      	ldr	r4, [pc, #72]	; (800494c <S2LPIRQEnable+0x58>)
	EXTI_InitStructure.Pull  = GPIO_NOPULL;
 8004902:	9303      	str	r3, [sp, #12]
	EXTI_InitStructure.Speed = GPIO_SPEED_HIGH;
 8004904:	3303      	adds	r3, #3
 8004906:	9304      	str	r3, [sp, #16]
	EXTI_InitStructure.Pin   = GPIO_PIN_2;
 8004908:	9501      	str	r5, [sp, #4]
{
 800490a:	0006      	movs	r6, r0
 800490c:	000f      	movs	r7, r1
	HAL_GPIO_Init(GPIOB, &EXTI_InitStructure);
 800490e:	4810      	ldr	r0, [pc, #64]	; (8004950 <S2LPIRQEnable+0x5c>)
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_2);
 8004910:	6165      	str	r5, [r4, #20]
	HAL_GPIO_Init(GPIOB, &EXTI_InitStructure);
 8004912:	a901      	add	r1, sp, #4
 8004914:	f001 fe20 	bl	8006558 <HAL_GPIO_Init>

	if(edge_direction)
		EXTI->RTSR |= (uint16_t)GPIO_PIN_2;
 8004918:	68a3      	ldr	r3, [r4, #8]
	if(edge_direction)
 800491a:	2f00      	cmp	r7, #0
 800491c:	d00d      	beq.n	800493a <S2LPIRQEnable+0x46>
		EXTI->RTSR |= (uint16_t)GPIO_PIN_2;
 800491e:	431d      	orrs	r5, r3
 8004920:	60a5      	str	r5, [r4, #8]
		EXTI->RTSR &= ~(uint16_t)GPIO_PIN_2;

	/* Set the GPIO interrupt priority and enable/disable it */
	if (xNewState == ENABLE)
	{
		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8004922:	2006      	movs	r0, #6
	if (xNewState == ENABLE)
 8004924:	2e00      	cmp	r6, #0
 8004926:	d00b      	beq.n	8004940 <S2LPIRQEnable+0x4c>
		HAL_NVIC_EnableIRQ(EXTI2_3_IRQn);
 8004928:	f001 fc22 	bl	8006170 <HAL_NVIC_EnableIRQ>
		HAL_NVIC_SetPriority(EXTI2_3_IRQn, 0x00, 0x00);
 800492c:	2200      	movs	r2, #0
 800492e:	2006      	movs	r0, #6
 8004930:	0011      	movs	r1, r2
 8004932:	f001 fbf3 	bl	800611c <HAL_NVIC_SetPriority>
	}
	else
		HAL_NVIC_DisableIRQ(EXTI2_3_IRQn);
}
 8004936:	b007      	add	sp, #28
 8004938:	bdf0      	pop	{r4, r5, r6, r7, pc}
		EXTI->RTSR &= ~(uint16_t)GPIO_PIN_2;
 800493a:	43ab      	bics	r3, r5
 800493c:	60a3      	str	r3, [r4, #8]
 800493e:	e7f0      	b.n	8004922 <S2LPIRQEnable+0x2e>
		HAL_NVIC_DisableIRQ(EXTI2_3_IRQn);
 8004940:	f001 fc20 	bl	8006184 <HAL_NVIC_DisableIRQ>
}
 8004944:	e7f7      	b.n	8004936 <S2LPIRQEnable+0x42>
 8004946:	46c0      	nop			; (mov r8, r8)
 8004948:	10210000 	.word	0x10210000
 800494c:	40010400 	.word	0x40010400
 8004950:	50000400 	.word	0x50000400

08004954 <ST_MCU_API_GpioIRQ>:

void ST_MCU_API_GpioIRQ(sfx_u8 pin, sfx_u8 new_state, sfx_u8 trigger)
{
 8004954:	b570      	push	{r4, r5, r6, lr}
 8004956:	0015      	movs	r5, r2
 8004958:	000c      	movs	r4, r1
	/* configure the MCU IRQ connected to the specified S2-LP GPIO */
	/* trigger 1: rising, 0: falling (default) */
	S2LPIRQInit();
 800495a:	f7ff ff9f 	bl	800489c <S2LPIRQInit>
	S2LPIRQEnable(new_state, trigger);
 800495e:	0029      	movs	r1, r5
 8004960:	0020      	movs	r0, r4
 8004962:	f7ff ffc7 	bl	80048f4 <S2LPIRQEnable>
}
 8004966:	bd70      	pop	{r4, r5, r6, pc}

08004968 <HT_GPIO_UserButtonHandler>:

uint8_t getLowPowerFlag(void) {
	return low_power;
}

void HT_GPIO_UserButtonHandler(void) {
 8004968:	b510      	push	{r4, lr}

	GPIOA->BSRR = 1 << 5; /* </ LED ON (PA5) */
 800496a:	24a0      	movs	r4, #160	; 0xa0
 800496c:	2320      	movs	r3, #32
 800496e:	05e4      	lsls	r4, r4, #23
 8004970:	61a3      	str	r3, [r4, #24]

	printf("Sending frame...\n");
 8004972:	4809      	ldr	r0, [pc, #36]	; (8004998 <HT_GPIO_UserButtonHandler+0x30>)
 8004974:	f004 fea2 	bl	80096bc <puts>
	 * estamos usando variáveis globais.
	 * ~ Benatti
	 */
	//HT_API_SendFrame();

	__HAL_GPIO_EXTI_CLEAR_IT(USER_BUTTON_Pin);
 8004978:	2240      	movs	r2, #64	; 0x40
 800497a:	4b08      	ldr	r3, [pc, #32]	; (800499c <HT_GPIO_UserButtonHandler+0x34>)

	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 800497c:	2102      	movs	r1, #2
	__HAL_GPIO_EXTI_CLEAR_IT(USER_BUTTON_Pin);
 800497e:	615a      	str	r2, [r3, #20]
	HAL_NVIC_SetPriority(EXTI4_15_IRQn, 2, 0);
 8004980:	2007      	movs	r0, #7
 8004982:	2200      	movs	r2, #0
 8004984:	f001 fbca 	bl	800611c <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8004988:	2007      	movs	r0, #7
 800498a:	f001 fbf1 	bl	8006170 <HAL_NVIC_EnableIRQ>

	GPIOA->BSRR = 1 << 21; /* </ LED OFF (PA5) */
 800498e:	2380      	movs	r3, #128	; 0x80
 8004990:	039b      	lsls	r3, r3, #14
 8004992:	61a3      	str	r3, [r4, #24]
}
 8004994:	bd10      	pop	{r4, pc}
 8004996:	46c0      	nop			; (mov r8, r8)
 8004998:	0800aec6 	.word	0x0800aec6
 800499c:	40010400 	.word	0x40010400

080049a0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {

	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049a0:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <HAL_GPIO_EXTI_Callback+0x30>)
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80049a2:	b510      	push	{r4, lr}
	__HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049a4:	6158      	str	r0, [r3, #20]

	if(GPIO_Pin == GPIO_PIN_2) {
 80049a6:	2804      	cmp	r0, #4
 80049a8:	d10a      	bne.n	80049c0 <HAL_GPIO_EXTI_Callback+0x20>
		if (ST_RF_API_Get_Continuous_TX_or_MONARCH_Scan_Flag()==0) {
 80049aa:	f004 faf5 	bl	8008f98 <ST_RF_API_Get_Continuous_TX_or_MONARCH_Scan_Flag>
 80049ae:	2800      	cmp	r0, #0
 80049b0:	d103      	bne.n	80049ba <HAL_GPIO_EXTI_Callback+0x1a>
	}

}

void setS2lpIrqRaisedFlag(uint8_t s2lpIrqRaised) {
	s2lp_irq_raised = s2lpIrqRaised;
 80049b2:	2201      	movs	r2, #1
 80049b4:	4b07      	ldr	r3, [pc, #28]	; (80049d4 <HAL_GPIO_EXTI_Callback+0x34>)
 80049b6:	701a      	strb	r2, [r3, #0]
}
 80049b8:	bd10      	pop	{r4, pc}
			ST_RF_API_S2LP_IRQ_CB(); //If the CBPSK is implemented trigger TX State Machine
 80049ba:	f004 fd01 	bl	80093c0 <ST_RF_API_S2LP_IRQ_CB>
 80049be:	e7fb      	b.n	80049b8 <HAL_GPIO_EXTI_Callback+0x18>
	} else if(GPIO_Pin == USER_BUTTON_Pin) {
 80049c0:	2840      	cmp	r0, #64	; 0x40
 80049c2:	d1f9      	bne.n	80049b8 <HAL_GPIO_EXTI_Callback+0x18>
		HAL_NVIC_DisableIRQ(EXTI4_15_IRQn);
 80049c4:	3839      	subs	r0, #57	; 0x39
 80049c6:	f001 fbdd 	bl	8006184 <HAL_NVIC_DisableIRQ>
		HT_GPIO_UserButtonHandler();
 80049ca:	f7ff ffcd 	bl	8004968 <HT_GPIO_UserButtonHandler>
}
 80049ce:	e7f3      	b.n	80049b8 <HAL_GPIO_EXTI_Callback+0x18>
 80049d0:	40010400 	.word	0x40010400
 80049d4:	200002c4 	.word	0x200002c4

080049d8 <setS2lpIrqRaisedFlag>:
	s2lp_irq_raised = s2lpIrqRaised;
 80049d8:	4b01      	ldr	r3, [pc, #4]	; (80049e0 <setS2lpIrqRaisedFlag+0x8>)
 80049da:	7018      	strb	r0, [r3, #0]
}
 80049dc:	4770      	bx	lr
 80049de:	46c0      	nop			; (mov r8, r8)
 80049e0:	200002c4 	.word	0x200002c4

080049e4 <getS2lpIrqRaisedFlag>:

uint8_t getS2lpIrqRaisedFlag(void) {
	return s2lp_irq_raised;
 80049e4:	4b01      	ldr	r3, [pc, #4]	; (80049ec <getS2lpIrqRaisedFlag+0x8>)
 80049e6:	7818      	ldrb	r0, [r3, #0]
 80049e8:	b2c0      	uxtb	r0, r0
}
 80049ea:	4770      	bx	lr
 80049ec:	200002c4 	.word	0x200002c4

080049f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80049f0:	b530      	push	{r4, r5, lr}
 80049f2:	b09d      	sub	sp, #116	; 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80049f4:	2234      	movs	r2, #52	; 0x34
 80049f6:	2100      	movs	r1, #0
 80049f8:	a80f      	add	r0, sp, #60	; 0x3c
 80049fa:	f004 fdb6 	bl	800956a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80049fe:	2214      	movs	r2, #20
 8004a00:	2100      	movs	r1, #0
 8004a02:	a801      	add	r0, sp, #4
 8004a04:	f004 fdb1 	bl	800956a <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a08:	2220      	movs	r2, #32
 8004a0a:	2100      	movs	r1, #0
 8004a0c:	a806      	add	r0, sp, #24
 8004a0e:	f004 fdac 	bl	800956a <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a12:	4914      	ldr	r1, [pc, #80]	; (8004a64 <SystemClock_Config+0x74>)
 8004a14:	4a14      	ldr	r2, [pc, #80]	; (8004a68 <SystemClock_Config+0x78>)
 8004a16:	680b      	ldr	r3, [r1, #0]
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004a18:	2400      	movs	r4, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8004a1a:	401a      	ands	r2, r3
 8004a1c:	2380      	movs	r3, #128	; 0x80
 8004a1e:	011b      	lsls	r3, r3, #4
 8004a20:	4313      	orrs	r3, r2
 8004a22:	600b      	str	r3, [r1, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8004a24:	230a      	movs	r3, #10
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a26:	2501      	movs	r5, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8004a28:	930e      	str	r3, [sp, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a2a:	a80e      	add	r0, sp, #56	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8004a2c:	3306      	adds	r3, #6
 8004a2e:	9312      	str	r3, [sp, #72]	; 0x48
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8004a30:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004a32:	9513      	str	r5, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004a34:	9418      	str	r4, [sp, #96]	; 0x60
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004a36:	f001 fea3 	bl	8006780 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a3a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004a3c:	0021      	movs	r1, r4
 8004a3e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004a40:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8004a42:	9502      	str	r5, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004a44:	9403      	str	r4, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004a46:	9404      	str	r4, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8004a48:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8004a4a:	f002 f919 	bl	8006c80 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_RTC;
 8004a4e:	2321      	movs	r3, #33	; 0x21
 8004a50:	9306      	str	r3, [sp, #24]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004a52:	2380      	movs	r3, #128	; 0x80
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a54:	a806      	add	r0, sp, #24
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004a56:	029b      	lsls	r3, r3, #10
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8004a58:	9408      	str	r4, [sp, #32]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004a5a:	9307      	str	r3, [sp, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a5c:	f002 f9e8 	bl	8006e30 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8004a60:	b01d      	add	sp, #116	; 0x74
 8004a62:	bd30      	pop	{r4, r5, pc}
 8004a64:	40007000 	.word	0x40007000
 8004a68:	ffffe7ff 	.word	0xffffe7ff

08004a6c <HT_API_setSmpsVoltageAction>:

/* USER CODE BEGIN 4 */

void HT_API_setSmpsVoltageAction(sfx_u8 mode) {
 8004a6c:	b510      	push	{r4, lr}
 8004a6e:	0004      	movs	r4, r0
	ST_RF_API_smps(mode);
 8004a70:	f004 fa8a 	bl	8008f88 <ST_RF_API_smps>
	printf("Set_smps_voltage %d\n", mode);
 8004a74:	0021      	movs	r1, r4
 8004a76:	4802      	ldr	r0, [pc, #8]	; (8004a80 <HT_API_setSmpsVoltageAction+0x14>)
 8004a78:	f004 fd80 	bl	800957c <iprintf>
}
 8004a7c:	bd10      	pop	{r4, pc}
 8004a7e:	46c0      	nop			; (mov r8, r8)
 8004a80:	0800aed7 	.word	0x0800aed7

08004a84 <HT_API_switchPa>:

void HT_API_switchPa(uint8_t state) {
 8004a84:	b510      	push	{r4, lr}
 8004a86:	0004      	movs	r4, r0

	ST_RF_API_set_pa(state);
 8004a88:	f004 fa6c 	bl	8008f64 <ST_RF_API_set_pa>

	printf("Switch PA: %d\n", state);
 8004a8c:	0021      	movs	r1, r4
 8004a8e:	4802      	ldr	r0, [pc, #8]	; (8004a98 <HT_API_switchPa+0x14>)
 8004a90:	f004 fd74 	bl	800957c <iprintf>
}
 8004a94:	bd10      	pop	{r4, pc}
 8004a96:	46c0      	nop			; (mov r8, r8)
 8004a98:	0800aeec 	.word	0x0800aeec

08004a9c <HT_API_ConfigRegion>:

void HT_API_ConfigRegion(rc_mask RCZ) {
	ST_SFX_ERR open_err = ST_SFX_ERR_NONE;

	switch(RCZ){
 8004a9c:	3801      	subs	r0, #1
void HT_API_ConfigRegion(rc_mask RCZ) {
 8004a9e:	b510      	push	{r4, lr}
 8004aa0:	2806      	cmp	r0, #6
 8004aa2:	d826      	bhi.n	8004af2 <HT_API_ConfigRegion+0x56>
 8004aa4:	f7fd fcf0 	bl	8002488 <__gnu_thumb1_case_uqi>
 8004aa8:	2f261104 	.word	0x2f261104
 8004aac:	3a38      	.short	0x3a38
 8004aae:	3c          	.byte	0x3c
 8004aaf:	00          	.byte	0x00
	case RCZ1:
		ST_RF_API_reduce_output_power(RCZ1_OUTPUT_POWER);
 8004ab0:	2020      	movs	r0, #32
 8004ab2:	4240      	negs	r0, r0
 8004ab4:	f004 fa50 	bl	8008f58 <ST_RF_API_reduce_output_power>
		open_err = St_Sigfox_Open_RCZ(RCZ1);
 8004ab8:	2001      	movs	r0, #1
 8004aba:	f7ff fc6f 	bl	800439c <St_Sigfox_Open_RCZ>
 8004abe:	0004      	movs	r4, r0

		break;
	case RCZ7:
		open_err = St_Sigfox_Open_RCZ(RCZ7);
		ST_RF_API_reduce_output_power(RCZ7_OUTPUT_POWER);
		HT_API_switchPa(0);
 8004ac0:	2000      	movs	r0, #0
 8004ac2:	f7ff ffdf 	bl	8004a84 <HT_API_switchPa>
		HT_API_setSmpsVoltageAction(7);
 8004ac6:	2007      	movs	r0, #7
 8004ac8:	e00b      	b.n	8004ae2 <HT_API_ConfigRegion+0x46>
		ST_RF_API_reduce_output_power(RCZ2_OUTPUT_POWER);
 8004aca:	201b      	movs	r0, #27
 8004acc:	4240      	negs	r0, r0
 8004ace:	f004 fa43 	bl	8008f58 <ST_RF_API_reduce_output_power>
		open_err = St_Sigfox_Open_RCZ(RCZ2);
 8004ad2:	2002      	movs	r0, #2
 8004ad4:	f7ff fc62 	bl	800439c <St_Sigfox_Open_RCZ>
 8004ad8:	0004      	movs	r4, r0
		HT_API_switchPa(1);
 8004ada:	2001      	movs	r0, #1
 8004adc:	f7ff ffd2 	bl	8004a84 <HT_API_switchPa>
		HT_API_setSmpsVoltageAction(2);
 8004ae0:	2002      	movs	r0, #2
		HT_API_setSmpsVoltageAction(7);
 8004ae2:	f7ff ffc3 	bl	8004a6c <HT_API_setSmpsVoltageAction>

		if(open_err != 0)
 8004ae6:	2c00      	cmp	r4, #0
 8004ae8:	d003      	beq.n	8004af2 <HT_API_ConfigRegion+0x56>
			printf("Open rcz error: %X\n", open_err);
 8004aea:	0021      	movs	r1, r4
 8004aec:	480d      	ldr	r0, [pc, #52]	; (8004b24 <HT_API_ConfigRegion+0x88>)
 8004aee:	f004 fd45 	bl	800957c <iprintf>
		break;
	default:
		break;
	}

}
 8004af2:	bd10      	pop	{r4, pc}
		open_err = St_Sigfox_Open_RCZ(RCZ3);
 8004af4:	2003      	movs	r0, #3
		open_err = St_Sigfox_Open_RCZ(RCZ7);
 8004af6:	f7ff fc51 	bl	800439c <St_Sigfox_Open_RCZ>
 8004afa:	0004      	movs	r4, r0
		ST_RF_API_reduce_output_power(RCZ7_OUTPUT_POWER);
 8004afc:	2020      	movs	r0, #32
 8004afe:	4240      	negs	r0, r0
 8004b00:	f004 fa2a 	bl	8008f58 <ST_RF_API_reduce_output_power>
 8004b04:	e7dc      	b.n	8004ac0 <HT_API_ConfigRegion+0x24>
		open_err = St_Sigfox_Open_RCZ(RCZ4);
 8004b06:	2004      	movs	r0, #4
 8004b08:	f7ff fc48 	bl	800439c <St_Sigfox_Open_RCZ>
 8004b0c:	0004      	movs	r4, r0
		ST_RF_API_reduce_output_power(RCZ4_OUTPUT_POWER);
 8004b0e:	201b      	movs	r0, #27
 8004b10:	4240      	negs	r0, r0
 8004b12:	f004 fa21 	bl	8008f58 <ST_RF_API_reduce_output_power>
 8004b16:	e7e0      	b.n	8004ada <HT_API_ConfigRegion+0x3e>
		open_err = St_Sigfox_Open_RCZ(RCZ5);
 8004b18:	2005      	movs	r0, #5
 8004b1a:	e7ec      	b.n	8004af6 <HT_API_ConfigRegion+0x5a>
		open_err = St_Sigfox_Open_RCZ(RCZ6);
 8004b1c:	2006      	movs	r0, #6
 8004b1e:	e7ea      	b.n	8004af6 <HT_API_ConfigRegion+0x5a>
		open_err = St_Sigfox_Open_RCZ(RCZ7);
 8004b20:	2007      	movs	r0, #7
 8004b22:	e7e8      	b.n	8004af6 <HT_API_ConfigRegion+0x5a>
 8004b24:	0800aefb 	.word	0x0800aefb

08004b28 <HT_API_SendFrame>:

sfx_error_t HT_API_SendFrame(void) {
 8004b28:	b510      	push	{r4, lr}

	/********** SEND MESSAGE TO RCZ2 ****************************/

// Não sei se o tamanho de customer_data tem que ser doze, por isso deixei os AA

	uint8_t customer_data[12]={int_temp, centesimal_temp, 0xAA, 0xAA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA};
 8004b2a:	4b0e      	ldr	r3, [pc, #56]	; (8004b64 <HT_API_SendFrame+0x3c>)
sfx_error_t HT_API_SendFrame(void) {
 8004b2c:	b088      	sub	sp, #32
	uint8_t customer_data[12]={int_temp, centesimal_temp, 0xAA, 0xAA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA};
 8004b2e:	781b      	ldrb	r3, [r3, #0]
 8004b30:	a805      	add	r0, sp, #20
 8004b32:	7003      	strb	r3, [r0, #0]
 8004b34:	4b0c      	ldr	r3, [pc, #48]	; (8004b68 <HT_API_SendFrame+0x40>)

	/********** FUNCTION PARAMETERS  ****************************/
	/********** THE LAST ONE IS TO REQUEST DOWNLINK ************/
	/********** 1 - YES, 0 - NO	 ******************************/

	err=SIGFOX_API_send_frame(customer_data,sizeof(customer_data),customer_resp, 3, downlink_request);
 8004b36:	aa03      	add	r2, sp, #12
	uint8_t customer_data[12]={int_temp, centesimal_temp, 0xAA, 0xAA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA};
 8004b38:	781b      	ldrb	r3, [r3, #0]
	err=SIGFOX_API_send_frame(customer_data,sizeof(customer_data),customer_resp, 3, downlink_request);
 8004b3a:	210c      	movs	r1, #12
	uint8_t customer_data[12]={int_temp, centesimal_temp, 0xAA, 0xAA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA, 0xBA};
 8004b3c:	7043      	strb	r3, [r0, #1]
 8004b3e:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <HT_API_SendFrame+0x44>)
 8004b40:	8043      	strh	r3, [r0, #2]
 8004b42:	4b0b      	ldr	r3, [pc, #44]	; (8004b70 <HT_API_SendFrame+0x48>)
 8004b44:	9306      	str	r3, [sp, #24]
 8004b46:	9307      	str	r3, [sp, #28]
	err=SIGFOX_API_send_frame(customer_data,sizeof(customer_data),customer_resp, 3, downlink_request);
 8004b48:	2300      	movs	r3, #0
 8004b4a:	9300      	str	r3, [sp, #0]
 8004b4c:	3303      	adds	r3, #3
 8004b4e:	f7fc f998 	bl	8000e82 <SIGFOX_API_send_frame>
 8004b52:	0004      	movs	r4, r0
			printf("0x%x,", customer_resp[i]);

		printf("0x%x}\n\r", customer_resp[7]);
	}

	printf("\nError Send Frame: %X\n", err);
 8004b54:	0001      	movs	r1, r0
 8004b56:	4807      	ldr	r0, [pc, #28]	; (8004b74 <HT_API_SendFrame+0x4c>)
 8004b58:	f004 fd10 	bl	800957c <iprintf>
#ifdef DOWNLINK_FLAG
	HAL_TIM_Base_Stop_IT(&htim21);
#endif

	return err;
}
 8004b5c:	0020      	movs	r0, r4
 8004b5e:	b008      	add	sp, #32
 8004b60:	bd10      	pop	{r4, pc}
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	200002c6 	.word	0x200002c6
 8004b68:	200002c5 	.word	0x200002c5
 8004b6c:	ffffaaaa 	.word	0xffffaaaa
 8004b70:	babababa 	.word	0xbabababa
 8004b74:	0800af0f 	.word	0x0800af0f

08004b78 <ST_Init>:

	ST_RF_API_set_rssi_offset(sfxConfiguration.rssiOffset);
	printf("RSSI %ld \n", sfxConfiguration.rssiOffset);
}

void ST_Init(void) {
 8004b78:	b510      	push	{r4, lr}
	/* Put the radio off */
	S2LPShutdownInit();
 8004b7a:	f7ff fe4f 	bl	800481c <S2LPShutdownInit>
	HAL_Delay(10);
 8004b7e:	200a      	movs	r0, #10
 8004b80:	f000 ffe0 	bl	8005b44 <HAL_Delay>
	S2LPShutdownExit();
 8004b84:	f7ff fe6a 	bl	800485c <S2LPShutdownExit>

	/* FEM Initialization */
	FEM_Init();
 8004b88:	f000 ff60 	bl	8005a4c <FEM_Init>
}
 8004b8c:	bd10      	pop	{r4, pc}
	...

08004b90 <mcuConfig>:
void mcuConfig(void) {
 8004b90:	b530      	push	{r4, r5, lr}
 8004b92:	b089      	sub	sp, #36	; 0x24
	stSfxRetErr = ST_Sigfox_Init(&sfxConfiguration, 0);
 8004b94:	ac01      	add	r4, sp, #4
	ST_Init();
 8004b96:	f7ff ffef 	bl	8004b78 <ST_Init>
	stSfxRetErr = ST_Sigfox_Init(&sfxConfiguration, 0);
 8004b9a:	2100      	movs	r1, #0
 8004b9c:	0020      	movs	r0, r4
 8004b9e:	f7ff fc8d 	bl	80044bc <ST_Sigfox_Init>
		if(stSfxRetErr == ST_SFX_ERR_CREDENTIALS) {
 8004ba2:	2802      	cmp	r0, #2
 8004ba4:	d108      	bne.n	8004bb8 <mcuConfig+0x28>
			sfxConfiguration.id = 0;
 8004ba6:	2500      	movs	r5, #0
			memset(sfxConfiguration.pac, 0x00, 8);
 8004ba8:	3007      	adds	r0, #7
 8004baa:	2208      	movs	r2, #8
 8004bac:	0029      	movs	r1, r5
 8004bae:	4468      	add	r0, sp
			sfxConfiguration.id = 0;
 8004bb0:	9501      	str	r5, [sp, #4]
			memset(sfxConfiguration.pac, 0x00, 8);
 8004bb2:	f004 fcda 	bl	800956a <memset>
			sfxConfiguration.rcz = 0;
 8004bb6:	7125      	strb	r5, [r4, #4]
	ST_MCU_API_TimerCalibration(500);
 8004bb8:	20fa      	movs	r0, #250	; 0xfa
 8004bba:	0040      	lsls	r0, r0, #1
 8004bbc:	f000 fd16 	bl	80055ec <ST_MCU_API_TimerCalibration>
	printf("Sigfox iMCP HT32SX\n");
 8004bc0:	4817      	ldr	r0, [pc, #92]	; (8004c20 <mcuConfig+0x90>)
 8004bc2:	f004 fd7b 	bl	80096bc <puts>
	printf("ID: %.8X - PAC: ", (unsigned int)sfxConfiguration.id);
 8004bc6:	9901      	ldr	r1, [sp, #4]
 8004bc8:	4816      	ldr	r0, [pc, #88]	; (8004c24 <mcuConfig+0x94>)
 8004bca:	f004 fcd7 	bl	800957c <iprintf>
 8004bce:	2500      	movs	r5, #0
		printf("%.2X", sfxConfiguration.pac[i]);
 8004bd0:	1963      	adds	r3, r4, r5
 8004bd2:	7959      	ldrb	r1, [r3, #5]
 8004bd4:	4814      	ldr	r0, [pc, #80]	; (8004c28 <mcuConfig+0x98>)
 8004bd6:	3501      	adds	r5, #1
 8004bd8:	f004 fcd0 	bl	800957c <iprintf>
	for(uint16_t i = 0; i < sizeof(sfxConfiguration.pac); i++)
 8004bdc:	2d08      	cmp	r5, #8
 8004bde:	d1f7      	bne.n	8004bd0 <mcuConfig+0x40>
	printf("\n");
 8004be0:	200a      	movs	r0, #10
 8004be2:	f004 fce5 	bl	80095b0 <putchar>
	ST_RF_API_set_xtal_freq(50000000); 
 8004be6:	4811      	ldr	r0, [pc, #68]	; (8004c2c <mcuConfig+0x9c>)
 8004be8:	f004 f9a2 	bl	8008f30 <ST_RF_API_set_xtal_freq>
	ST_RF_API_set_freq_offset(sfxConfiguration.freqOffset);
 8004bec:	6920      	ldr	r0, [r4, #16]
 8004bee:	f004 f9a5 	bl	8008f3c <ST_RF_API_set_freq_offset>
	printf("Freq Offset %ld \n", (int32_t)sfxConfiguration.freqOffset);
 8004bf2:	6921      	ldr	r1, [r4, #16]
 8004bf4:	480e      	ldr	r0, [pc, #56]	; (8004c30 <mcuConfig+0xa0>)
 8004bf6:	f004 fcc1 	bl	800957c <iprintf>
	ST_RF_API_set_lbt_thr_offset(sfxConfiguration.lbtOffset);
 8004bfa:	2018      	movs	r0, #24
 8004bfc:	5620      	ldrsb	r0, [r4, r0]
 8004bfe:	f004 f9a3 	bl	8008f48 <ST_RF_API_set_lbt_thr_offset>
	printf("LBT %ld \n", (int32_t)sfxConfiguration.lbtOffset);
 8004c02:	69a1      	ldr	r1, [r4, #24]
 8004c04:	480b      	ldr	r0, [pc, #44]	; (8004c34 <mcuConfig+0xa4>)
 8004c06:	f004 fcb9 	bl	800957c <iprintf>
	ST_RF_API_set_rssi_offset(sfxConfiguration.rssiOffset);
 8004c0a:	2014      	movs	r0, #20
 8004c0c:	5620      	ldrsb	r0, [r4, r0]
 8004c0e:	f004 f987 	bl	8008f20 <ST_RF_API_set_rssi_offset>
	printf("RSSI %ld \n", sfxConfiguration.rssiOffset);
 8004c12:	6961      	ldr	r1, [r4, #20]
 8004c14:	4808      	ldr	r0, [pc, #32]	; (8004c38 <mcuConfig+0xa8>)
 8004c16:	f004 fcb1 	bl	800957c <iprintf>
}
 8004c1a:	b009      	add	sp, #36	; 0x24
 8004c1c:	bd30      	pop	{r4, r5, pc}
 8004c1e:	46c0      	nop			; (mov r8, r8)
 8004c20:	0800af26 	.word	0x0800af26
 8004c24:	0800af39 	.word	0x0800af39
 8004c28:	0800af4a 	.word	0x0800af4a
 8004c2c:	02faf080 	.word	0x02faf080
 8004c30:	0800af4f 	.word	0x0800af4f
 8004c34:	0800af61 	.word	0x0800af61
 8004c38:	0800af6b 	.word	0x0800af6b

08004c3c <main>:
{
 8004c3c:	b570      	push	{r4, r5, r6, lr}
  HAL_Init();
 8004c3e:	f000 ff5f 	bl	8005b00 <HAL_Init>
  SystemClock_Config();
 8004c42:	f7ff fed5 	bl	80049f0 <SystemClock_Config>
  MX_GPIO_Init();
 8004c46:	f7ff fd6b 	bl	8004720 <MX_GPIO_Init>
  MX_DMA_Init();
 8004c4a:	f7ff fd4d 	bl	80046e8 <MX_DMA_Init>
  MX_RTC_Init();
 8004c4e:	f000 f83b 	bl	8004cc8 <MX_RTC_Init>
  MX_SPI1_Init();
 8004c52:	f000 f901 	bl	8004e58 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8004c56:	f000 fe3d 	bl	80058d4 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8004c5a:	f7ff fc49 	bl	80044f0 <MX_ADC_Init>
  MX_TIM2_Init();
 8004c5e:	f000 fbad 	bl	80053bc <MX_TIM2_Init>
  MX_TIM21_Init();
 8004c62:	f000 fbe3 	bl	800542c <MX_TIM21_Init>
  printf("mcuConfig()\n");
 8004c66:	4812      	ldr	r0, [pc, #72]	; (8004cb0 <main+0x74>)
 8004c68:	f004 fd28 	bl	80096bc <puts>
	mcuConfig();
 8004c6c:	f7ff ff90 	bl	8004b90 <mcuConfig>
	HT_API_ConfigRegion(RCZ2);
 8004c70:	2002      	movs	r0, #2
 8004c72:	f7ff ff13 	bl	8004a9c <HT_API_ConfigRegion>
	float temp = lm35_read();
 8004c76:	f7ff fcd3 	bl	8004620 <lm35_read>
 8004c7a:	1c05      	adds	r5, r0, #0
	int_temp = (uint8_t)temp;
 8004c7c:	f7fd fde2 	bl	8002844 <__aeabi_f2uiz>
 8004c80:	4b0c      	ldr	r3, [pc, #48]	; (8004cb4 <main+0x78>)
 8004c82:	b2c4      	uxtb	r4, r0
 8004c84:	701c      	strb	r4, [r3, #0]
	centesimal_temp = (uint8_t)(temp * 100) % 100;
 8004c86:	490c      	ldr	r1, [pc, #48]	; (8004cb8 <main+0x7c>)
 8004c88:	1c28      	adds	r0, r5, #0
 8004c8a:	f7fd fedd 	bl	8002a48 <__aeabi_fmul>
 8004c8e:	f7fd fdd9 	bl	8002844 <__aeabi_f2uiz>
 8004c92:	2164      	movs	r1, #100	; 0x64
 8004c94:	b2c0      	uxtb	r0, r0
 8004c96:	f7fd fc91 	bl	80025bc <__aeabi_uidivmod>
 8004c9a:	4b08      	ldr	r3, [pc, #32]	; (8004cbc <main+0x80>)
 8004c9c:	b2ca      	uxtb	r2, r1
	printf("Temperatura: %i.%i", int_temp, centesimal_temp);
 8004c9e:	4808      	ldr	r0, [pc, #32]	; (8004cc0 <main+0x84>)
 8004ca0:	0021      	movs	r1, r4
	centesimal_temp = (uint8_t)(temp * 100) % 100;
 8004ca2:	701a      	strb	r2, [r3, #0]
	printf("Temperatura: %i.%i", int_temp, centesimal_temp);
 8004ca4:	f004 fc6a 	bl	800957c <iprintf>
	HT_API_SendFrame();
 8004ca8:	f7ff ff3e 	bl	8004b28 <HT_API_SendFrame>
}
 8004cac:	2000      	movs	r0, #0
 8004cae:	bd70      	pop	{r4, r5, r6, pc}
 8004cb0:	0800af76 	.word	0x0800af76
 8004cb4:	200002c6 	.word	0x200002c6
 8004cb8:	42c80000 	.word	0x42c80000
 8004cbc:	200002c5 	.word	0x200002c5
 8004cc0:	0800af82 	.word	0x0800af82

08004cc4 <Error_Handler>:
{
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004cc4:	4770      	bx	lr
	...

08004cc8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8004cc8:	b530      	push	{r4, r5, lr}
 8004cca:	b087      	sub	sp, #28
  RTC_TimeTypeDef sTime = {0};
 8004ccc:	2214      	movs	r2, #20
 8004cce:	2100      	movs	r1, #0
 8004cd0:	a801      	add	r0, sp, #4
 8004cd2:	f004 fc4a 	bl	800956a <memset>
  RTC_DateTypeDef sDate = {0};

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004cd6:	4c1d      	ldr	r4, [pc, #116]	; (8004d4c <MX_RTC_Init+0x84>)
 8004cd8:	4b1d      	ldr	r3, [pc, #116]	; (8004d50 <MX_RTC_Init+0x88>)
  RTC_DateTypeDef sDate = {0};
 8004cda:	2500      	movs	r5, #0
  hrtc.Instance = RTC;
 8004cdc:	6023      	str	r3, [r4, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
  hrtc.Init.AsynchPrediv = 127;
 8004cde:	237f      	movs	r3, #127	; 0x7f
  hrtc.Init.SynchPrediv = 255;
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004ce0:	0020      	movs	r0, r4
  hrtc.Init.AsynchPrediv = 127;
 8004ce2:	60a3      	str	r3, [r4, #8]
  hrtc.Init.SynchPrediv = 255;
 8004ce4:	3380      	adds	r3, #128	; 0x80
  RTC_DateTypeDef sDate = {0};
 8004ce6:	9500      	str	r5, [sp, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8004ce8:	6065      	str	r5, [r4, #4]
  hrtc.Init.SynchPrediv = 255;
 8004cea:	60e3      	str	r3, [r4, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004cec:	6125      	str	r5, [r4, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8004cee:	6165      	str	r5, [r4, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004cf0:	61a5      	str	r5, [r4, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004cf2:	61e5      	str	r5, [r4, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8004cf4:	f002 f9a4 	bl	8007040 <HAL_RTC_Init>
 8004cf8:	42a8      	cmp	r0, r5
 8004cfa:	d001      	beq.n	8004d00 <MX_RTC_Init+0x38>
  {
    Error_Handler();
 8004cfc:	f7ff ffe2 	bl	8004cc4 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8004d00:	466b      	mov	r3, sp
  sTime.Minutes = 0x0;
  sTime.Seconds = 0x0;
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004d02:	2201      	movs	r2, #1
 8004d04:	0020      	movs	r0, r4
  sTime.Hours = 0x0;
 8004d06:	809d      	strh	r5, [r3, #4]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004d08:	a901      	add	r1, sp, #4
  sTime.Seconds = 0x0;
 8004d0a:	719d      	strb	r5, [r3, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8004d0c:	9504      	str	r5, [sp, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8004d0e:	9505      	str	r5, [sp, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004d10:	f002 f9fe 	bl	8007110 <HAL_RTC_SetTime>
 8004d14:	2800      	cmp	r0, #0
 8004d16:	d001      	beq.n	8004d1c <MX_RTC_Init+0x54>
  {
    Error_Handler();
 8004d18:	f7ff ffd4 	bl	8004cc4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004d1c:	4b0d      	ldr	r3, [pc, #52]	; (8004d54 <MX_RTC_Init+0x8c>)
  sDate.Month = RTC_MONTH_JANUARY;
  sDate.Date = 0x1;
  sDate.Year = 0x0;

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004d1e:	2201      	movs	r2, #1
 8004d20:	4669      	mov	r1, sp
 8004d22:	0020      	movs	r0, r4
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004d24:	9300      	str	r3, [sp, #0]
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004d26:	f002 fa79 	bl	800721c <HAL_RTC_SetDate>
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	d001      	beq.n	8004d32 <MX_RTC_Init+0x6a>
  {
    Error_Handler();
 8004d2e:	f7ff ffc9 	bl	8004cc4 <Error_Handler>
  }
  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer_IT(&hrtc, 1000, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 8004d32:	21fa      	movs	r1, #250	; 0xfa
 8004d34:	2200      	movs	r2, #0
 8004d36:	0020      	movs	r0, r4
 8004d38:	0089      	lsls	r1, r1, #2
 8004d3a:	f002 fadb 	bl	80072f4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8004d3e:	2800      	cmp	r0, #0
 8004d40:	d001      	beq.n	8004d46 <MX_RTC_Init+0x7e>
  {
    Error_Handler();
 8004d42:	f7ff ffbf 	bl	8004cc4 <Error_Handler>
  }

}
 8004d46:	b007      	add	sp, #28
 8004d48:	bd30      	pop	{r4, r5, pc}
 8004d4a:	46c0      	nop			; (mov r8, r8)
 8004d4c:	20000658 	.word	0x20000658
 8004d50:	40002800 	.word	0x40002800
 8004d54:	00010101 	.word	0x00010101

08004d58 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{

  if(rtcHandle->Instance==RTC)
 8004d58:	4b09      	ldr	r3, [pc, #36]	; (8004d80 <HAL_RTC_MspInit+0x28>)
 8004d5a:	6802      	ldr	r2, [r0, #0]
{
 8004d5c:	b510      	push	{r4, lr}
  if(rtcHandle->Instance==RTC)
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d10d      	bne.n	8004d7e <HAL_RTC_MspInit+0x26>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8004d62:	2380      	movs	r3, #128	; 0x80
 8004d64:	4a07      	ldr	r2, [pc, #28]	; (8004d84 <HAL_RTC_MspInit+0x2c>)
 8004d66:	02db      	lsls	r3, r3, #11
 8004d68:	6d11      	ldr	r1, [r2, #80]	; 0x50

    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_IRQn, 1, 0);
 8004d6a:	2002      	movs	r0, #2
    __HAL_RCC_RTC_ENABLE();
 8004d6c:	430b      	orrs	r3, r1
 8004d6e:	6513      	str	r3, [r2, #80]	; 0x50
    HAL_NVIC_SetPriority(RTC_IRQn, 1, 0);
 8004d70:	2101      	movs	r1, #1
 8004d72:	2200      	movs	r2, #0
 8004d74:	f001 f9d2 	bl	800611c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_IRQn);
 8004d78:	2002      	movs	r0, #2
 8004d7a:	f001 f9f9 	bl	8006170 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004d7e:	bd10      	pop	{r4, pc}
 8004d80:	40002800 	.word	0x40002800
 8004d84:	40021000 	.word	0x40021000

08004d88 <Configure_RTC_Clock>:
}

/* USER CODE BEGIN 1 */

void Configure_RTC_Clock(void)
{
 8004d88:	b530      	push	{r4, r5, lr}
 8004d8a:	b097      	sub	sp, #92	; 0x5c
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

#ifndef USE_STM32L0XX_NUCLEO
  __HAL_RCC_PWR_CLK_ENABLE();
#endif
  HAL_PWR_EnableBkUpAccess();
 8004d8c:	f001 fcae 	bl	80066ec <HAL_PWR_EnableBkUpAccess>

  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004d90:	2400      	movs	r4, #0
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 8004d92:	230c      	movs	r3, #12
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004d94:	2501      	movs	r5, #1
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004d96:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
 8004d98:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004d9a:	9412      	str	r4, [sp, #72]	; 0x48
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8004d9c:	950d      	str	r5, [sp, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8004d9e:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004da0:	f001 fcee 	bl	8006780 <HAL_RCC_OscConfig>

  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8004da4:	2320      	movs	r3, #32
 8004da6:	9300      	str	r3, [sp, #0]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004da8:	2380      	movs	r3, #128	; 0x80
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8004daa:	4668      	mov	r0, sp
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8004dac:	029b      	lsls	r3, r3, #10
 8004dae:	9301      	str	r3, [sp, #4]
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8004db0:	f002 f83e 	bl	8006e30 <HAL_RCCEx_PeriphCLKConfig>

  /* Enable RTC Clock */
  __HAL_RCC_RTC_ENABLE();
 8004db4:	2380      	movs	r3, #128	; 0x80
 8004db6:	4a07      	ldr	r2, [pc, #28]	; (8004dd4 <Configure_RTC_Clock+0x4c>)
 8004db8:	02db      	lsls	r3, r3, #11
 8004dba:	6d11      	ldr	r1, [r2, #80]	; 0x50

  HAL_NVIC_SetPriority(RTC_IRQn, 0x01, 0);
 8004dbc:	2002      	movs	r0, #2
  __HAL_RCC_RTC_ENABLE();
 8004dbe:	430b      	orrs	r3, r1
 8004dc0:	6513      	str	r3, [r2, #80]	; 0x50
  HAL_NVIC_SetPriority(RTC_IRQn, 0x01, 0);
 8004dc2:	0029      	movs	r1, r5
 8004dc4:	0022      	movs	r2, r4
 8004dc6:	f001 f9a9 	bl	800611c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RTC_IRQn);
 8004dca:	2002      	movs	r0, #2
 8004dcc:	f001 f9d0 	bl	8006170 <HAL_NVIC_EnableIRQ>
}
 8004dd0:	b017      	add	sp, #92	; 0x5c
 8004dd2:	bd30      	pop	{r4, r5, pc}
 8004dd4:	40021000 	.word	0x40021000

08004dd8 <setRtcInUseFlag>:

/*Set flags*/
void setRtcInUseFlag(uint8_t rtcInUse) {
	rtc_in_use = rtcInUse;
 8004dd8:	4b01      	ldr	r3, [pc, #4]	; (8004de0 <setRtcInUseFlag+0x8>)
 8004dda:	7018      	strb	r0, [r3, #0]
}
 8004ddc:	4770      	bx	lr
 8004dde:	46c0      	nop			; (mov r8, r8)
 8004de0:	200002cc 	.word	0x200002cc

08004de4 <setRtcIrqFlag>:

void setRtcIrqFlag(uint8_t rtcIrq) {
	rtc_irq = rtcIrq;
 8004de4:	4b01      	ldr	r3, [pc, #4]	; (8004dec <setRtcIrqFlag+0x8>)
 8004de6:	7018      	strb	r0, [r3, #0]
}
 8004de8:	4770      	bx	lr
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	200002ce 	.word	0x200002ce

08004df0 <setRtcInUseForCsFlag>:

void setRtcInUseForCsFlag(uint8_t rtcInUseForCs) {
	rtc_in_use_for_cs = rtcInUseForCs;
 8004df0:	4b01      	ldr	r3, [pc, #4]	; (8004df8 <setRtcInUseForCsFlag+0x8>)
 8004df2:	7018      	strb	r0, [r3, #0]
}
 8004df4:	4770      	bx	lr
 8004df6:	46c0      	nop			; (mov r8, r8)
 8004df8:	200002cd 	.word	0x200002cd

08004dfc <setNextRtcWakeUpFlag>:

void setNextRtcWakeUpFlag(uint32_t nextRtcWakeUp) {
	next_rtc_wakeup = nextRtcWakeUp;
 8004dfc:	4b01      	ldr	r3, [pc, #4]	; (8004e04 <setNextRtcWakeUpFlag+0x8>)
 8004dfe:	6018      	str	r0, [r3, #0]
}
 8004e00:	4770      	bx	lr
 8004e02:	46c0      	nop			; (mov r8, r8)
 8004e04:	200002c8 	.word	0x200002c8

08004e08 <setRtcPrescFlag>:

void setRtcPrescFlag(uint16_t rtcPresc) {
	rtc_presc = rtcPresc;
 8004e08:	4b01      	ldr	r3, [pc, #4]	; (8004e10 <setRtcPrescFlag+0x8>)
 8004e0a:	8018      	strh	r0, [r3, #0]
}
 8004e0c:	4770      	bx	lr
 8004e0e:	46c0      	nop			; (mov r8, r8)
 8004e10:	20000080 	.word	0x20000080

08004e14 <getNextRtcWakeUpFlag>:

/*Get flags*/ 
uint32_t getNextRtcWakeUpFlag(void) {
	return next_rtc_wakeup;
 8004e14:	4b01      	ldr	r3, [pc, #4]	; (8004e1c <getNextRtcWakeUpFlag+0x8>)
 8004e16:	6818      	ldr	r0, [r3, #0]
}
 8004e18:	4770      	bx	lr
 8004e1a:	46c0      	nop			; (mov r8, r8)
 8004e1c:	200002c8 	.word	0x200002c8

08004e20 <getRtcInUseForCsFlag>:

uint8_t getRtcInUseForCsFlag(void) {
	return rtc_in_use_for_cs;
 8004e20:	4b01      	ldr	r3, [pc, #4]	; (8004e28 <getRtcInUseForCsFlag+0x8>)
 8004e22:	7818      	ldrb	r0, [r3, #0]
 8004e24:	b2c0      	uxtb	r0, r0
}
 8004e26:	4770      	bx	lr
 8004e28:	200002cd 	.word	0x200002cd

08004e2c <getRtcIrqFlag>:

uint8_t getRtcIrqFlag(void) {
	return rtc_irq;
 8004e2c:	4b01      	ldr	r3, [pc, #4]	; (8004e34 <getRtcIrqFlag+0x8>)
 8004e2e:	7818      	ldrb	r0, [r3, #0]
 8004e30:	b2c0      	uxtb	r0, r0
}
 8004e32:	4770      	bx	lr
 8004e34:	200002ce 	.word	0x200002ce

08004e38 <getRtcInUseFlag>:

uint8_t getRtcInUseFlag(void) {
	return rtc_in_use;
 8004e38:	4b01      	ldr	r3, [pc, #4]	; (8004e40 <getRtcInUseFlag+0x8>)
 8004e3a:	7818      	ldrb	r0, [r3, #0]
 8004e3c:	b2c0      	uxtb	r0, r0
}
 8004e3e:	4770      	bx	lr
 8004e40:	200002cc 	.word	0x200002cc

08004e44 <getRtcPrescFlag>:

uint16_t getRtcPrescFlag(void) {
	return rtc_presc;
 8004e44:	4b01      	ldr	r3, [pc, #4]	; (8004e4c <getRtcPrescFlag+0x8>)
 8004e46:	8818      	ldrh	r0, [r3, #0]
 8004e48:	b280      	uxth	r0, r0
}
 8004e4a:	4770      	bx	lr
 8004e4c:	20000080 	.word	0x20000080

08004e50 <getRtcHandler>:

RTC_HandleTypeDef * getRtcHandler(void) {
	return &hrtc;
}
 8004e50:	4800      	ldr	r0, [pc, #0]	; (8004e54 <getRtcHandler+0x4>)
 8004e52:	4770      	bx	lr
 8004e54:	20000658 	.word	0x20000658

08004e58 <MX_SPI1_Init>:

/* SPI1 init function */
void MX_SPI1_Init(void)
{

  hspi1.Instance = SPI1;
 8004e58:	480d      	ldr	r0, [pc, #52]	; (8004e90 <MX_SPI1_Init+0x38>)
 8004e5a:	4b0e      	ldr	r3, [pc, #56]	; (8004e94 <MX_SPI1_Init+0x3c>)
{
 8004e5c:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8004e5e:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004e60:	2382      	movs	r3, #130	; 0x82
 8004e62:	005b      	lsls	r3, r3, #1
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004e64:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8004e66:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004e68:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004e6a:	0092      	lsls	r2, r2, #2
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8004e6c:	6083      	str	r3, [r0, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8004e6e:	60c3      	str	r3, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8004e70:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8004e72:	6143      	str	r3, [r0, #20]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004e74:	61c3      	str	r3, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8004e76:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8004e78:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004e7a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8004e7c:	3307      	adds	r3, #7
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8004e7e:	6182      	str	r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 7;
 8004e80:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8004e82:	f002 fb9d 	bl	80075c0 <HAL_SPI_Init>
 8004e86:	2800      	cmp	r0, #0
 8004e88:	d001      	beq.n	8004e8e <MX_SPI1_Init+0x36>
  {
    Error_Handler();
 8004e8a:	f7ff ff1b 	bl	8004cc4 <Error_Handler>
  }

}
 8004e8e:	bd10      	pop	{r4, pc}
 8004e90:	2000067c 	.word	0x2000067c
 8004e94:	40013000 	.word	0x40013000

08004e98 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8004e98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004e9a:	0005      	movs	r5, r0
 8004e9c:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e9e:	2214      	movs	r2, #20
 8004ea0:	2100      	movs	r1, #0
 8004ea2:	a803      	add	r0, sp, #12
 8004ea4:	f004 fb61 	bl	800956a <memset>
  if(spiHandle->Instance==SPI1)
 8004ea8:	4b31      	ldr	r3, [pc, #196]	; (8004f70 <HAL_SPI_MspInit+0xd8>)
 8004eaa:	682a      	ldr	r2, [r5, #0]
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d15c      	bne.n	8004f6a <HAL_SPI_MspInit+0xd2>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004eb0:	2280      	movs	r2, #128	; 0x80

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004eb2:	2402      	movs	r4, #2
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004eb4:	2701      	movs	r7, #1
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004eb6:	4b2f      	ldr	r3, [pc, #188]	; (8004f74 <HAL_SPI_MspInit+0xdc>)
 8004eb8:	0152      	lsls	r2, r2, #5
 8004eba:	6b59      	ldr	r1, [r3, #52]	; 0x34
    */
    GPIO_InitStruct.Pin = S2LP_SPI_MISO_PIN_Pin|S2LP_SPI_SCLK_PIN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004ebc:	2600      	movs	r6, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8004ebe:	430a      	orrs	r2, r1
 8004ec0:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ec2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ec4:	482c      	ldr	r0, [pc, #176]	; (8004f78 <HAL_SPI_MspInit+0xe0>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ec6:	4322      	orrs	r2, r4
 8004ec8:	62da      	str	r2, [r3, #44]	; 0x2c
 8004eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ecc:	a903      	add	r1, sp, #12
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004ece:	4022      	ands	r2, r4
 8004ed0:	9201      	str	r2, [sp, #4]
 8004ed2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ed6:	433a      	orrs	r2, r7
 8004ed8:	62da      	str	r2, [r3, #44]	; 0x2c
 8004eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004edc:	9404      	str	r4, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ede:	403b      	ands	r3, r7
 8004ee0:	9302      	str	r3, [sp, #8]
 8004ee2:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = S2LP_SPI_MISO_PIN_Pin|S2LP_SPI_SCLK_PIN_Pin;
 8004ee4:	2318      	movs	r3, #24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004ee6:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pin = S2LP_SPI_MISO_PIN_Pin|S2LP_SPI_SCLK_PIN_Pin;
 8004ee8:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004eea:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004eec:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004eee:	f001 fb33 	bl	8006558 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = S2LP_SPI_MOSI_PIN_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(S2LP_SPI_MOSI_PIN_GPIO_Port, &GPIO_InitStruct);
 8004ef2:	20a0      	movs	r0, #160	; 0xa0
    GPIO_InitStruct.Pin = S2LP_SPI_MOSI_PIN_Pin;
 8004ef4:	2380      	movs	r3, #128	; 0x80
    HAL_GPIO_Init(S2LP_SPI_MOSI_PIN_GPIO_Port, &GPIO_InitStruct);
 8004ef6:	05c0      	lsls	r0, r0, #23
 8004ef8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = S2LP_SPI_MOSI_PIN_Pin;
 8004efa:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004efc:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8004efe:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f00:	9705      	str	r7, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8004f02:	9607      	str	r6, [sp, #28]
    HAL_GPIO_Init(S2LP_SPI_MOSI_PIN_GPIO_Port, &GPIO_InitStruct);
 8004f04:	f001 fb28 	bl	8006558 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8004f08:	4c1c      	ldr	r4, [pc, #112]	; (8004f7c <HAL_SPI_MspInit+0xe4>)
 8004f0a:	4b1d      	ldr	r3, [pc, #116]	; (8004f80 <HAL_SPI_MspInit+0xe8>)
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004f0c:	0020      	movs	r0, r4
    hdma_spi1_tx.Instance = DMA1_Channel3;
 8004f0e:	6023      	str	r3, [r4, #0]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004f10:	2310      	movs	r3, #16
 8004f12:	60a3      	str	r3, [r4, #8]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004f14:	3370      	adds	r3, #112	; 0x70
 8004f16:	6123      	str	r3, [r4, #16]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004f18:	2380      	movs	r3, #128	; 0x80
 8004f1a:	019b      	lsls	r3, r3, #6
    hdma_spi1_tx.Init.Request = DMA_REQUEST_1;
 8004f1c:	6067      	str	r7, [r4, #4]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f1e:	60e6      	str	r6, [r4, #12]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f20:	6166      	str	r6, [r4, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f22:	61a6      	str	r6, [r4, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8004f24:	61e6      	str	r6, [r4, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8004f26:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8004f28:	f001 f950 	bl	80061cc <HAL_DMA_Init>
 8004f2c:	42b0      	cmp	r0, r6
 8004f2e:	d001      	beq.n	8004f34 <HAL_SPI_MspInit+0x9c>
    {
      Error_Handler();
 8004f30:	f7ff fec8 	bl	8004cc4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);

    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8004f34:	4b13      	ldr	r3, [pc, #76]	; (8004f84 <HAL_SPI_MspInit+0xec>)
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8004f36:	64ac      	str	r4, [r5, #72]	; 0x48
 8004f38:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8004f3a:	4c13      	ldr	r4, [pc, #76]	; (8004f88 <HAL_SPI_MspInit+0xf0>)
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004f3c:	2280      	movs	r2, #128	; 0x80
    hdma_spi1_rx.Instance = DMA1_Channel2;
 8004f3e:	6023      	str	r3, [r4, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_1;
 8004f40:	2301      	movs	r3, #1
 8004f42:	6063      	str	r3, [r4, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f44:	2300      	movs	r3, #0
 8004f46:	60a3      	str	r3, [r4, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f48:	60e3      	str	r3, [r4, #12]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004f4a:	6163      	str	r3, [r4, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004f4c:	61a3      	str	r3, [r4, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8004f4e:	61e3      	str	r3, [r4, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004f50:	2380      	movs	r3, #128	; 0x80
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004f52:	0020      	movs	r0, r4
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004f54:	019b      	lsls	r3, r3, #6
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004f56:	6122      	str	r2, [r4, #16]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_HIGH;
 8004f58:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8004f5a:	f001 f937 	bl	80061cc <HAL_DMA_Init>
 8004f5e:	2800      	cmp	r0, #0
 8004f60:	d001      	beq.n	8004f66 <HAL_SPI_MspInit+0xce>
    {
      Error_Handler();
 8004f62:	f7ff feaf 	bl	8004cc4 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8004f66:	64ec      	str	r4, [r5, #76]	; 0x4c
 8004f68:	62a5      	str	r5, [r4, #40]	; 0x28

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8004f6a:	b009      	add	sp, #36	; 0x24
 8004f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004f6e:	46c0      	nop			; (mov r8, r8)
 8004f70:	40013000 	.word	0x40013000
 8004f74:	40021000 	.word	0x40021000
 8004f78:	50000400 	.word	0x50000400
 8004f7c:	2000071c 	.word	0x2000071c
 8004f80:	40020030 	.word	0x40020030
 8004f84:	4002001c 	.word	0x4002001c
 8004f88:	200006d4 	.word	0x200006d4

08004f8c <S2LPSpiWriteRegisters>:

  return status;
}

uint16_t S2LPSpiWriteRegisters(uint8_t address, uint8_t n_bytes, uint8_t* buffer)
{
 8004f8c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f8e:	000c      	movs	r4, r1
  tx_buff[0]=WRITE_HEADER;
  tx_buff[1]=address;

  uint16_t status = 0;
 8004f90:	4669      	mov	r1, sp
  tx_buff[0]=WRITE_HEADER;
 8004f92:	2300      	movs	r3, #0
 8004f94:	4f2f      	ldr	r7, [pc, #188]	; (8005054 <S2LPSpiWriteRegisters+0xc8>)
  uint16_t status = 0;
 8004f96:	80cb      	strh	r3, [r1, #6]
  tx_buff[0]=WRITE_HEADER;
 8004f98:	703b      	strb	r3, [r7, #0]
  tx_buff[1]=address;
 8004f9a:	7078      	strb	r0, [r7, #1]

  for(uint32_t i=0;i<n_bytes;i++)
 8004f9c:	0018      	movs	r0, r3
  {
    tx_buff[i+2]=buffer[i];
 8004f9e:	4b2e      	ldr	r3, [pc, #184]	; (8005058 <S2LPSpiWriteRegisters+0xcc>)
  uint16_t status = 0;
 8004fa0:	1d8d      	adds	r5, r1, #6
  for(uint32_t i=0;i<n_bytes;i++)
 8004fa2:	4284      	cmp	r4, r0
 8004fa4:	d849      	bhi.n	800503a <S2LPSpiWriteRegisters+0xae>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004fa6:	b672      	cpsid	i
  }

  SPI_ENTER_CRITICAL();

  /* Puts the SPI chip select low to start the transaction */
  SdkEvalSPICSLow();
 8004fa8:	2180      	movs	r1, #128	; 0x80
 8004faa:	20a0      	movs	r0, #160	; 0xa0
 8004fac:	2200      	movs	r2, #0
 8004fae:	0209      	lsls	r1, r1, #8
 8004fb0:	05c0      	lsls	r0, r0, #23
 8004fb2:	f001 fb89 	bl	80066c8 <HAL_GPIO_WritePin>

	HAL_SPI_TransmitReceive_DMA(&hspi1, tx_buff, rx_buff, 2+n_bytes);
 8004fb6:	1ca3      	adds	r3, r4, #2
 8004fb8:	4e28      	ldr	r6, [pc, #160]	; (800505c <S2LPSpiWriteRegisters+0xd0>)
 8004fba:	4c29      	ldr	r4, [pc, #164]	; (8005060 <S2LPSpiWriteRegisters+0xd4>)
 8004fbc:	0032      	movs	r2, r6
 8004fbe:	0039      	movs	r1, r7
 8004fc0:	0020      	movs	r0, r4
 8004fc2:	f002 fb3d 	bl	8007640 <HAL_SPI_TransmitReceive_DMA>
	WAIT_FOR_SPI_TC();
 8004fc6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	4b26      	ldr	r3, [pc, #152]	; (8005064 <S2LPSpiWriteRegisters+0xd8>)
 8004fcc:	18d1      	adds	r1, r2, r3
 8004fce:	424b      	negs	r3, r1
 8004fd0:	4159      	adcs	r1, r3
 8004fd2:	4249      	negs	r1, r1
 8004fd4:	4b24      	ldr	r3, [pc, #144]	; (8005068 <S2LPSpiWriteRegisters+0xdc>)
 8004fd6:	4f25      	ldr	r7, [pc, #148]	; (800506c <S2LPSpiWriteRegisters+0xe0>)
 8004fd8:	6818      	ldr	r0, [r3, #0]
 8004fda:	2302      	movs	r3, #2
 8004fdc:	42ba      	cmp	r2, r7
 8004fde:	d011      	beq.n	8005004 <S2LPSpiWriteRegisters+0x78>
 8004fe0:	4f23      	ldr	r7, [pc, #140]	; (8005070 <S2LPSpiWriteRegisters+0xe4>)
 8004fe2:	331e      	adds	r3, #30
 8004fe4:	42ba      	cmp	r2, r7
 8004fe6:	d00d      	beq.n	8005004 <S2LPSpiWriteRegisters+0x78>
 8004fe8:	4b22      	ldr	r3, [pc, #136]	; (8005074 <S2LPSpiWriteRegisters+0xe8>)
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d029      	beq.n	8005042 <S2LPSpiWriteRegisters+0xb6>
 8004fee:	4b22      	ldr	r3, [pc, #136]	; (8005078 <S2LPSpiWriteRegisters+0xec>)
 8004ff0:	429a      	cmp	r2, r3
 8004ff2:	d029      	beq.n	8005048 <S2LPSpiWriteRegisters+0xbc>
 8004ff4:	4b21      	ldr	r3, [pc, #132]	; (800507c <S2LPSpiWriteRegisters+0xf0>)
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d029      	beq.n	800504e <S2LPSpiWriteRegisters+0xc2>
 8004ffa:	2780      	movs	r7, #128	; 0x80
 8004ffc:	4b20      	ldr	r3, [pc, #128]	; (8005080 <S2LPSpiWriteRegisters+0xf4>)
 8004ffe:	04bf      	lsls	r7, r7, #18
 8005000:	400b      	ands	r3, r1
 8005002:	19db      	adds	r3, r3, r7
 8005004:	4203      	tst	r3, r0
 8005006:	d0e5      	beq.n	8004fd4 <S2LPSpiWriteRegisters+0x48>
 8005008:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800500a:	f001 f963 	bl	80062d4 <HAL_DMA_IRQHandler>
 800500e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005010:	f001 f960 	bl	80062d4 <HAL_DMA_IRQHandler>
 8005014:	0020      	movs	r0, r4
 8005016:	f002 fc17 	bl	8007848 <HAL_SPI_GetState>
 800501a:	0002      	movs	r2, r0
 800501c:	2801      	cmp	r0, #1
 800501e:	d1f3      	bne.n	8005008 <S2LPSpiWriteRegisters+0x7c>
	
  /* Puts the SPI chip select high to end the transaction */
  SdkEvalSPICSHigh();
 8005020:	2180      	movs	r1, #128	; 0x80
 8005022:	20a0      	movs	r0, #160	; 0xa0
 8005024:	0209      	lsls	r1, r1, #8
 8005026:	05c0      	lsls	r0, r0, #23
 8005028:	f001 fb4e 	bl	80066c8 <HAL_GPIO_WritePin>
  __ASM volatile ("cpsie i" : : : "memory");
 800502c:	b662      	cpsie	i

  SPI_EXIT_CRITICAL();

  ((uint8_t*)&status)[1]=rx_buff[0];
 800502e:	7833      	ldrb	r3, [r6, #0]
 8005030:	706b      	strb	r3, [r5, #1]
  ((uint8_t*)&status)[0]=rx_buff[1];
 8005032:	7873      	ldrb	r3, [r6, #1]
 8005034:	702b      	strb	r3, [r5, #0]
	
  return status;
 8005036:	8828      	ldrh	r0, [r5, #0]

}
 8005038:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    tx_buff[i+2]=buffer[i];
 800503a:	5c11      	ldrb	r1, [r2, r0]
 800503c:	5419      	strb	r1, [r3, r0]
  for(uint32_t i=0;i<n_bytes;i++)
 800503e:	3001      	adds	r0, #1
 8005040:	e7af      	b.n	8004fa2 <S2LPSpiWriteRegisters+0x16>
	WAIT_FOR_SPI_TC();
 8005042:	2380      	movs	r3, #128	; 0x80
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	e7dd      	b.n	8005004 <S2LPSpiWriteRegisters+0x78>
 8005048:	2380      	movs	r3, #128	; 0x80
 800504a:	019b      	lsls	r3, r3, #6
 800504c:	e7da      	b.n	8005004 <S2LPSpiWriteRegisters+0x78>
 800504e:	2380      	movs	r3, #128	; 0x80
 8005050:	029b      	lsls	r3, r3, #10
 8005052:	e7d7      	b.n	8005004 <S2LPSpiWriteRegisters+0x78>
 8005054:	20000350 	.word	0x20000350
 8005058:	20000352 	.word	0x20000352
 800505c:	200002cf 	.word	0x200002cf
 8005060:	2000067c 	.word	0x2000067c
 8005064:	bffdff94 	.word	0xbffdff94
 8005068:	40020000 	.word	0x40020000
 800506c:	40020008 	.word	0x40020008
 8005070:	4002001c 	.word	0x4002001c
 8005074:	40020030 	.word	0x40020030
 8005078:	40020044 	.word	0x40020044
 800507c:	40020058 	.word	0x40020058
 8005080:	fe200000 	.word	0xfe200000

08005084 <SdkEvalSpiRawTC>:
  ((uint8_t*)&status)[0]=rx_buff[1];

  return status;
}

__weak void SdkEvalSpiRawTC(void){}
 8005084:	4770      	bx	lr
	...

08005088 <S2LPSpiRaw>:

void S2LPSpiRaw(uint8_t n_bytes, uint8_t* in_buffer, uint8_t* out_buffer, uint8_t can_return_bef_tx)
{
 8005088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800508a:	0016      	movs	r6, r2
 800508c:	001d      	movs	r5, r3
 800508e:	9000      	str	r0, [sp, #0]
 8005090:	9101      	str	r1, [sp, #4]
  uint8_t* out_buffer_=out_buffer;

  if(out_buffer==NULL)
 8005092:	2a00      	cmp	r2, #0
 8005094:	d100      	bne.n	8005098 <S2LPSpiRaw+0x10>
      out_buffer_=rx_buff;
 8005096:	4e39      	ldr	r6, [pc, #228]	; (800517c <S2LPSpiRaw+0xf4>)

  spi_in_use = 1;
 8005098:	2401      	movs	r4, #1
 800509a:	4f39      	ldr	r7, [pc, #228]	; (8005180 <S2LPSpiRaw+0xf8>)
 800509c:	4b39      	ldr	r3, [pc, #228]	; (8005184 <S2LPSpiRaw+0xfc>)
 800509e:	703c      	strb	r4, [r7, #0]

  if(can_return_bef_tx)
 80050a0:	2d00      	cmp	r5, #0
 80050a2:	d058      	beq.n	8005156 <S2LPSpiRaw+0xce>
  {
    waiting_irq=1;
    HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 1);
 80050a4:	0022      	movs	r2, r4
 80050a6:	0021      	movs	r1, r4
 80050a8:	200a      	movs	r0, #10
    waiting_irq=1;
 80050aa:	701c      	strb	r4, [r3, #0]
    HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 1);
 80050ac:	f001 f836 	bl	800611c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80050b0:	200a      	movs	r0, #10
 80050b2:	f001 f85d 	bl	8006170 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 1, 0);
 80050b6:	200a      	movs	r0, #10
 80050b8:	2200      	movs	r2, #0
 80050ba:	0021      	movs	r1, r4
 80050bc:	f001 f82e 	bl	800611c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80050c0:	200a      	movs	r0, #10
 80050c2:	f001 f855 	bl	8006170 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);
    HAL_NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);
    SPI_ENTER_CRITICAL();
  }

  SdkEvalSPICSLow();
 80050c6:	2180      	movs	r1, #128	; 0x80
 80050c8:	20a0      	movs	r0, #160	; 0xa0
 80050ca:	2200      	movs	r2, #0
 80050cc:	0209      	lsls	r1, r1, #8
 80050ce:	05c0      	lsls	r0, r0, #23
 80050d0:	f001 fafa 	bl	80066c8 <HAL_GPIO_WritePin>

  HAL_SPI_TransmitReceive_DMA(&hspi1, in_buffer, out_buffer_, n_bytes);
 80050d4:	466b      	mov	r3, sp
 80050d6:	4c2c      	ldr	r4, [pc, #176]	; (8005188 <S2LPSpiRaw+0x100>)
 80050d8:	0032      	movs	r2, r6
 80050da:	0020      	movs	r0, r4
 80050dc:	881b      	ldrh	r3, [r3, #0]
 80050de:	9901      	ldr	r1, [sp, #4]
 80050e0:	f002 faae 	bl	8007640 <HAL_SPI_TransmitReceive_DMA>

  if(!can_return_bef_tx)
 80050e4:	2d00      	cmp	r5, #0
 80050e6:	d133      	bne.n	8005150 <S2LPSpiRaw+0xc8>
  {
    WAIT_FOR_SPI_TC();
 80050e8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80050ea:	681a      	ldr	r2, [r3, #0]
 80050ec:	4b27      	ldr	r3, [pc, #156]	; (800518c <S2LPSpiRaw+0x104>)
 80050ee:	18d1      	adds	r1, r2, r3
 80050f0:	424b      	negs	r3, r1
 80050f2:	4159      	adcs	r1, r3
 80050f4:	4249      	negs	r1, r1
 80050f6:	4b26      	ldr	r3, [pc, #152]	; (8005190 <S2LPSpiRaw+0x108>)
 80050f8:	4d26      	ldr	r5, [pc, #152]	; (8005194 <S2LPSpiRaw+0x10c>)
 80050fa:	6818      	ldr	r0, [r3, #0]
 80050fc:	2302      	movs	r3, #2
 80050fe:	42aa      	cmp	r2, r5
 8005100:	d011      	beq.n	8005126 <S2LPSpiRaw+0x9e>
 8005102:	4d25      	ldr	r5, [pc, #148]	; (8005198 <S2LPSpiRaw+0x110>)
 8005104:	331e      	adds	r3, #30
 8005106:	42aa      	cmp	r2, r5
 8005108:	d00d      	beq.n	8005126 <S2LPSpiRaw+0x9e>
 800510a:	4b24      	ldr	r3, [pc, #144]	; (800519c <S2LPSpiRaw+0x114>)
 800510c:	429a      	cmp	r2, r3
 800510e:	d02b      	beq.n	8005168 <S2LPSpiRaw+0xe0>
 8005110:	4b23      	ldr	r3, [pc, #140]	; (80051a0 <S2LPSpiRaw+0x118>)
 8005112:	429a      	cmp	r2, r3
 8005114:	d02b      	beq.n	800516e <S2LPSpiRaw+0xe6>
 8005116:	4b23      	ldr	r3, [pc, #140]	; (80051a4 <S2LPSpiRaw+0x11c>)
 8005118:	429a      	cmp	r2, r3
 800511a:	d02b      	beq.n	8005174 <S2LPSpiRaw+0xec>
 800511c:	2580      	movs	r5, #128	; 0x80
 800511e:	4b22      	ldr	r3, [pc, #136]	; (80051a8 <S2LPSpiRaw+0x120>)
 8005120:	04ad      	lsls	r5, r5, #18
 8005122:	400b      	ands	r3, r1
 8005124:	195b      	adds	r3, r3, r5
 8005126:	4203      	tst	r3, r0
 8005128:	d0e5      	beq.n	80050f6 <S2LPSpiRaw+0x6e>
 800512a:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 800512c:	f001 f8d2 	bl	80062d4 <HAL_DMA_IRQHandler>
 8005130:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8005132:	f001 f8cf 	bl	80062d4 <HAL_DMA_IRQHandler>
 8005136:	0020      	movs	r0, r4
 8005138:	f002 fb86 	bl	8007848 <HAL_SPI_GetState>
 800513c:	0002      	movs	r2, r0
 800513e:	2801      	cmp	r0, #1
 8005140:	d1f3      	bne.n	800512a <S2LPSpiRaw+0xa2>

    SdkEvalSPICSHigh();
 8005142:	2180      	movs	r1, #128	; 0x80
 8005144:	20a0      	movs	r0, #160	; 0xa0
 8005146:	0209      	lsls	r1, r1, #8
 8005148:	05c0      	lsls	r0, r0, #23
 800514a:	f001 fabd 	bl	80066c8 <HAL_GPIO_WritePin>
 800514e:	b662      	cpsie	i
    SPI_EXIT_CRITICAL();
  }

  spi_in_use = 0;
 8005150:	2300      	movs	r3, #0
 8005152:	703b      	strb	r3, [r7, #0]
}
 8005154:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
    HAL_NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);
 8005156:	200a      	movs	r0, #10
    waiting_irq=0;
 8005158:	701d      	strb	r5, [r3, #0]
    HAL_NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);
 800515a:	f001 f813 	bl	8006184 <HAL_NVIC_DisableIRQ>
    HAL_NVIC_DisableIRQ(DMA1_Channel2_3_IRQn);
 800515e:	200a      	movs	r0, #10
 8005160:	f001 f810 	bl	8006184 <HAL_NVIC_DisableIRQ>
  __ASM volatile ("cpsid i" : : : "memory");
 8005164:	b672      	cpsid	i
}
 8005166:	e7ae      	b.n	80050c6 <S2LPSpiRaw+0x3e>
    WAIT_FOR_SPI_TC();
 8005168:	2380      	movs	r3, #128	; 0x80
 800516a:	009b      	lsls	r3, r3, #2
 800516c:	e7db      	b.n	8005126 <S2LPSpiRaw+0x9e>
 800516e:	2380      	movs	r3, #128	; 0x80
 8005170:	019b      	lsls	r3, r3, #6
 8005172:	e7d8      	b.n	8005126 <S2LPSpiRaw+0x9e>
 8005174:	2380      	movs	r3, #128	; 0x80
 8005176:	029b      	lsls	r3, r3, #10
 8005178:	e7d5      	b.n	8005126 <S2LPSpiRaw+0x9e>
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	200002cf 	.word	0x200002cf
 8005180:	2000034f 	.word	0x2000034f
 8005184:	200003d0 	.word	0x200003d0
 8005188:	2000067c 	.word	0x2000067c
 800518c:	bffdff94 	.word	0xbffdff94
 8005190:	40020000 	.word	0x40020000
 8005194:	40020008 	.word	0x40020008
 8005198:	4002001c 	.word	0x4002001c
 800519c:	40020030 	.word	0x40020030
 80051a0:	40020044 	.word	0x40020044
 80051a4:	40020058 	.word	0x40020058
 80051a8:	fe200000 	.word	0xfe200000

080051ac <HAL_SPI_TxRxCpltCallback>:

void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80051ac:	b510      	push	{r4, lr}
  if(waiting_irq)
 80051ae:	4c08      	ldr	r4, [pc, #32]	; (80051d0 <HAL_SPI_TxRxCpltCallback+0x24>)
 80051b0:	7823      	ldrb	r3, [r4, #0]
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d00a      	beq.n	80051cc <HAL_SPI_TxRxCpltCallback+0x20>
  {
    SdkEvalSPICSHigh();
 80051b6:	2180      	movs	r1, #128	; 0x80
 80051b8:	20a0      	movs	r0, #160	; 0xa0
 80051ba:	2201      	movs	r2, #1
 80051bc:	0209      	lsls	r1, r1, #8
 80051be:	05c0      	lsls	r0, r0, #23
 80051c0:	f001 fa82 	bl	80066c8 <HAL_GPIO_WritePin>
    waiting_irq=0;
 80051c4:	2300      	movs	r3, #0
 80051c6:	7023      	strb	r3, [r4, #0]
    SdkEvalSpiRawTC();
 80051c8:	f7ff ff5c 	bl	8005084 <SdkEvalSpiRawTC>
  }
}
 80051cc:	bd10      	pop	{r4, pc}
 80051ce:	46c0      	nop			; (mov r8, r8)
 80051d0:	200003d0 	.word	0x200003d0

080051d4 <ST_MCU_API_SpiRaw>:

void ST_MCU_API_SpiRaw(uint8_t n_bytes, uint8_t* in_buffer, uint8_t* out_buffer, uint8_t can_return_bef_tx)
{
 80051d4:	b510      	push	{r4, lr}
  /* in this implementation we are not interested in the value of the can_return_bef_tx flag.
  We always pass 0 to the S2LPSpiRaw so that the CPU will wait the DMA for the end of transfer. */
  S2LPSpiRaw(n_bytes,in_buffer,out_buffer,0);
 80051d6:	2300      	movs	r3, #0
 80051d8:	f7ff ff56 	bl	8005088 <S2LPSpiRaw>
}
 80051dc:	bd10      	pop	{r4, pc}
	...

080051e0 <S2LPGetSpiInUse>:
  spi_in_use = state;
}

uint8_t S2LPGetSpiInUse(void)
{
  return spi_in_use;
 80051e0:	4b01      	ldr	r3, [pc, #4]	; (80051e8 <S2LPGetSpiInUse+0x8>)
 80051e2:	7818      	ldrb	r0, [r3, #0]
 80051e4:	b2c0      	uxtb	r0, r0
}
 80051e6:	4770      	bx	lr
 80051e8:	2000034f 	.word	0x2000034f

080051ec <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80051ec:	2201      	movs	r2, #1
 80051ee:	4b05      	ldr	r3, [pc, #20]	; (8005204 <HAL_MspInit+0x18>)
 80051f0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80051f2:	430a      	orrs	r2, r1
 80051f4:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 80051f6:	2280      	movs	r2, #128	; 0x80
 80051f8:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80051fa:	0552      	lsls	r2, r2, #21
 80051fc:	430a      	orrs	r2, r1
 80051fe:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005200:	4770      	bx	lr
 8005202:	46c0      	nop			; (mov r8, r8)
 8005204:	40021000 	.word	0x40021000

08005208 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8005208:	4770      	bx	lr

0800520a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800520a:	e7fe      	b.n	800520a <HardFault_Handler>

0800520c <SVC_Handler>:
 800520c:	4770      	bx	lr

0800520e <PendSV_Handler>:
 800520e:	4770      	bx	lr

08005210 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005210:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005212:	f000 fc89 	bl	8005b28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005216:	bd10      	pop	{r4, pc}

08005218 <RTC_IRQHandler>:

/**
  * @brief This function handles RTC global interrupt through EXTI lines 17, 19 and 20 and LSE CSS interrupt through EXTI line 19.
  */
void RTC_IRQHandler(void)
{
 8005218:	b510      	push	{r4, lr}
  /* USER CODE BEGIN RTC_IRQn 0 */

	//printUart("*** RTC_IRQHandler IN\r");
	Configure_RTC_Clock();
 800521a:	f7ff fdb5 	bl	8004d88 <Configure_RTC_Clock>
	
  /* USER CODE END RTC_IRQn 0 */
  HAL_RTCEx_WakeUpTimerIRQHandler(&hrtc);
 800521e:	4c19      	ldr	r4, [pc, #100]	; (8005284 <RTC_IRQHandler+0x6c>)
 8005220:	0020      	movs	r0, r4
 8005222:	f002 f927 	bl	8007474 <HAL_RTCEx_WakeUpTimerIRQHandler>
  /* USER CODE BEGIN RTC_IRQn 1 */

	HAL_RTCEx_DeactivateWakeUpTimer(&hrtc);
 8005226:	0020      	movs	r0, r4
 8005228:	f002 f8e2 	bl	80073f0 <HAL_RTCEx_DeactivateWakeUpTimer>

  if(!getNextRtcWakeUpFlag())
 800522c:	f7ff fdf2 	bl	8004e14 <getNextRtcWakeUpFlag>
 8005230:	1e04      	subs	r4, r0, #0
 8005232:	d117      	bne.n	8005264 <RTC_IRQHandler+0x4c>
  {
    setRtcIrqFlag(1);
 8005234:	2001      	movs	r0, #1
 8005236:	f7ff fdd5 	bl	8004de4 <setRtcIrqFlag>
		
		setRtcInUseFlag(0);
 800523a:	0020      	movs	r0, r4
 800523c:	f7ff fdcc 	bl	8004dd8 <setRtcInUseFlag>
		
    if(getNotifyEndFlag())
 8005240:	f000 fb3c 	bl	80058bc <getNotifyEndFlag>
 8005244:	2800      	cmp	r0, #0
 8005246:	d008      	beq.n	800525a <RTC_IRQHandler+0x42>
    {
      if(getRtcInUseForCsFlag())
 8005248:	f7ff fdea 	bl	8004e20 <getRtcInUseForCsFlag>
 800524c:	2800      	cmp	r0, #0
 800524e:	d005      	beq.n	800525c <RTC_IRQHandler+0x44>
      {
				setRtcInUseForCsFlag(0);
 8005250:	0020      	movs	r0, r4
 8005252:	f7ff fdcd 	bl	8004df0 <setRtcInUseForCsFlag>
				ST_RF_API_Timer_Channel_Clear_CB();
 8005256:	f003 fe5b 	bl	8008f10 <ST_RF_API_Timer_Channel_Clear_CB>
		
		//n_intermediate_tim_irq++;
  }
	
  /* USER CODE END RTC_IRQn 1 */
}
 800525a:	bd10      	pop	{r4, pc}
				ST_RF_API_Timer_CB(TIMER_STOP);
 800525c:	2001      	movs	r0, #1
 800525e:	f003 fe51 	bl	8008f04 <ST_RF_API_Timer_CB>
 8005262:	e7fa      	b.n	800525a <RTC_IRQHandler+0x42>
		MCU_API_timer_start(getNextRtcWakeUpFlag());
 8005264:	f7ff fdd6 	bl	8004e14 <getNextRtcWakeUpFlag>
 8005268:	f000 fa90 	bl	800578c <MCU_API_timer_start>
    n_intermediate_tim_irq = getNIntermediateTimIrqFlag();
 800526c:	f000 fb2c 	bl	80058c8 <getNIntermediateTimIrqFlag>
 8005270:	4b05      	ldr	r3, [pc, #20]	; (8005288 <RTC_IRQHandler+0x70>)
 8005272:	6018      	str	r0, [r3, #0]
		n_intermediate_tim_irq++;
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	3201      	adds	r2, #1
 8005278:	601a      	str	r2, [r3, #0]
		setNIntermediateTimIrqFlag(n_intermediate_tim_irq);
 800527a:	6818      	ldr	r0, [r3, #0]
 800527c:	b2c0      	uxtb	r0, r0
 800527e:	f000 fb17 	bl	80058b0 <setNIntermediateTimIrqFlag>
}
 8005282:	e7ea      	b.n	800525a <RTC_IRQHandler+0x42>
 8005284:	20000658 	.word	0x20000658
 8005288:	200003d4 	.word	0x200003d4

0800528c <EXTI2_3_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 and line 3 interrupts.
  */
void EXTI2_3_IRQHandler(void)
{
 800528c:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI2_3_IRQn 0 */

  /* USER CODE END EXTI2_3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 800528e:	2004      	movs	r0, #4
 8005290:	f001 fa20 	bl	80066d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_3_IRQn 1 */

  /* USER CODE END EXTI2_3_IRQn 1 */
}
 8005294:	bd10      	pop	{r4, pc}

08005296 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8005296:	b510      	push	{r4, lr}
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 8005298:	2040      	movs	r0, #64	; 0x40
 800529a:	f001 fa1b 	bl	80066d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 800529e:	bd10      	pop	{r4, pc}

080052a0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80052a0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80052a2:	4803      	ldr	r0, [pc, #12]	; (80052b0 <DMA1_Channel2_3_IRQHandler+0x10>)
 80052a4:	f001 f816 	bl	80062d4 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80052a8:	4802      	ldr	r0, [pc, #8]	; (80052b4 <DMA1_Channel2_3_IRQHandler+0x14>)
 80052aa:	f001 f813 	bl	80062d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80052ae:	bd10      	pop	{r4, pc}
 80052b0:	200006d4 	.word	0x200006d4
 80052b4:	2000071c 	.word	0x2000071c

080052b8 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80052b8:	b510      	push	{r4, lr}
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80052ba:	4803      	ldr	r0, [pc, #12]	; (80052c8 <DMA1_Channel4_5_6_7_IRQHandler+0x10>)
 80052bc:	f001 f80a 	bl	80062d4 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80052c0:	4802      	ldr	r0, [pc, #8]	; (80052cc <DMA1_Channel4_5_6_7_IRQHandler+0x14>)
 80052c2:	f001 f807 	bl	80062d4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80052c6:	bd10      	pop	{r4, pc}
 80052c8:	200007e0 	.word	0x200007e0
 80052cc:	20000828 	.word	0x20000828

080052d0 <TIM21_IRQHandler>:

/**
  * @brief This function handles TIM21 global interrupt.
  */
void TIM21_IRQHandler(void)
{
 80052d0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM21_IRQn 0 */

  /* USER CODE END TIM21_IRQn 0 */
  HAL_TIM_IRQHandler(&htim21);
 80052d2:	4802      	ldr	r0, [pc, #8]	; (80052dc <TIM21_IRQHandler+0xc>)
 80052d4:	f002 fbf1 	bl	8007aba <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM21_IRQn 1 */

  /* USER CODE END TIM21_IRQn 1 */
}
 80052d8:	bd10      	pop	{r4, pc}
 80052da:	46c0      	nop			; (mov r8, r8)
 80052dc:	200007a4 	.word	0x200007a4

080052e0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80052e0:	b570      	push	{r4, r5, r6, lr}
 80052e2:	000e      	movs	r6, r1
 80052e4:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052e6:	2500      	movs	r5, #0
 80052e8:	42a5      	cmp	r5, r4
 80052ea:	db01      	blt.n	80052f0 <_read+0x10>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80052ec:	0020      	movs	r0, r4
 80052ee:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80052f0:	e000      	b.n	80052f4 <_read+0x14>
 80052f2:	bf00      	nop
 80052f4:	5570      	strb	r0, [r6, r5]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80052f6:	3501      	adds	r5, #1
 80052f8:	e7f6      	b.n	80052e8 <_read+0x8>

080052fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80052fa:	b570      	push	{r4, r5, r6, lr}
 80052fc:	000e      	movs	r6, r1
 80052fe:	0014      	movs	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005300:	2500      	movs	r5, #0
 8005302:	42a5      	cmp	r5, r4
 8005304:	db01      	blt.n	800530a <_write+0x10>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8005306:	0020      	movs	r0, r4
 8005308:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 800530a:	5d70      	ldrb	r0, [r6, r5]
 800530c:	f000 fb66 	bl	80059dc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005310:	3501      	adds	r5, #1
 8005312:	e7f6      	b.n	8005302 <_write+0x8>

08005314 <_close>:

int _close(int file)
{
	return -1;
 8005314:	2001      	movs	r0, #1
}
 8005316:	4240      	negs	r0, r0
 8005318:	4770      	bx	lr

0800531a <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 800531a:	2380      	movs	r3, #128	; 0x80
 800531c:	019b      	lsls	r3, r3, #6
	return 0;
}
 800531e:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8005320:	604b      	str	r3, [r1, #4]
}
 8005322:	4770      	bx	lr

08005324 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8005324:	2001      	movs	r0, #1
 8005326:	4770      	bx	lr

08005328 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8005328:	2000      	movs	r0, #0
 800532a:	4770      	bx	lr

0800532c <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800532c:	4a0a      	ldr	r2, [pc, #40]	; (8005358 <_sbrk+0x2c>)
{
 800532e:	0003      	movs	r3, r0
	if (heap_end == 0)
 8005330:	6811      	ldr	r1, [r2, #0]
{
 8005332:	b510      	push	{r4, lr}
	if (heap_end == 0)
 8005334:	2900      	cmp	r1, #0
 8005336:	d101      	bne.n	800533c <_sbrk+0x10>
		heap_end = &end;
 8005338:	4908      	ldr	r1, [pc, #32]	; (800535c <_sbrk+0x30>)
 800533a:	6011      	str	r1, [r2, #0]

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 800533c:	4669      	mov	r1, sp
	prev_heap_end = heap_end;
 800533e:	6810      	ldr	r0, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8005340:	18c3      	adds	r3, r0, r3
 8005342:	428b      	cmp	r3, r1
 8005344:	d906      	bls.n	8005354 <_sbrk+0x28>
	{
		errno = ENOMEM;
 8005346:	f004 f8dd 	bl	8009504 <__errno>
 800534a:	230c      	movs	r3, #12
 800534c:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 800534e:	2001      	movs	r0, #1
 8005350:	4240      	negs	r0, r0
	}

	heap_end += incr;

	return (caddr_t) prev_heap_end;
}
 8005352:	bd10      	pop	{r4, pc}
	heap_end += incr;
 8005354:	6013      	str	r3, [r2, #0]
	return (caddr_t) prev_heap_end;
 8005356:	e7fc      	b.n	8005352 <_sbrk+0x26>
 8005358:	200003d8 	.word	0x200003d8
 800535c:	20000920 	.word	0x20000920

08005360 <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
/*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100U;
 8005360:	2280      	movs	r2, #128	; 0x80
 8005362:	4b10      	ldr	r3, [pc, #64]	; (80053a4 <SystemInit+0x44>)
 8005364:	0052      	lsls	r2, r2, #1
 8005366:	6819      	ldr	r1, [r3, #0]
 8005368:	430a      	orrs	r2, r1
 800536a:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t) 0x88FF400CU;
 800536c:	68da      	ldr	r2, [r3, #12]
 800536e:	490e      	ldr	r1, [pc, #56]	; (80053a8 <SystemInit+0x48>)
 8005370:	400a      	ands	r2, r1
 8005372:	60da      	str	r2, [r3, #12]

  /*!< Reset HSION, HSIDIVEN, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	490d      	ldr	r1, [pc, #52]	; (80053ac <SystemInit+0x4c>)
 8005378:	400a      	ands	r2, r1

  /*!< Reset HSI48ON  bit */
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800537a:	2101      	movs	r1, #1
  RCC->CR &= (uint32_t)0xFEF6FFF6U;
 800537c:	601a      	str	r2, [r3, #0]
  RCC->CRRCR &= (uint32_t)0xFFFFFFFEU;
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	438a      	bics	r2, r1
 8005382:	609a      	str	r2, [r3, #8]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFFU;
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	490a      	ldr	r1, [pc, #40]	; (80053b0 <SystemInit+0x50>)
 8005388:	400a      	ands	r2, r1
 800538a:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFFU;
 800538c:	68da      	ldr	r2, [r3, #12]
 800538e:	4909      	ldr	r1, [pc, #36]	; (80053b4 <SystemInit+0x54>)
 8005390:	400a      	ands	r2, r1
 8005392:	60da      	str	r2, [r3, #12]

  /*!< Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8005394:	2200      	movs	r2, #0
 8005396:	611a      	str	r2, [r3, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005398:	2280      	movs	r2, #128	; 0x80
 800539a:	4b07      	ldr	r3, [pc, #28]	; (80053b8 <SystemInit+0x58>)
 800539c:	0512      	lsls	r2, r2, #20
 800539e:	609a      	str	r2, [r3, #8]
#endif
}
 80053a0:	4770      	bx	lr
 80053a2:	46c0      	nop			; (mov r8, r8)
 80053a4:	40021000 	.word	0x40021000
 80053a8:	88ff400c 	.word	0x88ff400c
 80053ac:	fef6fff6 	.word	0xfef6fff6
 80053b0:	fffbffff 	.word	0xfffbffff
 80053b4:	ff02ffff 	.word	0xff02ffff
 80053b8:	e000ed00 	.word	0xe000ed00

080053bc <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim21;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80053bc:	b510      	push	{r4, lr}
 80053be:	b086      	sub	sp, #24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80053c0:	2210      	movs	r2, #16
 80053c2:	2100      	movs	r1, #0
 80053c4:	a802      	add	r0, sp, #8
 80053c6:	f004 f8d0 	bl	800956a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80053ca:	2208      	movs	r2, #8
 80053cc:	2100      	movs	r1, #0
 80053ce:	4668      	mov	r0, sp
 80053d0:	f004 f8cb 	bl	800956a <memset>

  htim2.Instance = TIM2;
 80053d4:	2380      	movs	r3, #128	; 0x80
 80053d6:	4c14      	ldr	r4, [pc, #80]	; (8005428 <MX_TIM2_Init+0x6c>)
 80053d8:	05db      	lsls	r3, r3, #23
 80053da:	6023      	str	r3, [r4, #0]
  htim2.Init.Prescaler = 0;
 80053dc:	2300      	movs	r3, #0
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim2.Init.Period = 0;
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80053de:	0020      	movs	r0, r4
  htim2.Init.Prescaler = 0;
 80053e0:	6063      	str	r3, [r4, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80053e2:	60a3      	str	r3, [r4, #8]
  htim2.Init.Period = 0;
 80053e4:	60e3      	str	r3, [r4, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80053e6:	6123      	str	r3, [r4, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80053e8:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80053ea:	f002 fa5f 	bl	80078ac <HAL_TIM_Base_Init>
 80053ee:	2800      	cmp	r0, #0
 80053f0:	d001      	beq.n	80053f6 <MX_TIM2_Init+0x3a>
  {
    Error_Handler();
 80053f2:	f7ff fc67 	bl	8004cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053f6:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80053f8:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053fa:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80053fc:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80053fe:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005400:	f002 fab6 	bl	8007970 <HAL_TIM_ConfigClockSource>
 8005404:	2800      	cmp	r0, #0
 8005406:	d001      	beq.n	800540c <MX_TIM2_Init+0x50>
  {
    Error_Handler();
 8005408:	f7ff fc5c 	bl	8004cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800540c:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800540e:	4669      	mov	r1, sp
 8005410:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005412:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005414:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005416:	f002 fbd8 	bl	8007bca <HAL_TIMEx_MasterConfigSynchronization>
 800541a:	2800      	cmp	r0, #0
 800541c:	d001      	beq.n	8005422 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800541e:	f7ff fc51 	bl	8004cc4 <Error_Handler>
  }

}
 8005422:	b006      	add	sp, #24
 8005424:	bd10      	pop	{r4, pc}
 8005426:	46c0      	nop			; (mov r8, r8)
 8005428:	20000764 	.word	0x20000764

0800542c <MX_TIM21_Init>:
/* TIM21 init function */
void MX_TIM21_Init(void)
{
 800542c:	b510      	push	{r4, lr}
 800542e:	b086      	sub	sp, #24
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005430:	2210      	movs	r2, #16
 8005432:	2100      	movs	r1, #0
 8005434:	a802      	add	r0, sp, #8
 8005436:	f004 f898 	bl	800956a <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800543a:	2208      	movs	r2, #8
 800543c:	2100      	movs	r1, #0
 800543e:	4668      	mov	r0, sp
 8005440:	f004 f893 	bl	800956a <memset>

  htim21.Instance = TIM21;
 8005444:	4c14      	ldr	r4, [pc, #80]	; (8005498 <MX_TIM21_Init+0x6c>)
 8005446:	4b15      	ldr	r3, [pc, #84]	; (800549c <MX_TIM21_Init+0x70>)
  htim21.Init.Prescaler = 16000-1;
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
  htim21.Init.Period = 50-1;
 8005448:	2231      	movs	r2, #49	; 0x31
  htim21.Instance = TIM21;
 800544a:	6023      	str	r3, [r4, #0]
  htim21.Init.Prescaler = 16000-1;
 800544c:	4b14      	ldr	r3, [pc, #80]	; (80054a0 <MX_TIM21_Init+0x74>)
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 800544e:	0020      	movs	r0, r4
  htim21.Init.Prescaler = 16000-1;
 8005450:	6063      	str	r3, [r4, #4]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005452:	2300      	movs	r3, #0
  htim21.Init.Period = 50-1;
 8005454:	60e2      	str	r2, [r4, #12]
  htim21.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005456:	60a3      	str	r3, [r4, #8]
  htim21.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005458:	6123      	str	r3, [r4, #16]
  htim21.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800545a:	6163      	str	r3, [r4, #20]
  if (HAL_TIM_Base_Init(&htim21) != HAL_OK)
 800545c:	f002 fa26 	bl	80078ac <HAL_TIM_Base_Init>
 8005460:	2800      	cmp	r0, #0
 8005462:	d001      	beq.n	8005468 <MX_TIM21_Init+0x3c>
  {
    Error_Handler();
 8005464:	f7ff fc2e 	bl	8004cc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005468:	2380      	movs	r3, #128	; 0x80
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800546a:	0020      	movs	r0, r4
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800546c:	015b      	lsls	r3, r3, #5
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 800546e:	a902      	add	r1, sp, #8
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005470:	9302      	str	r3, [sp, #8]
  if (HAL_TIM_ConfigClockSource(&htim21, &sClockSourceConfig) != HAL_OK)
 8005472:	f002 fa7d 	bl	8007970 <HAL_TIM_ConfigClockSource>
 8005476:	2800      	cmp	r0, #0
 8005478:	d001      	beq.n	800547e <MX_TIM21_Init+0x52>
  {
    Error_Handler();
 800547a:	f7ff fc23 	bl	8004cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800547e:	2300      	movs	r3, #0
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8005480:	4669      	mov	r1, sp
 8005482:	0020      	movs	r0, r4
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005484:	9300      	str	r3, [sp, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005486:	9301      	str	r3, [sp, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim21, &sMasterConfig) != HAL_OK)
 8005488:	f002 fb9f 	bl	8007bca <HAL_TIMEx_MasterConfigSynchronization>
 800548c:	2800      	cmp	r0, #0
 800548e:	d001      	beq.n	8005494 <MX_TIM21_Init+0x68>
  {
    Error_Handler();
 8005490:	f7ff fc18 	bl	8004cc4 <Error_Handler>
  }

}
 8005494:	b006      	add	sp, #24
 8005496:	bd10      	pop	{r4, pc}
 8005498:	200007a4 	.word	0x200007a4
 800549c:	40010800 	.word	0x40010800
 80054a0:	00003e7f 	.word	0x00003e7f

080054a4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{

  if(tim_baseHandle->Instance==TIM2)
 80054a4:	2280      	movs	r2, #128	; 0x80
 80054a6:	6803      	ldr	r3, [r0, #0]
{
 80054a8:	b510      	push	{r4, lr}
  if(tim_baseHandle->Instance==TIM2)
 80054aa:	05d2      	lsls	r2, r2, #23
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d105      	bne.n	80054bc <HAL_TIM_Base_MspInit+0x18>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80054b0:	2301      	movs	r3, #1
 80054b2:	4a0b      	ldr	r2, [pc, #44]	; (80054e0 <HAL_TIM_Base_MspInit+0x3c>)
 80054b4:	6b91      	ldr	r1, [r2, #56]	; 0x38
 80054b6:	430b      	orrs	r3, r1
 80054b8:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
  /* USER CODE BEGIN TIM21_MspInit 1 */

  /* USER CODE END TIM21_MspInit 1 */
  }
}
 80054ba:	bd10      	pop	{r4, pc}
  else if(tim_baseHandle->Instance==TIM21)
 80054bc:	4a09      	ldr	r2, [pc, #36]	; (80054e4 <HAL_TIM_Base_MspInit+0x40>)
 80054be:	4293      	cmp	r3, r2
 80054c0:	d1fb      	bne.n	80054ba <HAL_TIM_Base_MspInit+0x16>
    __HAL_RCC_TIM21_CLK_ENABLE();
 80054c2:	2304      	movs	r3, #4
 80054c4:	4a06      	ldr	r2, [pc, #24]	; (80054e0 <HAL_TIM_Base_MspInit+0x3c>)
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80054c6:	2014      	movs	r0, #20
    __HAL_RCC_TIM21_CLK_ENABLE();
 80054c8:	6b51      	ldr	r1, [r2, #52]	; 0x34
 80054ca:	430b      	orrs	r3, r1
 80054cc:	6353      	str	r3, [r2, #52]	; 0x34
    HAL_NVIC_SetPriority(TIM21_IRQn, 0, 0);
 80054ce:	2200      	movs	r2, #0
 80054d0:	0011      	movs	r1, r2
 80054d2:	f000 fe23 	bl	800611c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM21_IRQn);
 80054d6:	2014      	movs	r0, #20
 80054d8:	f000 fe4a 	bl	8006170 <HAL_NVIC_EnableIRQ>
}
 80054dc:	e7ed      	b.n	80054ba <HAL_TIM_Base_MspInit+0x16>
 80054de:	46c0      	nop			; (mov r8, r8)
 80054e0:	40021000 	.word	0x40021000
 80054e4:	40010800 	.word	0x40010800

080054e8 <SdkEvalTimersFindFactors>:
 * @param  pnPrescaler prescaler factor.
 * @param  pnCounter period factor.
 * @retval None.
 */
void SdkEvalTimersFindFactors(uint32_t lCycles, uint16_t *pnPrescaler, uint16_t *pnCounter)
{
 80054e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80054ea:	0006      	movs	r6, r0
 80054ec:	b085      	sub	sp, #20
 80054ee:	000c      	movs	r4, r1
	uint16_t b0;
	uint16_t a0;
	long err, err_min=lCycles;

	*pnPrescaler = a0 = ((lCycles-1)/0xffff) + 1;
 80054f0:	3801      	subs	r0, #1
 80054f2:	4922      	ldr	r1, [pc, #136]	; (800557c <SdkEvalTimersFindFactors+0x94>)
{
 80054f4:	0017      	movs	r7, r2
	*pnPrescaler = a0 = ((lCycles-1)/0xffff) + 1;
 80054f6:	f7fc ffdb 	bl	80024b0 <__udivsi3>
 80054fa:	3001      	adds	r0, #1
 80054fc:	b285      	uxth	r5, r0
	*pnCounter = b0 = lCycles / *pnPrescaler;
 80054fe:	0029      	movs	r1, r5
 8005500:	0030      	movs	r0, r6
	*pnPrescaler = a0 = ((lCycles-1)/0xffff) + 1;
 8005502:	8025      	strh	r5, [r4, #0]
	*pnCounter = b0 = lCycles / *pnPrescaler;
 8005504:	f7fc ffd4 	bl	80024b0 <__udivsi3>
 8005508:	b283      	uxth	r3, r0
 800550a:	9301      	str	r3, [sp, #4]
 800550c:	803b      	strh	r3, [r7, #0]
	long err, err_min=lCycles;
 800550e:	9602      	str	r6, [sp, #8]

	for (; *pnPrescaler < 0xffff-1; (*pnPrescaler)++) {
 8005510:	8821      	ldrh	r1, [r4, #0]
 8005512:	4b1b      	ldr	r3, [pc, #108]	; (8005580 <SdkEvalTimersFindFactors+0x98>)
 8005514:	4299      	cmp	r1, r3
 8005516:	d904      	bls.n	8005522 <SdkEvalTimersFindFactors+0x3a>
			if (err == 0) break;
		}
	}

	*pnPrescaler = a0;
	*pnCounter = b0;
 8005518:	9b01      	ldr	r3, [sp, #4]
	*pnPrescaler = a0;
 800551a:	8025      	strh	r5, [r4, #0]
	*pnCounter = b0;
 800551c:	803b      	strh	r3, [r7, #0]
}
 800551e:	b005      	add	sp, #20
 8005520:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*pnCounter = lCycles / *pnPrescaler;
 8005522:	0030      	movs	r0, r6
 8005524:	f7fc ffc4 	bl	80024b0 <__udivsi3>
 8005528:	b283      	uxth	r3, r0
 800552a:	803b      	strh	r3, [r7, #0]
		err = (long)*pnPrescaler * (long)*pnCounter - (long)lCycles;
 800552c:	8821      	ldrh	r1, [r4, #0]
		*pnCounter = lCycles / *pnPrescaler;
 800552e:	469c      	mov	ip, r3
		err = (long)*pnPrescaler * (long)*pnCounter - (long)lCycles;
 8005530:	434b      	muls	r3, r1
 8005532:	1b98      	subs	r0, r3, r6
		if (ABS(err) > (*pnPrescaler / 2)) {
 8005534:	17c2      	asrs	r2, r0, #31
 8005536:	1883      	adds	r3, r0, r2
 8005538:	4053      	eors	r3, r2
 800553a:	0849      	lsrs	r1, r1, #1
 800553c:	428b      	cmp	r3, r1
 800553e:	dd06      	ble.n	800554e <SdkEvalTimersFindFactors+0x66>
			(*pnCounter)++;
 8005540:	4662      	mov	r2, ip
 8005542:	3201      	adds	r2, #1
 8005544:	b290      	uxth	r0, r2
 8005546:	8038      	strh	r0, [r7, #0]
			err = (long)*pnPrescaler * (long)*pnCounter - (long)lCycles;
 8005548:	8823      	ldrh	r3, [r4, #0]
 800554a:	4358      	muls	r0, r3
 800554c:	1b80      	subs	r0, r0, r6
		if (ABS(err) < ABS(err_min)) {
 800554e:	17c1      	asrs	r1, r0, #31
 8005550:	1842      	adds	r2, r0, r1
 8005552:	404a      	eors	r2, r1
 8005554:	9902      	ldr	r1, [sp, #8]
 8005556:	9203      	str	r2, [sp, #12]
 8005558:	17ca      	asrs	r2, r1, #31
 800555a:	1889      	adds	r1, r1, r2
 800555c:	4051      	eors	r1, r2
 800555e:	9a03      	ldr	r2, [sp, #12]
 8005560:	8823      	ldrh	r3, [r4, #0]
 8005562:	428a      	cmp	r2, r1
 8005564:	da08      	bge.n	8005578 <SdkEvalTimersFindFactors+0x90>
			b0 = *pnCounter;
 8005566:	883a      	ldrh	r2, [r7, #0]
 8005568:	001d      	movs	r5, r3
 800556a:	9201      	str	r2, [sp, #4]
			if (err == 0) break;
 800556c:	2800      	cmp	r0, #0
 800556e:	d0d3      	beq.n	8005518 <SdkEvalTimersFindFactors+0x30>
	for (; *pnPrescaler < 0xffff-1; (*pnPrescaler)++) {
 8005570:	3301      	adds	r3, #1
 8005572:	8023      	strh	r3, [r4, #0]
 8005574:	9002      	str	r0, [sp, #8]
 8005576:	e7cb      	b.n	8005510 <SdkEvalTimersFindFactors+0x28>
 8005578:	9802      	ldr	r0, [sp, #8]
 800557a:	e7f9      	b.n	8005570 <SdkEvalTimersFindFactors+0x88>
 800557c:	0000ffff 	.word	0x0000ffff
 8005580:	0000fffd 	.word	0x0000fffd

08005584 <SdkEvalTimersTimConfig>:
 * @param  nPrescaler prescaler factor.
 * @param  nPeriod period factor.
 * @retval None.
 */
void SdkEvalTimersTimConfig(TIM_HandleTypeDef* TIM_TimeBaseStructure, uint16_t nPrescaler, uint16_t nPeriod)
{
 8005584:	b570      	push	{r4, r5, r6, lr}
	TIM_TypeDef *xTim=TIM_TimeBaseStructure->Instance;
 8005586:	6805      	ldr	r5, [r0, #0]
{
 8005588:	0004      	movs	r4, r0

	/* disable the timer */
	__HAL_TIM_DISABLE(TIM_TimeBaseStructure);
 800558a:	4b16      	ldr	r3, [pc, #88]	; (80055e4 <SdkEvalTimersTimConfig+0x60>)
 800558c:	6a28      	ldr	r0, [r5, #32]
 800558e:	4218      	tst	r0, r3
 8005590:	d103      	bne.n	800559a <SdkEvalTimersTimConfig+0x16>
 8005592:	2001      	movs	r0, #1
 8005594:	682b      	ldr	r3, [r5, #0]
 8005596:	4383      	bics	r3, r0
 8005598:	602b      	str	r3, [r5, #0]

	/* Configure the timer in update mode */
	__HAL_TIM_DISABLE_IT(TIM_TimeBaseStructure, TIM_IT_UPDATE);
 800559a:	2301      	movs	r3, #1
 800559c:	68e8      	ldr	r0, [r5, #12]
 800559e:	4398      	bics	r0, r3
 80055a0:	60e8      	str	r0, [r5, #12]

	/* put the timer clock on */
	if(xTim == TIM2) {
 80055a2:	2080      	movs	r0, #128	; 0x80
 80055a4:	05c0      	lsls	r0, r0, #23
 80055a6:	4285      	cmp	r5, r0
 80055a8:	d103      	bne.n	80055b2 <SdkEvalTimersTimConfig+0x2e>
		__HAL_RCC_TIM2_CLK_ENABLE();
 80055aa:	480f      	ldr	r0, [pc, #60]	; (80055e8 <SdkEvalTimersTimConfig+0x64>)
 80055ac:	6b86      	ldr	r6, [r0, #56]	; 0x38
 80055ae:	4333      	orrs	r3, r6
 80055b0:	6383      	str	r3, [r0, #56]	; 0x38
	}

	/* Time base configuration */
	TIM_TimeBaseStructure->Init.Prescaler         = nPrescaler;
	TIM_TimeBaseStructure->Init.Period            = nPeriod;
	TIM_TimeBaseStructure->Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 80055b2:	2600      	movs	r6, #0
	TIM_TimeBaseStructure->Init.CounterMode       = TIM_COUNTERMODE_UP;

	/* Init the time base structure */
	HAL_TIM_Base_Init(TIM_TimeBaseStructure);
 80055b4:	0020      	movs	r0, r4
	TIM_TimeBaseStructure->Init.Prescaler         = nPrescaler;
 80055b6:	6061      	str	r1, [r4, #4]
	TIM_TimeBaseStructure->Init.Period            = nPeriod;
 80055b8:	60e2      	str	r2, [r4, #12]
	TIM_TimeBaseStructure->Init.ClockDivision     = TIM_CLOCKDIVISION_DIV1;
 80055ba:	6126      	str	r6, [r4, #16]
	TIM_TimeBaseStructure->Init.CounterMode       = TIM_COUNTERMODE_UP;
 80055bc:	60a6      	str	r6, [r4, #8]
	HAL_TIM_Base_Init(TIM_TimeBaseStructure);
 80055be:	f002 f975 	bl	80078ac <HAL_TIM_Base_Init>


	/* NVIC configuration */
	if(xTim == TIM2) {
 80055c2:	2380      	movs	r3, #128	; 0x80
 80055c4:	05db      	lsls	r3, r3, #23
 80055c6:	429d      	cmp	r5, r3
 80055c8:	d107      	bne.n	80055da <SdkEvalTimersTimConfig+0x56>
		HAL_NVIC_SetPriority(TIM2_IRQn, 1, 0);
 80055ca:	200f      	movs	r0, #15
 80055cc:	0032      	movs	r2, r6
 80055ce:	2101      	movs	r1, #1
 80055d0:	f000 fda4 	bl	800611c <HAL_NVIC_SetPriority>
		HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80055d4:	200f      	movs	r0, #15
 80055d6:	f000 fdcb 	bl	8006170 <HAL_NVIC_EnableIRQ>
	}

	/* Clear the timer pending bit */
	__HAL_TIM_CLEAR_FLAG(TIM_TimeBaseStructure, TIM_FLAG_UPDATE);
 80055da:	2202      	movs	r2, #2
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	4252      	negs	r2, r2
 80055e0:	611a      	str	r2, [r3, #16]
}
 80055e2:	bd70      	pop	{r4, r5, r6, pc}
 80055e4:	00001111 	.word	0x00001111
 80055e8:	40021000 	.word	0x40021000

080055ec <ST_MCU_API_TimerCalibration>:

void ST_MCU_API_TimerCalibration(uint16_t duration_ms)
{
 80055ec:	b570      	push	{r4, r5, r6, lr}
 80055ee:	b090      	sub	sp, #64	; 0x40
	TIM_HandleTypeDef  Tim2_Handler={.Instance=TIM2};
 80055f0:	2238      	movs	r2, #56	; 0x38
 80055f2:	2100      	movs	r1, #0
{
 80055f4:	0004      	movs	r4, r0
	TIM_HandleTypeDef  Tim2_Handler={.Instance=TIM2};
 80055f6:	a802      	add	r0, sp, #8
 80055f8:	f003 ffb7 	bl	800956a <memset>
 80055fc:	2380      	movs	r3, #128	; 0x80
	}
}

/* Set flags */
void setNotifyEndFlag(uint8_t notifyEnd) {
	notify_end = notifyEnd;
 80055fe:	2501      	movs	r5, #1
	TIM_HandleTypeDef  Tim2_Handler={.Instance=TIM2};
 8005600:	05db      	lsls	r3, r3, #23
 8005602:	9301      	str	r3, [sp, #4]
	Configure_RTC_Clock();
 8005604:	f7ff fbc0 	bl	8004d88 <Configure_RTC_Clock>
	notify_end = notifyEnd;
 8005608:	4b22      	ldr	r3, [pc, #136]	; (8005694 <ST_MCU_API_TimerCalibration+0xa8>)
 800560a:	701d      	strb	r5, [r3, #0]
	rtcHandler = getRtcHandler();
 800560c:	f7ff fc20 	bl	8004e50 <getRtcHandler>
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(rtcHandler, RTC_FLAG_WUTF);
 8005610:	6801      	ldr	r1, [r0, #0]
 8005612:	4b21      	ldr	r3, [pc, #132]	; (8005698 <ST_MCU_API_TimerCalibration+0xac>)
 8005614:	68ca      	ldr	r2, [r1, #12]
	rtcHandler = getRtcHandler();
 8005616:	4e21      	ldr	r6, [pc, #132]	; (800569c <ST_MCU_API_TimerCalibration+0xb0>)
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(rtcHandler, RTC_FLAG_WUTF);
 8005618:	b2d2      	uxtb	r2, r2
 800561a:	4313      	orrs	r3, r2
	__HAL_RTC_CLEAR_FLAG(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800561c:	2280      	movs	r2, #128	; 0x80
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(rtcHandler, RTC_FLAG_WUTF);
 800561e:	60cb      	str	r3, [r1, #12]
	__HAL_RTC_CLEAR_FLAG(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8005620:	4b1f      	ldr	r3, [pc, #124]	; (80056a0 <ST_MCU_API_TimerCalibration+0xb4>)
 8005622:	0352      	lsls	r2, r2, #13
	rtcHandler = getRtcHandler();
 8005624:	6030      	str	r0, [r6, #0]
	__HAL_RTC_CLEAR_FLAG(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8005626:	615a      	str	r2, [r3, #20]
	setNextRtcWakeUpFlag(0);
 8005628:	2000      	movs	r0, #0
 800562a:	f7ff fbe7 	bl	8004dfc <setNextRtcWakeUpFlag>
	SdkEvalTimersTimConfig(&Tim2_Handler,16000-1,65535-1);
 800562e:	491d      	ldr	r1, [pc, #116]	; (80056a4 <ST_MCU_API_TimerCalibration+0xb8>)
 8005630:	4a1d      	ldr	r2, [pc, #116]	; (80056a8 <ST_MCU_API_TimerCalibration+0xbc>)
 8005632:	a801      	add	r0, sp, #4
 8005634:	f7ff ffa6 	bl	8005584 <SdkEvalTimersTimConfig>
	__HAL_TIM_DISABLE_IT(&Tim2_Handler, TIM_IT_UPDATE);
 8005638:	9a01      	ldr	r2, [sp, #4]
	HAL_NVIC_DisableIRQ(TIM2_IRQn);
 800563a:	200f      	movs	r0, #15
	__HAL_TIM_DISABLE_IT(&Tim2_Handler, TIM_IT_UPDATE);
 800563c:	68d3      	ldr	r3, [r2, #12]
 800563e:	43ab      	bics	r3, r5
 8005640:	60d3      	str	r3, [r2, #12]
	HAL_NVIC_DisableIRQ(TIM2_IRQn);
 8005642:	f000 fd9f 	bl	8006184 <HAL_NVIC_DisableIRQ>
	HAL_TIM_Base_Start(&Tim2_Handler);
 8005646:	a801      	add	r0, sp, #4
 8005648:	f002 f94b 	bl	80078e2 <HAL_TIM_Base_Start>
	HAL_RTCEx_SetWakeUpTimer_IT(rtcHandler,((getRtcPrescFlag()*duration_ms)/1000),RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 800564c:	6835      	ldr	r5, [r6, #0]
 800564e:	f7ff fbf9 	bl	8004e44 <getRtcPrescFlag>
 8005652:	21fa      	movs	r1, #250	; 0xfa
 8005654:	4360      	muls	r0, r4
 8005656:	0089      	lsls	r1, r1, #2
 8005658:	f7fc ffb4 	bl	80025c4 <__divsi3>
 800565c:	2200      	movs	r2, #0
 800565e:	0001      	movs	r1, r0
 8005660:	0028      	movs	r0, r5
 8005662:	f001 fe47 	bl	80072f4 <HAL_RTCEx_SetWakeUpTimer_IT>
	while(!getRtcIrqFlag());
 8005666:	f7ff fbe1 	bl	8004e2c <getRtcIrqFlag>
 800566a:	2800      	cmp	r0, #0
 800566c:	d0fb      	beq.n	8005666 <ST_MCU_API_TimerCalibration+0x7a>
	c=Tim2_Handler.Instance->CNT;
 800566e:	9b01      	ldr	r3, [sp, #4]
	setRtcIrqFlag(0);
 8005670:	2000      	movs	r0, #0
	c=Tim2_Handler.Instance->CNT;
 8005672:	6a5d      	ldr	r5, [r3, #36]	; 0x24
	setRtcIrqFlag(0);
 8005674:	f7ff fbb6 	bl	8004de4 <setRtcIrqFlag>
	HAL_TIM_Base_Stop(&Tim2_Handler);
 8005678:	a801      	add	r0, sp, #4
 800567a:	f002 f945 	bl	8007908 <HAL_TIM_Base_Stop>
	rtc_presc=(duration_ms*getRtcPrescFlag())/c;
 800567e:	f7ff fbe1 	bl	8004e44 <getRtcPrescFlag>
 8005682:	b2a9      	uxth	r1, r5
 8005684:	4360      	muls	r0, r4
 8005686:	f7fc ff9d 	bl	80025c4 <__divsi3>
	setRtcPrescFlag(rtc_presc);
 800568a:	b280      	uxth	r0, r0
 800568c:	f7ff fbbc 	bl	8004e08 <setRtcPrescFlag>
}
 8005690:	b010      	add	sp, #64	; 0x40
 8005692:	bd70      	pop	{r4, r5, r6, pc}
 8005694:	200003e4 	.word	0x200003e4
 8005698:	fffffb7f 	.word	0xfffffb7f
 800569c:	200007a0 	.word	0x200007a0
 80056a0:	40010400 	.word	0x40010400
 80056a4:	00003e7f 	.word	0x00003e7f
 80056a8:	0000fffe 	.word	0x0000fffe

080056ac <MCU_API_timer_start_carrier_sense>:
{
 80056ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	carrier_sense_tim_started=1;
 80056ae:	2601      	movs	r6, #1
 80056b0:	4b2d      	ldr	r3, [pc, #180]	; (8005768 <MCU_API_timer_start_carrier_sense+0xbc>)
{
 80056b2:	0005      	movs	r5, r0
	carrier_sense_tim_started=1;
 80056b4:	701e      	strb	r6, [r3, #0]
	rtcHandler = getRtcHandler(); 
 80056b6:	f7ff fbcb 	bl	8004e50 <getRtcHandler>
 80056ba:	4f2c      	ldr	r7, [pc, #176]	; (800576c <MCU_API_timer_start_carrier_sense+0xc0>)
 80056bc:	6038      	str	r0, [r7, #0]
	if(getRtcInUseFlag())
 80056be:	f7ff fbbb 	bl	8004e38 <getRtcInUseFlag>
 80056c2:	1e04      	subs	r4, r0, #0
 80056c4:	d018      	beq.n	80056f8 <MCU_API_timer_start_carrier_sense+0x4c>
		SdkEvalTimersFindFactors(n,&a,&b);
 80056c6:	466b      	mov	r3, sp
		uint32_t n = ((uint32_t)time_duration_in_ms*16000);
 80056c8:	20fa      	movs	r0, #250	; 0xfa
		SdkEvalTimersFindFactors(n,&a,&b);
 80056ca:	1d9f      	adds	r7, r3, #6
 80056cc:	ac01      	add	r4, sp, #4
		uint32_t n = ((uint32_t)time_duration_in_ms*16000);
 80056ce:	0180      	lsls	r0, r0, #6
		SdkEvalTimersFindFactors(n,&a,&b);
 80056d0:	0021      	movs	r1, r4
 80056d2:	003a      	movs	r2, r7
		uint32_t n = ((uint32_t)time_duration_in_ms*16000);
 80056d4:	4368      	muls	r0, r5
		SdkEvalTimersFindFactors(n,&a,&b);
 80056d6:	f7ff ff07 	bl	80054e8 <SdkEvalTimersFindFactors>
		SdkEvalTimersTimConfig(&Tim2_Handler,a-1,b-1);
 80056da:	8821      	ldrh	r1, [r4, #0]
 80056dc:	883a      	ldrh	r2, [r7, #0]
 80056de:	4c24      	ldr	r4, [pc, #144]	; (8005770 <MCU_API_timer_start_carrier_sense+0xc4>)
 80056e0:	3a01      	subs	r2, #1
 80056e2:	3901      	subs	r1, #1
 80056e4:	0020      	movs	r0, r4
 80056e6:	b292      	uxth	r2, r2
 80056e8:	b289      	uxth	r1, r1
 80056ea:	f7ff ff4b 	bl	8005584 <SdkEvalTimersTimConfig>
		SdkEvalTimersState(&Tim2_Handler, ENABLE);
 80056ee:	0020      	movs	r0, r4
 80056f0:	f002 f91e 	bl	8007930 <HAL_TIM_Base_Start_IT>
}
 80056f4:	2000      	movs	r0, #0
 80056f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		Configure_RTC_Clock();
 80056f8:	f7ff fb46 	bl	8004d88 <Configure_RTC_Clock>
	notify_end = notifyEnd;
 80056fc:	4b1d      	ldr	r3, [pc, #116]	; (8005774 <MCU_API_timer_start_carrier_sense+0xc8>)
		setRtcInUseFlag(1);
 80056fe:	0030      	movs	r0, r6
	notify_end = notifyEnd;
 8005700:	701e      	strb	r6, [r3, #0]
		__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(rtcHandler, RTC_FLAG_WUTF);
 8005702:	683b      	ldr	r3, [r7, #0]
 8005704:	6819      	ldr	r1, [r3, #0]
 8005706:	4b1c      	ldr	r3, [pc, #112]	; (8005778 <MCU_API_timer_start_carrier_sense+0xcc>)
 8005708:	68ca      	ldr	r2, [r1, #12]
 800570a:	b2d2      	uxtb	r2, r2
 800570c:	4313      	orrs	r3, r2
		__HAL_RTC_CLEAR_FLAG(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 800570e:	2280      	movs	r2, #128	; 0x80
		__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(rtcHandler, RTC_FLAG_WUTF);
 8005710:	60cb      	str	r3, [r1, #12]
		__HAL_RTC_CLEAR_FLAG(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 8005712:	4b1a      	ldr	r3, [pc, #104]	; (800577c <MCU_API_timer_start_carrier_sense+0xd0>)
 8005714:	0352      	lsls	r2, r2, #13
 8005716:	615a      	str	r2, [r3, #20]
}

void setNIntermediateTimIrqFlag(uint8_t nIntermediateTimeIrq) {
	n_intermediate_tim_irq = nIntermediateTimeIrq;
 8005718:	4b19      	ldr	r3, [pc, #100]	; (8005780 <MCU_API_timer_start_carrier_sense+0xd4>)
 800571a:	601c      	str	r4, [r3, #0]
		setRtcInUseFlag(1);
 800571c:	f7ff fb5c 	bl	8004dd8 <setRtcInUseFlag>
		setRtcInUseForCsFlag(1);
 8005720:	0030      	movs	r0, r6
 8005722:	f7ff fb65 	bl	8004df0 <setRtcInUseForCsFlag>
		rtc_wup_tick = ((time_duration_in_ms*getRtcPrescFlag())/1000);
 8005726:	f7ff fb8d 	bl	8004e44 <getRtcPrescFlag>
 800572a:	21fa      	movs	r1, #250	; 0xfa
 800572c:	4368      	muls	r0, r5
 800572e:	0089      	lsls	r1, r1, #2
 8005730:	0006      	movs	r6, r0
 8005732:	f7fc ff47 	bl	80025c4 <__divsi3>
		if(rtc_wup_tick>65535) /* Mapped register is 16bit */
 8005736:	23fa      	movs	r3, #250	; 0xfa
		rtc_wup_tick = ((time_duration_in_ms*getRtcPrescFlag())/1000);
 8005738:	0005      	movs	r5, r0
		if(rtc_wup_tick>65535) /* Mapped register is 16bit */
 800573a:	049b      	lsls	r3, r3, #18
 800573c:	429e      	cmp	r6, r3
 800573e:	db02      	blt.n	8005746 <MCU_API_timer_start_carrier_sense+0x9a>
			next_rtc_wakeup_tick=rtc_wup_tick-65535;
 8005740:	4b10      	ldr	r3, [pc, #64]	; (8005784 <MCU_API_timer_start_carrier_sense+0xd8>)
			rtc_wup_tick=65535;
 8005742:	4d11      	ldr	r5, [pc, #68]	; (8005788 <MCU_API_timer_start_carrier_sense+0xdc>)
			next_rtc_wakeup_tick=rtc_wup_tick-65535;
 8005744:	18c4      	adds	r4, r0, r3
		next_rtc_wakeup = ((next_rtc_wakeup_tick*1000)/(getRtcPrescFlag()));
 8005746:	f7ff fb7d 	bl	8004e44 <getRtcPrescFlag>
 800574a:	0001      	movs	r1, r0
 800574c:	20fa      	movs	r0, #250	; 0xfa
 800574e:	0080      	lsls	r0, r0, #2
 8005750:	4360      	muls	r0, r4
 8005752:	f7fc fead 	bl	80024b0 <__udivsi3>
		setNextRtcWakeUpFlag(next_rtc_wakeup);
 8005756:	f7ff fb51 	bl	8004dfc <setNextRtcWakeUpFlag>
		HAL_RTCEx_SetWakeUpTimer_IT(rtcHandler, rtc_wup_tick, RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 800575a:	2200      	movs	r2, #0
 800575c:	0029      	movs	r1, r5
 800575e:	6838      	ldr	r0, [r7, #0]
 8005760:	f001 fdc8 	bl	80072f4 <HAL_RTCEx_SetWakeUpTimer_IT>
 8005764:	e7c6      	b.n	80056f4 <MCU_API_timer_start_carrier_sense+0x48>
 8005766:	46c0      	nop			; (mov r8, r8)
 8005768:	200003dc 	.word	0x200003dc
 800576c:	200007a0 	.word	0x200007a0
 8005770:	20000088 	.word	0x20000088
 8005774:	200003e4 	.word	0x200003e4
 8005778:	fffffb7f 	.word	0xfffffb7f
 800577c:	40010400 	.word	0x40010400
 8005780:	200003e0 	.word	0x200003e0
 8005784:	ffff0001 	.word	0xffff0001
 8005788:	0000ffff 	.word	0x0000ffff

0800578c <MCU_API_timer_start>:
{
 800578c:	b570      	push	{r4, r5, r6, lr}
 800578e:	0004      	movs	r4, r0
	ST_RF_API_Timer_CB(TIMER_START); /* To notify the rf_api layer */
 8005790:	2000      	movs	r0, #0
 8005792:	f003 fbb7 	bl	8008f04 <ST_RF_API_Timer_CB>
	setRtcIrqFlag(0);
 8005796:	2000      	movs	r0, #0
 8005798:	f7ff fb24 	bl	8004de4 <setRtcIrqFlag>
	rtcHandler = getRtcHandler();
 800579c:	f7ff fb58 	bl	8004e50 <getRtcHandler>
 80057a0:	4d19      	ldr	r5, [pc, #100]	; (8005808 <MCU_API_timer_start+0x7c>)
 80057a2:	6028      	str	r0, [r5, #0]
	if (time_duration_in_s == DECAY_LEVEL)
 80057a4:	2c22      	cmp	r4, #34	; 0x22
 80057a6:	d100      	bne.n	80057aa <MCU_API_timer_start+0x1e>
		time_duration_in_s += 2; /* In order to make RX-PROTOCOL End of Listening Window working */
 80057a8:	3402      	adds	r4, #2
	Configure_RTC_Clock();
 80057aa:	f7ff faed 	bl	8004d88 <Configure_RTC_Clock>
	notify_end = notifyEnd;
 80057ae:	2001      	movs	r0, #1
 80057b0:	4b16      	ldr	r3, [pc, #88]	; (800580c <MCU_API_timer_start+0x80>)
	n_intermediate_tim_irq = nIntermediateTimeIrq;
 80057b2:	2600      	movs	r6, #0
	notify_end = notifyEnd;
 80057b4:	7018      	strb	r0, [r3, #0]
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(rtcHandler, RTC_FLAG_WUTF);
 80057b6:	682b      	ldr	r3, [r5, #0]
 80057b8:	6819      	ldr	r1, [r3, #0]
 80057ba:	4b15      	ldr	r3, [pc, #84]	; (8005810 <MCU_API_timer_start+0x84>)
 80057bc:	68ca      	ldr	r2, [r1, #12]
 80057be:	b2d2      	uxtb	r2, r2
 80057c0:	4313      	orrs	r3, r2
	__HAL_RTC_CLEAR_FLAG(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80057c2:	2280      	movs	r2, #128	; 0x80
	__HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(rtcHandler, RTC_FLAG_WUTF);
 80057c4:	60cb      	str	r3, [r1, #12]
	__HAL_RTC_CLEAR_FLAG(RTC_EXTI_LINE_WAKEUPTIMER_EVENT);
 80057c6:	4b13      	ldr	r3, [pc, #76]	; (8005814 <MCU_API_timer_start+0x88>)
 80057c8:	0352      	lsls	r2, r2, #13
 80057ca:	615a      	str	r2, [r3, #20]
	n_intermediate_tim_irq = nIntermediateTimeIrq;
 80057cc:	4b12      	ldr	r3, [pc, #72]	; (8005818 <MCU_API_timer_start+0x8c>)
 80057ce:	601e      	str	r6, [r3, #0]
	setRtcInUseFlag(1);
 80057d0:	f7ff fb02 	bl	8004dd8 <setRtcInUseFlag>
	rtc_wup_tick = (time_duration_in_s)*getRtcPrescFlag(); //(time_duration_in_s)*rtc_presc;
 80057d4:	f7ff fb36 	bl	8004e44 <getRtcPrescFlag>
 80057d8:	0021      	movs	r1, r4
	if(rtc_wup_tick>65535)
 80057da:	2380      	movs	r3, #128	; 0x80
	rtc_wup_tick = (time_duration_in_s)*getRtcPrescFlag(); //(time_duration_in_s)*rtc_presc;
 80057dc:	4341      	muls	r1, r0
	if(rtc_wup_tick>65535)
 80057de:	025b      	lsls	r3, r3, #9
 80057e0:	4299      	cmp	r1, r3
 80057e2:	d302      	bcc.n	80057ea <MCU_API_timer_start+0x5e>
		next_rtc_wakeup_tick=(rtc_wup_tick)-65535;
 80057e4:	4b0d      	ldr	r3, [pc, #52]	; (800581c <MCU_API_timer_start+0x90>)
 80057e6:	18ce      	adds	r6, r1, r3
		rtc_wup_tick=65535;
 80057e8:	490d      	ldr	r1, [pc, #52]	; (8005820 <MCU_API_timer_start+0x94>)
	HAL_RTCEx_SetWakeUpTimer_IT(rtcHandler,rtc_wup_tick,RTC_WAKEUPCLOCK_RTCCLK_DIV16);
 80057ea:	2200      	movs	r2, #0
 80057ec:	6828      	ldr	r0, [r5, #0]
 80057ee:	f001 fd81 	bl	80072f4 <HAL_RTCEx_SetWakeUpTimer_IT>
	next_rtc_wakeup=(next_rtc_wakeup_tick/getRtcPrescFlag());
 80057f2:	f7ff fb27 	bl	8004e44 <getRtcPrescFlag>
 80057f6:	0001      	movs	r1, r0
 80057f8:	0030      	movs	r0, r6
 80057fa:	f7fc fe59 	bl	80024b0 <__udivsi3>
	setNextRtcWakeUpFlag(next_rtc_wakeup);
 80057fe:	f7ff fafd 	bl	8004dfc <setNextRtcWakeUpFlag>
}
 8005802:	2000      	movs	r0, #0
 8005804:	bd70      	pop	{r4, r5, r6, pc}
 8005806:	46c0      	nop			; (mov r8, r8)
 8005808:	200007a0 	.word	0x200007a0
 800580c:	200003e4 	.word	0x200003e4
 8005810:	fffffb7f 	.word	0xfffffb7f
 8005814:	40010400 	.word	0x40010400
 8005818:	200003e0 	.word	0x200003e0
 800581c:	ffff0001 	.word	0xffff0001
 8005820:	0000ffff 	.word	0x0000ffff

08005824 <MCU_API_timer_stop>:
{
 8005824:	b510      	push	{r4, lr}
	rtcHandler = getRtcHandler();
 8005826:	f7ff fb13 	bl	8004e50 <getRtcHandler>
 800582a:	4b04      	ldr	r3, [pc, #16]	; (800583c <MCU_API_timer_stop+0x18>)
 800582c:	6018      	str	r0, [r3, #0]
	HAL_RTCEx_DeactivateWakeUpTimer(rtcHandler);
 800582e:	f001 fddf 	bl	80073f0 <HAL_RTCEx_DeactivateWakeUpTimer>
	setRtcInUseFlag(0);
 8005832:	2000      	movs	r0, #0
 8005834:	f7ff fad0 	bl	8004dd8 <setRtcInUseFlag>
}
 8005838:	2000      	movs	r0, #0
 800583a:	bd10      	pop	{r4, pc}
 800583c:	200007a0 	.word	0x200007a0

08005840 <MCU_API_timer_stop_carrier_sense>:
{
 8005840:	b510      	push	{r4, lr}
	rtcHandler = getRtcHandler();
 8005842:	f7ff fb05 	bl	8004e50 <getRtcHandler>
 8005846:	4c0b      	ldr	r4, [pc, #44]	; (8005874 <MCU_API_timer_stop_carrier_sense+0x34>)
 8005848:	6020      	str	r0, [r4, #0]
	if(getRtcInUseForCsFlag())
 800584a:	f7ff fae9 	bl	8004e20 <getRtcInUseForCsFlag>
 800584e:	2800      	cmp	r0, #0
 8005850:	d00c      	beq.n	800586c <MCU_API_timer_stop_carrier_sense+0x2c>
		HAL_RTCEx_DeactivateWakeUpTimer(rtcHandler);
 8005852:	6820      	ldr	r0, [r4, #0]
 8005854:	f001 fdcc 	bl	80073f0 <HAL_RTCEx_DeactivateWakeUpTimer>
		setRtcInUseFlag(0);;
 8005858:	2000      	movs	r0, #0
 800585a:	f7ff fabd 	bl	8004dd8 <setRtcInUseFlag>
		setRtcInUseForCsFlag(0);
 800585e:	2000      	movs	r0, #0
 8005860:	f7ff fac6 	bl	8004df0 <setRtcInUseForCsFlag>
	carrier_sense_tim_started = 0;
 8005864:	2000      	movs	r0, #0
 8005866:	4b04      	ldr	r3, [pc, #16]	; (8005878 <MCU_API_timer_stop_carrier_sense+0x38>)
 8005868:	7018      	strb	r0, [r3, #0]
}
 800586a:	bd10      	pop	{r4, pc}
		SdkEvalTimersState(&Tim2_Handler, DISABLE);
 800586c:	4803      	ldr	r0, [pc, #12]	; (800587c <MCU_API_timer_stop_carrier_sense+0x3c>)
 800586e:	f002 f86f 	bl	8007950 <HAL_TIM_Base_Stop_IT>
 8005872:	e7f7      	b.n	8005864 <MCU_API_timer_stop_carrier_sense+0x24>
 8005874:	200007a0 	.word	0x200007a0
 8005878:	200003dc 	.word	0x200003dc
 800587c:	20000088 	.word	0x20000088

08005880 <ST_MCU_API_WaitForInterrupt>:
{
 8005880:	b510      	push	{r4, lr}
	if(getS2lpIrqRaisedFlag())
 8005882:	f7ff f8af 	bl	80049e4 <getS2lpIrqRaisedFlag>
 8005886:	2800      	cmp	r0, #0
 8005888:	d004      	beq.n	8005894 <ST_MCU_API_WaitForInterrupt+0x14>
		ST_RF_API_S2LP_IRQ_CB();
 800588a:	f003 fd99 	bl	80093c0 <ST_RF_API_S2LP_IRQ_CB>
		setS2lpIrqRaisedFlag(0);
 800588e:	2000      	movs	r0, #0
 8005890:	f7ff f8a2 	bl	80049d8 <setS2lpIrqRaisedFlag>
}
 8005894:	bd10      	pop	{r4, pc}

08005896 <MCU_API_timer_wait_for_end>:
{
 8005896:	b510      	push	{r4, lr}
	while(!getRtcIrqFlag())//(!(next_rtc_wakeup==0 || rtc_irq==1))
 8005898:	f7ff fac8 	bl	8004e2c <getRtcIrqFlag>
 800589c:	2800      	cmp	r0, #0
 800589e:	d004      	beq.n	80058aa <MCU_API_timer_wait_for_end+0x14>
	setRtcIrqFlag(0);
 80058a0:	2000      	movs	r0, #0
 80058a2:	f7ff fa9f 	bl	8004de4 <setRtcIrqFlag>
}
 80058a6:	2000      	movs	r0, #0
 80058a8:	bd10      	pop	{r4, pc}
		ST_MCU_API_WaitForInterrupt();
 80058aa:	f7ff ffe9 	bl	8005880 <ST_MCU_API_WaitForInterrupt>
 80058ae:	e7f3      	b.n	8005898 <MCU_API_timer_wait_for_end+0x2>

080058b0 <setNIntermediateTimIrqFlag>:
	n_intermediate_tim_irq = nIntermediateTimeIrq;
 80058b0:	4b01      	ldr	r3, [pc, #4]	; (80058b8 <setNIntermediateTimIrqFlag+0x8>)
 80058b2:	6018      	str	r0, [r3, #0]
}
 80058b4:	4770      	bx	lr
 80058b6:	46c0      	nop			; (mov r8, r8)
 80058b8:	200003e0 	.word	0x200003e0

080058bc <getNotifyEndFlag>:

/* Get flags */
uint8_t getNotifyEndFlag(void) {
	return notify_end;
 80058bc:	4b01      	ldr	r3, [pc, #4]	; (80058c4 <getNotifyEndFlag+0x8>)
 80058be:	7818      	ldrb	r0, [r3, #0]
 80058c0:	b2c0      	uxtb	r0, r0
}
 80058c2:	4770      	bx	lr
 80058c4:	200003e4 	.word	0x200003e4

080058c8 <getNIntermediateTimIrqFlag>:

uint32_t getNIntermediateTimIrqFlag(void) {
	return n_intermediate_tim_irq;
 80058c8:	4b01      	ldr	r3, [pc, #4]	; (80058d0 <getNIntermediateTimIrqFlag+0x8>)
 80058ca:	6818      	ldr	r0, [r3, #0]
}
 80058cc:	4770      	bx	lr
 80058ce:	46c0      	nop			; (mov r8, r8)
 80058d0:	200003e0 	.word	0x200003e0

080058d4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{

  huart1.Instance = USART1;
 80058d4:	480b      	ldr	r0, [pc, #44]	; (8005904 <MX_USART1_UART_Init+0x30>)
 80058d6:	4b0c      	ldr	r3, [pc, #48]	; (8005908 <MX_USART1_UART_Init+0x34>)
{
 80058d8:	b510      	push	{r4, lr}
  huart1.Instance = USART1;
 80058da:	6003      	str	r3, [r0, #0]
  huart1.Init.BaudRate = 115200;
 80058dc:	23e1      	movs	r3, #225	; 0xe1
 80058de:	025b      	lsls	r3, r3, #9
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80058e0:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 80058e2:	6043      	str	r3, [r0, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80058e4:	2300      	movs	r3, #0
  huart1.Init.Mode = UART_MODE_TX_RX;
 80058e6:	6142      	str	r2, [r0, #20]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80058e8:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80058ea:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80058ec:	6103      	str	r3, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058ee:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80058f0:	61c3      	str	r3, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80058f2:	6203      	str	r3, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80058f4:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80058f6:	f002 fbfb 	bl	80080f0 <HAL_UART_Init>
 80058fa:	2800      	cmp	r0, #0
 80058fc:	d001      	beq.n	8005902 <MX_USART1_UART_Init+0x2e>
  {
    Error_Handler();
 80058fe:	f7ff f9e1 	bl	8004cc4 <Error_Handler>
  }

}
 8005902:	bd10      	pop	{r4, pc}
 8005904:	20000870 	.word	0x20000870
 8005908:	40013800 	.word	0x40013800

0800590c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800590c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800590e:	0005      	movs	r5, r0
 8005910:	b087      	sub	sp, #28

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005912:	2214      	movs	r2, #20
 8005914:	2100      	movs	r1, #0
 8005916:	a801      	add	r0, sp, #4
 8005918:	f003 fe27 	bl	800956a <memset>
  if(uartHandle->Instance==USART1)
 800591c:	4b29      	ldr	r3, [pc, #164]	; (80059c4 <HAL_UART_MspInit+0xb8>)
 800591e:	682a      	ldr	r2, [r5, #0]
 8005920:	429a      	cmp	r2, r3
 8005922:	d14d      	bne.n	80059c0 <HAL_UART_MspInit+0xb4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005924:	2280      	movs	r2, #128	; 0x80
 8005926:	4b28      	ldr	r3, [pc, #160]	; (80059c8 <HAL_UART_MspInit+0xbc>)
 8005928:	01d2      	lsls	r2, r2, #7
 800592a:	6b59      	ldr	r1, [r3, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800592c:	20a0      	movs	r0, #160	; 0xa0
    __HAL_RCC_USART1_CLK_ENABLE();
 800592e:	430a      	orrs	r2, r1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005930:	2101      	movs	r1, #1
    __HAL_RCC_USART1_CLK_ENABLE();
 8005932:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005936:	2600      	movs	r6, #0
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005938:	430a      	orrs	r2, r1
 800593a:	62da      	str	r2, [r3, #44]	; 0x2c
 800593c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800593e:	2703      	movs	r7, #3
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005940:	400b      	ands	r3, r1
 8005942:	9300      	str	r3, [sp, #0]
 8005944:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 8005946:	23c0      	movs	r3, #192	; 0xc0
 8005948:	00db      	lsls	r3, r3, #3
 800594a:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800594c:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800594e:	05c0      	lsls	r0, r0, #23
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005950:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005952:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8005954:	18db      	adds	r3, r3, r3
 8005956:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005958:	9603      	str	r6, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800595a:	9704      	str	r7, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800595c:	f000 fdfc 	bl	8006558 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005960:	4c1a      	ldr	r4, [pc, #104]	; (80059cc <HAL_UART_MspInit+0xc0>)
 8005962:	4b1b      	ldr	r3, [pc, #108]	; (80059d0 <HAL_UART_MspInit+0xc4>)
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8005964:	0020      	movs	r0, r4
    hdma_usart1_rx.Instance = DMA1_Channel5;
 8005966:	6023      	str	r3, [r4, #0]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005968:	2380      	movs	r3, #128	; 0x80
 800596a:	6123      	str	r3, [r4, #16]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 800596c:	3b60      	subs	r3, #96	; 0x60
    hdma_usart1_rx.Init.Request = DMA_REQUEST_3;
 800596e:	6067      	str	r7, [r4, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005970:	60a6      	str	r6, [r4, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005972:	60e6      	str	r6, [r4, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005974:	6166      	str	r6, [r4, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005976:	61a6      	str	r6, [r4, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8005978:	61e3      	str	r3, [r4, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800597a:	6226      	str	r6, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800597c:	f000 fc26 	bl	80061cc <HAL_DMA_Init>
 8005980:	42b0      	cmp	r0, r6
 8005982:	d001      	beq.n	8005988 <HAL_UART_MspInit+0x7c>
    {
      Error_Handler();
 8005984:	f7ff f99e 	bl	8004cc4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005988:	4b12      	ldr	r3, [pc, #72]	; (80059d4 <HAL_UART_MspInit+0xc8>)
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 800598a:	66ec      	str	r4, [r5, #108]	; 0x6c
 800598c:	62a5      	str	r5, [r4, #40]	; 0x28
    hdma_usart1_tx.Instance = DMA1_Channel4;
 800598e:	4c12      	ldr	r4, [pc, #72]	; (80059d8 <HAL_UART_MspInit+0xcc>)
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005990:	2280      	movs	r2, #128	; 0x80
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8005992:	6023      	str	r3, [r4, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_3;
 8005994:	2303      	movs	r3, #3
 8005996:	6063      	str	r3, [r4, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005998:	330d      	adds	r3, #13
 800599a:	60a3      	str	r3, [r4, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800599c:	2300      	movs	r3, #0
 800599e:	60e3      	str	r3, [r4, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80059a0:	6163      	str	r3, [r4, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80059a2:	61a3      	str	r3, [r4, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80059a4:	61e3      	str	r3, [r4, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80059a6:	2380      	movs	r3, #128	; 0x80
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80059a8:	0020      	movs	r0, r4
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80059aa:	019b      	lsls	r3, r3, #6
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80059ac:	6122      	str	r2, [r4, #16]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_HIGH;
 80059ae:	6223      	str	r3, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80059b0:	f000 fc0c 	bl	80061cc <HAL_DMA_Init>
 80059b4:	2800      	cmp	r0, #0
 80059b6:	d001      	beq.n	80059bc <HAL_UART_MspInit+0xb0>
    {
      Error_Handler();
 80059b8:	f7ff f984 	bl	8004cc4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80059bc:	66ac      	str	r4, [r5, #104]	; 0x68
 80059be:	62a5      	str	r5, [r4, #40]	; 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80059c0:	b007      	add	sp, #28
 80059c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80059c4:	40013800 	.word	0x40013800
 80059c8:	40021000 	.word	0x40021000
 80059cc:	20000828 	.word	0x20000828
 80059d0:	40020058 	.word	0x40020058
 80059d4:	40020044 	.word	0x40020044
 80059d8:	200007e0 	.word	0x200007e0

080059dc <__io_putchar>:
  }
}

/* USER CODE BEGIN 1 */

int __io_putchar(int ch) {
 80059dc:	b507      	push	{r0, r1, r2, lr}
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80059de:	4b04      	ldr	r3, [pc, #16]	; (80059f0 <__io_putchar+0x14>)
int __io_putchar(int ch) {
 80059e0:	9001      	str	r0, [sp, #4]
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80059e2:	2201      	movs	r2, #1
 80059e4:	4803      	ldr	r0, [pc, #12]	; (80059f4 <__io_putchar+0x18>)
 80059e6:	a901      	add	r1, sp, #4
 80059e8:	f002 fae4 	bl	8007fb4 <HAL_UART_Transmit>
  return ch;
}
 80059ec:	9801      	ldr	r0, [sp, #4]
 80059ee:	bd0e      	pop	{r1, r2, r3, pc}
 80059f0:	0000ffff 	.word	0x0000ffff
 80059f4:	20000870 	.word	0x20000870

080059f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80059f8:	480d      	ldr	r0, [pc, #52]	; (8005a30 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80059fa:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs  r1, #0
 80059fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80059fe:	e003      	b.n	8005a08 <LoopCopyDataInit>

08005a00 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005a00:	4b0c      	ldr	r3, [pc, #48]	; (8005a34 <LoopForever+0x6>)
  ldr  r3, [r3, r1]
 8005a02:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005a04:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005a06:	3104      	adds	r1, #4

08005a08 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr  r0, =_sdata
 8005a08:	480b      	ldr	r0, [pc, #44]	; (8005a38 <LoopForever+0xa>)
  ldr  r3, =_edata
 8005a0a:	4b0c      	ldr	r3, [pc, #48]	; (8005a3c <LoopForever+0xe>)
  adds  r2, r0, r1
 8005a0c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005a0e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005a10:	d3f6      	bcc.n	8005a00 <CopyDataInit>
  ldr  r2, =_sbss
 8005a12:	4a0b      	ldr	r2, [pc, #44]	; (8005a40 <LoopForever+0x12>)
  b  LoopFillZerobss
 8005a14:	e002      	b.n	8005a1c <LoopFillZerobss>

08005a16 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs  r3, #0
 8005a16:	2300      	movs	r3, #0
  str  r3, [r2]
 8005a18:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005a1a:	3204      	adds	r2, #4

08005a1c <LoopFillZerobss>:


LoopFillZerobss:
  ldr  r3, = _ebss
 8005a1c:	4b09      	ldr	r3, [pc, #36]	; (8005a44 <LoopForever+0x16>)
  cmp  r2, r3
 8005a1e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005a20:	d3f9      	bcc.n	8005a16 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8005a22:	f7ff fc9d 	bl	8005360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005a26:	f003 fd73 	bl	8009510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005a2a:	f7ff f907 	bl	8004c3c <main>

08005a2e <LoopForever>:

LoopForever:
    b LoopForever
 8005a2e:	e7fe      	b.n	8005a2e <LoopForever>
   ldr   r0, =_estack
 8005a30:	20002000 	.word	0x20002000
  ldr  r3, =_sidata
 8005a34:	0800b490 	.word	0x0800b490
  ldr  r0, =_sdata
 8005a38:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005a3c:	200001c8 	.word	0x200001c8
  ldr  r2, =_sbss
 8005a40:	200001c8 	.word	0x200001c8
  ldr  r3, = _ebss
 8005a44:	2000091c 	.word	0x2000091c

08005a48 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005a48:	e7fe      	b.n	8005a48 <ADC1_COMP_IRQHandler>
	...

08005a4c <FEM_Init>:
 * This function can be redefined for special needs.
 * @param  None
 * @retval None
 */
void FEM_Init()
{
 8005a4c:	b513      	push	{r0, r1, r4, lr}

	/* Configuration of S2LP GPIO to control external PA signal CSD, CPS, CTX */
	uint8_t tmp[]={
 8005a4e:	2403      	movs	r4, #3
 8005a50:	4905      	ldr	r1, [pc, #20]	; (8005a68 <FEM_Init+0x1c>)
 8005a52:	0022      	movs	r2, r4
 8005a54:	a801      	add	r0, sp, #4
 8005a56:	f003 fd7f 	bl	8009558 <memcpy>
			(uint8_t)S2LP_GPIO_DIG_OUT_TX_RX_MODE | (uint8_t)S2LP_GPIO_MODE_DIGITAL_OUTPUT_LP,
			(uint8_t)S2LP_GPIO_DIG_OUT_RX_STATE   | (uint8_t)S2LP_GPIO_MODE_DIGITAL_OUTPUT_LP,
			(uint8_t)S2LP_GPIO_DIG_OUT_TX_STATE   | (uint8_t)S2LP_GPIO_MODE_DIGITAL_OUTPUT_LP
	};

	S2LPSpiWriteRegisters(0x00, sizeof(tmp), tmp);
 8005a5a:	0021      	movs	r1, r4
 8005a5c:	aa01      	add	r2, sp, #4
 8005a5e:	2000      	movs	r0, #0
 8005a60:	f7ff fa94 	bl	8004f8c <S2LPSpiWriteRegisters>
}
 8005a64:	bd13      	pop	{r0, r1, r4, pc}
 8005a66:	46c0      	nop			; (mov r8, r8)
 8005a68:	0800afb6 	.word	0x0800afb6

08005a6c <FEM_Operation>:
 *         @arg FEM_TX: TX mode
 *         @arg FEM_RX: RX mode
 * @retval None
 */
void FEM_Operation(FEM_OperationType operation)
{
 8005a6c:	b570      	push	{r4, r5, r6, lr}
 8005a6e:	0005      	movs	r5, r0
	FEM_Init();
 8005a70:	f7ff ffec 	bl	8005a4c <FEM_Init>

	switch (operation)
 8005a74:	4c13      	ldr	r4, [pc, #76]	; (8005ac4 <FEM_Operation+0x58>)
 8005a76:	2d02      	cmp	r5, #2
 8005a78:	d015      	beq.n	8005aa6 <FEM_Operation+0x3a>
 8005a7a:	26a2      	movs	r6, #162	; 0xa2
 8005a7c:	2d03      	cmp	r5, #3
 8005a7e:	d019      	beq.n	8005ab4 <FEM_Operation+0x48>
 8005a80:	2d01      	cmp	r5, #1
 8005a82:	d008      	beq.n	8005a96 <FEM_Operation+0x2a>
	{
	case FEM_SHUTDOWN:
		tmp[0]=LOW;
 8005a84:	7026      	strb	r6, [r4, #0]
		tmp[1]=LOW;
 8005a86:	7066      	strb	r6, [r4, #1]
		tmp[2]=LOW;
 8005a88:	70a6      	strb	r6, [r4, #2]

		tmp[0]=HIGH;
		tmp[1]=HIGH;
		tmp[2]=HIGH;

		S2LPSpiWriteRegisters(0x00, sizeof(tmp), tmp);
 8005a8a:	0022      	movs	r2, r4
 8005a8c:	2103      	movs	r1, #3

		tmp[0]=LOW;
		tmp[1]=LOW;
		tmp[2]=HIGH;

		S2LPSpiWriteRegisters(0x00, sizeof(tmp), tmp);
 8005a8e:	2000      	movs	r0, #0
 8005a90:	f7ff fa7c 	bl	8004f8c <S2LPSpiWriteRegisters>
		tmp[2]=LOW;

		S2LPSpiWriteRegisters(0x00, sizeof(tmp), tmp);
		break;
	}
}
 8005a94:	bd70      	pop	{r4, r5, r6, pc}
		printf("TX\n");
 8005a96:	480c      	ldr	r0, [pc, #48]	; (8005ac8 <FEM_Operation+0x5c>)
 8005a98:	f003 fe10 	bl	80096bc <puts>
		tmp[0]=HIGH;
 8005a9c:	239a      	movs	r3, #154	; 0x9a
		tmp[1]=LOW;
 8005a9e:	7066      	strb	r6, [r4, #1]
		tmp[0]=HIGH;
 8005aa0:	7023      	strb	r3, [r4, #0]
		tmp[2]=HIGH;
 8005aa2:	70a3      	strb	r3, [r4, #2]
 8005aa4:	e7f1      	b.n	8005a8a <FEM_Operation+0x1e>
		printf("TX\n");
 8005aa6:	4808      	ldr	r0, [pc, #32]	; (8005ac8 <FEM_Operation+0x5c>)
 8005aa8:	f003 fe08 	bl	80096bc <puts>
		tmp[0]=HIGH;
 8005aac:	239a      	movs	r3, #154	; 0x9a
 8005aae:	7023      	strb	r3, [r4, #0]
		tmp[1]=HIGH;
 8005ab0:	7063      	strb	r3, [r4, #1]
 8005ab2:	e7f6      	b.n	8005aa2 <FEM_Operation+0x36>
		tmp[2]=HIGH;
 8005ab4:	239a      	movs	r3, #154	; 0x9a
		S2LPSpiWriteRegisters(0x00, sizeof(tmp), tmp);
 8005ab6:	0022      	movs	r2, r4
 8005ab8:	0029      	movs	r1, r5
		tmp[0]=LOW;
 8005aba:	7026      	strb	r6, [r4, #0]
		tmp[1]=LOW;
 8005abc:	7066      	strb	r6, [r4, #1]
		tmp[2]=HIGH;
 8005abe:	70a3      	strb	r3, [r4, #2]
		S2LPSpiWriteRegisters(0x00, sizeof(tmp), tmp);
 8005ac0:	e7e5      	b.n	8005a8e <FEM_Operation+0x22>
 8005ac2:	46c0      	nop			; (mov r8, r8)
 8005ac4:	200003e5 	.word	0x200003e5
 8005ac8:	0800afba 	.word	0x0800afba

08005acc <EepromRead>:

	/* Put the SPI chip select high to end the transaction */
	EepromSPICSHigh();
#endif
	return 0;
}
 8005acc:	2000      	movs	r0, #0
 8005ace:	4770      	bx	lr

08005ad0 <HAL_InitTick>:
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  HAL_StatusTypeDef  status = HAL_OK;

  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8005ad0:	21fa      	movs	r1, #250	; 0xfa
 8005ad2:	4b0a      	ldr	r3, [pc, #40]	; (8005afc <HAL_InitTick+0x2c>)
{
 8005ad4:	b570      	push	{r4, r5, r6, lr}
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8005ad6:	0089      	lsls	r1, r1, #2
{
 8005ad8:	0005      	movs	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8005ada:	6818      	ldr	r0, [r3, #0]
 8005adc:	f7fc fce8 	bl	80024b0 <__udivsi3>
 8005ae0:	f000 fb5a 	bl	8006198 <HAL_SYSTICK_Config>
 8005ae4:	0004      	movs	r4, r0
  {
    status = HAL_ERROR;
 8005ae6:	2001      	movs	r0, #1
  if (HAL_SYSTICK_Config(SystemCoreClock/1000UL) != 0U)
 8005ae8:	2c00      	cmp	r4, #0
 8005aea:	d105      	bne.n	8005af8 <HAL_InitTick+0x28>
  }
  else
  {
    /*Configure the SysTick IRQ priority */
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0);
 8005aec:	3802      	subs	r0, #2
 8005aee:	0022      	movs	r2, r4
 8005af0:	0029      	movs	r1, r5
 8005af2:	f000 fb13 	bl	800611c <HAL_NVIC_SetPriority>
 8005af6:	0020      	movs	r0, r4
  }

  /* Return function status */
  return status;
}
 8005af8:	bd70      	pop	{r4, r5, r6, pc}
 8005afa:	46c0      	nop			; (mov r8, r8)
 8005afc:	20000084 	.word	0x20000084

08005b00 <HAL_Init>:
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8005b00:	2340      	movs	r3, #64	; 0x40
 8005b02:	4a08      	ldr	r2, [pc, #32]	; (8005b24 <HAL_Init+0x24>)
{
 8005b04:	b510      	push	{r4, lr}
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8005b06:	6811      	ldr	r1, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005b08:	2000      	movs	r0, #0
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8005b0a:	430b      	orrs	r3, r1
 8005b0c:	6013      	str	r3, [r2, #0]
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005b0e:	f7ff ffdf 	bl	8005ad0 <HAL_InitTick>
 8005b12:	1e04      	subs	r4, r0, #0
 8005b14:	d103      	bne.n	8005b1e <HAL_Init+0x1e>
    HAL_MspInit();
 8005b16:	f7ff fb69 	bl	80051ec <HAL_MspInit>
}
 8005b1a:	0020      	movs	r0, r4
 8005b1c:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8005b1e:	2401      	movs	r4, #1
 8005b20:	e7fb      	b.n	8005b1a <HAL_Init+0x1a>
 8005b22:	46c0      	nop			; (mov r8, r8)
 8005b24:	40022000 	.word	0x40022000

08005b28 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 8005b28:	4a02      	ldr	r2, [pc, #8]	; (8005b34 <HAL_IncTick+0xc>)
 8005b2a:	6813      	ldr	r3, [r2, #0]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	6013      	str	r3, [r2, #0]
}
 8005b30:	4770      	bx	lr
 8005b32:	46c0      	nop			; (mov r8, r8)
 8005b34:	200008f0 	.word	0x200008f0

08005b38 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005b38:	4b01      	ldr	r3, [pc, #4]	; (8005b40 <HAL_GetTick+0x8>)
 8005b3a:	6818      	ldr	r0, [r3, #0]
}
 8005b3c:	4770      	bx	lr
 8005b3e:	46c0      	nop			; (mov r8, r8)
 8005b40:	200008f0 	.word	0x200008f0

08005b44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b44:	b570      	push	{r4, r5, r6, lr}
 8005b46:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8005b48:	f7ff fff6 	bl	8005b38 <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
  {
    wait++;
 8005b4c:	1c63      	adds	r3, r4, #1
 8005b4e:	1e5a      	subs	r2, r3, #1
 8005b50:	4193      	sbcs	r3, r2
  uint32_t tickstart = HAL_GetTick();
 8005b52:	0005      	movs	r5, r0
    wait++;
 8005b54:	18e4      	adds	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8005b56:	f7ff ffef 	bl	8005b38 <HAL_GetTick>
 8005b5a:	1b40      	subs	r0, r0, r5
 8005b5c:	42a0      	cmp	r0, r4
 8005b5e:	d3fa      	bcc.n	8005b56 <HAL_Delay+0x12>
  {
  }
}
 8005b60:	bd70      	pop	{r4, r5, r6, pc}
	...

08005b64 <ADC_DelayMicroSecond>:
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8005b64:	4b08      	ldr	r3, [pc, #32]	; (8005b88 <ADC_DelayMicroSecond+0x24>)
{
 8005b66:	b513      	push	{r0, r1, r4, lr}
 8005b68:	0004      	movs	r4, r0
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8005b6a:	4908      	ldr	r1, [pc, #32]	; (8005b8c <ADC_DelayMicroSecond+0x28>)
 8005b6c:	6818      	ldr	r0, [r3, #0]
 8005b6e:	f7fc fc9f 	bl	80024b0 <__udivsi3>
 8005b72:	4344      	muls	r4, r0
 8005b74:	9401      	str	r4, [sp, #4]

  while(waitLoopIndex != 0U)
 8005b76:	9b01      	ldr	r3, [sp, #4]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d100      	bne.n	8005b7e <ADC_DelayMicroSecond+0x1a>
  {
    waitLoopIndex--;
  } 
}
 8005b7c:	bd13      	pop	{r0, r1, r4, pc}
    waitLoopIndex--;
 8005b7e:	9b01      	ldr	r3, [sp, #4]
 8005b80:	3b01      	subs	r3, #1
 8005b82:	9301      	str	r3, [sp, #4]
 8005b84:	e7f7      	b.n	8005b76 <ADC_DelayMicroSecond+0x12>
 8005b86:	46c0      	nop			; (mov r8, r8)
 8005b88:	20000084 	.word	0x20000084
 8005b8c:	000f4240 	.word	0x000f4240

08005b90 <ADC_Enable>:
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005b90:	2103      	movs	r1, #3
 8005b92:	6803      	ldr	r3, [r0, #0]
{
 8005b94:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005b96:	689a      	ldr	r2, [r3, #8]
{
 8005b98:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005b9a:	400a      	ands	r2, r1
 8005b9c:	2a01      	cmp	r2, #1
 8005b9e:	d104      	bne.n	8005baa <ADC_Enable+0x1a>
 8005ba0:	6819      	ldr	r1, [r3, #0]
 8005ba2:	4211      	tst	r1, r2
 8005ba4:	d001      	beq.n	8005baa <ADC_Enable+0x1a>
  return HAL_OK;
 8005ba6:	2000      	movs	r0, #0
}
 8005ba8:	bd70      	pop	{r4, r5, r6, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8005baa:	6899      	ldr	r1, [r3, #8]
 8005bac:	4a13      	ldr	r2, [pc, #76]	; (8005bfc <ADC_Enable+0x6c>)
 8005bae:	4211      	tst	r1, r2
 8005bb0:	d008      	beq.n	8005bc4 <ADC_Enable+0x34>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bb2:	2310      	movs	r3, #16
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bb4:	2001      	movs	r0, #1
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bb6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005bb8:	4313      	orrs	r3, r2
 8005bba:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bbc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bbe:	4303      	orrs	r3, r0
 8005bc0:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8005bc2:	e7f1      	b.n	8005ba8 <ADC_Enable+0x18>
    __HAL_ADC_ENABLE(hadc);
 8005bc4:	2501      	movs	r5, #1
 8005bc6:	689a      	ldr	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8005bc8:	0028      	movs	r0, r5
    __HAL_ADC_ENABLE(hadc);
 8005bca:	432a      	orrs	r2, r5
 8005bcc:	609a      	str	r2, [r3, #8]
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8005bce:	f7ff ffc9 	bl	8005b64 <ADC_DelayMicroSecond>
    tickstart = HAL_GetTick();
 8005bd2:	f7ff ffb1 	bl	8005b38 <HAL_GetTick>
 8005bd6:	0006      	movs	r6, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8005bd8:	6823      	ldr	r3, [r4, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	422b      	tst	r3, r5
 8005bde:	d1e2      	bne.n	8005ba6 <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005be0:	f7ff ffaa 	bl	8005b38 <HAL_GetTick>
 8005be4:	1b80      	subs	r0, r0, r6
 8005be6:	280a      	cmp	r0, #10
 8005be8:	d9f6      	bls.n	8005bd8 <ADC_Enable+0x48>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bea:	2310      	movs	r3, #16
 8005bec:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_ERROR;
 8005bee:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005bf4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005bf6:	431d      	orrs	r5, r3
 8005bf8:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 8005bfa:	e7d5      	b.n	8005ba8 <ADC_Enable+0x18>
 8005bfc:	80000017 	.word	0x80000017

08005c00 <ADC_Disable>:
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005c00:	2103      	movs	r1, #3
 8005c02:	6803      	ldr	r3, [r0, #0]
{
 8005c04:	b570      	push	{r4, r5, r6, lr}
 8005c06:	0004      	movs	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005c08:	6898      	ldr	r0, [r3, #8]
 8005c0a:	4008      	ands	r0, r1
 8005c0c:	2801      	cmp	r0, #1
 8005c0e:	d001      	beq.n	8005c14 <ADC_Disable+0x14>
  return HAL_OK;
 8005c10:	2000      	movs	r0, #0
}
 8005c12:	bd70      	pop	{r4, r5, r6, pc}
  if (ADC_IS_ENABLE(hadc) != RESET)
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	4202      	tst	r2, r0
 8005c18:	d0fa      	beq.n	8005c10 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8005c1a:	2205      	movs	r2, #5
 8005c1c:	689d      	ldr	r5, [r3, #8]
 8005c1e:	4015      	ands	r5, r2
 8005c20:	2d01      	cmp	r5, #1
 8005c22:	d119      	bne.n	8005c58 <ADC_Disable+0x58>
      __HAL_ADC_DISABLE(hadc);
 8005c24:	6898      	ldr	r0, [r3, #8]
 8005c26:	3a03      	subs	r2, #3
 8005c28:	4302      	orrs	r2, r0
 8005c2a:	609a      	str	r2, [r3, #8]
 8005c2c:	6019      	str	r1, [r3, #0]
    tickstart = HAL_GetTick();
 8005c2e:	f7ff ff83 	bl	8005b38 <HAL_GetTick>
 8005c32:	0006      	movs	r6, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8005c34:	6823      	ldr	r3, [r4, #0]
 8005c36:	689b      	ldr	r3, [r3, #8]
 8005c38:	422b      	tst	r3, r5
 8005c3a:	d0e9      	beq.n	8005c10 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005c3c:	f7ff ff7c 	bl	8005b38 <HAL_GetTick>
 8005c40:	1b80      	subs	r0, r0, r6
 8005c42:	280a      	cmp	r0, #10
 8005c44:	d9f6      	bls.n	8005c34 <ADC_Disable+0x34>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c46:	2310      	movs	r3, #16
 8005c48:	6d62      	ldr	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c4a:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c4c:	4313      	orrs	r3, r2
 8005c4e:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c52:	431d      	orrs	r5, r3
 8005c54:	65a5      	str	r5, [r4, #88]	; 0x58
        return HAL_ERROR;
 8005c56:	e7dc      	b.n	8005c12 <ADC_Disable+0x12>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005c58:	2310      	movs	r3, #16
 8005c5a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	6563      	str	r3, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005c60:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005c62:	4303      	orrs	r3, r0
 8005c64:	65a3      	str	r3, [r4, #88]	; 0x58
      return HAL_ERROR;
 8005c66:	e7d4      	b.n	8005c12 <ADC_Disable+0x12>

08005c68 <ADC_ConversionStop>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8005c68:	2204      	movs	r2, #4
 8005c6a:	6803      	ldr	r3, [r0, #0]
{
 8005c6c:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8005c6e:	6899      	ldr	r1, [r3, #8]
{
 8005c70:	0004      	movs	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8005c72:	4211      	tst	r1, r2
 8005c74:	d101      	bne.n	8005c7a <ADC_ConversionStop+0x12>
  return HAL_OK;
 8005c76:	2000      	movs	r0, #0
}
 8005c78:	bd70      	pop	{r4, r5, r6, pc}
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005c7a:	6899      	ldr	r1, [r3, #8]
 8005c7c:	4211      	tst	r1, r2
 8005c7e:	d006      	beq.n	8005c8e <ADC_ConversionStop+0x26>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8005c80:	689a      	ldr	r2, [r3, #8]
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8005c82:	0792      	lsls	r2, r2, #30
 8005c84:	d403      	bmi.n	8005c8e <ADC_ConversionStop+0x26>
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8005c86:	2210      	movs	r2, #16
 8005c88:	6899      	ldr	r1, [r3, #8]
 8005c8a:	430a      	orrs	r2, r1
 8005c8c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();
 8005c8e:	f7ff ff53 	bl	8005b38 <HAL_GetTick>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8005c92:	2604      	movs	r6, #4
    tickstart = HAL_GetTick();
 8005c94:	0005      	movs	r5, r0
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8005c96:	6823      	ldr	r3, [r4, #0]
 8005c98:	689b      	ldr	r3, [r3, #8]
 8005c9a:	4233      	tst	r3, r6
 8005c9c:	d0eb      	beq.n	8005c76 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8005c9e:	f7ff ff4b 	bl	8005b38 <HAL_GetTick>
 8005ca2:	1b40      	subs	r0, r0, r5
 8005ca4:	280a      	cmp	r0, #10
 8005ca6:	d9f6      	bls.n	8005c96 <ADC_ConversionStop+0x2e>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ca8:	2310      	movs	r3, #16
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005caa:	2001      	movs	r0, #1
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cac:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	6563      	str	r3, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005cb2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005cb4:	4303      	orrs	r3, r0
 8005cb6:	65a3      	str	r3, [r4, #88]	; 0x58
        return HAL_ERROR;
 8005cb8:	e7de      	b.n	8005c78 <ADC_ConversionStop+0x10>
	...

08005cbc <HAL_ADC_Init>:
{
 8005cbc:	b570      	push	{r4, r5, r6, lr}
 8005cbe:	0004      	movs	r4, r0
    return HAL_ERROR;
 8005cc0:	2001      	movs	r0, #1
  if(hadc == NULL)
 8005cc2:	2c00      	cmp	r4, #0
 8005cc4:	d01b      	beq.n	8005cfe <HAL_ADC_Init+0x42>
  if(hadc->State == HAL_ADC_STATE_RESET)
 8005cc6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d106      	bne.n	8005cda <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
 8005ccc:	0022      	movs	r2, r4
 8005cce:	3250      	adds	r2, #80	; 0x50
    ADC_CLEAR_ERRORCODE(hadc);
 8005cd0:	65a3      	str	r3, [r4, #88]	; 0x58
    HAL_ADC_MspInit(hadc);
 8005cd2:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8005cd4:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8005cd6:	f7fe fc77 	bl	80045c8 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005cda:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005cdc:	06db      	lsls	r3, r3, #27
 8005cde:	d406      	bmi.n	8005cee <HAL_ADC_Init+0x32>
     (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)  )
 8005ce0:	6823      	ldr	r3, [r4, #0]
 8005ce2:	2204      	movs	r2, #4
 8005ce4:	6899      	ldr	r1, [r3, #8]
 8005ce6:	0008      	movs	r0, r1
 8005ce8:	4010      	ands	r0, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 8005cea:	4211      	tst	r1, r2
 8005cec:	d008      	beq.n	8005d00 <HAL_ADC_Init+0x44>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cee:	2310      	movs	r3, #16
 8005cf0:	6d62      	ldr	r2, [r4, #84]	; 0x54
    return HAL_ERROR;
 8005cf2:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cf4:	4313      	orrs	r3, r2
 8005cf6:	6563      	str	r3, [r4, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	3450      	adds	r4, #80	; 0x50
 8005cfc:	7023      	strb	r3, [r4, #0]
}
 8005cfe:	bd70      	pop	{r4, r5, r6, pc}
  ADC_STATE_CLR_SET(hadc->State,
 8005d00:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005d02:	4955      	ldr	r1, [pc, #340]	; (8005e58 <HAL_ADC_Init+0x19c>)
 8005d04:	4011      	ands	r1, r2
 8005d06:	2202      	movs	r2, #2
 8005d08:	430a      	orrs	r2, r1
 8005d0a:	6562      	str	r2, [r4, #84]	; 0x54
  if (ADC_IS_ENABLE(hadc) == RESET)
 8005d0c:	2203      	movs	r2, #3
 8005d0e:	6899      	ldr	r1, [r3, #8]
 8005d10:	4011      	ands	r1, r2
 8005d12:	4a52      	ldr	r2, [pc, #328]	; (8005e5c <HAL_ADC_Init+0x1a0>)
 8005d14:	2901      	cmp	r1, #1
 8005d16:	d102      	bne.n	8005d1e <HAL_ADC_Init+0x62>
 8005d18:	681d      	ldr	r5, [r3, #0]
 8005d1a:	420d      	tst	r5, r1
 8005d1c:	d119      	bne.n	8005d52 <HAL_ADC_Init+0x96>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8005d1e:	2680      	movs	r6, #128	; 0x80
 8005d20:	6861      	ldr	r1, [r4, #4]
 8005d22:	05f6      	lsls	r6, r6, #23
 8005d24:	004d      	lsls	r5, r1, #1
 8005d26:	086d      	lsrs	r5, r5, #1
 8005d28:	42b5      	cmp	r5, r6
 8005d2a:	d003      	beq.n	8005d34 <HAL_ADC_Init+0x78>
 8005d2c:	2580      	movs	r5, #128	; 0x80
 8005d2e:	062d      	lsls	r5, r5, #24
 8005d30:	42a9      	cmp	r1, r5
 8005d32:	d176      	bne.n	8005e22 <HAL_ADC_Init+0x166>
 8005d34:	691d      	ldr	r5, [r3, #16]
 8005d36:	00ad      	lsls	r5, r5, #2
 8005d38:	08ad      	lsrs	r5, r5, #2
 8005d3a:	611d      	str	r5, [r3, #16]
 8005d3c:	691d      	ldr	r5, [r3, #16]
 8005d3e:	4329      	orrs	r1, r5
 8005d40:	6119      	str	r1, [r3, #16]
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_RES);
 8005d42:	2518      	movs	r5, #24
 8005d44:	68d9      	ldr	r1, [r3, #12]
 8005d46:	43a9      	bics	r1, r5
 8005d48:	60d9      	str	r1, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;    
 8005d4a:	68d9      	ldr	r1, [r3, #12]
 8005d4c:	68a5      	ldr	r5, [r4, #8]
 8005d4e:	4329      	orrs	r1, r5
 8005d50:	60d9      	str	r1, [r3, #12]
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 8005d52:	6811      	ldr	r1, [r2, #0]
 8005d54:	4d42      	ldr	r5, [pc, #264]	; (8005e60 <HAL_ADC_Init+0x1a4>)
 8005d56:	4029      	ands	r1, r5
 8005d58:	6011      	str	r1, [r2, #0]
  ADC->CCR |=__HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);  
 8005d5a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005d5c:	6815      	ldr	r5, [r2, #0]
 8005d5e:	0649      	lsls	r1, r1, #25
 8005d60:	4329      	orrs	r1, r5
 8005d62:	6011      	str	r1, [r2, #0]
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 8005d64:	2280      	movs	r2, #128	; 0x80
 8005d66:	6899      	ldr	r1, [r3, #8]
 8005d68:	0552      	lsls	r2, r2, #21
 8005d6a:	4211      	tst	r1, r2
 8005d6c:	d102      	bne.n	8005d74 <HAL_ADC_Init+0xb8>
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8005d6e:	6899      	ldr	r1, [r3, #8]
 8005d70:	430a      	orrs	r2, r1
 8005d72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8005d74:	68da      	ldr	r2, [r3, #12]
 8005d76:	493b      	ldr	r1, [pc, #236]	; (8005e64 <HAL_ADC_Init+0x1a8>)
 8005d78:	400a      	ands	r2, r1
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005d7a:	6921      	ldr	r1, [r4, #16]
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 8005d7c:	60da      	str	r2, [r3, #12]
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005d7e:	68dd      	ldr	r5, [r3, #12]
 8005d80:	68e2      	ldr	r2, [r4, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8005d82:	2902      	cmp	r1, #2
 8005d84:	d100      	bne.n	8005d88 <HAL_ADC_Init+0xcc>
 8005d86:	2004      	movs	r0, #4
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005d88:	6b26      	ldr	r6, [r4, #48]	; 0x30
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005d8a:	1c61      	adds	r1, r4, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005d8c:	4332      	orrs	r2, r6
 8005d8e:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005d90:	69a5      	ldr	r5, [r4, #24]
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005d92:	7fc9      	ldrb	r1, [r1, #31]
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 8005d94:	03ad      	lsls	r5, r5, #14
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005d96:	432a      	orrs	r2, r5
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8005d98:	69e5      	ldr	r5, [r4, #28]
 8005d9a:	03ed      	lsls	r5, r5, #15
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005d9c:	432a      	orrs	r2, r5
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8005d9e:	034d      	lsls	r5, r1, #13
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005da0:	432a      	orrs	r2, r5
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8005da2:	0025      	movs	r5, r4
 8005da4:	352c      	adds	r5, #44	; 0x2c
 8005da6:	782d      	ldrb	r5, [r5, #0]
 8005da8:	006d      	lsls	r5, r5, #1
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005daa:	432a      	orrs	r2, r5
 8005dac:	4302      	orrs	r2, r0
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005dae:	20c2      	movs	r0, #194	; 0xc2
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8005db0:	60da      	str	r2, [r3, #12]
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005db2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005db4:	30ff      	adds	r0, #255	; 0xff
 8005db6:	4282      	cmp	r2, r0
 8005db8:	d004      	beq.n	8005dc4 <HAL_ADC_Init+0x108>
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8005dba:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 8005dbc:	68d8      	ldr	r0, [r3, #12]
 8005dbe:	432a      	orrs	r2, r5
 8005dc0:	4302      	orrs	r2, r0
 8005dc2:	60da      	str	r2, [r3, #12]
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8005dc4:	1ca2      	adds	r2, r4, #2
 8005dc6:	7fd2      	ldrb	r2, [r2, #31]
 8005dc8:	2a01      	cmp	r2, #1
 8005dca:	d106      	bne.n	8005dda <HAL_ADC_Init+0x11e>
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8005dcc:	2900      	cmp	r1, #0
 8005dce:	d134      	bne.n	8005e3a <HAL_ADC_Init+0x17e>
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 8005dd0:	2280      	movs	r2, #128	; 0x80
 8005dd2:	68d9      	ldr	r1, [r3, #12]
 8005dd4:	0252      	lsls	r2, r2, #9
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	60da      	str	r2, [r3, #12]
  if (hadc->Init.OversamplingMode == ENABLE)
 8005dda:	6be1      	ldr	r1, [r4, #60]	; 0x3c
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8005ddc:	691a      	ldr	r2, [r3, #16]
  if (hadc->Init.OversamplingMode == ENABLE)
 8005dde:	2901      	cmp	r1, #1
 8005de0:	d133      	bne.n	8005e4a <HAL_ADC_Init+0x18e>
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8005de2:	4821      	ldr	r0, [pc, #132]	; (8005e68 <HAL_ADC_Init+0x1ac>)
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005de4:	6c65      	ldr	r5, [r4, #68]	; 0x44
    hadc->Instance->CFGR2 &= ~( ADC_CFGR2_OVSR |
 8005de6:	4002      	ands	r2, r0
 8005de8:	611a      	str	r2, [r3, #16]
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005dea:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005dec:	6918      	ldr	r0, [r3, #16]
 8005dee:	432a      	orrs	r2, r5
                               hadc->Init.Oversample.RightBitShift             |
 8005df0:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 8005df2:	432a      	orrs	r2, r5
    hadc->Instance->CFGR2 |= ( hadc->Init.Oversample.Ratio         |
 8005df4:	4302      	orrs	r2, r0
 8005df6:	611a      	str	r2, [r3, #16]
     hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8005df8:	691a      	ldr	r2, [r3, #16]
 8005dfa:	4311      	orrs	r1, r2
 8005dfc:	6119      	str	r1, [r3, #16]
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8005dfe:	2107      	movs	r1, #7
 8005e00:	695a      	ldr	r2, [r3, #20]
  ADC_CLEAR_ERRORCODE(hadc);
 8005e02:	2000      	movs	r0, #0
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8005e04:	438a      	bics	r2, r1
 8005e06:	615a      	str	r2, [r3, #20]
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8005e08:	695a      	ldr	r2, [r3, #20]
 8005e0a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	615a      	str	r2, [r3, #20]
  ADC_STATE_CLR_SET(hadc->State,
 8005e10:	2203      	movs	r2, #3
  ADC_CLEAR_ERRORCODE(hadc);
 8005e12:	65a0      	str	r0, [r4, #88]	; 0x58
  ADC_STATE_CLR_SET(hadc->State,
 8005e14:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e16:	4393      	bics	r3, r2
 8005e18:	001a      	movs	r2, r3
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	6563      	str	r3, [r4, #84]	; 0x54
  return HAL_OK;
 8005e20:	e76d      	b.n	8005cfe <HAL_ADC_Init+0x42>
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 8005e22:	691d      	ldr	r5, [r3, #16]
 8005e24:	4e11      	ldr	r6, [pc, #68]	; (8005e6c <HAL_ADC_Init+0x1b0>)
 8005e26:	00ad      	lsls	r5, r5, #2
 8005e28:	08ad      	lsrs	r5, r5, #2
 8005e2a:	611d      	str	r5, [r3, #16]
 8005e2c:	6815      	ldr	r5, [r2, #0]
 8005e2e:	4035      	ands	r5, r6
 8005e30:	6015      	str	r5, [r2, #0]
 8005e32:	6815      	ldr	r5, [r2, #0]
 8005e34:	4329      	orrs	r1, r5
 8005e36:	6011      	str	r1, [r2, #0]
 8005e38:	e783      	b.n	8005d42 <HAL_ADC_Init+0x86>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005e3a:	2120      	movs	r1, #32
 8005e3c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005e3e:	4301      	orrs	r1, r0
 8005e40:	6561      	str	r1, [r4, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005e42:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005e44:	430a      	orrs	r2, r1
 8005e46:	65a2      	str	r2, [r4, #88]	; 0x58
 8005e48:	e7c7      	b.n	8005dda <HAL_ADC_Init+0x11e>
    if(HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8005e4a:	2101      	movs	r1, #1
 8005e4c:	420a      	tst	r2, r1
 8005e4e:	d0d6      	beq.n	8005dfe <HAL_ADC_Init+0x142>
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8005e50:	691a      	ldr	r2, [r3, #16]
 8005e52:	438a      	bics	r2, r1
 8005e54:	611a      	str	r2, [r3, #16]
 8005e56:	e7d2      	b.n	8005dfe <HAL_ADC_Init+0x142>
 8005e58:	fffffefd 	.word	0xfffffefd
 8005e5c:	40012708 	.word	0x40012708
 8005e60:	fdffffff 	.word	0xfdffffff
 8005e64:	fffe0219 	.word	0xfffe0219
 8005e68:	fffffc03 	.word	0xfffffc03
 8005e6c:	ffc3ffff 	.word	0xffc3ffff

08005e70 <HAL_ADC_Start>:
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005e70:	6803      	ldr	r3, [r0, #0]
{
 8005e72:	b570      	push	{r4, r5, r6, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005e74:	689b      	ldr	r3, [r3, #8]
{
 8005e76:	0004      	movs	r4, r0
    tmp_hal_status = HAL_BUSY;
 8005e78:	2002      	movs	r0, #2
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005e7a:	075b      	lsls	r3, r3, #29
 8005e7c:	d41a      	bmi.n	8005eb4 <HAL_ADC_Start+0x44>
    __HAL_LOCK(hadc);
 8005e7e:	0025      	movs	r5, r4
 8005e80:	3550      	adds	r5, #80	; 0x50
 8005e82:	782b      	ldrb	r3, [r5, #0]
 8005e84:	2b01      	cmp	r3, #1
 8005e86:	d015      	beq.n	8005eb4 <HAL_ADC_Start+0x44>
 8005e88:	2301      	movs	r3, #1
 8005e8a:	702b      	strb	r3, [r5, #0]
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8005e8c:	69e3      	ldr	r3, [r4, #28]
 8005e8e:	2b01      	cmp	r3, #1
 8005e90:	d111      	bne.n	8005eb6 <HAL_ADC_Start+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 8005e92:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005e94:	4a0b      	ldr	r2, [pc, #44]	; (8005ec4 <HAL_ADC_Start+0x54>)
      ADC_CLEAR_ERRORCODE(hadc);
 8005e96:	2000      	movs	r0, #0
      ADC_STATE_CLR_SET(hadc->State,
 8005e98:	401a      	ands	r2, r3
 8005e9a:	2380      	movs	r3, #128	; 0x80
 8005e9c:	005b      	lsls	r3, r3, #1
 8005e9e:	4313      	orrs	r3, r2
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005ea0:	221c      	movs	r2, #28
      ADC_STATE_CLR_SET(hadc->State,
 8005ea2:	6563      	str	r3, [r4, #84]	; 0x54
      ADC_CLEAR_ERRORCODE(hadc);
 8005ea4:	65a0      	str	r0, [r4, #88]	; 0x58
      __HAL_UNLOCK(hadc);
 8005ea6:	7028      	strb	r0, [r5, #0]
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8005ea8:	6823      	ldr	r3, [r4, #0]
 8005eaa:	601a      	str	r2, [r3, #0]
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8005eac:	6899      	ldr	r1, [r3, #8]
 8005eae:	3a18      	subs	r2, #24
 8005eb0:	430a      	orrs	r2, r1
 8005eb2:	609a      	str	r2, [r3, #8]
}
 8005eb4:	bd70      	pop	{r4, r5, r6, pc}
      tmp_hal_status = ADC_Enable(hadc);
 8005eb6:	0020      	movs	r0, r4
 8005eb8:	f7ff fe6a 	bl	8005b90 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 8005ebc:	2800      	cmp	r0, #0
 8005ebe:	d0e8      	beq.n	8005e92 <HAL_ADC_Start+0x22>
 8005ec0:	e7f8      	b.n	8005eb4 <HAL_ADC_Start+0x44>
 8005ec2:	46c0      	nop			; (mov r8, r8)
 8005ec4:	fffff0fe 	.word	0xfffff0fe

08005ec8 <HAL_ADC_Stop>:
{
 8005ec8:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hadc);
 8005eca:	0006      	movs	r6, r0
 8005ecc:	3650      	adds	r6, #80	; 0x50
 8005ece:	7833      	ldrb	r3, [r6, #0]
{
 8005ed0:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 8005ed2:	2002      	movs	r0, #2
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d012      	beq.n	8005efe <HAL_ADC_Stop+0x36>
 8005ed8:	2501      	movs	r5, #1
  tmp_hal_status = ADC_ConversionStop(hadc);
 8005eda:	0020      	movs	r0, r4
  __HAL_LOCK(hadc);
 8005edc:	7035      	strb	r5, [r6, #0]
  tmp_hal_status = ADC_ConversionStop(hadc);
 8005ede:	f7ff fec3 	bl	8005c68 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8005ee2:	2800      	cmp	r0, #0
 8005ee4:	d109      	bne.n	8005efa <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8005ee6:	0020      	movs	r0, r4
 8005ee8:	f7ff fe8a 	bl	8005c00 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 8005eec:	2800      	cmp	r0, #0
 8005eee:	d104      	bne.n	8005efa <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 8005ef0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8005ef2:	4a03      	ldr	r2, [pc, #12]	; (8005f00 <HAL_ADC_Stop+0x38>)
 8005ef4:	4013      	ands	r3, r2
 8005ef6:	431d      	orrs	r5, r3
 8005ef8:	6565      	str	r5, [r4, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8005efa:	2300      	movs	r3, #0
 8005efc:	7033      	strb	r3, [r6, #0]
}
 8005efe:	bd70      	pop	{r4, r5, r6, pc}
 8005f00:	fffffefe 	.word	0xfffffefe

08005f04 <HAL_ADC_PollForConversion>:
{
 8005f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005f06:	6946      	ldr	r6, [r0, #20]
{
 8005f08:	0004      	movs	r4, r0
 8005f0a:	000d      	movs	r5, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8005f0c:	2e08      	cmp	r6, #8
 8005f0e:	d00d      	beq.n	8005f2c <HAL_ADC_PollForConversion+0x28>
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8005f10:	6803      	ldr	r3, [r0, #0]
 8005f12:	2001      	movs	r0, #1
 8005f14:	68db      	ldr	r3, [r3, #12]
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8005f16:	260c      	movs	r6, #12
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8005f18:	4203      	tst	r3, r0
 8005f1a:	d007      	beq.n	8005f2c <HAL_ADC_PollForConversion+0x28>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f1c:	2320      	movs	r3, #32
 8005f1e:	6d62      	ldr	r2, [r4, #84]	; 0x54
      __HAL_UNLOCK(hadc);
 8005f20:	3450      	adds	r4, #80	; 0x50
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005f22:	4313      	orrs	r3, r2
 8005f24:	6063      	str	r3, [r4, #4]
      __HAL_UNLOCK(hadc);
 8005f26:	2300      	movs	r3, #0
 8005f28:	7023      	strb	r3, [r4, #0]
}
 8005f2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  tickstart = HAL_GetTick();
 8005f2c:	f7ff fe04 	bl	8005b38 <HAL_GetTick>
 8005f30:	0007      	movs	r7, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8005f32:	6823      	ldr	r3, [r4, #0]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	4216      	tst	r6, r2
 8005f38:	d024      	beq.n	8005f84 <HAL_ADC_PollForConversion+0x80>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005f3a:	2280      	movs	r2, #128	; 0x80
 8005f3c:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005f3e:	0092      	lsls	r2, r2, #2
 8005f40:	430a      	orrs	r2, r1
 8005f42:	6562      	str	r2, [r4, #84]	; 0x54
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005f44:	22c0      	movs	r2, #192	; 0xc0
 8005f46:	68d9      	ldr	r1, [r3, #12]
 8005f48:	0112      	lsls	r2, r2, #4
 8005f4a:	4211      	tst	r1, r2
 8005f4c:	d113      	bne.n	8005f76 <HAL_ADC_PollForConversion+0x72>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8005f4e:	1c62      	adds	r2, r4, #1
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8005f50:	7fd2      	ldrb	r2, [r2, #31]
 8005f52:	2a00      	cmp	r2, #0
 8005f54:	d10f      	bne.n	8005f76 <HAL_ADC_PollForConversion+0x72>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	0712      	lsls	r2, r2, #28
 8005f5a:	d50c      	bpl.n	8005f76 <HAL_ADC_PollForConversion+0x72>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8005f5c:	689a      	ldr	r2, [r3, #8]
 8005f5e:	0752      	lsls	r2, r2, #29
 8005f60:	d423      	bmi.n	8005faa <HAL_ADC_PollForConversion+0xa6>
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8005f62:	210c      	movs	r1, #12
 8005f64:	685a      	ldr	r2, [r3, #4]
 8005f66:	438a      	bics	r2, r1
 8005f68:	605a      	str	r2, [r3, #4]
        ADC_STATE_CLR_SET(hadc->State,
 8005f6a:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8005f6c:	4913      	ldr	r1, [pc, #76]	; (8005fbc <HAL_ADC_PollForConversion+0xb8>)
 8005f6e:	4011      	ands	r1, r2
 8005f70:	2201      	movs	r2, #1
 8005f72:	430a      	orrs	r2, r1
 8005f74:	6562      	str	r2, [r4, #84]	; 0x54
  return HAL_OK;
 8005f76:	2000      	movs	r0, #0
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8005f78:	69a2      	ldr	r2, [r4, #24]
 8005f7a:	4282      	cmp	r2, r0
 8005f7c:	d1d5      	bne.n	8005f2a <HAL_ADC_PollForConversion+0x26>
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8005f7e:	220c      	movs	r2, #12
 8005f80:	601a      	str	r2, [r3, #0]
 8005f82:	e7d2      	b.n	8005f2a <HAL_ADC_PollForConversion+0x26>
    if(Timeout != HAL_MAX_DELAY)
 8005f84:	1c6a      	adds	r2, r5, #1
 8005f86:	d0d5      	beq.n	8005f34 <HAL_ADC_PollForConversion+0x30>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005f88:	2d00      	cmp	r5, #0
 8005f8a:	d108      	bne.n	8005f9e <HAL_ADC_PollForConversion+0x9a>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005f8c:	2304      	movs	r3, #4
 8005f8e:	6d62      	ldr	r2, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8005f90:	3450      	adds	r4, #80	; 0x50
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005f92:	4313      	orrs	r3, r2
 8005f94:	6063      	str	r3, [r4, #4]
        __HAL_UNLOCK(hadc);
 8005f96:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8005f98:	2003      	movs	r0, #3
        __HAL_UNLOCK(hadc);
 8005f9a:	7023      	strb	r3, [r4, #0]
        return HAL_TIMEOUT;
 8005f9c:	e7c5      	b.n	8005f2a <HAL_ADC_PollForConversion+0x26>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8005f9e:	f7ff fdcb 	bl	8005b38 <HAL_GetTick>
 8005fa2:	1bc0      	subs	r0, r0, r7
 8005fa4:	42a8      	cmp	r0, r5
 8005fa6:	d9c4      	bls.n	8005f32 <HAL_ADC_PollForConversion+0x2e>
 8005fa8:	e7f0      	b.n	8005f8c <HAL_ADC_PollForConversion+0x88>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005faa:	2220      	movs	r2, #32
 8005fac:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	6562      	str	r2, [r4, #84]	; 0x54
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005fb6:	430a      	orrs	r2, r1
 8005fb8:	65a2      	str	r2, [r4, #88]	; 0x58
 8005fba:	e7dc      	b.n	8005f76 <HAL_ADC_PollForConversion+0x72>
 8005fbc:	fffffefe 	.word	0xfffffefe

08005fc0 <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 8005fc0:	6803      	ldr	r3, [r0, #0]
 8005fc2:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8005fc4:	4770      	bx	lr
	...

08005fc8 <HAL_ADC_ConfigChannel>:
{
 8005fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hadc);
 8005fca:	0004      	movs	r4, r0
 8005fcc:	3450      	adds	r4, #80	; 0x50
 8005fce:	7822      	ldrb	r2, [r4, #0]
{
 8005fd0:	0003      	movs	r3, r0
 8005fd2:	000d      	movs	r5, r1
  __HAL_LOCK(hadc);
 8005fd4:	2002      	movs	r0, #2
 8005fd6:	2a01      	cmp	r2, #1
 8005fd8:	d00b      	beq.n	8005ff2 <HAL_ADC_ConfigChannel+0x2a>
 8005fda:	3801      	subs	r0, #1
 8005fdc:	7020      	strb	r0, [r4, #0]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	6891      	ldr	r1, [r2, #8]
 8005fe2:	0749      	lsls	r1, r1, #29
 8005fe4:	d506      	bpl.n	8005ff4 <HAL_ADC_ConfigChannel+0x2c>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005fea:	430a      	orrs	r2, r1
 8005fec:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_UNLOCK(hadc);
 8005fee:	2300      	movs	r3, #0
 8005ff0:	7023      	strb	r3, [r4, #0]
}
 8005ff2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (sConfig->Rank != ADC_RANK_NONE)
 8005ff4:	2380      	movs	r3, #128	; 0x80
 8005ff6:	6828      	ldr	r0, [r5, #0]
 8005ff8:	4e19      	ldr	r6, [pc, #100]	; (8006060 <HAL_ADC_ConfigChannel+0x98>)
 8005ffa:	686f      	ldr	r7, [r5, #4]
 8005ffc:	0341      	lsls	r1, r0, #13
 8005ffe:	02db      	lsls	r3, r3, #11
 8006000:	0b49      	lsrs	r1, r1, #13
 8006002:	4003      	ands	r3, r0
 8006004:	42b7      	cmp	r7, r6
 8006006:	d019      	beq.n	800603c <HAL_ADC_ConfigChannel+0x74>
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8006008:	6a90      	ldr	r0, [r2, #40]	; 0x28
 800600a:	4301      	orrs	r1, r0
 800600c:	6291      	str	r1, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800600e:	2b00      	cmp	r3, #0
 8006010:	d008      	beq.n	8006024 <HAL_ADC_ConfigChannel+0x5c>
      ADC->CCR |= ADC_CCR_TSEN;   
 8006012:	2380      	movs	r3, #128	; 0x80
 8006014:	4a13      	ldr	r2, [pc, #76]	; (8006064 <HAL_ADC_ConfigChannel+0x9c>)
 8006016:	041b      	lsls	r3, r3, #16
 8006018:	6811      	ldr	r1, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800601a:	200a      	movs	r0, #10
      ADC->CCR |= ADC_CCR_TSEN;   
 800601c:	430b      	orrs	r3, r1
 800601e:	6013      	str	r3, [r2, #0]
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8006020:	f7ff fda0 	bl	8005b64 <ADC_DelayMicroSecond>
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006024:	682b      	ldr	r3, [r5, #0]
 8006026:	039b      	lsls	r3, r3, #14
 8006028:	d505      	bpl.n	8006036 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR |= ADC_CCR_VREFEN;   
 800602a:	2380      	movs	r3, #128	; 0x80
 800602c:	4a0d      	ldr	r2, [pc, #52]	; (8006064 <HAL_ADC_ConfigChannel+0x9c>)
 800602e:	03db      	lsls	r3, r3, #15
 8006030:	6811      	ldr	r1, [r2, #0]
 8006032:	430b      	orrs	r3, r1
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8006034:	6013      	str	r3, [r2, #0]
  __HAL_UNLOCK(hadc);
 8006036:	2000      	movs	r0, #0
 8006038:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 800603a:	e7da      	b.n	8005ff2 <HAL_ADC_ConfigChannel+0x2a>
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800603c:	6a95      	ldr	r5, [r2, #40]	; 0x28
 800603e:	438d      	bics	r5, r1
 8006040:	6295      	str	r5, [r2, #40]	; 0x28
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR ) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8006042:	2b00      	cmp	r3, #0
 8006044:	d004      	beq.n	8006050 <HAL_ADC_ConfigChannel+0x88>
      ADC->CCR &= ~ADC_CCR_TSEN;   
 8006046:	4a07      	ldr	r2, [pc, #28]	; (8006064 <HAL_ADC_ConfigChannel+0x9c>)
 8006048:	4907      	ldr	r1, [pc, #28]	; (8006068 <HAL_ADC_ConfigChannel+0xa0>)
 800604a:	6813      	ldr	r3, [r2, #0]
 800604c:	400b      	ands	r3, r1
 800604e:	6013      	str	r3, [r2, #0]
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8006050:	0383      	lsls	r3, r0, #14
 8006052:	d5f0      	bpl.n	8006036 <HAL_ADC_ConfigChannel+0x6e>
      ADC->CCR &= ~ADC_CCR_VREFEN;   
 8006054:	4a03      	ldr	r2, [pc, #12]	; (8006064 <HAL_ADC_ConfigChannel+0x9c>)
 8006056:	4905      	ldr	r1, [pc, #20]	; (800606c <HAL_ADC_ConfigChannel+0xa4>)
 8006058:	6813      	ldr	r3, [r2, #0]
 800605a:	400b      	ands	r3, r1
 800605c:	e7ea      	b.n	8006034 <HAL_ADC_ConfigChannel+0x6c>
 800605e:	46c0      	nop			; (mov r8, r8)
 8006060:	00001001 	.word	0x00001001
 8006064:	40012708 	.word	0x40012708
 8006068:	ff7fffff 	.word	0xff7fffff
 800606c:	ffbfffff 	.word	0xffbfffff

08006070 <HAL_ADCEx_Calibration_Start>:
  *          This parameter can be only of the following values:
  *            @arg ADC_SINGLE_ENDED: Channel in mode input single ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc, uint32_t SingleDiff)
{
 8006070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8006072:	0005      	movs	r5, r0
 8006074:	3550      	adds	r5, #80	; 0x50
 8006076:	782b      	ldrb	r3, [r5, #0]
{
 8006078:	0004      	movs	r4, r0
  __HAL_LOCK(hadc);
 800607a:	2002      	movs	r0, #2
 800607c:	2b01      	cmp	r3, #1
 800607e:	d044      	beq.n	800610a <HAL_ADCEx_Calibration_Start+0x9a>
 8006080:	2301      	movs	r3, #1
  
  /* Calibration prerequisite: ADC must be disabled. */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006082:	2203      	movs	r2, #3
  __HAL_LOCK(hadc);
 8006084:	702b      	strb	r3, [r5, #0]
  if (ADC_IS_ENABLE(hadc) == RESET)
 8006086:	6823      	ldr	r3, [r4, #0]
 8006088:	6898      	ldr	r0, [r3, #8]
 800608a:	4010      	ands	r0, r2
 800608c:	2801      	cmp	r0, #1
 800608e:	d109      	bne.n	80060a4 <HAL_ADCEx_Calibration_Start+0x34>
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	4202      	tst	r2, r0
 8006094:	d006      	beq.n	80060a4 <HAL_ADCEx_Calibration_Start+0x34>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8006096:	2320      	movs	r3, #32
 8006098:	6d62      	ldr	r2, [r4, #84]	; 0x54
 800609a:	4313      	orrs	r3, r2
 800609c:	6563      	str	r3, [r4, #84]	; 0x54
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800609e:	2300      	movs	r3, #0
 80060a0:	702b      	strb	r3, [r5, #0]
  
  /* Return function status */
  return tmp_hal_status;
 80060a2:	e032      	b.n	800610a <HAL_ADCEx_Calibration_Start+0x9a>
    ADC_STATE_CLR_SET(hadc->State, 
 80060a4:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80060a6:	4919      	ldr	r1, [pc, #100]	; (800610c <HAL_ADCEx_Calibration_Start+0x9c>)
 80060a8:	4011      	ands	r1, r2
 80060aa:	2202      	movs	r2, #2
 80060ac:	430a      	orrs	r2, r1
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80060ae:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State, 
 80060b0:	6562      	str	r2, [r4, #84]	; 0x54
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80060b2:	68de      	ldr	r6, [r3, #12]
    CLEAR_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	438a      	bics	r2, r1
 80060b8:	60da      	str	r2, [r3, #12]
    hadc->Instance->CR |= ADC_CR_ADCAL;
 80060ba:	2280      	movs	r2, #128	; 0x80
 80060bc:	6899      	ldr	r1, [r3, #8]
 80060be:	0612      	lsls	r2, r2, #24
 80060c0:	430a      	orrs	r2, r1
 80060c2:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 80060c4:	f7ff fd38 	bl	8005b38 <HAL_GetTick>
 80060c8:	0007      	movs	r7, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADCAL))
 80060ca:	6823      	ldr	r3, [r4, #0]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	2a00      	cmp	r2, #0
 80060d0:	db0c      	blt.n	80060ec <HAL_ADCEx_Calibration_Start+0x7c>
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80060d2:	2203      	movs	r2, #3
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80060d4:	68d9      	ldr	r1, [r3, #12]
    backup_setting_adc_dma_transfer = READ_BIT(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN | ADC_CFGR1_DMACFG);
 80060d6:	4016      	ands	r6, r2
    SET_BIT(hadc->Instance->CFGR1, backup_setting_adc_dma_transfer);
 80060d8:	430e      	orrs	r6, r1
 80060da:	60de      	str	r6, [r3, #12]
    ADC_STATE_CLR_SET(hadc->State,
 80060dc:	6d63      	ldr	r3, [r4, #84]	; 0x54
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80060de:	2000      	movs	r0, #0
    ADC_STATE_CLR_SET(hadc->State,
 80060e0:	4393      	bics	r3, r2
 80060e2:	001a      	movs	r2, r3
 80060e4:	2301      	movs	r3, #1
 80060e6:	4313      	orrs	r3, r2
 80060e8:	6563      	str	r3, [r4, #84]	; 0x54
 80060ea:	e7d8      	b.n	800609e <HAL_ADCEx_Calibration_Start+0x2e>
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80060ec:	f7ff fd24 	bl	8005b38 <HAL_GetTick>
 80060f0:	1bc0      	subs	r0, r0, r7
 80060f2:	280a      	cmp	r0, #10
 80060f4:	d9e9      	bls.n	80060ca <HAL_ADCEx_Calibration_Start+0x5a>
        ADC_STATE_CLR_SET(hadc->State,
 80060f6:	2212      	movs	r2, #18
 80060f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
        return HAL_ERROR;
 80060fa:	2001      	movs	r0, #1
        ADC_STATE_CLR_SET(hadc->State,
 80060fc:	4393      	bics	r3, r2
 80060fe:	001a      	movs	r2, r3
 8006100:	2310      	movs	r3, #16
 8006102:	4313      	orrs	r3, r2
 8006104:	6563      	str	r3, [r4, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8006106:	2300      	movs	r3, #0
 8006108:	702b      	strb	r3, [r5, #0]
}
 800610a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800610c:	fffffefd 	.word	0xfffffefd

08006110 <HAL_ADCEx_Calibration_GetValue>:
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff)); 
  
  /* Return the ADC calibration value */ 
  return ((hadc->Instance->CALFACT) & 0x0000007FU);
 8006110:	6803      	ldr	r3, [r0, #0]
 8006112:	33b4      	adds	r3, #180	; 0xb4
 8006114:	6818      	ldr	r0, [r3, #0]
 8006116:	237f      	movs	r3, #127	; 0x7f
 8006118:	4018      	ands	r0, r3
}
 800611a:	4770      	bx	lr

0800611c <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800611c:	b530      	push	{r4, r5, lr}
 800611e:	25ff      	movs	r5, #255	; 0xff
 8006120:	2403      	movs	r4, #3
 8006122:	002a      	movs	r2, r5
 8006124:	4004      	ands	r4, r0
 8006126:	00e4      	lsls	r4, r4, #3
 8006128:	40a2      	lsls	r2, r4
 800612a:	0189      	lsls	r1, r1, #6
 800612c:	4029      	ands	r1, r5
 800612e:	43d2      	mvns	r2, r2
 8006130:	40a1      	lsls	r1, r4
 8006132:	b2c3      	uxtb	r3, r0
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) < 0)
 8006134:	2800      	cmp	r0, #0
 8006136:	da0b      	bge.n	8006150 <HAL_NVIC_SetPriority+0x34>
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006138:	200f      	movs	r0, #15
 800613a:	4003      	ands	r3, r0
 800613c:	3b08      	subs	r3, #8
 800613e:	480a      	ldr	r0, [pc, #40]	; (8006168 <HAL_NVIC_SetPriority+0x4c>)
 8006140:	089b      	lsrs	r3, r3, #2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	181b      	adds	r3, r3, r0
 8006146:	69d8      	ldr	r0, [r3, #28]
 8006148:	4002      	ands	r2, r0
 800614a:	4311      	orrs	r1, r2
 800614c:	61d9      	str	r1, [r3, #28]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 800614e:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006150:	4b06      	ldr	r3, [pc, #24]	; (800616c <HAL_NVIC_SetPriority+0x50>)
 8006152:	0880      	lsrs	r0, r0, #2
 8006154:	0080      	lsls	r0, r0, #2
 8006156:	18c0      	adds	r0, r0, r3
 8006158:	23c0      	movs	r3, #192	; 0xc0
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	58c4      	ldr	r4, [r0, r3]
 800615e:	4022      	ands	r2, r4
 8006160:	4311      	orrs	r1, r2
 8006162:	50c1      	str	r1, [r0, r3]
 8006164:	e7f3      	b.n	800614e <HAL_NVIC_SetPriority+0x32>
 8006166:	46c0      	nop			; (mov r8, r8)
 8006168:	e000ed00 	.word	0xe000ed00
 800616c:	e000e100 	.word	0xe000e100

08006170 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006170:	231f      	movs	r3, #31
 8006172:	4018      	ands	r0, r3
 8006174:	3b1e      	subs	r3, #30
 8006176:	4083      	lsls	r3, r0
 8006178:	4a01      	ldr	r2, [pc, #4]	; (8006180 <HAL_NVIC_EnableIRQ+0x10>)
 800617a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800617c:	4770      	bx	lr
 800617e:	46c0      	nop			; (mov r8, r8)
 8006180:	e000e100 	.word	0xe000e100

08006184 <HAL_NVIC_DisableIRQ>:
  NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006184:	231f      	movs	r3, #31
 8006186:	4018      	ands	r0, r3
 8006188:	3b1e      	subs	r3, #30
 800618a:	4083      	lsls	r3, r0
 800618c:	4a01      	ldr	r2, [pc, #4]	; (8006194 <HAL_NVIC_DisableIRQ+0x10>)
 800618e:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8006190:	4770      	bx	lr
 8006192:	46c0      	nop			; (mov r8, r8)
 8006194:	e000e104 	.word	0xe000e104

08006198 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006198:	2280      	movs	r2, #128	; 0x80
 800619a:	1e43      	subs	r3, r0, #1
 800619c:	0452      	lsls	r2, r2, #17
  {
    return (1UL);                                                   /* Reload value impossible */
 800619e:	2001      	movs	r0, #1
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d20d      	bcs.n	80061c0 <HAL_SYSTICK_Config+0x28>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80061a4:	21c0      	movs	r1, #192	; 0xc0
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061a6:	4a07      	ldr	r2, [pc, #28]	; (80061c4 <HAL_SYSTICK_Config+0x2c>)
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80061a8:	4807      	ldr	r0, [pc, #28]	; (80061c8 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80061aa:	6053      	str	r3, [r2, #4]
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80061ac:	6a03      	ldr	r3, [r0, #32]
 80061ae:	0609      	lsls	r1, r1, #24
 80061b0:	021b      	lsls	r3, r3, #8
 80061b2:	0a1b      	lsrs	r3, r3, #8
 80061b4:	430b      	orrs	r3, r1
 80061b6:	6203      	str	r3, [r0, #32]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061b8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061ba:	2307      	movs	r3, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80061bc:	6090      	str	r0, [r2, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80061be:	6013      	str	r3, [r2, #0]
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80061c0:	4770      	bx	lr
 80061c2:	46c0      	nop			; (mov r8, r8)
 80061c4:	e000e010 	.word	0xe000e010
 80061c8:	e000ed00 	.word	0xe000ed00

080061cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80061cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ce:	0004      	movs	r4, r0
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
  {
    return HAL_ERROR;
 80061d0:	2001      	movs	r0, #1
  if(hdma == NULL)
 80061d2:	2c00      	cmp	r4, #0
 80061d4:	d035      	beq.n	8006242 <HAL_DMA_Init+0x76>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80061d6:	6825      	ldr	r5, [r4, #0]
 80061d8:	4b1a      	ldr	r3, [pc, #104]	; (8006244 <HAL_DMA_Init+0x78>)
 80061da:	2114      	movs	r1, #20
 80061dc:	18e8      	adds	r0, r5, r3
 80061de:	f7fc f967 	bl	80024b0 <__udivsi3>
  hdma->DmaBaseAddress = DMA1;
 80061e2:	4b19      	ldr	r3, [pc, #100]	; (8006248 <HAL_DMA_Init+0x7c>)
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80061e4:	0080      	lsls	r0, r0, #2
  hdma->DmaBaseAddress = DMA1;
 80061e6:	6423      	str	r3, [r4, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80061e8:	2302      	movs	r3, #2
 80061ea:	1da2      	adds	r2, r4, #6
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80061ec:	6460      	str	r0, [r4, #68]	; 0x44
  hdma->State = HAL_DMA_STATE_BUSY;
 80061ee:	77d3      	strb	r3, [r2, #31]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80061f0:	682e      	ldr	r6, [r5, #0]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80061f2:	4b16      	ldr	r3, [pc, #88]	; (800624c <HAL_DMA_Init+0x80>)
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80061f4:	68a1      	ldr	r1, [r4, #8]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80061f6:	401e      	ands	r6, r3
  tmp |=  hdma->Init.Direction        |
 80061f8:	68e3      	ldr	r3, [r4, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061fa:	6927      	ldr	r7, [r4, #16]
  tmp |=  hdma->Init.Direction        |
 80061fc:	430b      	orrs	r3, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80061fe:	433b      	orrs	r3, r7
 8006200:	6967      	ldr	r7, [r4, #20]
 8006202:	433b      	orrs	r3, r7
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006204:	69a7      	ldr	r7, [r4, #24]
 8006206:	433b      	orrs	r3, r7
 8006208:	69e7      	ldr	r7, [r4, #28]
 800620a:	433b      	orrs	r3, r7
          hdma->Init.Mode                | hdma->Init.Priority;
 800620c:	6a27      	ldr	r7, [r4, #32]
 800620e:	433b      	orrs	r3, r7
  tmp |=  hdma->Init.Direction        |
 8006210:	4333      	orrs	r3, r6

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8006212:	602b      	str	r3, [r5, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8006214:	2380      	movs	r3, #128	; 0x80
 8006216:	01db      	lsls	r3, r3, #7
 8006218:	4299      	cmp	r1, r3
 800621a:	d00c      	beq.n	8006236 <HAL_DMA_Init+0x6a>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800621c:	251c      	movs	r5, #28
 800621e:	4028      	ands	r0, r5
 8006220:	3d0d      	subs	r5, #13
 8006222:	4085      	lsls	r5, r0
 8006224:	490a      	ldr	r1, [pc, #40]	; (8006250 <HAL_DMA_Init+0x84>)
 8006226:	680b      	ldr	r3, [r1, #0]
 8006228:	43ab      	bics	r3, r5
 800622a:	600b      	str	r3, [r1, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800622c:	6863      	ldr	r3, [r4, #4]
 800622e:	680d      	ldr	r5, [r1, #0]
 8006230:	4083      	lsls	r3, r0
 8006232:	432b      	orrs	r3, r5
 8006234:	600b      	str	r3, [r1, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006236:	2000      	movs	r0, #0

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006238:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800623a:	63e0      	str	r0, [r4, #60]	; 0x3c

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800623c:	3405      	adds	r4, #5
  hdma->State  = HAL_DMA_STATE_READY;
 800623e:	77d3      	strb	r3, [r2, #31]
  hdma->Lock = HAL_UNLOCKED;
 8006240:	77e0      	strb	r0, [r4, #31]

  return HAL_OK;
}
 8006242:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006244:	bffdfff8 	.word	0xbffdfff8
 8006248:	40020000 	.word	0x40020000
 800624c:	ffff800f 	.word	0xffff800f
 8006250:	400200a8 	.word	0x400200a8

08006254 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8006256:	1d45      	adds	r5, r0, #5
{
 8006258:	9301      	str	r3, [sp, #4]
  __HAL_LOCK(hdma);
 800625a:	7feb      	ldrb	r3, [r5, #31]
{
 800625c:	0004      	movs	r4, r0
  __HAL_LOCK(hdma);
 800625e:	2002      	movs	r0, #2
 8006260:	2b01      	cmp	r3, #1
 8006262:	d029      	beq.n	80062b8 <HAL_DMA_Start_IT+0x64>
 8006264:	2301      	movs	r3, #1

  if(HAL_DMA_STATE_READY == hdma->State)
 8006266:	1da7      	adds	r7, r4, #6
  __HAL_LOCK(hdma);
 8006268:	77eb      	strb	r3, [r5, #31]
  if(HAL_DMA_STATE_READY == hdma->State)
 800626a:	7ffb      	ldrb	r3, [r7, #31]
 800626c:	2600      	movs	r6, #0
 800626e:	469c      	mov	ip, r3
 8006270:	4660      	mov	r0, ip
 8006272:	b2db      	uxtb	r3, r3
 8006274:	2801      	cmp	r0, #1
 8006276:	d12a      	bne.n	80062ce <HAL_DMA_Start_IT+0x7a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006278:	3001      	adds	r0, #1
 800627a:	77f8      	strb	r0, [r7, #31]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800627c:	6820      	ldr	r0, [r4, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800627e:	63e6      	str	r6, [r4, #60]	; 0x3c
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006280:	6c67      	ldr	r7, [r4, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 8006282:	6805      	ldr	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006284:	361c      	adds	r6, #28
 8006286:	403e      	ands	r6, r7
    __HAL_DMA_DISABLE(hdma);
 8006288:	439d      	bics	r5, r3
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800628a:	40b3      	lsls	r3, r6
    __HAL_DMA_DISABLE(hdma);
 800628c:	6005      	str	r5, [r0, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800628e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8006290:	606b      	str	r3, [r5, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006292:	9b01      	ldr	r3, [sp, #4]
 8006294:	6043      	str	r3, [r0, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006296:	68a3      	ldr	r3, [r4, #8]
 8006298:	2b10      	cmp	r3, #16
 800629a:	d10e      	bne.n	80062ba <HAL_DMA_Start_IT+0x66>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800629c:	6082      	str	r2, [r0, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800629e:	60c1      	str	r1, [r0, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 80062a0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d00c      	beq.n	80062c0 <HAL_DMA_Start_IT+0x6c>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80062a6:	230e      	movs	r3, #14
 80062a8:	6802      	ldr	r2, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80062aa:	4313      	orrs	r3, r2
 80062ac:	6003      	str	r3, [r0, #0]
    __HAL_DMA_ENABLE(hdma);
 80062ae:	2301      	movs	r3, #1
 80062b0:	6802      	ldr	r2, [r0, #0]
 80062b2:	4313      	orrs	r3, r2
 80062b4:	6003      	str	r3, [r0, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062b6:	2000      	movs	r0, #0
}
 80062b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 80062ba:	6081      	str	r1, [r0, #8]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 80062bc:	60c2      	str	r2, [r0, #12]
 80062be:	e7ef      	b.n	80062a0 <HAL_DMA_Start_IT+0x4c>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80062c0:	2204      	movs	r2, #4
 80062c2:	6803      	ldr	r3, [r0, #0]
 80062c4:	4393      	bics	r3, r2
 80062c6:	6003      	str	r3, [r0, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80062c8:	6802      	ldr	r2, [r0, #0]
 80062ca:	230a      	movs	r3, #10
 80062cc:	e7ed      	b.n	80062aa <HAL_DMA_Start_IT+0x56>
    status = HAL_BUSY;
 80062ce:	2002      	movs	r0, #2
    __HAL_UNLOCK(hdma);
 80062d0:	77ee      	strb	r6, [r5, #31]
    status = HAL_BUSY;
 80062d2:	e7f1      	b.n	80062b8 <HAL_DMA_Start_IT+0x64>

080062d4 <HAL_DMA_IRQHandler>:
{
 80062d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80062d6:	221c      	movs	r2, #28
 80062d8:	2704      	movs	r7, #4
 80062da:	6c46      	ldr	r6, [r0, #68]	; 0x44
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80062dc:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80062de:	4032      	ands	r2, r6
 80062e0:	003e      	movs	r6, r7
 80062e2:	4096      	lsls	r6, r2
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80062e4:	680d      	ldr	r5, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80062e6:	6803      	ldr	r3, [r0, #0]
 80062e8:	681c      	ldr	r4, [r3, #0]
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80062ea:	4235      	tst	r5, r6
 80062ec:	d00d      	beq.n	800630a <HAL_DMA_IRQHandler+0x36>
 80062ee:	423c      	tst	r4, r7
 80062f0:	d00b      	beq.n	800630a <HAL_DMA_IRQHandler+0x36>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	0692      	lsls	r2, r2, #26
 80062f6:	d402      	bmi.n	80062fe <HAL_DMA_IRQHandler+0x2a>
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	43ba      	bics	r2, r7
 80062fc:	601a      	str	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 80062fe:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8006300:	604e      	str	r6, [r1, #4]
     if(hdma->XferHalfCpltCallback != NULL)
 8006302:	2b00      	cmp	r3, #0
 8006304:	d019      	beq.n	800633a <HAL_DMA_IRQHandler+0x66>
      hdma->XferErrorCallback(hdma);
 8006306:	4798      	blx	r3
  return;
 8006308:	e017      	b.n	800633a <HAL_DMA_IRQHandler+0x66>
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800630a:	2702      	movs	r7, #2
 800630c:	003e      	movs	r6, r7
 800630e:	4096      	lsls	r6, r2
 8006310:	4235      	tst	r5, r6
 8006312:	d013      	beq.n	800633c <HAL_DMA_IRQHandler+0x68>
 8006314:	423c      	tst	r4, r7
 8006316:	d011      	beq.n	800633c <HAL_DMA_IRQHandler+0x68>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	0692      	lsls	r2, r2, #26
 800631c:	d406      	bmi.n	800632c <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800631e:	240a      	movs	r4, #10
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	43a2      	bics	r2, r4
 8006324:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8006326:	2201      	movs	r2, #1
 8006328:	1d83      	adds	r3, r0, #6
 800632a:	77da      	strb	r2, [r3, #31]
    __HAL_UNLOCK(hdma);
 800632c:	2200      	movs	r2, #0
 800632e:	1d43      	adds	r3, r0, #5
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8006330:	604e      	str	r6, [r1, #4]
    __HAL_UNLOCK(hdma);
 8006332:	77da      	strb	r2, [r3, #31]
    if(hdma->XferCpltCallback != NULL)
 8006334:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    if (hdma->XferErrorCallback != NULL)
 8006336:	4293      	cmp	r3, r2
 8006338:	d1e5      	bne.n	8006306 <HAL_DMA_IRQHandler+0x32>
}
 800633a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800633c:	2608      	movs	r6, #8
 800633e:	0037      	movs	r7, r6
 8006340:	4097      	lsls	r7, r2
 8006342:	423d      	tst	r5, r7
 8006344:	d0f9      	beq.n	800633a <HAL_DMA_IRQHandler+0x66>
 8006346:	4234      	tst	r4, r6
 8006348:	d0f7      	beq.n	800633a <HAL_DMA_IRQHandler+0x66>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800634a:	250e      	movs	r5, #14
 800634c:	681c      	ldr	r4, [r3, #0]
 800634e:	43ac      	bics	r4, r5
 8006350:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006352:	2301      	movs	r3, #1
 8006354:	001c      	movs	r4, r3
 8006356:	4094      	lsls	r4, r2
    hdma->State = HAL_DMA_STATE_READY;
 8006358:	1d82      	adds	r2, r0, #6
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800635a:	604c      	str	r4, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800635c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800635e:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hdma);
 8006360:	2200      	movs	r2, #0
 8006362:	1d43      	adds	r3, r0, #5
 8006364:	77da      	strb	r2, [r3, #31]
    if (hdma->XferErrorCallback != NULL)
 8006366:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8006368:	e7e5      	b.n	8006336 <HAL_DMA_IRQHandler+0x62>
	...

0800636c <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800636c:	4a28      	ldr	r2, [pc, #160]	; (8006410 <FLASH_SetErrorCode+0xa4>)
 800636e:	2180      	movs	r1, #128	; 0x80
 8006370:	6990      	ldr	r0, [r2, #24]
 8006372:	0049      	lsls	r1, r1, #1
 8006374:	0003      	movs	r3, r0
{
 8006376:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8006378:	400b      	ands	r3, r1
 800637a:	4208      	tst	r0, r1
 800637c:	d005      	beq.n	800638a <FLASH_SetErrorCode+0x1e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800637e:	2302      	movs	r3, #2
 8006380:	4824      	ldr	r0, [pc, #144]	; (8006414 <FLASH_SetErrorCode+0xa8>)
 8006382:	6944      	ldr	r4, [r0, #20]
 8006384:	4323      	orrs	r3, r4
 8006386:	6143      	str	r3, [r0, #20]
    flags |= FLASH_FLAG_WRPERR;
 8006388:	000b      	movs	r3, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800638a:	2080      	movs	r0, #128	; 0x80
 800638c:	6991      	ldr	r1, [r2, #24]
 800638e:	0080      	lsls	r0, r0, #2
 8006390:	4201      	tst	r1, r0
 8006392:	d005      	beq.n	80063a0 <FLASH_SetErrorCode+0x34>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006394:	2101      	movs	r1, #1
 8006396:	4c1f      	ldr	r4, [pc, #124]	; (8006414 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_PGAERR;
 8006398:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800639a:	6965      	ldr	r5, [r4, #20]
 800639c:	4329      	orrs	r1, r5
 800639e:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 80063a0:	2080      	movs	r0, #128	; 0x80
 80063a2:	6991      	ldr	r1, [r2, #24]
 80063a4:	00c0      	lsls	r0, r0, #3
 80063a6:	4201      	tst	r1, r0
 80063a8:	d005      	beq.n	80063b6 <FLASH_SetErrorCode+0x4a>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80063aa:	2108      	movs	r1, #8
 80063ac:	4c19      	ldr	r4, [pc, #100]	; (8006414 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_SIZERR;
 80063ae:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 80063b0:	6965      	ldr	r5, [r4, #20]
 80063b2:	4329      	orrs	r1, r5
 80063b4:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 80063b6:	2080      	movs	r0, #128	; 0x80
 80063b8:	6991      	ldr	r1, [r2, #24]
 80063ba:	0100      	lsls	r0, r0, #4
 80063bc:	4201      	tst	r1, r0
 80063be:	d005      	beq.n	80063cc <FLASH_SetErrorCode+0x60>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80063c0:	2104      	movs	r1, #4
 80063c2:	4c14      	ldr	r4, [pc, #80]	; (8006414 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_OPTVERR;
 80063c4:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 80063c6:	6965      	ldr	r5, [r4, #20]
 80063c8:	4329      	orrs	r1, r5
 80063ca:	6161      	str	r1, [r4, #20]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 80063cc:	2080      	movs	r0, #128	; 0x80
 80063ce:	6991      	ldr	r1, [r2, #24]
 80063d0:	0180      	lsls	r0, r0, #6
 80063d2:	4201      	tst	r1, r0
 80063d4:	d005      	beq.n	80063e2 <FLASH_SetErrorCode+0x76>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80063d6:	2110      	movs	r1, #16
 80063d8:	4c0e      	ldr	r4, [pc, #56]	; (8006414 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_RDERR;
 80063da:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80063dc:	6965      	ldr	r5, [r4, #20]
 80063de:	4329      	orrs	r1, r5
 80063e0:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 80063e2:	6991      	ldr	r1, [r2, #24]
 80063e4:	0389      	lsls	r1, r1, #14
 80063e6:	d505      	bpl.n	80063f4 <FLASH_SetErrorCode+0x88>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80063e8:	2020      	movs	r0, #32
 80063ea:	4c0a      	ldr	r4, [pc, #40]	; (8006414 <FLASH_SetErrorCode+0xa8>)
    flags |= HAL_FLASH_ERROR_FWWERR;
 80063ec:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 80063ee:	6961      	ldr	r1, [r4, #20]
 80063f0:	4301      	orrs	r1, r0
 80063f2:	6161      	str	r1, [r4, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 80063f4:	2080      	movs	r0, #128	; 0x80
 80063f6:	6991      	ldr	r1, [r2, #24]
 80063f8:	0240      	lsls	r0, r0, #9
 80063fa:	4201      	tst	r1, r0
 80063fc:	d005      	beq.n	800640a <FLASH_SetErrorCode+0x9e>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 80063fe:	2140      	movs	r1, #64	; 0x40
 8006400:	4c04      	ldr	r4, [pc, #16]	; (8006414 <FLASH_SetErrorCode+0xa8>)
    flags |= FLASH_FLAG_NOTZEROERR;
 8006402:	4303      	orrs	r3, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 8006404:	6965      	ldr	r5, [r4, #20]
 8006406:	4329      	orrs	r1, r5
 8006408:	6161      	str	r1, [r4, #20]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800640a:	6193      	str	r3, [r2, #24]
}  
 800640c:	bd30      	pop	{r4, r5, pc}
 800640e:	46c0      	nop			; (mov r8, r8)
 8006410:	40022000 	.word	0x40022000
 8006414:	200008f4 	.word	0x200008f4

08006418 <HAL_FLASH_GetError>:
   return pFlash.ErrorCode;
 8006418:	4b01      	ldr	r3, [pc, #4]	; (8006420 <HAL_FLASH_GetError+0x8>)
 800641a:	6958      	ldr	r0, [r3, #20]
}
 800641c:	4770      	bx	lr
 800641e:	46c0      	nop			; (mov r8, r8)
 8006420:	200008f4 	.word	0x200008f4

08006424 <FLASH_WaitForLastOperation>:
{
 8006424:	b570      	push	{r4, r5, r6, lr}
 8006426:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006428:	f7ff fb86 	bl	8005b38 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800642c:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 800642e:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8006430:	4a19      	ldr	r2, [pc, #100]	; (8006498 <FLASH_WaitForLastOperation+0x74>)
 8006432:	0013      	movs	r3, r2
 8006434:	6991      	ldr	r1, [r2, #24]
 8006436:	4231      	tst	r1, r6
 8006438:	d121      	bne.n	800647e <FLASH_WaitForLastOperation+0x5a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800643a:	2102      	movs	r1, #2
 800643c:	6990      	ldr	r0, [r2, #24]
 800643e:	4208      	tst	r0, r1
 8006440:	d000      	beq.n	8006444 <FLASH_WaitForLastOperation+0x20>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006442:	6191      	str	r1, [r2, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 8006444:	699a      	ldr	r2, [r3, #24]
 8006446:	05d2      	lsls	r2, r2, #23
 8006448:	d415      	bmi.n	8006476 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800644a:	699a      	ldr	r2, [r3, #24]
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800644c:	0592      	lsls	r2, r2, #22
 800644e:	d412      	bmi.n	8006476 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8006450:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 8006452:	0552      	lsls	r2, r2, #21
 8006454:	d40f      	bmi.n	8006476 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 8006456:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 8006458:	0512      	lsls	r2, r2, #20
 800645a:	d40c      	bmi.n	8006476 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800645c:	699a      	ldr	r2, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800645e:	0492      	lsls	r2, r2, #18
 8006460:	d409      	bmi.n	8006476 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8006462:	6999      	ldr	r1, [r3, #24]
 8006464:	2280      	movs	r2, #128	; 0x80
 8006466:	0008      	movs	r0, r1
 8006468:	0292      	lsls	r2, r2, #10
 800646a:	4010      	ands	r0, r2
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800646c:	4211      	tst	r1, r2
 800646e:	d102      	bne.n	8006476 <FLASH_WaitForLastOperation+0x52>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 8006470:	699b      	ldr	r3, [r3, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 8006472:	03db      	lsls	r3, r3, #15
 8006474:	d508      	bpl.n	8006488 <FLASH_WaitForLastOperation+0x64>
    FLASH_SetErrorCode();
 8006476:	f7ff ff79 	bl	800636c <FLASH_SetErrorCode>
    return HAL_ERROR;
 800647a:	2001      	movs	r0, #1
 800647c:	e004      	b.n	8006488 <FLASH_WaitForLastOperation+0x64>
    if (Timeout != HAL_MAX_DELAY)
 800647e:	1c61      	adds	r1, r4, #1
 8006480:	d0d8      	beq.n	8006434 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8006482:	2c00      	cmp	r4, #0
 8006484:	d101      	bne.n	800648a <FLASH_WaitForLastOperation+0x66>
        return HAL_TIMEOUT;
 8006486:	2003      	movs	r0, #3
}
 8006488:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800648a:	f7ff fb55 	bl	8005b38 <HAL_GetTick>
 800648e:	1b40      	subs	r0, r0, r5
 8006490:	42a0      	cmp	r0, r4
 8006492:	d9cd      	bls.n	8006430 <FLASH_WaitForLastOperation+0xc>
 8006494:	e7f7      	b.n	8006486 <FLASH_WaitForLastOperation+0x62>
 8006496:	46c0      	nop			; (mov r8, r8)
 8006498:	40022000 	.word	0x40022000

0800649c <HAL_FLASHEx_DATAEEPROM_Unlock>:
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800649c:	2201      	movs	r2, #1
 800649e:	4b08      	ldr	r3, [pc, #32]	; (80064c0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x24>)
    {
      return HAL_ERROR;
    }
  }

  return HAL_OK;  
 80064a0:	2000      	movs	r0, #0
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80064a2:	6859      	ldr	r1, [r3, #4]
 80064a4:	4211      	tst	r1, r2
 80064a6:	d00a      	beq.n	80064be <HAL_FLASHEx_DATAEEPROM_Unlock+0x22>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80064a8:	f3ef 8110 	mrs	r1, PRIMASK
  __ASM volatile ("cpsid i" : : : "memory");
 80064ac:	b672      	cpsid	i
    FLASH->PEKEYR = FLASH_PEKEY1;
 80064ae:	4805      	ldr	r0, [pc, #20]	; (80064c4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x28>)
 80064b0:	60d8      	str	r0, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 80064b2:	4805      	ldr	r0, [pc, #20]	; (80064c8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x2c>)
 80064b4:	60d8      	str	r0, [r3, #12]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80064b6:	f381 8810 	msr	PRIMASK, r1
    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 80064ba:	6858      	ldr	r0, [r3, #4]
 80064bc:	4010      	ands	r0, r2
}
 80064be:	4770      	bx	lr
 80064c0:	40022000 	.word	0x40022000
 80064c4:	89abcdef 	.word	0x89abcdef
 80064c8:	02030405 	.word	0x02030405

080064cc <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80064cc:	2301      	movs	r3, #1
 80064ce:	4a03      	ldr	r2, [pc, #12]	; (80064dc <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)
  
  return HAL_OK;
}
 80064d0:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 80064d2:	6851      	ldr	r1, [r2, #4]
 80064d4:	430b      	orrs	r3, r1
 80064d6:	6053      	str	r3, [r2, #4]
}
 80064d8:	4770      	bx	lr
 80064da:	46c0      	nop			; (mov r8, r8)
 80064dc:	40022000 	.word	0x40022000

080064e0 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 80064e0:	b510      	push	{r4, lr}
 80064e2:	0004      	movs	r4, r0
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80064e4:	4805      	ldr	r0, [pc, #20]	; (80064fc <HAL_FLASHEx_DATAEEPROM_Erase+0x1c>)
 80064e6:	f7ff ff9d 	bl	8006424 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 80064ea:	2800      	cmp	r0, #0
 80064ec:	d105      	bne.n	80064fa <HAL_FLASHEx_DATAEEPROM_Erase+0x1a>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80064ee:	4b04      	ldr	r3, [pc, #16]	; (8006500 <HAL_FLASHEx_DATAEEPROM_Erase+0x20>)
 80064f0:	6158      	str	r0, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 80064f2:	6020      	str	r0, [r4, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80064f4:	4801      	ldr	r0, [pc, #4]	; (80064fc <HAL_FLASHEx_DATAEEPROM_Erase+0x1c>)
 80064f6:	f7ff ff95 	bl	8006424 <FLASH_WaitForLastOperation>
  }
   
  /* Return the erase status */
  return status;
}  
 80064fa:	bd10      	pop	{r4, pc}
 80064fc:	0000c350 	.word	0x0000c350
 8006500:	200008f4 	.word	0x200008f4

08006504 <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8006504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef status = HAL_ERROR;
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006506:	4f12      	ldr	r7, [pc, #72]	; (8006550 <HAL_FLASHEx_DATAEEPROM_Program+0x4c>)
{
 8006508:	0006      	movs	r6, r0
  __HAL_LOCK(&pFlash);
 800650a:	7c3b      	ldrb	r3, [r7, #16]
{
 800650c:	000d      	movs	r5, r1
 800650e:	0014      	movs	r4, r2
  __HAL_LOCK(&pFlash);
 8006510:	2002      	movs	r0, #2
 8006512:	2b01      	cmp	r3, #1
 8006514:	d00c      	beq.n	8006530 <HAL_FLASHEx_DATAEEPROM_Program+0x2c>
 8006516:	2301      	movs	r3, #1
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006518:	480e      	ldr	r0, [pc, #56]	; (8006554 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
  __HAL_LOCK(&pFlash);
 800651a:	743b      	strb	r3, [r7, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800651c:	f7ff ff82 	bl	8006424 <FLASH_WaitForLastOperation>
  
  if(status == HAL_OK)
 8006520:	2800      	cmp	r0, #0
 8006522:	d103      	bne.n	800652c <HAL_FLASHEx_DATAEEPROM_Program+0x28>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006524:	6178      	str	r0, [r7, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8006526:	2e02      	cmp	r6, #2
 8006528:	d103      	bne.n	8006532 <HAL_FLASHEx_DATAEEPROM_Program+0x2e>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800652a:	602c      	str	r4, [r5, #0]
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800652c:	2300      	movs	r3, #0
 800652e:	743b      	strb	r3, [r7, #16]

  return status;
}
 8006530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8006532:	2e01      	cmp	r6, #1
 8006534:	d102      	bne.n	800653c <HAL_FLASHEx_DATAEEPROM_Program+0x38>
      *(__IO uint16_t *)Address = (uint16_t) Data;
 8006536:	b2a4      	uxth	r4, r4
 8006538:	802c      	strh	r4, [r5, #0]
 800653a:	e7f7      	b.n	800652c <HAL_FLASHEx_DATAEEPROM_Program+0x28>
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800653c:	2e00      	cmp	r6, #0
 800653e:	d003      	beq.n	8006548 <HAL_FLASHEx_DATAEEPROM_Program+0x44>
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8006540:	4804      	ldr	r0, [pc, #16]	; (8006554 <HAL_FLASHEx_DATAEEPROM_Program+0x50>)
 8006542:	f7ff ff6f 	bl	8006424 <FLASH_WaitForLastOperation>
 8006546:	e7f1      	b.n	800652c <HAL_FLASHEx_DATAEEPROM_Program+0x28>
      *(__IO uint8_t *)Address = (uint8_t) Data;
 8006548:	b2e4      	uxtb	r4, r4
 800654a:	702c      	strb	r4, [r5, #0]
 800654c:	e7ee      	b.n	800652c <HAL_FLASHEx_DATAEEPROM_Program+0x28>
 800654e:	46c0      	nop			; (mov r8, r8)
 8006550:	200008f4 	.word	0x200008f4
 8006554:	0000c350 	.word	0x0000c350

08006558 <HAL_GPIO_Init>:
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
        
        temp = SYSCFG->EXTICR[position >> 2U];
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8006558:	4a54      	ldr	r2, [pc, #336]	; (80066ac <HAL_GPIO_Init+0x154>)
{
 800655a:	b5f0      	push	{r4, r5, r6, r7, lr}
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800655c:	1882      	adds	r2, r0, r2
 800655e:	1e54      	subs	r4, r2, #1
 8006560:	41a2      	sbcs	r2, r4
  uint32_t position = 0x00U;
 8006562:	2300      	movs	r3, #0
{
 8006564:	b085      	sub	sp, #20
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8006566:	3205      	adds	r2, #5
 8006568:	9203      	str	r2, [sp, #12]
  while (((GPIO_Init->Pin) >> position) != 0)
 800656a:	680a      	ldr	r2, [r1, #0]
 800656c:	0014      	movs	r4, r2
 800656e:	40dc      	lsrs	r4, r3
 8006570:	d101      	bne.n	8006576 <HAL_GPIO_Init+0x1e>
        EXTI->FTSR = temp;
      }
    }
    position++;
  }
}
 8006572:	b005      	add	sp, #20
 8006574:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8006576:	2501      	movs	r5, #1
 8006578:	0014      	movs	r4, r2
 800657a:	409d      	lsls	r5, r3
 800657c:	402c      	ands	r4, r5
 800657e:	9401      	str	r4, [sp, #4]
    if(iocurrent)
 8006580:	422a      	tst	r2, r5
 8006582:	d100      	bne.n	8006586 <HAL_GPIO_Init+0x2e>
 8006584:	e08f      	b.n	80066a6 <HAL_GPIO_Init+0x14e>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 8006586:	684a      	ldr	r2, [r1, #4]
 8006588:	9200      	str	r2, [sp, #0]
 800658a:	2210      	movs	r2, #16
 800658c:	9e00      	ldr	r6, [sp, #0]
 800658e:	4396      	bics	r6, r2
 8006590:	2e02      	cmp	r6, #2
 8006592:	d10f      	bne.n	80065b4 <HAL_GPIO_Init+0x5c>
        temp = GPIOx->AFR[position >> 3U];
 8006594:	08da      	lsrs	r2, r3, #3
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 8006596:	2407      	movs	r4, #7
 8006598:	0092      	lsls	r2, r2, #2
 800659a:	1882      	adds	r2, r0, r2
        temp = GPIOx->AFR[position >> 3U];
 800659c:	6a17      	ldr	r7, [r2, #32]
        temp &= ~((uint32_t)0xFU << ((uint32_t)(position & (uint32_t)0x07U) * 4U)) ;
 800659e:	9202      	str	r2, [sp, #8]
 80065a0:	220f      	movs	r2, #15
 80065a2:	401c      	ands	r4, r3
 80065a4:	00a4      	lsls	r4, r4, #2
 80065a6:	40a2      	lsls	r2, r4
 80065a8:	4397      	bics	r7, r2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U)) ;
 80065aa:	690a      	ldr	r2, [r1, #16]
 80065ac:	40a2      	lsls	r2, r4
 80065ae:	4317      	orrs	r7, r2
        GPIOx->AFR[position >> 3U] = temp;
 80065b0:	9a02      	ldr	r2, [sp, #8]
 80065b2:	6217      	str	r7, [r2, #32]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80065b4:	2203      	movs	r2, #3
 80065b6:	005c      	lsls	r4, r3, #1
 80065b8:	40a2      	lsls	r2, r4
 80065ba:	3e01      	subs	r6, #1
 80065bc:	43d2      	mvns	r2, r2
 80065be:	2e01      	cmp	r6, #1
 80065c0:	d80d      	bhi.n	80065de <HAL_GPIO_Init+0x86>
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065c2:	68ce      	ldr	r6, [r1, #12]
        temp = GPIOx->OSPEEDR;
 80065c4:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065c6:	40a6      	lsls	r6, r4
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80065c8:	4017      	ands	r7, r2
        temp |= (GPIO_Init->Speed << (position * 2U));
 80065ca:	433e      	orrs	r6, r7
        GPIOx->OSPEEDR = temp;
 80065cc:	6086      	str	r6, [r0, #8]
        temp= GPIOx->OTYPER;
 80065ce:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80065d0:	43ae      	bics	r6, r5
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80065d2:	9d00      	ldr	r5, [sp, #0]
 80065d4:	06ed      	lsls	r5, r5, #27
 80065d6:	0fed      	lsrs	r5, r5, #31
 80065d8:	409d      	lsls	r5, r3
 80065da:	4335      	orrs	r5, r6
        GPIOx->OTYPER = temp;
 80065dc:	6045      	str	r5, [r0, #4]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065de:	2503      	movs	r5, #3
 80065e0:	9e00      	ldr	r6, [sp, #0]
      temp = GPIOx->MODER;
 80065e2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065e4:	402e      	ands	r6, r5
 80065e6:	40a6      	lsls	r6, r4
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80065e8:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80065ea:	433e      	orrs	r6, r7
      GPIOx->MODER = temp;
 80065ec:	6006      	str	r6, [r0, #0]
      temp = GPIOx->PUPDR;
 80065ee:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065f0:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U)); 
 80065f2:	688e      	ldr	r6, [r1, #8]
 80065f4:	40a6      	lsls	r6, r4
 80065f6:	4332      	orrs	r2, r6
      GPIOx->PUPDR = temp;
 80065f8:	60c2      	str	r2, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 80065fa:	9a00      	ldr	r2, [sp, #0]
 80065fc:	00d2      	lsls	r2, r2, #3
 80065fe:	d552      	bpl.n	80066a6 <HAL_GPIO_Init+0x14e>
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8006600:	001e      	movs	r6, r3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006602:	2701      	movs	r7, #1
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8006604:	402e      	ands	r6, r5
 8006606:	00b6      	lsls	r6, r6, #2
 8006608:	46b4      	mov	ip, r6
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800660a:	4c29      	ldr	r4, [pc, #164]	; (80066b0 <HAL_GPIO_Init+0x158>)
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800660c:	260f      	movs	r6, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800660e:	6b62      	ldr	r2, [r4, #52]	; 0x34
 8006610:	433a      	orrs	r2, r7
 8006612:	6362      	str	r2, [r4, #52]	; 0x34
        temp = SYSCFG->EXTICR[position >> 2U];
 8006614:	4a27      	ldr	r2, [pc, #156]	; (80066b4 <HAL_GPIO_Init+0x15c>)
 8006616:	089c      	lsrs	r4, r3, #2
 8006618:	00a4      	lsls	r4, r4, #2
 800661a:	18a4      	adds	r4, r4, r2
 800661c:	68a2      	ldr	r2, [r4, #8]
 800661e:	9202      	str	r2, [sp, #8]
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 8006620:	4662      	mov	r2, ip
 8006622:	4096      	lsls	r6, r2
 8006624:	9a02      	ldr	r2, [sp, #8]
 8006626:	43b2      	bics	r2, r6
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8006628:	26a0      	movs	r6, #160	; 0xa0
        CLEAR_BIT(temp, ((uint32_t)0x0FU) << (4U * (position & 0x03U)));
 800662a:	9202      	str	r2, [sp, #8]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800662c:	05f6      	lsls	r6, r6, #23
 800662e:	2200      	movs	r2, #0
 8006630:	42b0      	cmp	r0, r6
 8006632:	d00c      	beq.n	800664e <HAL_GPIO_Init+0xf6>
 8006634:	4e20      	ldr	r6, [pc, #128]	; (80066b8 <HAL_GPIO_Init+0x160>)
 8006636:	003a      	movs	r2, r7
 8006638:	42b0      	cmp	r0, r6
 800663a:	d008      	beq.n	800664e <HAL_GPIO_Init+0xf6>
 800663c:	4e1f      	ldr	r6, [pc, #124]	; (80066bc <HAL_GPIO_Init+0x164>)
 800663e:	19fa      	adds	r2, r7, r7
 8006640:	42b0      	cmp	r0, r6
 8006642:	d004      	beq.n	800664e <HAL_GPIO_Init+0xf6>
 8006644:	4e1e      	ldr	r6, [pc, #120]	; (80066c0 <HAL_GPIO_Init+0x168>)
 8006646:	002a      	movs	r2, r5
 8006648:	42b0      	cmp	r0, r6
 800664a:	d000      	beq.n	800664e <HAL_GPIO_Init+0xf6>
 800664c:	9a03      	ldr	r2, [sp, #12]
 800664e:	4665      	mov	r5, ip
 8006650:	40aa      	lsls	r2, r5
 8006652:	9d02      	ldr	r5, [sp, #8]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006654:	9f00      	ldr	r7, [sp, #0]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8006656:	432a      	orrs	r2, r5
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006658:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 800665a:	4a1a      	ldr	r2, [pc, #104]	; (80066c4 <HAL_GPIO_Init+0x16c>)
        temp &= ~((uint32_t)iocurrent);
 800665c:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 800665e:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 8006660:	9d01      	ldr	r5, [sp, #4]
        temp &= ~((uint32_t)iocurrent);
 8006662:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8006664:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8006666:	03ff      	lsls	r7, r7, #15
 8006668:	d401      	bmi.n	800666e <HAL_GPIO_Init+0x116>
        temp &= ~((uint32_t)iocurrent);
 800666a:	0035      	movs	r5, r6
 800666c:	4025      	ands	r5, r4
        EXTI->IMR = temp;
 800666e:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8006670:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8006672:	9d01      	ldr	r5, [sp, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006674:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8006676:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006678:	03bf      	lsls	r7, r7, #14
 800667a:	d401      	bmi.n	8006680 <HAL_GPIO_Init+0x128>
        temp &= ~((uint32_t)iocurrent);
 800667c:	0035      	movs	r5, r6
 800667e:	4025      	ands	r5, r4
        EXTI->EMR = temp;
 8006680:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8006682:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8006684:	9d01      	ldr	r5, [sp, #4]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006686:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 8006688:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800668a:	02ff      	lsls	r7, r7, #11
 800668c:	d401      	bmi.n	8006692 <HAL_GPIO_Init+0x13a>
        temp &= ~((uint32_t)iocurrent);
 800668e:	0035      	movs	r5, r6
 8006690:	4025      	ands	r5, r4
        EXTI->RTSR = temp;
 8006692:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8006694:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8006696:	9e01      	ldr	r6, [sp, #4]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006698:	9f00      	ldr	r7, [sp, #0]
          temp |= iocurrent;
 800669a:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800669c:	02bf      	lsls	r7, r7, #10
 800669e:	d401      	bmi.n	80066a4 <HAL_GPIO_Init+0x14c>
        temp &= ~((uint32_t)iocurrent);
 80066a0:	4025      	ands	r5, r4
 80066a2:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 80066a4:	60d6      	str	r6, [r2, #12]
    position++;
 80066a6:	3301      	adds	r3, #1
 80066a8:	e75f      	b.n	800656a <HAL_GPIO_Init+0x12>
 80066aa:	46c0      	nop			; (mov r8, r8)
 80066ac:	afffe400 	.word	0xafffe400
 80066b0:	40021000 	.word	0x40021000
 80066b4:	40010000 	.word	0x40010000
 80066b8:	50000400 	.word	0x50000400
 80066bc:	50000800 	.word	0x50000800
 80066c0:	50000c00 	.word	0x50000c00
 80066c4:	40010400 	.word	0x40010400

080066c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx,GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));
  
  if(PinState != GPIO_PIN_RESET)
 80066c8:	2a00      	cmp	r2, #0
 80066ca:	d001      	beq.n	80066d0 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = GPIO_Pin;
 80066cc:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80066ce:	4770      	bx	lr
    GPIOx->BRR = GPIO_Pin ;
 80066d0:	6281      	str	r1, [r0, #40]	; 0x28
}
 80066d2:	e7fc      	b.n	80066ce <HAL_GPIO_WritePin+0x6>

080066d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80066d4:	4b04      	ldr	r3, [pc, #16]	; (80066e8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80066d6:	b510      	push	{r4, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET) 
 80066d8:	695a      	ldr	r2, [r3, #20]
 80066da:	4210      	tst	r0, r2
 80066dc:	d002      	beq.n	80066e4 <HAL_GPIO_EXTI_IRQHandler+0x10>
  { 
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80066de:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80066e0:	f7fe f95e 	bl	80049a0 <HAL_GPIO_EXTI_Callback>
  }
}
 80066e4:	bd10      	pop	{r4, pc}
 80066e6:	46c0      	nop			; (mov r8, r8)
 80066e8:	40010400 	.word	0x40010400

080066ec <HAL_PWR_EnableBkUpAccess>:
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80066ec:	2380      	movs	r3, #128	; 0x80
 80066ee:	4a03      	ldr	r2, [pc, #12]	; (80066fc <HAL_PWR_EnableBkUpAccess+0x10>)
 80066f0:	005b      	lsls	r3, r3, #1
 80066f2:	6811      	ldr	r1, [r2, #0]
 80066f4:	430b      	orrs	r3, r1
 80066f6:	6013      	str	r3, [r2, #0]
}
 80066f8:	4770      	bx	lr
 80066fa:	46c0      	nop			; (mov r8, r8)
 80066fc:	40007000 	.word	0x40007000

08006700 <HAL_RCC_GetSysClockFreq>:
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8006700:	220c      	movs	r2, #12
  tmpreg = RCC->CFGR;
 8006702:	4b19      	ldr	r3, [pc, #100]	; (8006768 <HAL_RCC_GetSysClockFreq+0x68>)
{
 8006704:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8006706:	68d9      	ldr	r1, [r3, #12]
  switch (tmpreg & RCC_CFGR_SWS)
 8006708:	400a      	ands	r2, r1
 800670a:	2a08      	cmp	r2, #8
 800670c:	d029      	beq.n	8006762 <HAL_RCC_GetSysClockFreq+0x62>
 800670e:	2a0c      	cmp	r2, #12
 8006710:	d009      	beq.n	8006726 <HAL_RCC_GetSysClockFreq+0x26>
 8006712:	2a04      	cmp	r2, #4
 8006714:	d11d      	bne.n	8006752 <HAL_RCC_GetSysClockFreq+0x52>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006716:	6818      	ldr	r0, [r3, #0]
      {
        sysclockfreq =  (HSI_VALUE >> 2);
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
 8006718:	4b14      	ldr	r3, [pc, #80]	; (800676c <HAL_RCC_GetSysClockFreq+0x6c>)
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800671a:	06c0      	lsls	r0, r0, #27
        sysclockfreq =  HSI_VALUE;
 800671c:	17c0      	asrs	r0, r0, #31
 800671e:	4018      	ands	r0, r3
 8006720:	4b13      	ldr	r3, [pc, #76]	; (8006770 <HAL_RCC_GetSysClockFreq+0x70>)
 8006722:	18c0      	adds	r0, r0, r3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
      break;
    }
  }
  return sysclockfreq;
}
 8006724:	bd10      	pop	{r4, pc}
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8006726:	4813      	ldr	r0, [pc, #76]	; (8006774 <HAL_RCC_GetSysClockFreq+0x74>)
 8006728:	028a      	lsls	r2, r1, #10
 800672a:	0f12      	lsrs	r2, r2, #28
 800672c:	5c82      	ldrb	r2, [r0, r2]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800672e:	0209      	lsls	r1, r1, #8
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006730:	68d8      	ldr	r0, [r3, #12]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8006732:	0f89      	lsrs	r1, r1, #30
 8006734:	3101      	adds	r1, #1
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006736:	03c0      	lsls	r0, r0, #15
 8006738:	d504      	bpl.n	8006744 <HAL_RCC_GetSysClockFreq+0x44>
        pllvco = (HSE_VALUE * pllm) / plld;
 800673a:	480f      	ldr	r0, [pc, #60]	; (8006778 <HAL_RCC_GetSysClockFreq+0x78>)
         pllvco = (HSI_VALUE * pllm) / plld;
 800673c:	4350      	muls	r0, r2
 800673e:	f7fb feb7 	bl	80024b0 <__udivsi3>
 8006742:	e7ef      	b.n	8006724 <HAL_RCC_GetSysClockFreq+0x24>
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	06db      	lsls	r3, r3, #27
 8006748:	d501      	bpl.n	800674e <HAL_RCC_GetSysClockFreq+0x4e>
          pllvco = ((HSI_VALUE >> 2) * pllm) / plld;
 800674a:	480c      	ldr	r0, [pc, #48]	; (800677c <HAL_RCC_GetSysClockFreq+0x7c>)
 800674c:	e7f6      	b.n	800673c <HAL_RCC_GetSysClockFreq+0x3c>
         pllvco = (HSI_VALUE * pllm) / plld;
 800674e:	4808      	ldr	r0, [pc, #32]	; (8006770 <HAL_RCC_GetSysClockFreq+0x70>)
 8006750:	e7f4      	b.n	800673c <HAL_RCC_GetSysClockFreq+0x3c>
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006752:	2080      	movs	r0, #128	; 0x80
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006754:	685b      	ldr	r3, [r3, #4]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8006756:	0200      	lsls	r0, r0, #8
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8006758:	041b      	lsls	r3, r3, #16
 800675a:	0f5b      	lsrs	r3, r3, #29
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800675c:	3301      	adds	r3, #1
 800675e:	4098      	lsls	r0, r3
  return sysclockfreq;
 8006760:	e7e0      	b.n	8006724 <HAL_RCC_GetSysClockFreq+0x24>
  switch (tmpreg & RCC_CFGR_SWS)
 8006762:	4805      	ldr	r0, [pc, #20]	; (8006778 <HAL_RCC_GetSysClockFreq+0x78>)
 8006764:	e7de      	b.n	8006724 <HAL_RCC_GetSysClockFreq+0x24>
 8006766:	46c0      	nop			; (mov r8, r8)
 8006768:	40021000 	.word	0x40021000
 800676c:	ff48e500 	.word	0xff48e500
 8006770:	00f42400 	.word	0x00f42400
 8006774:	0800afad 	.word	0x0800afad
 8006778:	007a1200 	.word	0x007a1200
 800677c:	003d0900 	.word	0x003d0900

08006780 <HAL_RCC_OscConfig>:
{
 8006780:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006782:	0005      	movs	r5, r0
 8006784:	b087      	sub	sp, #28
  if(RCC_OscInitStruct == NULL)
 8006786:	2800      	cmp	r0, #0
 8006788:	d058      	beq.n	800683c <HAL_RCC_OscConfig+0xbc>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800678a:	230c      	movs	r3, #12
 800678c:	4cbe      	ldr	r4, [pc, #760]	; (8006a88 <HAL_RCC_OscConfig+0x308>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800678e:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006790:	68e6      	ldr	r6, [r4, #12]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006792:	68e7      	ldr	r7, [r4, #12]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006794:	401e      	ands	r6, r3
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006796:	2380      	movs	r3, #128	; 0x80
 8006798:	025b      	lsls	r3, r3, #9
 800679a:	401f      	ands	r7, r3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800679c:	07d2      	lsls	r2, r2, #31
 800679e:	d441      	bmi.n	8006824 <HAL_RCC_OscConfig+0xa4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067a0:	682b      	ldr	r3, [r5, #0]
 80067a2:	079b      	lsls	r3, r3, #30
 80067a4:	d500      	bpl.n	80067a8 <HAL_RCC_OscConfig+0x28>
 80067a6:	e08a      	b.n	80068be <HAL_RCC_OscConfig+0x13e>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80067a8:	682b      	ldr	r3, [r5, #0]
 80067aa:	06db      	lsls	r3, r3, #27
 80067ac:	d528      	bpl.n	8006800 <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) )
 80067ae:	2e00      	cmp	r6, #0
 80067b0:	d000      	beq.n	80067b4 <HAL_RCC_OscConfig+0x34>
 80067b2:	e0da      	b.n	800696a <HAL_RCC_OscConfig+0x1ea>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80067b4:	6823      	ldr	r3, [r4, #0]
 80067b6:	059b      	lsls	r3, r3, #22
 80067b8:	d502      	bpl.n	80067c0 <HAL_RCC_OscConfig+0x40>
 80067ba:	69eb      	ldr	r3, [r5, #28]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d03d      	beq.n	800683c <HAL_RCC_OscConfig+0xbc>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80067c0:	6862      	ldr	r2, [r4, #4]
 80067c2:	49b2      	ldr	r1, [pc, #712]	; (8006a8c <HAL_RCC_OscConfig+0x30c>)
 80067c4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80067c6:	400a      	ands	r2, r1
 80067c8:	431a      	orrs	r2, r3
 80067ca:	6062      	str	r2, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80067cc:	6861      	ldr	r1, [r4, #4]
 80067ce:	6a2a      	ldr	r2, [r5, #32]
 80067d0:	0209      	lsls	r1, r1, #8
 80067d2:	0a09      	lsrs	r1, r1, #8
 80067d4:	0612      	lsls	r2, r2, #24
 80067d6:	430a      	orrs	r2, r1
 80067d8:	6062      	str	r2, [r4, #4]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80067da:	2280      	movs	r2, #128	; 0x80
 80067dc:	0b5b      	lsrs	r3, r3, #13
 80067de:	3301      	adds	r3, #1
 80067e0:	0212      	lsls	r2, r2, #8
 80067e2:	409a      	lsls	r2, r3
 80067e4:	0013      	movs	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80067e6:	68e1      	ldr	r1, [r4, #12]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80067e8:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80067ea:	060a      	lsls	r2, r1, #24
 80067ec:	49a8      	ldr	r1, [pc, #672]	; (8006a90 <HAL_RCC_OscConfig+0x310>)
 80067ee:	0f12      	lsrs	r2, r2, #28
 80067f0:	5c8a      	ldrb	r2, [r1, r2]
 80067f2:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80067f4:	4aa7      	ldr	r2, [pc, #668]	; (8006a94 <HAL_RCC_OscConfig+0x314>)
 80067f6:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick (TICK_INT_PRIORITY);
 80067f8:	f7ff f96a 	bl	8005ad0 <HAL_InitTick>
        if(status != HAL_OK)
 80067fc:	2800      	cmp	r0, #0
 80067fe:	d134      	bne.n	800686a <HAL_RCC_OscConfig+0xea>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006800:	682b      	ldr	r3, [r5, #0]
 8006802:	071b      	lsls	r3, r3, #28
 8006804:	d500      	bpl.n	8006808 <HAL_RCC_OscConfig+0x88>
 8006806:	e0e7      	b.n	80069d8 <HAL_RCC_OscConfig+0x258>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006808:	682b      	ldr	r3, [r5, #0]
 800680a:	075b      	lsls	r3, r3, #29
 800680c:	d500      	bpl.n	8006810 <HAL_RCC_OscConfig+0x90>
 800680e:	e109      	b.n	8006a24 <HAL_RCC_OscConfig+0x2a4>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006810:	682b      	ldr	r3, [r5, #0]
 8006812:	069b      	lsls	r3, r3, #26
 8006814:	d500      	bpl.n	8006818 <HAL_RCC_OscConfig+0x98>
 8006816:	e18e      	b.n	8006b36 <HAL_RCC_OscConfig+0x3b6>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006818:	6aab      	ldr	r3, [r5, #40]	; 0x28
 800681a:	2b00      	cmp	r3, #0
 800681c:	d000      	beq.n	8006820 <HAL_RCC_OscConfig+0xa0>
 800681e:	e1bd      	b.n	8006b9c <HAL_RCC_OscConfig+0x41c>
  return HAL_OK;
 8006820:	2000      	movs	r0, #0
 8006822:	e022      	b.n	800686a <HAL_RCC_OscConfig+0xea>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006824:	2e08      	cmp	r6, #8
 8006826:	d003      	beq.n	8006830 <HAL_RCC_OscConfig+0xb0>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006828:	2e0c      	cmp	r6, #12
 800682a:	d109      	bne.n	8006840 <HAL_RCC_OscConfig+0xc0>
 800682c:	2f00      	cmp	r7, #0
 800682e:	d007      	beq.n	8006840 <HAL_RCC_OscConfig+0xc0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006830:	6823      	ldr	r3, [r4, #0]
 8006832:	039b      	lsls	r3, r3, #14
 8006834:	d5b4      	bpl.n	80067a0 <HAL_RCC_OscConfig+0x20>
 8006836:	686b      	ldr	r3, [r5, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1b1      	bne.n	80067a0 <HAL_RCC_OscConfig+0x20>
          return HAL_ERROR;
 800683c:	2001      	movs	r0, #1
 800683e:	e014      	b.n	800686a <HAL_RCC_OscConfig+0xea>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006840:	686a      	ldr	r2, [r5, #4]
 8006842:	429a      	cmp	r2, r3
 8006844:	d113      	bne.n	800686e <HAL_RCC_OscConfig+0xee>
 8006846:	6822      	ldr	r2, [r4, #0]
 8006848:	4313      	orrs	r3, r2
 800684a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800684c:	f7ff f974 	bl	8005b38 <HAL_GetTick>
 8006850:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006852:	2280      	movs	r2, #128	; 0x80
 8006854:	6823      	ldr	r3, [r4, #0]
 8006856:	0292      	lsls	r2, r2, #10
 8006858:	4213      	tst	r3, r2
 800685a:	d1a1      	bne.n	80067a0 <HAL_RCC_OscConfig+0x20>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800685c:	f7ff f96c 	bl	8005b38 <HAL_GetTick>
 8006860:	9b01      	ldr	r3, [sp, #4]
 8006862:	1ac0      	subs	r0, r0, r3
 8006864:	2864      	cmp	r0, #100	; 0x64
 8006866:	d9f4      	bls.n	8006852 <HAL_RCC_OscConfig+0xd2>
            return HAL_TIMEOUT;
 8006868:	2003      	movs	r0, #3
}
 800686a:	b007      	add	sp, #28
 800686c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800686e:	21a0      	movs	r1, #160	; 0xa0
 8006870:	02c9      	lsls	r1, r1, #11
 8006872:	428a      	cmp	r2, r1
 8006874:	d105      	bne.n	8006882 <HAL_RCC_OscConfig+0x102>
 8006876:	2280      	movs	r2, #128	; 0x80
 8006878:	6821      	ldr	r1, [r4, #0]
 800687a:	02d2      	lsls	r2, r2, #11
 800687c:	430a      	orrs	r2, r1
 800687e:	6022      	str	r2, [r4, #0]
 8006880:	e7e1      	b.n	8006846 <HAL_RCC_OscConfig+0xc6>
 8006882:	6821      	ldr	r1, [r4, #0]
 8006884:	4884      	ldr	r0, [pc, #528]	; (8006a98 <HAL_RCC_OscConfig+0x318>)
 8006886:	4001      	ands	r1, r0
 8006888:	6021      	str	r1, [r4, #0]
 800688a:	6821      	ldr	r1, [r4, #0]
 800688c:	400b      	ands	r3, r1
 800688e:	9305      	str	r3, [sp, #20]
 8006890:	9b05      	ldr	r3, [sp, #20]
 8006892:	4982      	ldr	r1, [pc, #520]	; (8006a9c <HAL_RCC_OscConfig+0x31c>)
 8006894:	6823      	ldr	r3, [r4, #0]
 8006896:	400b      	ands	r3, r1
 8006898:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800689a:	2a00      	cmp	r2, #0
 800689c:	d1d6      	bne.n	800684c <HAL_RCC_OscConfig+0xcc>
        tickstart = HAL_GetTick();
 800689e:	f7ff f94b 	bl	8005b38 <HAL_GetTick>
 80068a2:	9001      	str	r0, [sp, #4]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80068a4:	2280      	movs	r2, #128	; 0x80
 80068a6:	6823      	ldr	r3, [r4, #0]
 80068a8:	0292      	lsls	r2, r2, #10
 80068aa:	4213      	tst	r3, r2
 80068ac:	d100      	bne.n	80068b0 <HAL_RCC_OscConfig+0x130>
 80068ae:	e777      	b.n	80067a0 <HAL_RCC_OscConfig+0x20>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068b0:	f7ff f942 	bl	8005b38 <HAL_GetTick>
 80068b4:	9b01      	ldr	r3, [sp, #4]
 80068b6:	1ac0      	subs	r0, r0, r3
 80068b8:	2864      	cmp	r0, #100	; 0x64
 80068ba:	d9f3      	bls.n	80068a4 <HAL_RCC_OscConfig+0x124>
 80068bc:	e7d4      	b.n	8006868 <HAL_RCC_OscConfig+0xe8>
    hsi_state = RCC_OscInitStruct->HSIState;
 80068be:	68ea      	ldr	r2, [r5, #12]
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80068c0:	2e04      	cmp	r6, #4
 80068c2:	d003      	beq.n	80068cc <HAL_RCC_OscConfig+0x14c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80068c4:	2e0c      	cmp	r6, #12
 80068c6:	d123      	bne.n	8006910 <HAL_RCC_OscConfig+0x190>
 80068c8:	2f00      	cmp	r7, #0
 80068ca:	d121      	bne.n	8006910 <HAL_RCC_OscConfig+0x190>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80068cc:	6823      	ldr	r3, [r4, #0]
 80068ce:	075b      	lsls	r3, r3, #29
 80068d0:	d501      	bpl.n	80068d6 <HAL_RCC_OscConfig+0x156>
 80068d2:	2a00      	cmp	r2, #0
 80068d4:	d0b2      	beq.n	800683c <HAL_RCC_OscConfig+0xbc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068d6:	6861      	ldr	r1, [r4, #4]
 80068d8:	692b      	ldr	r3, [r5, #16]
 80068da:	4871      	ldr	r0, [pc, #452]	; (8006aa0 <HAL_RCC_OscConfig+0x320>)
 80068dc:	021b      	lsls	r3, r3, #8
 80068de:	4001      	ands	r1, r0
 80068e0:	430b      	orrs	r3, r1
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80068e2:	2109      	movs	r1, #9
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068e4:	6063      	str	r3, [r4, #4]
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80068e6:	6823      	ldr	r3, [r4, #0]
 80068e8:	438b      	bics	r3, r1
 80068ea:	4313      	orrs	r3, r2
 80068ec:	6023      	str	r3, [r4, #0]
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80068ee:	f7ff ff07 	bl	8006700 <HAL_RCC_GetSysClockFreq>
 80068f2:	68e3      	ldr	r3, [r4, #12]
 80068f4:	4a66      	ldr	r2, [pc, #408]	; (8006a90 <HAL_RCC_OscConfig+0x310>)
 80068f6:	061b      	lsls	r3, r3, #24
 80068f8:	0f1b      	lsrs	r3, r3, #28
 80068fa:	5cd3      	ldrb	r3, [r2, r3]
 80068fc:	40d8      	lsrs	r0, r3
 80068fe:	4b65      	ldr	r3, [pc, #404]	; (8006a94 <HAL_RCC_OscConfig+0x314>)
 8006900:	6018      	str	r0, [r3, #0]
      status = HAL_InitTick (TICK_INT_PRIORITY);
 8006902:	2000      	movs	r0, #0
 8006904:	f7ff f8e4 	bl	8005ad0 <HAL_InitTick>
      if(status != HAL_OK)
 8006908:	2800      	cmp	r0, #0
 800690a:	d100      	bne.n	800690e <HAL_RCC_OscConfig+0x18e>
 800690c:	e74c      	b.n	80067a8 <HAL_RCC_OscConfig+0x28>
 800690e:	e7ac      	b.n	800686a <HAL_RCC_OscConfig+0xea>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006910:	6823      	ldr	r3, [r4, #0]
      if(hsi_state != RCC_HSI_OFF)
 8006912:	2a00      	cmp	r2, #0
 8006914:	d018      	beq.n	8006948 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8006916:	2109      	movs	r1, #9
 8006918:	438b      	bics	r3, r1
 800691a:	4313      	orrs	r3, r2
 800691c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800691e:	f7ff f90b 	bl	8005b38 <HAL_GetTick>
 8006922:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006924:	2204      	movs	r2, #4
 8006926:	6823      	ldr	r3, [r4, #0]
 8006928:	4213      	tst	r3, r2
 800692a:	d007      	beq.n	800693c <HAL_RCC_OscConfig+0x1bc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800692c:	6862      	ldr	r2, [r4, #4]
 800692e:	692b      	ldr	r3, [r5, #16]
 8006930:	495b      	ldr	r1, [pc, #364]	; (8006aa0 <HAL_RCC_OscConfig+0x320>)
 8006932:	021b      	lsls	r3, r3, #8
 8006934:	400a      	ands	r2, r1
 8006936:	4313      	orrs	r3, r2
 8006938:	6063      	str	r3, [r4, #4]
 800693a:	e735      	b.n	80067a8 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800693c:	f7ff f8fc 	bl	8005b38 <HAL_GetTick>
 8006940:	1bc0      	subs	r0, r0, r7
 8006942:	2802      	cmp	r0, #2
 8006944:	d9ee      	bls.n	8006924 <HAL_RCC_OscConfig+0x1a4>
 8006946:	e78f      	b.n	8006868 <HAL_RCC_OscConfig+0xe8>
        __HAL_RCC_HSI_DISABLE();
 8006948:	2201      	movs	r2, #1
 800694a:	4393      	bics	r3, r2
 800694c:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800694e:	f7ff f8f3 	bl	8005b38 <HAL_GetTick>
 8006952:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8006954:	2204      	movs	r2, #4
 8006956:	6823      	ldr	r3, [r4, #0]
 8006958:	4213      	tst	r3, r2
 800695a:	d100      	bne.n	800695e <HAL_RCC_OscConfig+0x1de>
 800695c:	e724      	b.n	80067a8 <HAL_RCC_OscConfig+0x28>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800695e:	f7ff f8eb 	bl	8005b38 <HAL_GetTick>
 8006962:	1bc0      	subs	r0, r0, r7
 8006964:	2802      	cmp	r0, #2
 8006966:	d9f5      	bls.n	8006954 <HAL_RCC_OscConfig+0x1d4>
 8006968:	e77e      	b.n	8006868 <HAL_RCC_OscConfig+0xe8>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800696a:	69eb      	ldr	r3, [r5, #28]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d020      	beq.n	80069b2 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_MSI_ENABLE();
 8006970:	2380      	movs	r3, #128	; 0x80
 8006972:	6822      	ldr	r2, [r4, #0]
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	4313      	orrs	r3, r2
 8006978:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 800697a:	f7ff f8dd 	bl	8005b38 <HAL_GetTick>
 800697e:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006980:	2280      	movs	r2, #128	; 0x80
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	0092      	lsls	r2, r2, #2
 8006986:	4213      	tst	r3, r2
 8006988:	d00d      	beq.n	80069a6 <HAL_RCC_OscConfig+0x226>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800698a:	6863      	ldr	r3, [r4, #4]
 800698c:	4a3f      	ldr	r2, [pc, #252]	; (8006a8c <HAL_RCC_OscConfig+0x30c>)
 800698e:	4013      	ands	r3, r2
 8006990:	6a6a      	ldr	r2, [r5, #36]	; 0x24
 8006992:	4313      	orrs	r3, r2
 8006994:	6063      	str	r3, [r4, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006996:	6862      	ldr	r2, [r4, #4]
 8006998:	6a2b      	ldr	r3, [r5, #32]
 800699a:	0212      	lsls	r2, r2, #8
 800699c:	061b      	lsls	r3, r3, #24
 800699e:	0a12      	lsrs	r2, r2, #8
 80069a0:	4313      	orrs	r3, r2
 80069a2:	6063      	str	r3, [r4, #4]
 80069a4:	e72c      	b.n	8006800 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80069a6:	f7ff f8c7 	bl	8005b38 <HAL_GetTick>
 80069aa:	1bc0      	subs	r0, r0, r7
 80069ac:	2802      	cmp	r0, #2
 80069ae:	d9e7      	bls.n	8006980 <HAL_RCC_OscConfig+0x200>
 80069b0:	e75a      	b.n	8006868 <HAL_RCC_OscConfig+0xe8>
        __HAL_RCC_MSI_DISABLE();
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	4a3b      	ldr	r2, [pc, #236]	; (8006aa4 <HAL_RCC_OscConfig+0x324>)
 80069b6:	4013      	ands	r3, r2
 80069b8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80069ba:	f7ff f8bd 	bl	8005b38 <HAL_GetTick>
 80069be:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80069c0:	2280      	movs	r2, #128	; 0x80
 80069c2:	6823      	ldr	r3, [r4, #0]
 80069c4:	0092      	lsls	r2, r2, #2
 80069c6:	4213      	tst	r3, r2
 80069c8:	d100      	bne.n	80069cc <HAL_RCC_OscConfig+0x24c>
 80069ca:	e719      	b.n	8006800 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80069cc:	f7ff f8b4 	bl	8005b38 <HAL_GetTick>
 80069d0:	1bc0      	subs	r0, r0, r7
 80069d2:	2802      	cmp	r0, #2
 80069d4:	d9f4      	bls.n	80069c0 <HAL_RCC_OscConfig+0x240>
 80069d6:	e747      	b.n	8006868 <HAL_RCC_OscConfig+0xe8>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80069d8:	696a      	ldr	r2, [r5, #20]
 80069da:	2301      	movs	r3, #1
 80069dc:	2a00      	cmp	r2, #0
 80069de:	d010      	beq.n	8006a02 <HAL_RCC_OscConfig+0x282>
      __HAL_RCC_LSI_ENABLE();
 80069e0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 80069e2:	4313      	orrs	r3, r2
 80069e4:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 80069e6:	f7ff f8a7 	bl	8005b38 <HAL_GetTick>
 80069ea:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80069ec:	2202      	movs	r2, #2
 80069ee:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80069f0:	4213      	tst	r3, r2
 80069f2:	d000      	beq.n	80069f6 <HAL_RCC_OscConfig+0x276>
 80069f4:	e708      	b.n	8006808 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069f6:	f7ff f89f 	bl	8005b38 <HAL_GetTick>
 80069fa:	1bc0      	subs	r0, r0, r7
 80069fc:	2802      	cmp	r0, #2
 80069fe:	d9f5      	bls.n	80069ec <HAL_RCC_OscConfig+0x26c>
 8006a00:	e732      	b.n	8006868 <HAL_RCC_OscConfig+0xe8>
      __HAL_RCC_LSI_DISABLE();
 8006a02:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006a04:	439a      	bics	r2, r3
 8006a06:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8006a08:	f7ff f896 	bl	8005b38 <HAL_GetTick>
 8006a0c:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8006a0e:	2202      	movs	r2, #2
 8006a10:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006a12:	4213      	tst	r3, r2
 8006a14:	d100      	bne.n	8006a18 <HAL_RCC_OscConfig+0x298>
 8006a16:	e6f7      	b.n	8006808 <HAL_RCC_OscConfig+0x88>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006a18:	f7ff f88e 	bl	8005b38 <HAL_GetTick>
 8006a1c:	1bc0      	subs	r0, r0, r7
 8006a1e:	2802      	cmp	r0, #2
 8006a20:	d9f5      	bls.n	8006a0e <HAL_RCC_OscConfig+0x28e>
 8006a22:	e721      	b.n	8006868 <HAL_RCC_OscConfig+0xe8>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a24:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8006a26:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a28:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006a2a:	055b      	lsls	r3, r3, #21
    FlagStatus       pwrclkchanged = RESET;
 8006a2c:	9101      	str	r1, [sp, #4]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a2e:	421a      	tst	r2, r3
 8006a30:	d104      	bne.n	8006a3c <HAL_RCC_OscConfig+0x2bc>
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a32:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006a34:	4313      	orrs	r3, r2
 8006a36:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	9301      	str	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a3c:	2280      	movs	r2, #128	; 0x80
 8006a3e:	4f1a      	ldr	r7, [pc, #104]	; (8006aa8 <HAL_RCC_OscConfig+0x328>)
 8006a40:	0052      	lsls	r2, r2, #1
 8006a42:	683b      	ldr	r3, [r7, #0]
 8006a44:	4213      	tst	r3, r2
 8006a46:	d008      	beq.n	8006a5a <HAL_RCC_OscConfig+0x2da>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a48:	2280      	movs	r2, #128	; 0x80
 8006a4a:	68ab      	ldr	r3, [r5, #8]
 8006a4c:	0052      	lsls	r2, r2, #1
 8006a4e:	4293      	cmp	r3, r2
 8006a50:	d12c      	bne.n	8006aac <HAL_RCC_OscConfig+0x32c>
 8006a52:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8006a54:	4313      	orrs	r3, r2
 8006a56:	6523      	str	r3, [r4, #80]	; 0x50
 8006a58:	e04d      	b.n	8006af6 <HAL_RCC_OscConfig+0x376>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a5a:	2280      	movs	r2, #128	; 0x80
 8006a5c:	683b      	ldr	r3, [r7, #0]
 8006a5e:	0052      	lsls	r2, r2, #1
 8006a60:	4313      	orrs	r3, r2
 8006a62:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8006a64:	f7ff f868 	bl	8005b38 <HAL_GetTick>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a68:	2380      	movs	r3, #128	; 0x80
 8006a6a:	005b      	lsls	r3, r3, #1
      tickstart = HAL_GetTick();
 8006a6c:	9002      	str	r0, [sp, #8]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a6e:	9303      	str	r3, [sp, #12]
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	9a03      	ldr	r2, [sp, #12]
 8006a74:	4213      	tst	r3, r2
 8006a76:	d1e7      	bne.n	8006a48 <HAL_RCC_OscConfig+0x2c8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a78:	f7ff f85e 	bl	8005b38 <HAL_GetTick>
 8006a7c:	9b02      	ldr	r3, [sp, #8]
 8006a7e:	1ac0      	subs	r0, r0, r3
 8006a80:	2864      	cmp	r0, #100	; 0x64
 8006a82:	d9f5      	bls.n	8006a70 <HAL_RCC_OscConfig+0x2f0>
 8006a84:	e6f0      	b.n	8006868 <HAL_RCC_OscConfig+0xe8>
 8006a86:	46c0      	nop			; (mov r8, r8)
 8006a88:	40021000 	.word	0x40021000
 8006a8c:	ffff1fff 	.word	0xffff1fff
 8006a90:	0800af95 	.word	0x0800af95
 8006a94:	20000084 	.word	0x20000084
 8006a98:	fffeffff 	.word	0xfffeffff
 8006a9c:	fffbffff 	.word	0xfffbffff
 8006aa0:	ffffe0ff 	.word	0xffffe0ff
 8006aa4:	fffffeff 	.word	0xfffffeff
 8006aa8:	40007000 	.word	0x40007000
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d116      	bne.n	8006ade <HAL_RCC_OscConfig+0x35e>
 8006ab0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006ab2:	4a6b      	ldr	r2, [pc, #428]	; (8006c60 <HAL_RCC_OscConfig+0x4e0>)
 8006ab4:	4013      	ands	r3, r2
 8006ab6:	6523      	str	r3, [r4, #80]	; 0x50
 8006ab8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006aba:	4a6a      	ldr	r2, [pc, #424]	; (8006c64 <HAL_RCC_OscConfig+0x4e4>)
 8006abc:	4013      	ands	r3, r2
 8006abe:	6523      	str	r3, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8006ac0:	f7ff f83a 	bl	8005b38 <HAL_GetTick>
 8006ac4:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8006ac6:	2280      	movs	r2, #128	; 0x80
 8006ac8:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006aca:	0092      	lsls	r2, r2, #2
 8006acc:	4213      	tst	r3, r2
 8006ace:	d01a      	beq.n	8006b06 <HAL_RCC_OscConfig+0x386>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ad0:	f7ff f832 	bl	8005b38 <HAL_GetTick>
 8006ad4:	4b64      	ldr	r3, [pc, #400]	; (8006c68 <HAL_RCC_OscConfig+0x4e8>)
 8006ad6:	1bc0      	subs	r0, r0, r7
 8006ad8:	4298      	cmp	r0, r3
 8006ada:	d9f4      	bls.n	8006ac6 <HAL_RCC_OscConfig+0x346>
 8006adc:	e6c4      	b.n	8006868 <HAL_RCC_OscConfig+0xe8>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ade:	21a0      	movs	r1, #160	; 0xa0
 8006ae0:	00c9      	lsls	r1, r1, #3
 8006ae2:	428b      	cmp	r3, r1
 8006ae4:	d118      	bne.n	8006b18 <HAL_RCC_OscConfig+0x398>
 8006ae6:	2380      	movs	r3, #128	; 0x80
 8006ae8:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8006aea:	00db      	lsls	r3, r3, #3
 8006aec:	430b      	orrs	r3, r1
 8006aee:	6523      	str	r3, [r4, #80]	; 0x50
 8006af0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006af2:	431a      	orrs	r2, r3
 8006af4:	6522      	str	r2, [r4, #80]	; 0x50
      tickstart = HAL_GetTick();
 8006af6:	f7ff f81f 	bl	8005b38 <HAL_GetTick>
 8006afa:	0007      	movs	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006afc:	2280      	movs	r2, #128	; 0x80
 8006afe:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006b00:	0092      	lsls	r2, r2, #2
 8006b02:	4213      	tst	r3, r2
 8006b04:	d010      	beq.n	8006b28 <HAL_RCC_OscConfig+0x3a8>
    if(pwrclkchanged == SET)
 8006b06:	9b01      	ldr	r3, [sp, #4]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d000      	beq.n	8006b0e <HAL_RCC_OscConfig+0x38e>
 8006b0c:	e680      	b.n	8006810 <HAL_RCC_OscConfig+0x90>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b0e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006b10:	4a56      	ldr	r2, [pc, #344]	; (8006c6c <HAL_RCC_OscConfig+0x4ec>)
 8006b12:	4013      	ands	r3, r2
 8006b14:	63a3      	str	r3, [r4, #56]	; 0x38
 8006b16:	e67b      	b.n	8006810 <HAL_RCC_OscConfig+0x90>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b18:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006b1a:	4a51      	ldr	r2, [pc, #324]	; (8006c60 <HAL_RCC_OscConfig+0x4e0>)
 8006b1c:	4013      	ands	r3, r2
 8006b1e:	6523      	str	r3, [r4, #80]	; 0x50
 8006b20:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006b22:	4a50      	ldr	r2, [pc, #320]	; (8006c64 <HAL_RCC_OscConfig+0x4e4>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	e796      	b.n	8006a56 <HAL_RCC_OscConfig+0x2d6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b28:	f7ff f806 	bl	8005b38 <HAL_GetTick>
 8006b2c:	4b4e      	ldr	r3, [pc, #312]	; (8006c68 <HAL_RCC_OscConfig+0x4e8>)
 8006b2e:	1bc0      	subs	r0, r0, r7
 8006b30:	4298      	cmp	r0, r3
 8006b32:	d9e3      	bls.n	8006afc <HAL_RCC_OscConfig+0x37c>
 8006b34:	e698      	b.n	8006868 <HAL_RCC_OscConfig+0xe8>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006b36:	69a9      	ldr	r1, [r5, #24]
 8006b38:	2301      	movs	r3, #1
 8006b3a:	4a4d      	ldr	r2, [pc, #308]	; (8006c70 <HAL_RCC_OscConfig+0x4f0>)
 8006b3c:	2900      	cmp	r1, #0
 8006b3e:	d018      	beq.n	8006b72 <HAL_RCC_OscConfig+0x3f2>
        __HAL_RCC_HSI48_ENABLE();
 8006b40:	68a1      	ldr	r1, [r4, #8]
 8006b42:	4319      	orrs	r1, r3
 8006b44:	60a1      	str	r1, [r4, #8]
 8006b46:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006b48:	430b      	orrs	r3, r1
 8006b4a:	6363      	str	r3, [r4, #52]	; 0x34
 8006b4c:	2380      	movs	r3, #128	; 0x80
 8006b4e:	6a11      	ldr	r1, [r2, #32]
 8006b50:	019b      	lsls	r3, r3, #6
 8006b52:	430b      	orrs	r3, r1
 8006b54:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8006b56:	f7fe ffef 	bl	8005b38 <HAL_GetTick>
 8006b5a:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8006b5c:	2202      	movs	r2, #2
 8006b5e:	68a3      	ldr	r3, [r4, #8]
 8006b60:	4213      	tst	r3, r2
 8006b62:	d000      	beq.n	8006b66 <HAL_RCC_OscConfig+0x3e6>
 8006b64:	e658      	b.n	8006818 <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b66:	f7fe ffe7 	bl	8005b38 <HAL_GetTick>
 8006b6a:	1bc0      	subs	r0, r0, r7
 8006b6c:	2802      	cmp	r0, #2
 8006b6e:	d9f5      	bls.n	8006b5c <HAL_RCC_OscConfig+0x3dc>
 8006b70:	e67a      	b.n	8006868 <HAL_RCC_OscConfig+0xe8>
        __HAL_RCC_HSI48_DISABLE();
 8006b72:	68a1      	ldr	r1, [r4, #8]
 8006b74:	4399      	bics	r1, r3
 8006b76:	60a1      	str	r1, [r4, #8]
 8006b78:	6a13      	ldr	r3, [r2, #32]
 8006b7a:	493e      	ldr	r1, [pc, #248]	; (8006c74 <HAL_RCC_OscConfig+0x4f4>)
 8006b7c:	400b      	ands	r3, r1
 8006b7e:	6213      	str	r3, [r2, #32]
        tickstart = HAL_GetTick();
 8006b80:	f7fe ffda 	bl	8005b38 <HAL_GetTick>
 8006b84:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8006b86:	2202      	movs	r2, #2
 8006b88:	68a3      	ldr	r3, [r4, #8]
 8006b8a:	4213      	tst	r3, r2
 8006b8c:	d100      	bne.n	8006b90 <HAL_RCC_OscConfig+0x410>
 8006b8e:	e643      	b.n	8006818 <HAL_RCC_OscConfig+0x98>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006b90:	f7fe ffd2 	bl	8005b38 <HAL_GetTick>
 8006b94:	1bc0      	subs	r0, r0, r7
 8006b96:	2802      	cmp	r0, #2
 8006b98:	d9f5      	bls.n	8006b86 <HAL_RCC_OscConfig+0x406>
 8006b9a:	e665      	b.n	8006868 <HAL_RCC_OscConfig+0xe8>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b9c:	2e0c      	cmp	r6, #12
 8006b9e:	d043      	beq.n	8006c28 <HAL_RCC_OscConfig+0x4a8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006ba0:	4a35      	ldr	r2, [pc, #212]	; (8006c78 <HAL_RCC_OscConfig+0x4f8>)
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d12e      	bne.n	8006c04 <HAL_RCC_OscConfig+0x484>
        __HAL_RCC_PLL_DISABLE();
 8006ba6:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006ba8:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8006baa:	4013      	ands	r3, r2
 8006bac:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006bae:	f7fe ffc3 	bl	8005b38 <HAL_GetTick>
 8006bb2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006bb4:	04bf      	lsls	r7, r7, #18
 8006bb6:	6823      	ldr	r3, [r4, #0]
 8006bb8:	423b      	tst	r3, r7
 8006bba:	d11d      	bne.n	8006bf8 <HAL_RCC_OscConfig+0x478>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bbc:	6b29      	ldr	r1, [r5, #48]	; 0x30
 8006bbe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 8006bc0:	68e2      	ldr	r2, [r4, #12]
 8006bc2:	430b      	orrs	r3, r1
 8006bc4:	492d      	ldr	r1, [pc, #180]	; (8006c7c <HAL_RCC_OscConfig+0x4fc>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006bc6:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bc8:	400a      	ands	r2, r1
 8006bca:	4313      	orrs	r3, r2
 8006bcc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006bce:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 8006bd4:	2380      	movs	r3, #128	; 0x80
 8006bd6:	6822      	ldr	r2, [r4, #0]
 8006bd8:	045b      	lsls	r3, r3, #17
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006bde:	f7fe ffab 	bl	8005b38 <HAL_GetTick>
 8006be2:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8006be4:	6823      	ldr	r3, [r4, #0]
 8006be6:	4233      	tst	r3, r6
 8006be8:	d000      	beq.n	8006bec <HAL_RCC_OscConfig+0x46c>
 8006bea:	e619      	b.n	8006820 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bec:	f7fe ffa4 	bl	8005b38 <HAL_GetTick>
 8006bf0:	1b40      	subs	r0, r0, r5
 8006bf2:	2802      	cmp	r0, #2
 8006bf4:	d9f6      	bls.n	8006be4 <HAL_RCC_OscConfig+0x464>
 8006bf6:	e637      	b.n	8006868 <HAL_RCC_OscConfig+0xe8>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bf8:	f7fe ff9e 	bl	8005b38 <HAL_GetTick>
 8006bfc:	1b80      	subs	r0, r0, r6
 8006bfe:	2802      	cmp	r0, #2
 8006c00:	d9d9      	bls.n	8006bb6 <HAL_RCC_OscConfig+0x436>
 8006c02:	e631      	b.n	8006868 <HAL_RCC_OscConfig+0xe8>
        __HAL_RCC_PLL_DISABLE();
 8006c04:	6823      	ldr	r3, [r4, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006c06:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8006c08:	4013      	ands	r3, r2
 8006c0a:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8006c0c:	f7fe ff94 	bl	8005b38 <HAL_GetTick>
 8006c10:	0005      	movs	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8006c12:	04b6      	lsls	r6, r6, #18
 8006c14:	6823      	ldr	r3, [r4, #0]
 8006c16:	4233      	tst	r3, r6
 8006c18:	d100      	bne.n	8006c1c <HAL_RCC_OscConfig+0x49c>
 8006c1a:	e601      	b.n	8006820 <HAL_RCC_OscConfig+0xa0>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c1c:	f7fe ff8c 	bl	8005b38 <HAL_GetTick>
 8006c20:	1b40      	subs	r0, r0, r5
 8006c22:	2802      	cmp	r0, #2
 8006c24:	d9f6      	bls.n	8006c14 <HAL_RCC_OscConfig+0x494>
 8006c26:	e61f      	b.n	8006868 <HAL_RCC_OscConfig+0xe8>
        return HAL_ERROR;
 8006c28:	0018      	movs	r0, r3
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c2a:	2b01      	cmp	r3, #1
 8006c2c:	d100      	bne.n	8006c30 <HAL_RCC_OscConfig+0x4b0>
 8006c2e:	e61c      	b.n	800686a <HAL_RCC_OscConfig+0xea>
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c30:	2280      	movs	r2, #128	; 0x80
        pll_config = RCC->CFGR;
 8006c32:	68e3      	ldr	r3, [r4, #12]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c34:	6ae9      	ldr	r1, [r5, #44]	; 0x2c
 8006c36:	0252      	lsls	r2, r2, #9
 8006c38:	401a      	ands	r2, r3
 8006c3a:	428a      	cmp	r2, r1
 8006c3c:	d000      	beq.n	8006c40 <HAL_RCC_OscConfig+0x4c0>
 8006c3e:	e5fd      	b.n	800683c <HAL_RCC_OscConfig+0xbc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006c40:	22f0      	movs	r2, #240	; 0xf0
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c42:	6b29      	ldr	r1, [r5, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006c44:	0392      	lsls	r2, r2, #14
 8006c46:	401a      	ands	r2, r3
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c48:	428a      	cmp	r2, r1
 8006c4a:	d000      	beq.n	8006c4e <HAL_RCC_OscConfig+0x4ce>
 8006c4c:	e5f6      	b.n	800683c <HAL_RCC_OscConfig+0xbc>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8006c4e:	22c0      	movs	r2, #192	; 0xc0
 8006c50:	0412      	lsls	r2, r2, #16
 8006c52:	4013      	ands	r3, r2
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8006c54:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d100      	bne.n	8006c5c <HAL_RCC_OscConfig+0x4dc>
 8006c5a:	e5e1      	b.n	8006820 <HAL_RCC_OscConfig+0xa0>
 8006c5c:	e5ee      	b.n	800683c <HAL_RCC_OscConfig+0xbc>
 8006c5e:	46c0      	nop			; (mov r8, r8)
 8006c60:	fffffeff 	.word	0xfffffeff
 8006c64:	fffffbff 	.word	0xfffffbff
 8006c68:	00001388 	.word	0x00001388
 8006c6c:	efffffff 	.word	0xefffffff
 8006c70:	40010000 	.word	0x40010000
 8006c74:	ffffdfff 	.word	0xffffdfff
 8006c78:	feffffff 	.word	0xfeffffff
 8006c7c:	ff02ffff 	.word	0xff02ffff

08006c80 <HAL_RCC_ClockConfig>:
{
 8006c80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006c82:	1e04      	subs	r4, r0, #0
 8006c84:	9101      	str	r1, [sp, #4]
  if(RCC_ClkInitStruct == NULL)
 8006c86:	d101      	bne.n	8006c8c <HAL_RCC_ClockConfig+0xc>
    return HAL_ERROR;
 8006c88:	2001      	movs	r0, #1
}
 8006c8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c8c:	2201      	movs	r2, #1
 8006c8e:	4d51      	ldr	r5, [pc, #324]	; (8006dd4 <HAL_RCC_ClockConfig+0x154>)
 8006c90:	9901      	ldr	r1, [sp, #4]
 8006c92:	682b      	ldr	r3, [r5, #0]
 8006c94:	4013      	ands	r3, r2
 8006c96:	428b      	cmp	r3, r1
 8006c98:	d327      	bcc.n	8006cea <HAL_RCC_ClockConfig+0x6a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006c9a:	6822      	ldr	r2, [r4, #0]
 8006c9c:	0793      	lsls	r3, r2, #30
 8006c9e:	d42f      	bmi.n	8006d00 <HAL_RCC_ClockConfig+0x80>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006ca0:	07d3      	lsls	r3, r2, #31
 8006ca2:	d435      	bmi.n	8006d10 <HAL_RCC_ClockConfig+0x90>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ca4:	2301      	movs	r3, #1
 8006ca6:	682a      	ldr	r2, [r5, #0]
 8006ca8:	9901      	ldr	r1, [sp, #4]
 8006caa:	401a      	ands	r2, r3
 8006cac:	428a      	cmp	r2, r1
 8006cae:	d900      	bls.n	8006cb2 <HAL_RCC_ClockConfig+0x32>
 8006cb0:	e081      	b.n	8006db6 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cb2:	6822      	ldr	r2, [r4, #0]
 8006cb4:	4d48      	ldr	r5, [pc, #288]	; (8006dd8 <HAL_RCC_ClockConfig+0x158>)
 8006cb6:	0753      	lsls	r3, r2, #29
 8006cb8:	d500      	bpl.n	8006cbc <HAL_RCC_ClockConfig+0x3c>
 8006cba:	e084      	b.n	8006dc6 <HAL_RCC_ClockConfig+0x146>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cbc:	0713      	lsls	r3, r2, #28
 8006cbe:	d506      	bpl.n	8006cce <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8006cc0:	68ea      	ldr	r2, [r5, #12]
 8006cc2:	6923      	ldr	r3, [r4, #16]
 8006cc4:	4945      	ldr	r1, [pc, #276]	; (8006ddc <HAL_RCC_ClockConfig+0x15c>)
 8006cc6:	00db      	lsls	r3, r3, #3
 8006cc8:	400a      	ands	r2, r1
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	60eb      	str	r3, [r5, #12]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006cce:	f7ff fd17 	bl	8006700 <HAL_RCC_GetSysClockFreq>
 8006cd2:	68eb      	ldr	r3, [r5, #12]
 8006cd4:	4a42      	ldr	r2, [pc, #264]	; (8006de0 <HAL_RCC_ClockConfig+0x160>)
 8006cd6:	061b      	lsls	r3, r3, #24
 8006cd8:	0f1b      	lsrs	r3, r3, #28
 8006cda:	5cd3      	ldrb	r3, [r2, r3]
 8006cdc:	40d8      	lsrs	r0, r3
 8006cde:	4b41      	ldr	r3, [pc, #260]	; (8006de4 <HAL_RCC_ClockConfig+0x164>)
 8006ce0:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(TICK_INT_PRIORITY);
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	f7fe fef4 	bl	8005ad0 <HAL_InitTick>
  if(status != HAL_OK)
 8006ce8:	e7cf      	b.n	8006c8a <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cea:	682b      	ldr	r3, [r5, #0]
 8006cec:	9901      	ldr	r1, [sp, #4]
 8006cee:	4393      	bics	r3, r2
 8006cf0:	430b      	orrs	r3, r1
 8006cf2:	602b      	str	r3, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cf4:	682b      	ldr	r3, [r5, #0]
 8006cf6:	4013      	ands	r3, r2
 8006cf8:	9a01      	ldr	r2, [sp, #4]
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d1c4      	bne.n	8006c88 <HAL_RCC_ClockConfig+0x8>
 8006cfe:	e7cc      	b.n	8006c9a <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d00:	20f0      	movs	r0, #240	; 0xf0
 8006d02:	4935      	ldr	r1, [pc, #212]	; (8006dd8 <HAL_RCC_ClockConfig+0x158>)
 8006d04:	68cb      	ldr	r3, [r1, #12]
 8006d06:	4383      	bics	r3, r0
 8006d08:	68a0      	ldr	r0, [r4, #8]
 8006d0a:	4303      	orrs	r3, r0
 8006d0c:	60cb      	str	r3, [r1, #12]
 8006d0e:	e7c7      	b.n	8006ca0 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d10:	4e31      	ldr	r6, [pc, #196]	; (8006dd8 <HAL_RCC_ClockConfig+0x158>)
 8006d12:	6862      	ldr	r2, [r4, #4]
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d14:	6833      	ldr	r3, [r6, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d16:	2a02      	cmp	r2, #2
 8006d18:	d119      	bne.n	8006d4e <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8006d1a:	039b      	lsls	r3, r3, #14
 8006d1c:	d5b4      	bpl.n	8006c88 <HAL_RCC_ClockConfig+0x8>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d1e:	2103      	movs	r1, #3
 8006d20:	68f3      	ldr	r3, [r6, #12]
 8006d22:	438b      	bics	r3, r1
 8006d24:	4313      	orrs	r3, r2
 8006d26:	60f3      	str	r3, [r6, #12]
    tickstart = HAL_GetTick();
 8006d28:	f7fe ff06 	bl	8005b38 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d2c:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8006d2e:	0007      	movs	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d30:	2b02      	cmp	r3, #2
 8006d32:	d119      	bne.n	8006d68 <HAL_RCC_ClockConfig+0xe8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8006d34:	220c      	movs	r2, #12
 8006d36:	68f3      	ldr	r3, [r6, #12]
 8006d38:	4013      	ands	r3, r2
 8006d3a:	2b08      	cmp	r3, #8
 8006d3c:	d0b2      	beq.n	8006ca4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d3e:	f7fe fefb 	bl	8005b38 <HAL_GetTick>
 8006d42:	4b29      	ldr	r3, [pc, #164]	; (8006de8 <HAL_RCC_ClockConfig+0x168>)
 8006d44:	1bc0      	subs	r0, r0, r7
 8006d46:	4298      	cmp	r0, r3
 8006d48:	d9f4      	bls.n	8006d34 <HAL_RCC_ClockConfig+0xb4>
          return HAL_TIMEOUT;
 8006d4a:	2003      	movs	r0, #3
 8006d4c:	e79d      	b.n	8006c8a <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d4e:	2a03      	cmp	r2, #3
 8006d50:	d102      	bne.n	8006d58 <HAL_RCC_ClockConfig+0xd8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8006d52:	019b      	lsls	r3, r3, #6
 8006d54:	d4e3      	bmi.n	8006d1e <HAL_RCC_ClockConfig+0x9e>
 8006d56:	e797      	b.n	8006c88 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006d58:	2a01      	cmp	r2, #1
 8006d5a:	d102      	bne.n	8006d62 <HAL_RCC_ClockConfig+0xe2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8006d5c:	075b      	lsls	r3, r3, #29
 8006d5e:	d4de      	bmi.n	8006d1e <HAL_RCC_ClockConfig+0x9e>
 8006d60:	e792      	b.n	8006c88 <HAL_RCC_ClockConfig+0x8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8006d62:	059b      	lsls	r3, r3, #22
 8006d64:	d4db      	bmi.n	8006d1e <HAL_RCC_ClockConfig+0x9e>
 8006d66:	e78f      	b.n	8006c88 <HAL_RCC_ClockConfig+0x8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006d68:	2b03      	cmp	r3, #3
 8006d6a:	d10b      	bne.n	8006d84 <HAL_RCC_ClockConfig+0x104>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006d6c:	220c      	movs	r2, #12
 8006d6e:	68f3      	ldr	r3, [r6, #12]
 8006d70:	4013      	ands	r3, r2
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d096      	beq.n	8006ca4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d76:	f7fe fedf 	bl	8005b38 <HAL_GetTick>
 8006d7a:	4b1b      	ldr	r3, [pc, #108]	; (8006de8 <HAL_RCC_ClockConfig+0x168>)
 8006d7c:	1bc0      	subs	r0, r0, r7
 8006d7e:	4298      	cmp	r0, r3
 8006d80:	d9f4      	bls.n	8006d6c <HAL_RCC_ClockConfig+0xec>
 8006d82:	e7e2      	b.n	8006d4a <HAL_RCC_ClockConfig+0xca>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006d84:	2b01      	cmp	r3, #1
 8006d86:	d010      	beq.n	8006daa <HAL_RCC_ClockConfig+0x12a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006d88:	220c      	movs	r2, #12
 8006d8a:	68f3      	ldr	r3, [r6, #12]
 8006d8c:	4213      	tst	r3, r2
 8006d8e:	d089      	beq.n	8006ca4 <HAL_RCC_ClockConfig+0x24>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d90:	f7fe fed2 	bl	8005b38 <HAL_GetTick>
 8006d94:	4b14      	ldr	r3, [pc, #80]	; (8006de8 <HAL_RCC_ClockConfig+0x168>)
 8006d96:	1bc0      	subs	r0, r0, r7
 8006d98:	4298      	cmp	r0, r3
 8006d9a:	d9f5      	bls.n	8006d88 <HAL_RCC_ClockConfig+0x108>
 8006d9c:	e7d5      	b.n	8006d4a <HAL_RCC_ClockConfig+0xca>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d9e:	f7fe fecb 	bl	8005b38 <HAL_GetTick>
 8006da2:	4b11      	ldr	r3, [pc, #68]	; (8006de8 <HAL_RCC_ClockConfig+0x168>)
 8006da4:	1bc0      	subs	r0, r0, r7
 8006da6:	4298      	cmp	r0, r3
 8006da8:	d8cf      	bhi.n	8006d4a <HAL_RCC_ClockConfig+0xca>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8006daa:	220c      	movs	r2, #12
 8006dac:	68f3      	ldr	r3, [r6, #12]
 8006dae:	4013      	ands	r3, r2
 8006db0:	2b04      	cmp	r3, #4
 8006db2:	d1f4      	bne.n	8006d9e <HAL_RCC_ClockConfig+0x11e>
 8006db4:	e776      	b.n	8006ca4 <HAL_RCC_ClockConfig+0x24>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006db6:	682a      	ldr	r2, [r5, #0]
 8006db8:	439a      	bics	r2, r3
 8006dba:	602a      	str	r2, [r5, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dbc:	682a      	ldr	r2, [r5, #0]
 8006dbe:	421a      	tst	r2, r3
 8006dc0:	d100      	bne.n	8006dc4 <HAL_RCC_ClockConfig+0x144>
 8006dc2:	e776      	b.n	8006cb2 <HAL_RCC_ClockConfig+0x32>
 8006dc4:	e760      	b.n	8006c88 <HAL_RCC_ClockConfig+0x8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dc6:	68eb      	ldr	r3, [r5, #12]
 8006dc8:	4908      	ldr	r1, [pc, #32]	; (8006dec <HAL_RCC_ClockConfig+0x16c>)
 8006dca:	400b      	ands	r3, r1
 8006dcc:	68e1      	ldr	r1, [r4, #12]
 8006dce:	430b      	orrs	r3, r1
 8006dd0:	60eb      	str	r3, [r5, #12]
 8006dd2:	e773      	b.n	8006cbc <HAL_RCC_ClockConfig+0x3c>
 8006dd4:	40022000 	.word	0x40022000
 8006dd8:	40021000 	.word	0x40021000
 8006ddc:	ffffc7ff 	.word	0xffffc7ff
 8006de0:	0800af95 	.word	0x0800af95
 8006de4:	20000084 	.word	0x20000084
 8006de8:	00001388 	.word	0x00001388
 8006dec:	fffff8ff 	.word	0xfffff8ff

08006df0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006df0:	4b04      	ldr	r3, [pc, #16]	; (8006e04 <HAL_RCC_GetPCLK1Freq+0x14>)
 8006df2:	4a05      	ldr	r2, [pc, #20]	; (8006e08 <HAL_RCC_GetPCLK1Freq+0x18>)
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	055b      	lsls	r3, r3, #21
 8006df8:	0f5b      	lsrs	r3, r3, #29
 8006dfa:	5cd3      	ldrb	r3, [r2, r3]
 8006dfc:	4a03      	ldr	r2, [pc, #12]	; (8006e0c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006dfe:	6810      	ldr	r0, [r2, #0]
 8006e00:	40d8      	lsrs	r0, r3
}
 8006e02:	4770      	bx	lr
 8006e04:	40021000 	.word	0x40021000
 8006e08:	0800afa5 	.word	0x0800afa5
 8006e0c:	20000084 	.word	0x20000084

08006e10 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006e10:	4b04      	ldr	r3, [pc, #16]	; (8006e24 <HAL_RCC_GetPCLK2Freq+0x14>)
 8006e12:	4a05      	ldr	r2, [pc, #20]	; (8006e28 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006e14:	68db      	ldr	r3, [r3, #12]
 8006e16:	049b      	lsls	r3, r3, #18
 8006e18:	0f5b      	lsrs	r3, r3, #29
 8006e1a:	5cd3      	ldrb	r3, [r2, r3]
 8006e1c:	4a03      	ldr	r2, [pc, #12]	; (8006e2c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006e1e:	6810      	ldr	r0, [r2, #0]
 8006e20:	40d8      	lsrs	r0, r3
}
 8006e22:	4770      	bx	lr
 8006e24:	40021000 	.word	0x40021000
 8006e28:	0800afa5 	.word	0x0800afa5
 8006e2c:	20000084 	.word	0x20000084

08006e30 <HAL_RCCEx_PeriphCLKConfig>:

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e30:	6803      	ldr	r3, [r0, #0]
{
 8006e32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006e34:	0005      	movs	r5, r0
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8006e36:	069b      	lsls	r3, r3, #26
 8006e38:	d53d      	bpl.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e3a:	2380      	movs	r3, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8006e3c:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e3e:	4c5a      	ldr	r4, [pc, #360]	; (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8006e40:	055b      	lsls	r3, r3, #21
 8006e42:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    FlagStatus       pwrclkchanged = RESET;
 8006e44:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006e46:	421a      	tst	r2, r3
 8006e48:	d104      	bne.n	8006e54 <HAL_RCCEx_PeriphCLKConfig+0x24>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006e4a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	63a3      	str	r3, [r4, #56]	; 0x38
      pwrclkchanged = SET;
 8006e50:	2301      	movs	r3, #1
 8006e52:	9300      	str	r3, [sp, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006e54:	2780      	movs	r7, #128	; 0x80
 8006e56:	4e55      	ldr	r6, [pc, #340]	; (8006fac <HAL_RCCEx_PeriphCLKConfig+0x17c>)
 8006e58:	007f      	lsls	r7, r7, #1
 8006e5a:	6833      	ldr	r3, [r6, #0]
 8006e5c:	423b      	tst	r3, r7
 8006e5e:	d063      	beq.n	8006f28 <HAL_RCCEx_PeriphCLKConfig+0xf8>
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006e60:	686b      	ldr	r3, [r5, #4]
 8006e62:	22c0      	movs	r2, #192	; 0xc0
 8006e64:	20c0      	movs	r0, #192	; 0xc0
 8006e66:	001e      	movs	r6, r3
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006e68:	6821      	ldr	r1, [r4, #0]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006e6a:	0292      	lsls	r2, r2, #10
 8006e6c:	0380      	lsls	r0, r0, #14
 8006e6e:	0017      	movs	r7, r2
 8006e70:	4016      	ands	r6, r2
 8006e72:	4003      	ands	r3, r0
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8006e74:	4001      	ands	r1, r0
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8006e76:	428b      	cmp	r3, r1
 8006e78:	d167      	bne.n	8006f4a <HAL_RCCEx_PeriphCLKConfig+0x11a>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8006e7a:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006e7c:	001a      	movs	r2, r3
 8006e7e:	403a      	ands	r2, r7

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006e80:	423b      	tst	r3, r7
 8006e82:	d16a      	bne.n	8006f5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006e84:	6869      	ldr	r1, [r5, #4]
 8006e86:	23c0      	movs	r3, #192	; 0xc0
 8006e88:	000a      	movs	r2, r1
 8006e8a:	029b      	lsls	r3, r3, #10
 8006e8c:	401a      	ands	r2, r3
 8006e8e:	429a      	cmp	r2, r3
 8006e90:	d107      	bne.n	8006ea2 <HAL_RCCEx_PeriphCLKConfig+0x72>
 8006e92:	6823      	ldr	r3, [r4, #0]
 8006e94:	4846      	ldr	r0, [pc, #280]	; (8006fb0 <HAL_RCCEx_PeriphCLKConfig+0x180>)
 8006e96:	4003      	ands	r3, r0
 8006e98:	20c0      	movs	r0, #192	; 0xc0
 8006e9a:	0380      	lsls	r0, r0, #14
 8006e9c:	4001      	ands	r1, r0
 8006e9e:	430b      	orrs	r3, r1
 8006ea0:	6023      	str	r3, [r4, #0]
 8006ea2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006ea4:	431a      	orrs	r2, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8006ea6:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006ea8:	6522      	str	r2, [r4, #80]	; 0x50
    if(pwrclkchanged == SET)
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d103      	bne.n	8006eb6 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006eae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006eb0:	4a40      	ldr	r2, [pc, #256]	; (8006fb4 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8006eb2:	4013      	ands	r3, r2
 8006eb4:	63a3      	str	r3, [r4, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006eb6:	682b      	ldr	r3, [r5, #0]
 8006eb8:	07da      	lsls	r2, r3, #31
 8006eba:	d506      	bpl.n	8006eca <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006ebc:	2003      	movs	r0, #3
 8006ebe:	493a      	ldr	r1, [pc, #232]	; (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8006ec0:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006ec2:	4382      	bics	r2, r0
 8006ec4:	68a8      	ldr	r0, [r5, #8]
 8006ec6:	4302      	orrs	r2, r0
 8006ec8:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006eca:	079a      	lsls	r2, r3, #30
 8006ecc:	d506      	bpl.n	8006edc <HAL_RCCEx_PeriphCLKConfig+0xac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006ece:	200c      	movs	r0, #12
 8006ed0:	4935      	ldr	r1, [pc, #212]	; (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8006ed2:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006ed4:	4382      	bics	r2, r0
 8006ed6:	68e8      	ldr	r0, [r5, #12]
 8006ed8:	4302      	orrs	r2, r0
 8006eda:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006edc:	075a      	lsls	r2, r3, #29
 8006ede:	d506      	bpl.n	8006eee <HAL_RCCEx_PeriphCLKConfig+0xbe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8006ee0:	4931      	ldr	r1, [pc, #196]	; (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8006ee2:	4835      	ldr	r0, [pc, #212]	; (8006fb8 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8006ee4:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006ee6:	4002      	ands	r2, r0
 8006ee8:	6928      	ldr	r0, [r5, #16]
 8006eea:	4302      	orrs	r2, r0
 8006eec:	64ca      	str	r2, [r1, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006eee:	071a      	lsls	r2, r3, #28
 8006ef0:	d506      	bpl.n	8006f00 <HAL_RCCEx_PeriphCLKConfig+0xd0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006ef2:	492d      	ldr	r1, [pc, #180]	; (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8006ef4:	4831      	ldr	r0, [pc, #196]	; (8006fbc <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8006ef6:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006ef8:	4002      	ands	r2, r0
 8006efa:	6968      	ldr	r0, [r5, #20]
 8006efc:	4302      	orrs	r2, r0
 8006efe:	64ca      	str	r2, [r1, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006f00:	065a      	lsls	r2, r3, #25
 8006f02:	d506      	bpl.n	8006f12 <HAL_RCCEx_PeriphCLKConfig+0xe2>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006f04:	4928      	ldr	r1, [pc, #160]	; (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8006f06:	482e      	ldr	r0, [pc, #184]	; (8006fc0 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 8006f08:	6cca      	ldr	r2, [r1, #76]	; 0x4c
 8006f0a:	4002      	ands	r2, r0
 8006f0c:	69e8      	ldr	r0, [r5, #28]
 8006f0e:	4302      	orrs	r2, r0
 8006f10:	64ca      	str	r2, [r1, #76]	; 0x4c
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
  }

  return HAL_OK;
 8006f12:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006f14:	061b      	lsls	r3, r3, #24
 8006f16:	d517      	bpl.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x118>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8006f18:	4a23      	ldr	r2, [pc, #140]	; (8006fa8 <HAL_RCCEx_PeriphCLKConfig+0x178>)
 8006f1a:	492a      	ldr	r1, [pc, #168]	; (8006fc4 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8006f1c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8006f1e:	400b      	ands	r3, r1
 8006f20:	69a9      	ldr	r1, [r5, #24]
 8006f22:	430b      	orrs	r3, r1
 8006f24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8006f26:	e00f      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x118>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006f28:	6833      	ldr	r3, [r6, #0]
 8006f2a:	433b      	orrs	r3, r7
 8006f2c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8006f2e:	f7fe fe03 	bl	8005b38 <HAL_GetTick>
 8006f32:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006f34:	6833      	ldr	r3, [r6, #0]
 8006f36:	423b      	tst	r3, r7
 8006f38:	d192      	bne.n	8006e60 <HAL_RCCEx_PeriphCLKConfig+0x30>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006f3a:	f7fe fdfd 	bl	8005b38 <HAL_GetTick>
 8006f3e:	9b01      	ldr	r3, [sp, #4]
 8006f40:	1ac0      	subs	r0, r0, r3
 8006f42:	2864      	cmp	r0, #100	; 0x64
 8006f44:	d9f6      	bls.n	8006f34 <HAL_RCCEx_PeriphCLKConfig+0x104>
          return HAL_TIMEOUT;
 8006f46:	2003      	movs	r0, #3
}
 8006f48:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8006f4a:	4296      	cmp	r6, r2
 8006f4c:	d195      	bne.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x4a>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f4e:	6823      	ldr	r3, [r4, #0]
          return HAL_ERROR;
 8006f50:	2001      	movs	r0, #1
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006f52:	039b      	lsls	r3, r3, #14
 8006f54:	d400      	bmi.n	8006f58 <HAL_RCCEx_PeriphCLKConfig+0x128>
 8006f56:	e790      	b.n	8006e7a <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8006f58:	e7f6      	b.n	8006f48 <HAL_RCCEx_PeriphCLKConfig+0x118>
    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8006f5a:	42b2      	cmp	r2, r6
 8006f5c:	d100      	bne.n	8006f60 <HAL_RCCEx_PeriphCLKConfig+0x130>
 8006f5e:	e791      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x54>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8006f60:	682b      	ldr	r3, [r5, #0]
 8006f62:	069b      	lsls	r3, r3, #26
 8006f64:	d400      	bmi.n	8006f68 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8006f66:	e78d      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x54>
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f68:	2280      	movs	r2, #128	; 0x80
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006f6a:	6d21      	ldr	r1, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_FORCE();
 8006f6c:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8006f6e:	0312      	lsls	r2, r2, #12
 8006f70:	4302      	orrs	r2, r0
 8006f72:	6522      	str	r2, [r4, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f74:	6d22      	ldr	r2, [r4, #80]	; 0x50
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006f76:	4b14      	ldr	r3, [pc, #80]	; (8006fc8 <HAL_RCCEx_PeriphCLKConfig+0x198>)
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f78:	4814      	ldr	r0, [pc, #80]	; (8006fcc <HAL_RCCEx_PeriphCLKConfig+0x19c>)
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8006f7a:	400b      	ands	r3, r1
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006f7c:	4002      	ands	r2, r0
 8006f7e:	6522      	str	r2, [r4, #80]	; 0x50
      RCC->CSR = temp_reg;
 8006f80:	6523      	str	r3, [r4, #80]	; 0x50
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8006f82:	05cb      	lsls	r3, r1, #23
 8006f84:	d400      	bmi.n	8006f88 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8006f86:	e77d      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x54>
        tickstart = HAL_GetTick();
 8006f88:	f7fe fdd6 	bl	8005b38 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f8c:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8006f8e:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8006f90:	00bf      	lsls	r7, r7, #2
 8006f92:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8006f94:	423b      	tst	r3, r7
 8006f96:	d000      	beq.n	8006f9a <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8006f98:	e774      	b.n	8006e84 <HAL_RCCEx_PeriphCLKConfig+0x54>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006f9a:	f7fe fdcd 	bl	8005b38 <HAL_GetTick>
 8006f9e:	4b0c      	ldr	r3, [pc, #48]	; (8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x1a0>)
 8006fa0:	1b80      	subs	r0, r0, r6
 8006fa2:	4298      	cmp	r0, r3
 8006fa4:	d9f5      	bls.n	8006f92 <HAL_RCCEx_PeriphCLKConfig+0x162>
 8006fa6:	e7ce      	b.n	8006f46 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8006fa8:	40021000 	.word	0x40021000
 8006fac:	40007000 	.word	0x40007000
 8006fb0:	ffcfffff 	.word	0xffcfffff
 8006fb4:	efffffff 	.word	0xefffffff
 8006fb8:	fffff3ff 	.word	0xfffff3ff
 8006fbc:	ffffcfff 	.word	0xffffcfff
 8006fc0:	fbffffff 	.word	0xfbffffff
 8006fc4:	fff3ffff 	.word	0xfff3ffff
 8006fc8:	fffcffff 	.word	0xfffcffff
 8006fcc:	fff7ffff 	.word	0xfff7ffff
 8006fd0:	00001388 	.word	0x00001388

08006fd4 <HAL_RTC_WaitForSynchro>:
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006fd4:	21a0      	movs	r1, #160	; 0xa0
 8006fd6:	6802      	ldr	r2, [r0, #0]
{
 8006fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006fda:	68d3      	ldr	r3, [r2, #12]
{
 8006fdc:	0004      	movs	r4, r0
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8006fde:	438b      	bics	r3, r1
 8006fe0:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 8006fe2:	f7fe fda9 	bl	8005b38 <HAL_GetTick>

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006fe6:	27fa      	movs	r7, #250	; 0xfa
  tickstart = HAL_GetTick();
 8006fe8:	0005      	movs	r5, r0
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006fea:	2620      	movs	r6, #32
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006fec:	00bf      	lsls	r7, r7, #2
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8006fee:	6823      	ldr	r3, [r4, #0]
 8006ff0:	68db      	ldr	r3, [r3, #12]
 8006ff2:	4233      	tst	r3, r6
 8006ff4:	d001      	beq.n	8006ffa <HAL_RTC_WaitForSynchro+0x26>
    {
      return HAL_TIMEOUT;
    }
  }

  return HAL_OK;
 8006ff6:	2000      	movs	r0, #0
}
 8006ff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8006ffa:	f7fe fd9d 	bl	8005b38 <HAL_GetTick>
 8006ffe:	1b40      	subs	r0, r0, r5
 8007000:	42b8      	cmp	r0, r7
 8007002:	d9f4      	bls.n	8006fee <HAL_RTC_WaitForSynchro+0x1a>
      return HAL_TIMEOUT;
 8007004:	2003      	movs	r0, #3
 8007006:	e7f7      	b.n	8006ff8 <HAL_RTC_WaitForSynchro+0x24>

08007008 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8007008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800700a:	2440      	movs	r4, #64	; 0x40
 800700c:	6803      	ldr	r3, [r0, #0]
{
 800700e:	0005      	movs	r5, r0
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8007010:	68da      	ldr	r2, [r3, #12]
 8007012:	4222      	tst	r2, r4
 8007014:	d001      	beq.n	800701a <RTC_EnterInitMode+0x12>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8007016:	2000      	movs	r0, #0
}
 8007018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800701a:	2201      	movs	r2, #1
 800701c:	4252      	negs	r2, r2
 800701e:	60da      	str	r2, [r3, #12]
    tickstart = HAL_GetTick();
 8007020:	f7fe fd8a 	bl	8005b38 <HAL_GetTick>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007024:	27fa      	movs	r7, #250	; 0xfa
    tickstart = HAL_GetTick();
 8007026:	0006      	movs	r6, r0
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007028:	00bf      	lsls	r7, r7, #2
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800702a:	682b      	ldr	r3, [r5, #0]
 800702c:	68db      	ldr	r3, [r3, #12]
 800702e:	4223      	tst	r3, r4
 8007030:	d1f1      	bne.n	8007016 <RTC_EnterInitMode+0xe>
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8007032:	f7fe fd81 	bl	8005b38 <HAL_GetTick>
 8007036:	1b80      	subs	r0, r0, r6
 8007038:	42b8      	cmp	r0, r7
 800703a:	d9f6      	bls.n	800702a <RTC_EnterInitMode+0x22>
        return HAL_TIMEOUT;
 800703c:	2003      	movs	r0, #3
 800703e:	e7eb      	b.n	8007018 <RTC_EnterInitMode+0x10>

08007040 <HAL_RTC_Init>:
{
 8007040:	b570      	push	{r4, r5, r6, lr}
 8007042:	0004      	movs	r4, r0
    return HAL_ERROR;
 8007044:	2501      	movs	r5, #1
  if (hrtc == NULL)
 8007046:	2800      	cmp	r0, #0
 8007048:	d01a      	beq.n	8007080 <HAL_RTC_Init+0x40>
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800704a:	1c86      	adds	r6, r0, #2
 800704c:	7ff3      	ldrb	r3, [r6, #31]
 800704e:	b2da      	uxtb	r2, r3
 8007050:	2b00      	cmp	r3, #0
 8007052:	d103      	bne.n	800705c <HAL_RTC_Init+0x1c>
    hrtc->Lock = HAL_UNLOCKED;
 8007054:	1943      	adds	r3, r0, r5
 8007056:	77da      	strb	r2, [r3, #31]
    HAL_RTC_MspInit(hrtc);
 8007058:	f7fd fe7e 	bl	8004d58 <HAL_RTC_MspInit>
  hrtc->State = HAL_RTC_STATE_BUSY;
 800705c:	2302      	movs	r3, #2
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800705e:	22ca      	movs	r2, #202	; 0xca
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007060:	77f3      	strb	r3, [r6, #31]
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007062:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007064:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007066:	625a      	str	r2, [r3, #36]	; 0x24
 8007068:	3a77      	subs	r2, #119	; 0x77
 800706a:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800706c:	f7ff ffcc 	bl	8007008 <RTC_EnterInitMode>
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	1e05      	subs	r5, r0, #0
 8007074:	d006      	beq.n	8007084 <HAL_RTC_Init+0x44>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007076:	22ff      	movs	r2, #255	; 0xff
 8007078:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800707a:	2304      	movs	r3, #4
 800707c:	77f3      	strb	r3, [r6, #31]
        return HAL_ERROR;
 800707e:	2501      	movs	r5, #1
}
 8007080:	0028      	movs	r0, r5
 8007082:	bd70      	pop	{r4, r5, r6, pc}
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007084:	689a      	ldr	r2, [r3, #8]
 8007086:	491b      	ldr	r1, [pc, #108]	; (80070f4 <HAL_RTC_Init+0xb4>)
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007088:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800708a:	400a      	ands	r2, r1
 800708c:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800708e:	6862      	ldr	r2, [r4, #4]
 8007090:	6899      	ldr	r1, [r3, #8]
 8007092:	4302      	orrs	r2, r0
 8007094:	69a0      	ldr	r0, [r4, #24]
 8007096:	4302      	orrs	r2, r0
 8007098:	430a      	orrs	r2, r1
 800709a:	609a      	str	r2, [r3, #8]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800709c:	68e2      	ldr	r2, [r4, #12]
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800709e:	6960      	ldr	r0, [r4, #20]
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80070a0:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80070a2:	68a2      	ldr	r2, [r4, #8]
 80070a4:	6919      	ldr	r1, [r3, #16]
 80070a6:	0412      	lsls	r2, r2, #16
 80070a8:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80070aa:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80070ac:	611a      	str	r2, [r3, #16]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80070ae:	68da      	ldr	r2, [r3, #12]
 80070b0:	438a      	bics	r2, r1
 80070b2:	60da      	str	r2, [r3, #12]
    hrtc->Instance->OR &= (uint32_t)~(RTC_OR_ALARMOUTTYPE | RTC_OR_OUT_RMP);
 80070b4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80070b6:	397d      	subs	r1, #125	; 0x7d
 80070b8:	438a      	bics	r2, r1
 80070ba:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80070bc:	69e2      	ldr	r2, [r4, #28]
 80070be:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 80070c0:	4302      	orrs	r2, r0
 80070c2:	430a      	orrs	r2, r1
 80070c4:	64da      	str	r2, [r3, #76]	; 0x4c
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80070c6:	689b      	ldr	r3, [r3, #8]
 80070c8:	069b      	lsls	r3, r3, #26
 80070ca:	d40c      	bmi.n	80070e6 <HAL_RTC_Init+0xa6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80070cc:	0020      	movs	r0, r4
 80070ce:	f7ff ff81 	bl	8006fd4 <HAL_RTC_WaitForSynchro>
 80070d2:	2800      	cmp	r0, #0
 80070d4:	d007      	beq.n	80070e6 <HAL_RTC_Init+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070d6:	22ff      	movs	r2, #255	; 0xff
 80070d8:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(hrtc);
 80070da:	3401      	adds	r4, #1
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070dc:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80070de:	2304      	movs	r3, #4
 80070e0:	77f3      	strb	r3, [r6, #31]
        __HAL_UNLOCK(hrtc);
 80070e2:	77e5      	strb	r5, [r4, #31]
 80070e4:	e7cb      	b.n	800707e <HAL_RTC_Init+0x3e>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80070e6:	22ff      	movs	r2, #255	; 0xff
 80070e8:	6823      	ldr	r3, [r4, #0]
 80070ea:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 80070ec:	2301      	movs	r3, #1
 80070ee:	77f3      	strb	r3, [r6, #31]
    return HAL_OK;
 80070f0:	e7c6      	b.n	8007080 <HAL_RTC_Init+0x40>
 80070f2:	46c0      	nop			; (mov r8, r8)
 80070f4:	ff8fffbf 	.word	0xff8fffbf

080070f8 <RTC_ByteToBcd2>:
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
  uint32_t bcdhigh = 0U;
 80070f8:	2300      	movs	r3, #0
  uint8_t Param = Value;

  while (Param >= 10U)
 80070fa:	2809      	cmp	r0, #9
 80070fc:	d803      	bhi.n	8007106 <RTC_ByteToBcd2+0xe>
  {
    bcdhigh++;
    Param -= 10U;
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 80070fe:	011b      	lsls	r3, r3, #4
 8007100:	4318      	orrs	r0, r3
 8007102:	b2c0      	uxtb	r0, r0
}
 8007104:	4770      	bx	lr
    Param -= 10U;
 8007106:	380a      	subs	r0, #10
    bcdhigh++;
 8007108:	3301      	adds	r3, #1
    Param -= 10U;
 800710a:	b2c0      	uxtb	r0, r0
 800710c:	e7f5      	b.n	80070fa <RTC_ByteToBcd2+0x2>
	...

08007110 <HAL_RTC_SetTime>:
{
 8007110:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8007112:	1c43      	adds	r3, r0, #1
{
 8007114:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 8007116:	9302      	str	r3, [sp, #8]
{
 8007118:	000c      	movs	r4, r1
  __HAL_LOCK(hrtc);
 800711a:	7fd9      	ldrb	r1, [r3, #31]
 800711c:	2302      	movs	r3, #2
{
 800711e:	0005      	movs	r5, r0
  __HAL_LOCK(hrtc);
 8007120:	001f      	movs	r7, r3
 8007122:	2901      	cmp	r1, #1
 8007124:	d038      	beq.n	8007198 <HAL_RTC_SetTime+0x88>
 8007126:	2101      	movs	r1, #1
 8007128:	1840      	adds	r0, r0, r1
 800712a:	77c1      	strb	r1, [r0, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 800712c:	18e9      	adds	r1, r5, r3
 800712e:	77cb      	strb	r3, [r1, #31]
  if (Format == RTC_FORMAT_BIN)
 8007130:	682b      	ldr	r3, [r5, #0]
 8007132:	7820      	ldrb	r0, [r4, #0]
 8007134:	9301      	str	r3, [sp, #4]
 8007136:	7866      	ldrb	r6, [r4, #1]
 8007138:	2340      	movs	r3, #64	; 0x40
  hrtc->State = HAL_RTC_STATE_BUSY;
 800713a:	9103      	str	r1, [sp, #12]
  if (Format == RTC_FORMAT_BIN)
 800713c:	2a00      	cmp	r2, #0
 800713e:	d12e      	bne.n	800719e <HAL_RTC_SetTime+0x8e>
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007140:	9a01      	ldr	r2, [sp, #4]
 8007142:	6892      	ldr	r2, [r2, #8]
 8007144:	0011      	movs	r1, r2
 8007146:	4019      	ands	r1, r3
 8007148:	421a      	tst	r2, r3
 800714a:	d100      	bne.n	800714e <HAL_RTC_SetTime+0x3e>
      sTime->TimeFormat = 0x00U;
 800714c:	70e1      	strb	r1, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 800714e:	f7ff ffd3 	bl	80070f8 <RTC_ByteToBcd2>
 8007152:	0007      	movs	r7, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8007154:	0030      	movs	r0, r6
 8007156:	f7ff ffcf 	bl	80070f8 <RTC_ByteToBcd2>
 800715a:	0006      	movs	r6, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800715c:	78a0      	ldrb	r0, [r4, #2]
 800715e:	f7ff ffcb 	bl	80070f8 <RTC_ByteToBcd2>
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007162:	78e3      	ldrb	r3, [r4, #3]
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007164:	043f      	lsls	r7, r7, #16
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8007166:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8007168:	4303      	orrs	r3, r0
 800716a:	431f      	orrs	r7, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800716c:	0236      	lsls	r6, r6, #8
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800716e:	23ca      	movs	r3, #202	; 0xca
 8007170:	9a01      	ldr	r2, [sp, #4]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007172:	0028      	movs	r0, r5
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007174:	6253      	str	r3, [r2, #36]	; 0x24
 8007176:	3b77      	subs	r3, #119	; 0x77
 8007178:	6253      	str	r3, [r2, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800717a:	f7ff ff45 	bl	8007008 <RTC_EnterInitMode>
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800717e:	433e      	orrs	r6, r7
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007180:	682b      	ldr	r3, [r5, #0]
 8007182:	1e07      	subs	r7, r0, #0
 8007184:	d01a      	beq.n	80071bc <HAL_RTC_SetTime+0xac>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007186:	22ff      	movs	r2, #255	; 0xff
 8007188:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 800718a:	2304      	movs	r3, #4
 800718c:	9a03      	ldr	r2, [sp, #12]
 800718e:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8007190:	2300      	movs	r3, #0
 8007192:	9a02      	ldr	r2, [sp, #8]
 8007194:	77d3      	strb	r3, [r2, #31]
        return HAL_ERROR;
 8007196:	2701      	movs	r7, #1
}
 8007198:	0038      	movs	r0, r7
 800719a:	b005      	add	sp, #20
 800719c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800719e:	9a01      	ldr	r2, [sp, #4]
 80071a0:	6892      	ldr	r2, [r2, #8]
 80071a2:	0011      	movs	r1, r2
 80071a4:	4019      	ands	r1, r3
 80071a6:	421a      	tst	r2, r3
 80071a8:	d100      	bne.n	80071ac <HAL_RTC_SetTime+0x9c>
      sTime->TimeFormat = 0x00U;
 80071aa:	70e1      	strb	r1, [r4, #3]
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80071ac:	0400      	lsls	r0, r0, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80071ae:	0236      	lsls	r6, r6, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80071b0:	4306      	orrs	r6, r0
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80071b2:	78e7      	ldrb	r7, [r4, #3]
              ((uint32_t)sTime->Seconds) | \
 80071b4:	78a0      	ldrb	r0, [r4, #2]
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80071b6:	043f      	lsls	r7, r7, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80071b8:	4306      	orrs	r6, r0
 80071ba:	e7d8      	b.n	800716e <HAL_RTC_SetTime+0x5e>
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80071bc:	4815      	ldr	r0, [pc, #84]	; (8007214 <HAL_RTC_SetTime+0x104>)
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80071be:	4916      	ldr	r1, [pc, #88]	; (8007218 <HAL_RTC_SetTime+0x108>)
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80071c0:	4006      	ands	r6, r0
 80071c2:	601e      	str	r6, [r3, #0]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80071c4:	689a      	ldr	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80071c6:	6920      	ldr	r0, [r4, #16]
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80071c8:	400a      	ands	r2, r1
 80071ca:	609a      	str	r2, [r3, #8]
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80071cc:	68e2      	ldr	r2, [r4, #12]
 80071ce:	6899      	ldr	r1, [r3, #8]
 80071d0:	4302      	orrs	r2, r0
 80071d2:	430a      	orrs	r2, r1
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80071d4:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80071d6:	609a      	str	r2, [r3, #8]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80071d8:	68da      	ldr	r2, [r3, #12]
 80071da:	438a      	bics	r2, r1
 80071dc:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80071de:	689b      	ldr	r3, [r3, #8]
 80071e0:	069b      	lsls	r3, r3, #26
 80071e2:	d40d      	bmi.n	8007200 <HAL_RTC_SetTime+0xf0>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80071e4:	0028      	movs	r0, r5
 80071e6:	f7ff fef5 	bl	8006fd4 <HAL_RTC_WaitForSynchro>
 80071ea:	2800      	cmp	r0, #0
 80071ec:	d008      	beq.n	8007200 <HAL_RTC_SetTime+0xf0>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071ee:	22ff      	movs	r2, #255	; 0xff
 80071f0:	682b      	ldr	r3, [r5, #0]
 80071f2:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80071f4:	2304      	movs	r3, #4
 80071f6:	9a03      	ldr	r2, [sp, #12]
 80071f8:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 80071fa:	9b02      	ldr	r3, [sp, #8]
 80071fc:	77df      	strb	r7, [r3, #31]
 80071fe:	e7ca      	b.n	8007196 <HAL_RTC_SetTime+0x86>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007200:	22ff      	movs	r2, #255	; 0xff
 8007202:	682b      	ldr	r3, [r5, #0]
 8007204:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY;
 8007206:	2301      	movs	r3, #1
 8007208:	9a03      	ldr	r2, [sp, #12]
 800720a:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 800720c:	2300      	movs	r3, #0
 800720e:	9a02      	ldr	r2, [sp, #8]
 8007210:	77d3      	strb	r3, [r2, #31]
    return HAL_OK;
 8007212:	e7c1      	b.n	8007198 <HAL_RTC_SetTime+0x88>
 8007214:	007f7f7f 	.word	0x007f7f7f
 8007218:	fffbffff 	.word	0xfffbffff

0800721c <HAL_RTC_SetDate>:
  __HAL_LOCK(hrtc);
 800721c:	2302      	movs	r3, #2
{
 800721e:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 8007220:	1c47      	adds	r7, r0, #1
{
 8007222:	000e      	movs	r6, r1
  __HAL_LOCK(hrtc);
 8007224:	7ff9      	ldrb	r1, [r7, #31]
{
 8007226:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8007228:	001d      	movs	r5, r3
{
 800722a:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 800722c:	2901      	cmp	r1, #1
 800722e:	d036      	beq.n	800729e <HAL_RTC_SetDate+0x82>
 8007230:	2101      	movs	r1, #1
 8007232:	77f9      	strb	r1, [r7, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007234:	18c1      	adds	r1, r0, r3
 8007236:	77cb      	strb	r3, [r1, #31]
 8007238:	9101      	str	r1, [sp, #4]
 800723a:	7831      	ldrb	r1, [r6, #0]
 800723c:	78f0      	ldrb	r0, [r6, #3]
 800723e:	0349      	lsls	r1, r1, #13
 8007240:	7873      	ldrb	r3, [r6, #1]
 8007242:	78b5      	ldrb	r5, [r6, #2]
 8007244:	9102      	str	r1, [sp, #8]
  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007246:	2a00      	cmp	r2, #0
 8007248:	d14c      	bne.n	80072e4 <HAL_RTC_SetDate+0xc8>
 800724a:	3210      	adds	r2, #16
 800724c:	4213      	tst	r3, r2
 800724e:	d002      	beq.n	8007256 <HAL_RTC_SetDate+0x3a>
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007250:	4393      	bics	r3, r2
 8007252:	330a      	adds	r3, #10
 8007254:	7073      	strb	r3, [r6, #1]
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8007256:	f7ff ff4f 	bl	80070f8 <RTC_ByteToBcd2>
 800725a:	9003      	str	r0, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800725c:	7870      	ldrb	r0, [r6, #1]
 800725e:	f7ff ff4b 	bl	80070f8 <RTC_ByteToBcd2>
 8007262:	0006      	movs	r6, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8007264:	0028      	movs	r0, r5
 8007266:	f7ff ff47 	bl	80070f8 <RTC_ByteToBcd2>
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800726a:	9b03      	ldr	r3, [sp, #12]
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800726c:	0236      	lsls	r6, r6, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800726e:	041d      	lsls	r5, r3, #16
 8007270:	9b02      	ldr	r3, [sp, #8]
 8007272:	4318      	orrs	r0, r3
 8007274:	4305      	orrs	r5, r0
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007276:	22ca      	movs	r2, #202	; 0xca
 8007278:	6823      	ldr	r3, [r4, #0]
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800727a:	0020      	movs	r0, r4
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800727c:	625a      	str	r2, [r3, #36]	; 0x24
 800727e:	3a77      	subs	r2, #119	; 0x77
 8007280:	625a      	str	r2, [r3, #36]	; 0x24
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007282:	f7ff fec1 	bl	8007008 <RTC_EnterInitMode>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8007286:	432e      	orrs	r6, r5
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8007288:	6823      	ldr	r3, [r4, #0]
 800728a:	1e05      	subs	r5, r0, #0
 800728c:	d00a      	beq.n	80072a4 <HAL_RTC_SetDate+0x88>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800728e:	22ff      	movs	r2, #255	; 0xff
 8007290:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_ERROR;
 8007292:	2304      	movs	r3, #4
 8007294:	9a01      	ldr	r2, [sp, #4]
 8007296:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 8007298:	2300      	movs	r3, #0
 800729a:	77fb      	strb	r3, [r7, #31]
        return HAL_ERROR;
 800729c:	2501      	movs	r5, #1
}
 800729e:	0028      	movs	r0, r5
 80072a0:	b005      	add	sp, #20
 80072a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80072a4:	2180      	movs	r1, #128	; 0x80
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80072a6:	4812      	ldr	r0, [pc, #72]	; (80072f0 <HAL_RTC_SetDate+0xd4>)
 80072a8:	4006      	ands	r6, r0
 80072aa:	605e      	str	r6, [r3, #4]
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 80072ac:	68da      	ldr	r2, [r3, #12]
 80072ae:	438a      	bics	r2, r1
 80072b0:	60da      	str	r2, [r3, #12]
    if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == 0U)
 80072b2:	689b      	ldr	r3, [r3, #8]
 80072b4:	069b      	lsls	r3, r3, #26
 80072b6:	d40c      	bmi.n	80072d2 <HAL_RTC_SetDate+0xb6>
      if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80072b8:	0020      	movs	r0, r4
 80072ba:	f7ff fe8b 	bl	8006fd4 <HAL_RTC_WaitForSynchro>
 80072be:	2800      	cmp	r0, #0
 80072c0:	d007      	beq.n	80072d2 <HAL_RTC_SetDate+0xb6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072c2:	22ff      	movs	r2, #255	; 0xff
 80072c4:	6823      	ldr	r3, [r4, #0]
 80072c6:	625a      	str	r2, [r3, #36]	; 0x24
        hrtc->State = HAL_RTC_STATE_ERROR;
 80072c8:	2304      	movs	r3, #4
 80072ca:	9a01      	ldr	r2, [sp, #4]
 80072cc:	77d3      	strb	r3, [r2, #31]
        __HAL_UNLOCK(hrtc);
 80072ce:	77fd      	strb	r5, [r7, #31]
 80072d0:	e7e4      	b.n	800729c <HAL_RTC_SetDate+0x80>
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80072d2:	22ff      	movs	r2, #255	; 0xff
 80072d4:	6823      	ldr	r3, [r4, #0]
 80072d6:	625a      	str	r2, [r3, #36]	; 0x24
    hrtc->State = HAL_RTC_STATE_READY ;
 80072d8:	2301      	movs	r3, #1
 80072da:	9a01      	ldr	r2, [sp, #4]
 80072dc:	77d3      	strb	r3, [r2, #31]
    __HAL_UNLOCK(hrtc);
 80072de:	2300      	movs	r3, #0
 80072e0:	77fb      	strb	r3, [r7, #31]
    return HAL_OK;
 80072e2:	e7dc      	b.n	800729e <HAL_RTC_SetDate+0x82>
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80072e4:	9a02      	ldr	r2, [sp, #8]
 80072e6:	0400      	lsls	r0, r0, #16
 80072e8:	4310      	orrs	r0, r2
 80072ea:	4305      	orrs	r5, r0
                  (((uint32_t)sDate->Month) << 8U) | \
 80072ec:	021e      	lsls	r6, r3, #8
 80072ee:	e7c2      	b.n	8007276 <HAL_RTC_SetDate+0x5a>
 80072f0:	00ffff3f 	.word	0x00ffff3f

080072f4 <HAL_RTCEx_SetWakeUpTimer_IT>:
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80072f4:	2302      	movs	r3, #2
{
 80072f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80072f8:	b085      	sub	sp, #20
  __HAL_LOCK(hrtc);
 80072fa:	1c46      	adds	r6, r0, #1
{
 80072fc:	9101      	str	r1, [sp, #4]
 80072fe:	9202      	str	r2, [sp, #8]
  __HAL_LOCK(hrtc);
 8007300:	7ff2      	ldrb	r2, [r6, #31]
{
 8007302:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 8007304:	0018      	movs	r0, r3
 8007306:	2a01      	cmp	r2, #1
 8007308:	d05a      	beq.n	80073c0 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
 800730a:	2201      	movs	r2, #1

  hrtc->State = HAL_RTC_STATE_BUSY;
 800730c:	18e7      	adds	r7, r4, r3
  __HAL_LOCK(hrtc);
 800730e:	77f2      	strb	r2, [r6, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007310:	77fb      	strb	r3, [r7, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007312:	6823      	ldr	r3, [r4, #0]
 8007314:	32c9      	adds	r2, #201	; 0xc9
 8007316:	625a      	str	r2, [r3, #36]	; 0x24
 8007318:	3a77      	subs	r2, #119	; 0x77
 800731a:	625a      	str	r2, [r3, #36]	; 0x24

  /*Check RTC WUTWF flag is reset only when wake up timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 800731c:	689b      	ldr	r3, [r3, #8]
 800731e:	055b      	lsls	r3, r3, #21
 8007320:	d438      	bmi.n	8007394 <HAL_RTCEx_SetWakeUpTimer_IT+0xa0>
        return HAL_TIMEOUT;
      }
    }
  }
  /* Disable the Wake-Up timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007322:	6823      	ldr	r3, [r4, #0]
 8007324:	492f      	ldr	r1, [pc, #188]	; (80073e4 <HAL_RTCEx_SetWakeUpTimer_IT+0xf0>)
 8007326:	689a      	ldr	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);

  tickstart = HAL_GetTick();

  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007328:	2504      	movs	r5, #4
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 800732a:	400a      	ands	r2, r1
 800732c:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 800732e:	68d9      	ldr	r1, [r3, #12]
 8007330:	4a2d      	ldr	r2, [pc, #180]	; (80073e8 <HAL_RTCEx_SetWakeUpTimer_IT+0xf4>)
 8007332:	b2c9      	uxtb	r1, r1
 8007334:	430a      	orrs	r2, r1
 8007336:	60da      	str	r2, [r3, #12]
  tickstart = HAL_GetTick();
 8007338:	f7fe fbfe 	bl	8005b38 <HAL_GetTick>
 800733c:	9000      	str	r0, [sp, #0]
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	68da      	ldr	r2, [r3, #12]
 8007342:	0011      	movs	r1, r2
 8007344:	4029      	ands	r1, r5
 8007346:	9103      	str	r1, [sp, #12]
 8007348:	422a      	tst	r2, r5
 800734a:	d03b      	beq.n	80073c4 <HAL_RTCEx_SetWakeUpTimer_IT+0xd0>

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 800734c:	2107      	movs	r1, #7
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 800734e:	9a01      	ldr	r2, [sp, #4]
 8007350:	615a      	str	r2, [r3, #20]
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8007352:	689a      	ldr	r2, [r3, #8]
 8007354:	438a      	bics	r2, r1
 8007356:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007358:	689a      	ldr	r2, [r3, #8]
 800735a:	9902      	ldr	r1, [sp, #8]
 800735c:	430a      	orrs	r2, r1

  /* RTC WakeUpTimer Interrupt Configuration: EXTI configuration */
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 800735e:	2180      	movs	r1, #128	; 0x80
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8007360:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_IT();
 8007362:	4a22      	ldr	r2, [pc, #136]	; (80073ec <HAL_RTCEx_SetWakeUpTimer_IT+0xf8>)
 8007364:	0349      	lsls	r1, r1, #13
 8007366:	6810      	ldr	r0, [r2, #0]
 8007368:	4308      	orrs	r0, r1
 800736a:	6010      	str	r0, [r2, #0]

  __HAL_RTC_WAKEUPTIMER_EXTI_ENABLE_RISING_EDGE();
 800736c:	6890      	ldr	r0, [r2, #8]
 800736e:	4301      	orrs	r1, r0
 8007370:	6091      	str	r1, [r2, #8]

  /* Configure the Interrupt in the RTC_CR register */
  __HAL_RTC_WAKEUPTIMER_ENABLE_IT(hrtc, RTC_IT_WUT);
 8007372:	2280      	movs	r2, #128	; 0x80
 8007374:	6899      	ldr	r1, [r3, #8]
 8007376:	01d2      	lsls	r2, r2, #7
 8007378:	430a      	orrs	r2, r1
 800737a:	609a      	str	r2, [r3, #8]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 800737c:	2280      	movs	r2, #128	; 0x80
 800737e:	6899      	ldr	r1, [r3, #8]
 8007380:	00d2      	lsls	r2, r2, #3
 8007382:	430a      	orrs	r2, r1
 8007384:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007386:	22ff      	movs	r2, #255	; 0xff

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007388:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800738a:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800738c:	2301      	movs	r3, #1
 800738e:	77fb      	strb	r3, [r7, #31]
  __HAL_UNLOCK(hrtc);
 8007390:	77f0      	strb	r0, [r6, #31]

  return HAL_OK;
 8007392:	e015      	b.n	80073c0 <HAL_RTCEx_SetWakeUpTimer_IT+0xcc>
    tickstart = HAL_GetTick();
 8007394:	f7fe fbd0 	bl	8005b38 <HAL_GetTick>
 8007398:	0005      	movs	r5, r0
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 1U)
 800739a:	2204      	movs	r2, #4
 800739c:	6823      	ldr	r3, [r4, #0]
 800739e:	68db      	ldr	r3, [r3, #12]
 80073a0:	4213      	tst	r3, r2
 80073a2:	d0be      	beq.n	8007322 <HAL_RTCEx_SetWakeUpTimer_IT+0x2e>
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80073a4:	f7fe fbc8 	bl	8005b38 <HAL_GetTick>
 80073a8:	23fa      	movs	r3, #250	; 0xfa
 80073aa:	1b40      	subs	r0, r0, r5
 80073ac:	009b      	lsls	r3, r3, #2
 80073ae:	4298      	cmp	r0, r3
 80073b0:	d9f3      	bls.n	800739a <HAL_RTCEx_SetWakeUpTimer_IT+0xa6>
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073b2:	22ff      	movs	r2, #255	; 0xff
 80073b4:	6823      	ldr	r3, [r4, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073b6:	2003      	movs	r0, #3
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073b8:	625a      	str	r2, [r3, #36]	; 0x24
        __HAL_UNLOCK(hrtc);
 80073ba:	2300      	movs	r3, #0
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073bc:	77f8      	strb	r0, [r7, #31]
      __HAL_UNLOCK(hrtc);
 80073be:	77f3      	strb	r3, [r6, #31]
}
 80073c0:	b005      	add	sp, #20
 80073c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80073c4:	f7fe fbb8 	bl	8005b38 <HAL_GetTick>
 80073c8:	9b00      	ldr	r3, [sp, #0]
 80073ca:	1ac0      	subs	r0, r0, r3
 80073cc:	23fa      	movs	r3, #250	; 0xfa
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	4298      	cmp	r0, r3
 80073d2:	d9b4      	bls.n	800733e <HAL_RTCEx_SetWakeUpTimer_IT+0x4a>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073d4:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073d6:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073d8:	6823      	ldr	r3, [r4, #0]
 80073da:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_UNLOCK(hrtc);
 80073dc:	9b03      	ldr	r3, [sp, #12]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80073de:	77f8      	strb	r0, [r7, #31]
      __HAL_UNLOCK(hrtc);
 80073e0:	e7ed      	b.n	80073be <HAL_RTCEx_SetWakeUpTimer_IT+0xca>
 80073e2:	46c0      	nop			; (mov r8, r8)
 80073e4:	fffffbff 	.word	0xfffffbff
 80073e8:	fffffb7f 	.word	0xfffffb7f
 80073ec:	40010400 	.word	0x40010400

080073f0 <HAL_RTCEx_DeactivateWakeUpTimer>:
HAL_StatusTypeDef HAL_RTCEx_DeactivateWakeUpTimer(RTC_HandleTypeDef *hrtc)
{
  uint32_t tickstart;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073f0:	2302      	movs	r3, #2
{
 80073f2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hrtc);
 80073f4:	1c45      	adds	r5, r0, #1
 80073f6:	7fea      	ldrb	r2, [r5, #31]
{
 80073f8:	0004      	movs	r4, r0
  __HAL_LOCK(hrtc);
 80073fa:	0018      	movs	r0, r3
 80073fc:	2a01      	cmp	r2, #1
 80073fe:	d031      	beq.n	8007464 <HAL_RTCEx_DeactivateWakeUpTimer+0x74>
 8007400:	2201      	movs	r2, #1

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007402:	18e6      	adds	r6, r4, r3
  __HAL_LOCK(hrtc);
 8007404:	77ea      	strb	r2, [r5, #31]
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007406:	77f3      	strb	r3, [r6, #31]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007408:	6823      	ldr	r3, [r4, #0]
 800740a:	32c9      	adds	r2, #201	; 0xc9
 800740c:	625a      	str	r2, [r3, #36]	; 0x24
 800740e:	3a77      	subs	r2, #119	; 0x77
 8007410:	625a      	str	r2, [r3, #36]	; 0x24

  /* Disable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007412:	689a      	ldr	r2, [r3, #8]
 8007414:	4914      	ldr	r1, [pc, #80]	; (8007468 <HAL_RTCEx_DeactivateWakeUpTimer+0x78>)
  /* In case of interrupt mode is used, the interrupt source must disabled */
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);

  tickstart = HAL_GetTick();
  /* Wait till RTC WUTWF flag is set and if Time out is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8007416:	2704      	movs	r7, #4
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8007418:	400a      	ands	r2, r1
 800741a:	609a      	str	r2, [r3, #8]
  __HAL_RTC_WAKEUPTIMER_DISABLE_IT(hrtc, RTC_IT_WUT);
 800741c:	689a      	ldr	r2, [r3, #8]
 800741e:	4913      	ldr	r1, [pc, #76]	; (800746c <HAL_RTCEx_DeactivateWakeUpTimer+0x7c>)
 8007420:	400a      	ands	r2, r1
 8007422:	609a      	str	r2, [r3, #8]
  tickstart = HAL_GetTick();
 8007424:	f7fe fb88 	bl	8005b38 <HAL_GetTick>
 8007428:	9000      	str	r0, [sp, #0]
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 800742a:	6823      	ldr	r3, [r4, #0]
 800742c:	68da      	ldr	r2, [r3, #12]
 800742e:	0011      	movs	r1, r2
 8007430:	4039      	ands	r1, r7
 8007432:	9101      	str	r1, [sp, #4]
 8007434:	423a      	tst	r2, r7
 8007436:	d006      	beq.n	8007446 <HAL_RTCEx_DeactivateWakeUpTimer+0x56>
      return HAL_TIMEOUT;
    }
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007438:	22ff      	movs	r2, #255	; 0xff

  hrtc->State = HAL_RTC_STATE_READY;

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800743a:	2000      	movs	r0, #0
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800743c:	625a      	str	r2, [r3, #36]	; 0x24
  hrtc->State = HAL_RTC_STATE_READY;
 800743e:	2301      	movs	r3, #1
 8007440:	77f3      	strb	r3, [r6, #31]
  __HAL_UNLOCK(hrtc);
 8007442:	77e8      	strb	r0, [r5, #31]

  return HAL_OK;
 8007444:	e00e      	b.n	8007464 <HAL_RTCEx_DeactivateWakeUpTimer+0x74>
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007446:	f7fe fb77 	bl	8005b38 <HAL_GetTick>
 800744a:	9b00      	ldr	r3, [sp, #0]
 800744c:	1ac0      	subs	r0, r0, r3
 800744e:	23fa      	movs	r3, #250	; 0xfa
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	4298      	cmp	r0, r3
 8007454:	d9e9      	bls.n	800742a <HAL_RTCEx_DeactivateWakeUpTimer+0x3a>
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007456:	22ff      	movs	r2, #255	; 0xff
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007458:	2003      	movs	r0, #3
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800745a:	6823      	ldr	r3, [r4, #0]
 800745c:	625a      	str	r2, [r3, #36]	; 0x24
      __HAL_UNLOCK(hrtc);
 800745e:	9b01      	ldr	r3, [sp, #4]
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8007460:	77f0      	strb	r0, [r6, #31]
      __HAL_UNLOCK(hrtc);
 8007462:	77eb      	strb	r3, [r5, #31]
}
 8007464:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007466:	46c0      	nop			; (mov r8, r8)
 8007468:	fffffbff 	.word	0xfffffbff
 800746c:	ffffbfff 	.word	0xffffbfff

08007470 <HAL_RTCEx_WakeUpTimerEventCallback>:
 8007470:	4770      	bx	lr
	...

08007474 <HAL_RTCEx_WakeUpTimerIRQHandler>:
  * @retval None
  */
void HAL_RTCEx_WakeUpTimerIRQHandler(RTC_HandleTypeDef *hrtc)
{
  /* Get the pending status of the WAKEUPTIMER Interrupt */
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8007474:	6803      	ldr	r3, [r0, #0]
{
 8007476:	b510      	push	{r4, lr}
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 8007478:	68db      	ldr	r3, [r3, #12]
{
 800747a:	0004      	movs	r4, r0
  if (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTF) != 0U)
 800747c:	055b      	lsls	r3, r3, #21
 800747e:	d507      	bpl.n	8007490 <HAL_RTCEx_WakeUpTimerIRQHandler+0x1c>
  {
    /* WAKEUPTIMER callback */
#if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
    hrtc->WakeUpTimerEventCallback(hrtc);
#else
    HAL_RTCEx_WakeUpTimerEventCallback(hrtc);
 8007480:	f7ff fff6 	bl	8007470 <HAL_RTCEx_WakeUpTimerEventCallback>
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

    /* Clear the WAKEUPTIMER interrupt pending bit */
    __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8007484:	6821      	ldr	r1, [r4, #0]
 8007486:	4b06      	ldr	r3, [pc, #24]	; (80074a0 <HAL_RTCEx_WakeUpTimerIRQHandler+0x2c>)
 8007488:	68ca      	ldr	r2, [r1, #12]
 800748a:	b2d2      	uxtb	r2, r2
 800748c:	4313      	orrs	r3, r2
 800748e:	60cb      	str	r3, [r1, #12]
  }

  /* Clear the EXTI's line Flag for RTC WakeUpTimer */
  __HAL_RTC_WAKEUPTIMER_EXTI_CLEAR_FLAG();
 8007490:	2280      	movs	r2, #128	; 0x80
 8007492:	4b04      	ldr	r3, [pc, #16]	; (80074a4 <HAL_RTCEx_WakeUpTimerIRQHandler+0x30>)
 8007494:	0352      	lsls	r2, r2, #13
 8007496:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8007498:	2301      	movs	r3, #1
 800749a:	3402      	adds	r4, #2
 800749c:	77e3      	strb	r3, [r4, #31]
}
 800749e:	bd10      	pop	{r4, pc}
 80074a0:	fffffb7f 	.word	0xfffffb7f
 80074a4:	40010400 	.word	0x40010400

080074a8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80074a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074aa:	0004      	movs	r4, r0
 80074ac:	000d      	movs	r5, r1
 80074ae:	0016      	movs	r6, r2
 80074b0:	001f      	movs	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074b2:	6822      	ldr	r2, [r4, #0]
 80074b4:	6893      	ldr	r3, [r2, #8]
 80074b6:	402b      	ands	r3, r5
 80074b8:	429d      	cmp	r5, r3
 80074ba:	d001      	beq.n	80074c0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 80074bc:	2000      	movs	r0, #0
 80074be:	e031      	b.n	8007524 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x7c>
    if (Timeout != HAL_MAX_DELAY)
 80074c0:	1c73      	adds	r3, r6, #1
 80074c2:	d0f7      	beq.n	80074b4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80074c4:	f7fe fb38 	bl	8005b38 <HAL_GetTick>
 80074c8:	1bc0      	subs	r0, r0, r7
 80074ca:	4286      	cmp	r6, r0
 80074cc:	d8f1      	bhi.n	80074b2 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80074ce:	21e0      	movs	r1, #224	; 0xe0
 80074d0:	6823      	ldr	r3, [r4, #0]
 80074d2:	685a      	ldr	r2, [r3, #4]
 80074d4:	438a      	bics	r2, r1
 80074d6:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074d8:	2282      	movs	r2, #130	; 0x82
 80074da:	6861      	ldr	r1, [r4, #4]
 80074dc:	0052      	lsls	r2, r2, #1
 80074de:	4291      	cmp	r1, r2
 80074e0:	d10c      	bne.n	80074fc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x54>
 80074e2:	2180      	movs	r1, #128	; 0x80
 80074e4:	68a2      	ldr	r2, [r4, #8]
 80074e6:	0209      	lsls	r1, r1, #8
 80074e8:	428a      	cmp	r2, r1
 80074ea:	d003      	beq.n	80074f4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x4c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074ec:	2180      	movs	r1, #128	; 0x80
 80074ee:	00c9      	lsls	r1, r1, #3
 80074f0:	428a      	cmp	r2, r1
 80074f2:	d103      	bne.n	80074fc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x54>
          __HAL_SPI_DISABLE(hspi);
 80074f4:	2140      	movs	r1, #64	; 0x40
 80074f6:	681a      	ldr	r2, [r3, #0]
 80074f8:	438a      	bics	r2, r1
 80074fa:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074fc:	2180      	movs	r1, #128	; 0x80
 80074fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8007500:	0189      	lsls	r1, r1, #6
 8007502:	428a      	cmp	r2, r1
 8007504:	d106      	bne.n	8007514 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          SPI_RESET_CRC(hspi);
 8007506:	6819      	ldr	r1, [r3, #0]
 8007508:	4807      	ldr	r0, [pc, #28]	; (8007528 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x80>)
 800750a:	4001      	ands	r1, r0
 800750c:	6019      	str	r1, [r3, #0]
 800750e:	6819      	ldr	r1, [r3, #0]
 8007510:	430a      	orrs	r2, r1
 8007512:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8007514:	0023      	movs	r3, r4
 8007516:	2201      	movs	r2, #1
 8007518:	3351      	adds	r3, #81	; 0x51
 800751a:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 800751c:	2300      	movs	r3, #0
 800751e:	2003      	movs	r0, #3
 8007520:	3450      	adds	r4, #80	; 0x50
 8007522:	7023      	strb	r3, [r4, #0]
}
 8007524:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007526:	46c0      	nop			; (mov r8, r8)
 8007528:	ffffdfff 	.word	0xffffdfff

0800752c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800752c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800752e:	0013      	movs	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007530:	2282      	movs	r2, #130	; 0x82
{
 8007532:	0004      	movs	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007534:	6840      	ldr	r0, [r0, #4]
 8007536:	0052      	lsls	r2, r2, #1
 8007538:	4290      	cmp	r0, r2
 800753a:	d11e      	bne.n	800757a <SPI_EndRxTransaction+0x4e>
 800753c:	2080      	movs	r0, #128	; 0x80
 800753e:	2580      	movs	r5, #128	; 0x80
 8007540:	68a2      	ldr	r2, [r4, #8]
 8007542:	0200      	lsls	r0, r0, #8
 8007544:	00ed      	lsls	r5, r5, #3
 8007546:	4282      	cmp	r2, r0
 8007548:	d001      	beq.n	800754e <SPI_EndRxTransaction+0x22>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800754a:	42aa      	cmp	r2, r5
 800754c:	d106      	bne.n	800755c <SPI_EndRxTransaction+0x30>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800754e:	2740      	movs	r7, #64	; 0x40
 8007550:	6826      	ldr	r6, [r4, #0]
 8007552:	6830      	ldr	r0, [r6, #0]
 8007554:	43b8      	bics	r0, r7
 8007556:	6030      	str	r0, [r6, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007558:	42aa      	cmp	r2, r5
 800755a:	d00e      	beq.n	800757a <SPI_EndRxTransaction+0x4e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800755c:	000a      	movs	r2, r1
 800755e:	2180      	movs	r1, #128	; 0x80
 8007560:	0020      	movs	r0, r4
 8007562:	f7ff ffa1 	bl	80074a8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8007566:	2800      	cmp	r0, #0
 8007568:	d101      	bne.n	800756e <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 800756a:	2000      	movs	r0, #0
}
 800756c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800756e:	2320      	movs	r3, #32
 8007570:	6d62      	ldr	r2, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8007572:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007574:	4313      	orrs	r3, r2
 8007576:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8007578:	e7f8      	b.n	800756c <SPI_EndRxTransaction+0x40>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800757a:	000a      	movs	r2, r1
 800757c:	2101      	movs	r1, #1
 800757e:	e7ef      	b.n	8007560 <SPI_EndRxTransaction+0x34>

08007580 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007580:	0013      	movs	r3, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007582:	2282      	movs	r2, #130	; 0x82
{
 8007584:	b510      	push	{r4, lr}
 8007586:	0004      	movs	r4, r0
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007588:	6840      	ldr	r0, [r0, #4]
 800758a:	0052      	lsls	r2, r2, #1
 800758c:	4290      	cmp	r0, r2
 800758e:	d108      	bne.n	80075a2 <SPI_EndRxTxTransaction+0x22>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007590:	000a      	movs	r2, r1
 8007592:	2180      	movs	r1, #128	; 0x80
 8007594:	0020      	movs	r0, r4
 8007596:	f7ff ff87 	bl	80074a8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 800759a:	2800      	cmp	r0, #0
 800759c:	d109      	bne.n	80075b2 <SPI_EndRxTxTransaction+0x32>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800759e:	2000      	movs	r0, #0
}
 80075a0:	bd10      	pop	{r4, pc}
    if (hspi->State == HAL_SPI_STATE_BUSY_TX_RX)
 80075a2:	0022      	movs	r2, r4
 80075a4:	3251      	adds	r2, #81	; 0x51
 80075a6:	7812      	ldrb	r2, [r2, #0]
 80075a8:	2a05      	cmp	r2, #5
 80075aa:	d1f8      	bne.n	800759e <SPI_EndRxTxTransaction+0x1e>
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80075ac:	000a      	movs	r2, r1
 80075ae:	2101      	movs	r1, #1
 80075b0:	e7f0      	b.n	8007594 <SPI_EndRxTxTransaction+0x14>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075b2:	2320      	movs	r3, #32
 80075b4:	6d62      	ldr	r2, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80075b6:	2003      	movs	r0, #3
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80075b8:	4313      	orrs	r3, r2
 80075ba:	6563      	str	r3, [r4, #84]	; 0x54
        return HAL_TIMEOUT;
 80075bc:	e7f0      	b.n	80075a0 <SPI_EndRxTxTransaction+0x20>
	...

080075c0 <HAL_SPI_Init>:
{
 80075c0:	b570      	push	{r4, r5, r6, lr}
 80075c2:	0004      	movs	r4, r0
    return HAL_ERROR;
 80075c4:	2001      	movs	r0, #1
  if (hspi == NULL)
 80075c6:	2c00      	cmp	r4, #0
 80075c8:	d037      	beq.n	800763a <HAL_SPI_Init+0x7a>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075ca:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 80075cc:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80075ce:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 80075d0:	3551      	adds	r5, #81	; 0x51
 80075d2:	782b      	ldrb	r3, [r5, #0]
 80075d4:	b2da      	uxtb	r2, r3
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d105      	bne.n	80075e6 <HAL_SPI_Init+0x26>
    hspi->Lock = HAL_UNLOCKED;
 80075da:	0023      	movs	r3, r4
 80075dc:	3350      	adds	r3, #80	; 0x50
    HAL_SPI_MspInit(hspi);
 80075de:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80075e0:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 80075e2:	f7fd fc59 	bl	8004e98 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80075e6:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80075e8:	2240      	movs	r2, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 80075ea:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80075ec:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80075ee:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 80075f0:	680b      	ldr	r3, [r1, #0]
 80075f2:	4393      	bics	r3, r2
 80075f4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80075f6:	6863      	ldr	r3, [r4, #4]
 80075f8:	69a2      	ldr	r2, [r4, #24]
 80075fa:	4303      	orrs	r3, r0
 80075fc:	68e0      	ldr	r0, [r4, #12]
 80075fe:	4303      	orrs	r3, r0
 8007600:	6920      	ldr	r0, [r4, #16]
 8007602:	4303      	orrs	r3, r0
 8007604:	6960      	ldr	r0, [r4, #20]
 8007606:	4303      	orrs	r3, r0
 8007608:	69e0      	ldr	r0, [r4, #28]
 800760a:	4303      	orrs	r3, r0
 800760c:	6a20      	ldr	r0, [r4, #32]
 800760e:	4303      	orrs	r3, r0
 8007610:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8007612:	4303      	orrs	r3, r0
 8007614:	2080      	movs	r0, #128	; 0x80
 8007616:	0080      	lsls	r0, r0, #2
 8007618:	4010      	ands	r0, r2
 800761a:	4303      	orrs	r3, r0
 800761c:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800761e:	2304      	movs	r3, #4
 8007620:	0c12      	lsrs	r2, r2, #16
 8007622:	401a      	ands	r2, r3
 8007624:	6a63      	ldr	r3, [r4, #36]	; 0x24
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007626:	2000      	movs	r0, #0
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007628:	431a      	orrs	r2, r3
 800762a:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800762c:	69cb      	ldr	r3, [r1, #28]
 800762e:	4a03      	ldr	r2, [pc, #12]	; (800763c <HAL_SPI_Init+0x7c>)
 8007630:	4013      	ands	r3, r2
 8007632:	61cb      	str	r3, [r1, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8007634:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007636:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007638:	702b      	strb	r3, [r5, #0]
}
 800763a:	bd70      	pop	{r4, r5, r6, pc}
 800763c:	fffff7ff 	.word	0xfffff7ff

08007640 <HAL_SPI_TransmitReceive_DMA>:
{
 8007640:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  __HAL_LOCK(hspi);
 8007642:	0006      	movs	r6, r0
 8007644:	3650      	adds	r6, #80	; 0x50
 8007646:	7835      	ldrb	r5, [r6, #0]
{
 8007648:	0004      	movs	r4, r0
  __HAL_LOCK(hspi);
 800764a:	2002      	movs	r0, #2
 800764c:	2d01      	cmp	r5, #1
 800764e:	d048      	beq.n	80076e2 <HAL_SPI_TransmitReceive_DMA+0xa2>
  tmp_state           = hspi->State;
 8007650:	0025      	movs	r5, r4
  __HAL_LOCK(hspi);
 8007652:	3801      	subs	r0, #1
 8007654:	7030      	strb	r0, [r6, #0]
  tmp_state           = hspi->State;
 8007656:	3551      	adds	r5, #81	; 0x51
 8007658:	7828      	ldrb	r0, [r5, #0]
 800765a:	b2c7      	uxtb	r7, r0
 800765c:	9701      	str	r7, [sp, #4]
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800765e:	2801      	cmp	r0, #1
 8007660:	d00d      	beq.n	800767e <HAL_SPI_TransmitReceive_DMA+0x3e>
 8007662:	2082      	movs	r0, #130	; 0x82
 8007664:	0040      	lsls	r0, r0, #1
 8007666:	4684      	mov	ip, r0
 8007668:	6867      	ldr	r7, [r4, #4]
    errorcode = HAL_BUSY;
 800766a:	3803      	subs	r0, #3
 800766c:	38ff      	subs	r0, #255	; 0xff
  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800766e:	4567      	cmp	r7, ip
 8007670:	d135      	bne.n	80076de <HAL_SPI_TransmitReceive_DMA+0x9e>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007672:	68a7      	ldr	r7, [r4, #8]
 8007674:	2f00      	cmp	r7, #0
 8007676:	d132      	bne.n	80076de <HAL_SPI_TransmitReceive_DMA+0x9e>
 8007678:	9f01      	ldr	r7, [sp, #4]
 800767a:	2f04      	cmp	r7, #4
 800767c:	d12f      	bne.n	80076de <HAL_SPI_TransmitReceive_DMA+0x9e>
    errorcode = HAL_ERROR;
 800767e:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007680:	2900      	cmp	r1, #0
 8007682:	d02c      	beq.n	80076de <HAL_SPI_TransmitReceive_DMA+0x9e>
 8007684:	2a00      	cmp	r2, #0
 8007686:	d02a      	beq.n	80076de <HAL_SPI_TransmitReceive_DMA+0x9e>
 8007688:	2b00      	cmp	r3, #0
 800768a:	d028      	beq.n	80076de <HAL_SPI_TransmitReceive_DMA+0x9e>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800768c:	7828      	ldrb	r0, [r5, #0]
 800768e:	2804      	cmp	r0, #4
 8007690:	d001      	beq.n	8007696 <HAL_SPI_TransmitReceive_DMA+0x56>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007692:	2005      	movs	r0, #5
 8007694:	7028      	strb	r0, [r5, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007696:	2000      	movs	r0, #0
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8007698:	6321      	str	r1, [r4, #48]	; 0x30
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800769a:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 800769c:	6420      	str	r0, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 800769e:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->TxISR       = NULL;
 80076a0:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->TxXferSize  = Size;
 80076a2:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80076a4:	63a2      	str	r2, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80076a6:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80076a8:	87e3      	strh	r3, [r4, #62]	; 0x3e
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 80076aa:	782b      	ldrb	r3, [r5, #0]
 80076ac:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80076ae:	2b04      	cmp	r3, #4
 80076b0:	d118      	bne.n	80076e4 <HAL_SPI_TransmitReceive_DMA+0xa4>
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 80076b2:	4b23      	ldr	r3, [pc, #140]	; (8007740 <HAL_SPI_TransmitReceive_DMA+0x100>)
 80076b4:	6303      	str	r3, [r0, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 80076b6:	4b23      	ldr	r3, [pc, #140]	; (8007744 <HAL_SPI_TransmitReceive_DMA+0x104>)
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80076b8:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80076ba:	4b23      	ldr	r3, [pc, #140]	; (8007748 <HAL_SPI_TransmitReceive_DMA+0x108>)
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80076bc:	6821      	ldr	r1, [r4, #0]
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80076be:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmarx->XferAbortCallback = NULL;
 80076c0:	2300      	movs	r3, #0
 80076c2:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr, hspi->RxXferCount))
 80076c4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80076c6:	310c      	adds	r1, #12
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	f7fe fdc3 	bl	8006254 <HAL_DMA_Start_IT>
 80076ce:	1e03      	subs	r3, r0, #0
 80076d0:	d00c      	beq.n	80076ec <HAL_SPI_TransmitReceive_DMA+0xac>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80076d2:	2310      	movs	r3, #16
    hspi->State = HAL_SPI_STATE_READY;
 80076d4:	2001      	movs	r0, #1
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80076d6:	6d62      	ldr	r2, [r4, #84]	; 0x54
 80076d8:	4313      	orrs	r3, r2
 80076da:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 80076dc:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 80076de:	2300      	movs	r3, #0
 80076e0:	7033      	strb	r3, [r6, #0]
}
 80076e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 80076e4:	4b19      	ldr	r3, [pc, #100]	; (800774c <HAL_SPI_TransmitReceive_DMA+0x10c>)
 80076e6:	6303      	str	r3, [r0, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 80076e8:	4b19      	ldr	r3, [pc, #100]	; (8007750 <HAL_SPI_TransmitReceive_DMA+0x110>)
 80076ea:	e7e5      	b.n	80076b8 <HAL_SPI_TransmitReceive_DMA+0x78>
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80076ec:	2701      	movs	r7, #1
 80076ee:	6822      	ldr	r2, [r4, #0]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80076f0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80076f2:	6851      	ldr	r1, [r2, #4]
 80076f4:	4339      	orrs	r1, r7
 80076f6:	6051      	str	r1, [r2, #4]
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 80076f8:	6303      	str	r3, [r0, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 80076fa:	62c3      	str	r3, [r0, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 80076fc:	6343      	str	r3, [r0, #52]	; 0x34
  hspi->hdmatx->XferAbortCallback    = NULL;
 80076fe:	6383      	str	r3, [r0, #56]	; 0x38
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR, hspi->TxXferCount))
 8007700:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8007702:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8007704:	b29b      	uxth	r3, r3
 8007706:	320c      	adds	r2, #12
 8007708:	f7fe fda4 	bl	8006254 <HAL_DMA_Start_IT>
 800770c:	2800      	cmp	r0, #0
 800770e:	d006      	beq.n	800771e <HAL_SPI_TransmitReceive_DMA+0xde>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007710:	2310      	movs	r3, #16
 8007712:	6d62      	ldr	r2, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8007714:	0038      	movs	r0, r7
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8007716:	4313      	orrs	r3, r2
 8007718:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->State = HAL_SPI_STATE_READY;
 800771a:	702f      	strb	r7, [r5, #0]
    goto error;
 800771c:	e7df      	b.n	80076de <HAL_SPI_TransmitReceive_DMA+0x9e>
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800771e:	2240      	movs	r2, #64	; 0x40
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	6819      	ldr	r1, [r3, #0]
 8007724:	4211      	tst	r1, r2
 8007726:	d102      	bne.n	800772e <HAL_SPI_TransmitReceive_DMA+0xee>
    __HAL_SPI_ENABLE(hspi);
 8007728:	6819      	ldr	r1, [r3, #0]
 800772a:	430a      	orrs	r2, r1
 800772c:	601a      	str	r2, [r3, #0]
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800772e:	2220      	movs	r2, #32
 8007730:	6859      	ldr	r1, [r3, #4]
 8007732:	430a      	orrs	r2, r1
 8007734:	605a      	str	r2, [r3, #4]
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8007736:	2202      	movs	r2, #2
 8007738:	6859      	ldr	r1, [r3, #4]
 800773a:	430a      	orrs	r2, r1
 800773c:	605a      	str	r2, [r3, #4]
 800773e:	e7ce      	b.n	80076de <HAL_SPI_TransmitReceive_DMA+0x9e>
 8007740:	08007759 	.word	0x08007759
 8007744:	08007795 	.word	0x08007795
 8007748:	08007771 	.word	0x08007771
 800774c:	08007765 	.word	0x08007765
 8007750:	080077eb 	.word	0x080077eb

08007754 <HAL_SPI_RxCpltCallback>:
 8007754:	4770      	bx	lr

08007756 <HAL_SPI_RxHalfCpltCallback>:
 8007756:	4770      	bx	lr

08007758 <SPI_DMAHalfReceiveCplt>:
{
 8007758:	b510      	push	{r4, lr}
  HAL_SPI_RxHalfCpltCallback(hspi);
 800775a:	6a80      	ldr	r0, [r0, #40]	; 0x28
 800775c:	f7ff fffb 	bl	8007756 <HAL_SPI_RxHalfCpltCallback>
}
 8007760:	bd10      	pop	{r4, pc}

08007762 <HAL_SPI_TxRxHalfCpltCallback>:
 8007762:	4770      	bx	lr

08007764 <SPI_DMAHalfTransmitReceiveCplt>:
{
 8007764:	b510      	push	{r4, lr}
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8007766:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8007768:	f7ff fffb 	bl	8007762 <HAL_SPI_TxRxHalfCpltCallback>
}
 800776c:	bd10      	pop	{r4, pc}

0800776e <HAL_SPI_ErrorCallback>:
 800776e:	4770      	bx	lr

08007770 <SPI_DMAError>:
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007770:	2103      	movs	r1, #3
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007772:	6a80      	ldr	r0, [r0, #40]	; 0x28
{
 8007774:	b510      	push	{r4, lr}
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8007776:	6802      	ldr	r2, [r0, #0]
 8007778:	6853      	ldr	r3, [r2, #4]
 800777a:	438b      	bics	r3, r1
 800777c:	6053      	str	r3, [r2, #4]
  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800777e:	2310      	movs	r3, #16
 8007780:	6d42      	ldr	r2, [r0, #84]	; 0x54
 8007782:	4313      	orrs	r3, r2
 8007784:	6543      	str	r3, [r0, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8007786:	0003      	movs	r3, r0
 8007788:	2201      	movs	r2, #1
 800778a:	3351      	adds	r3, #81	; 0x51
 800778c:	701a      	strb	r2, [r3, #0]
  HAL_SPI_ErrorCallback(hspi);
 800778e:	f7ff ffee 	bl	800776e <HAL_SPI_ErrorCallback>
}
 8007792:	bd10      	pop	{r4, pc}

08007794 <SPI_DMAReceiveCplt>:
{
 8007794:	b570      	push	{r4, r5, r6, lr}
 8007796:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007798:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 800779a:	f7fe f9cd 	bl	8005b38 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 800779e:	682b      	ldr	r3, [r5, #0]
 80077a0:	2520      	movs	r5, #32
 80077a2:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 80077a4:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80077a6:	422b      	tst	r3, r5
 80077a8:	d11b      	bne.n	80077e2 <SPI_DMAReceiveCplt+0x4e>
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80077aa:	2003      	movs	r0, #3
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80077ac:	6823      	ldr	r3, [r4, #0]
 80077ae:	6859      	ldr	r1, [r3, #4]
 80077b0:	43a9      	bics	r1, r5
 80077b2:	6059      	str	r1, [r3, #4]
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 80077b4:	6859      	ldr	r1, [r3, #4]
 80077b6:	4381      	bics	r1, r0
 80077b8:	6059      	str	r1, [r3, #4]
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80077ba:	0020      	movs	r0, r4
 80077bc:	2164      	movs	r1, #100	; 0x64
 80077be:	f7ff feb5 	bl	800752c <SPI_EndRxTransaction>
 80077c2:	2800      	cmp	r0, #0
 80077c4:	d000      	beq.n	80077c8 <SPI_DMAReceiveCplt+0x34>
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077c6:	6565      	str	r5, [r4, #84]	; 0x54
    hspi->RxXferCount = 0U;
 80077c8:	2300      	movs	r3, #0
 80077ca:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 80077cc:	0023      	movs	r3, r4
 80077ce:	2201      	movs	r2, #1
 80077d0:	3351      	adds	r3, #81	; 0x51
 80077d2:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077d4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d003      	beq.n	80077e2 <SPI_DMAReceiveCplt+0x4e>
      HAL_SPI_ErrorCallback(hspi);
 80077da:	0020      	movs	r0, r4
 80077dc:	f7ff ffc7 	bl	800776e <HAL_SPI_ErrorCallback>
}
 80077e0:	bd70      	pop	{r4, r5, r6, pc}
  HAL_SPI_RxCpltCallback(hspi);
 80077e2:	0020      	movs	r0, r4
 80077e4:	f7ff ffb6 	bl	8007754 <HAL_SPI_RxCpltCallback>
 80077e8:	e7fa      	b.n	80077e0 <SPI_DMAReceiveCplt+0x4c>

080077ea <SPI_DMATransmitReceiveCplt>:
{
 80077ea:	b570      	push	{r4, r5, r6, lr}
 80077ec:	0005      	movs	r5, r0
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80077ee:	6a84      	ldr	r4, [r0, #40]	; 0x28
  tickstart = HAL_GetTick();
 80077f0:	f7fe f9a2 	bl	8005b38 <HAL_GetTick>
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80077f4:	682b      	ldr	r3, [r5, #0]
 80077f6:	2520      	movs	r5, #32
 80077f8:	681b      	ldr	r3, [r3, #0]
  tickstart = HAL_GetTick();
 80077fa:	0002      	movs	r2, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 80077fc:	422b      	tst	r3, r5
 80077fe:	d11f      	bne.n	8007840 <SPI_DMATransmitReceiveCplt+0x56>
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007800:	6821      	ldr	r1, [r4, #0]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8007802:	0020      	movs	r0, r4
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8007804:	684b      	ldr	r3, [r1, #4]
 8007806:	43ab      	bics	r3, r5
 8007808:	604b      	str	r3, [r1, #4]
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800780a:	2164      	movs	r1, #100	; 0x64
 800780c:	f7ff feb8 	bl	8007580 <SPI_EndRxTxTransaction>
 8007810:	2800      	cmp	r0, #0
 8007812:	d002      	beq.n	800781a <SPI_DMATransmitReceiveCplt+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007814:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007816:	431d      	orrs	r5, r3
 8007818:	6565      	str	r5, [r4, #84]	; 0x54
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800781a:	2103      	movs	r1, #3
 800781c:	6822      	ldr	r2, [r4, #0]
 800781e:	6853      	ldr	r3, [r2, #4]
 8007820:	438b      	bics	r3, r1
 8007822:	6053      	str	r3, [r2, #4]
    hspi->TxXferCount = 0U;
 8007824:	2300      	movs	r3, #0
 8007826:	86e3      	strh	r3, [r4, #54]	; 0x36
    hspi->RxXferCount = 0U;
 8007828:	87e3      	strh	r3, [r4, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800782a:	0023      	movs	r3, r4
 800782c:	2201      	movs	r2, #1
 800782e:	3351      	adds	r3, #81	; 0x51
 8007830:	701a      	strb	r2, [r3, #0]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007832:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8007834:	2b00      	cmp	r3, #0
 8007836:	d003      	beq.n	8007840 <SPI_DMATransmitReceiveCplt+0x56>
      HAL_SPI_ErrorCallback(hspi);
 8007838:	0020      	movs	r0, r4
 800783a:	f7ff ff98 	bl	800776e <HAL_SPI_ErrorCallback>
}
 800783e:	bd70      	pop	{r4, r5, r6, pc}
  HAL_SPI_TxRxCpltCallback(hspi);
 8007840:	0020      	movs	r0, r4
 8007842:	f7fd fcb3 	bl	80051ac <HAL_SPI_TxRxCpltCallback>
 8007846:	e7fa      	b.n	800783e <SPI_DMATransmitReceiveCplt+0x54>

08007848 <HAL_SPI_GetState>:
  return hspi->State;
 8007848:	3051      	adds	r0, #81	; 0x51
 800784a:	7800      	ldrb	r0, [r0, #0]
 800784c:	b2c0      	uxtb	r0, r0
}
 800784e:	4770      	bx	lr

08007850 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007850:	2280      	movs	r2, #128	; 0x80
{
 8007852:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 8007854:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007856:	05d2      	lsls	r2, r2, #23
 8007858:	4290      	cmp	r0, r2
 800785a:	d005      	beq.n	8007868 <TIM_Base_SetConfig+0x18>
 800785c:	4c10      	ldr	r4, [pc, #64]	; (80078a0 <TIM_Base_SetConfig+0x50>)
 800785e:	42a0      	cmp	r0, r4
 8007860:	d002      	beq.n	8007868 <TIM_Base_SetConfig+0x18>
 8007862:	4c10      	ldr	r4, [pc, #64]	; (80078a4 <TIM_Base_SetConfig+0x54>)
 8007864:	42a0      	cmp	r0, r4
 8007866:	d10f      	bne.n	8007888 <TIM_Base_SetConfig+0x38>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007868:	2470      	movs	r4, #112	; 0x70
 800786a:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 800786c:	684c      	ldr	r4, [r1, #4]
 800786e:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007870:	4290      	cmp	r0, r2
 8007872:	d005      	beq.n	8007880 <TIM_Base_SetConfig+0x30>
 8007874:	4a0a      	ldr	r2, [pc, #40]	; (80078a0 <TIM_Base_SetConfig+0x50>)
 8007876:	4290      	cmp	r0, r2
 8007878:	d002      	beq.n	8007880 <TIM_Base_SetConfig+0x30>
 800787a:	4a0a      	ldr	r2, [pc, #40]	; (80078a4 <TIM_Base_SetConfig+0x54>)
 800787c:	4290      	cmp	r0, r2
 800787e:	d103      	bne.n	8007888 <TIM_Base_SetConfig+0x38>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007880:	4a09      	ldr	r2, [pc, #36]	; (80078a8 <TIM_Base_SetConfig+0x58>)
 8007882:	4013      	ands	r3, r2
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007884:	68ca      	ldr	r2, [r1, #12]
 8007886:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007888:	2280      	movs	r2, #128	; 0x80
 800788a:	4393      	bics	r3, r2
 800788c:	690a      	ldr	r2, [r1, #16]
 800788e:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8007890:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007892:	688b      	ldr	r3, [r1, #8]
 8007894:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007896:	680b      	ldr	r3, [r1, #0]
 8007898:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800789a:	2301      	movs	r3, #1
 800789c:	6143      	str	r3, [r0, #20]
}
 800789e:	bd10      	pop	{r4, pc}
 80078a0:	40010800 	.word	0x40010800
 80078a4:	40011400 	.word	0x40011400
 80078a8:	fffffcff 	.word	0xfffffcff

080078ac <HAL_TIM_Base_Init>:
{
 80078ac:	b570      	push	{r4, r5, r6, lr}
 80078ae:	0004      	movs	r4, r0
    return HAL_ERROR;
 80078b0:	2001      	movs	r0, #1
  if (htim == NULL)
 80078b2:	2c00      	cmp	r4, #0
 80078b4:	d014      	beq.n	80078e0 <HAL_TIM_Base_Init+0x34>
  if (htim->State == HAL_TIM_STATE_RESET)
 80078b6:	0025      	movs	r5, r4
 80078b8:	3539      	adds	r5, #57	; 0x39
 80078ba:	782b      	ldrb	r3, [r5, #0]
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d105      	bne.n	80078ce <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80078c2:	0023      	movs	r3, r4
 80078c4:	3338      	adds	r3, #56	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80078c6:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80078c8:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 80078ca:	f7fd fdeb 	bl	80054a4 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80078ce:	2302      	movs	r3, #2
 80078d0:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078d2:	6820      	ldr	r0, [r4, #0]
 80078d4:	1d21      	adds	r1, r4, #4
 80078d6:	f7ff ffbb 	bl	8007850 <TIM_Base_SetConfig>
  htim->State = HAL_TIM_STATE_READY;
 80078da:	2301      	movs	r3, #1
  return HAL_OK;
 80078dc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80078de:	702b      	strb	r3, [r5, #0]
}
 80078e0:	bd70      	pop	{r4, r5, r6, pc}

080078e2 <HAL_TIM_Base_Start>:
  htim->State = HAL_TIM_STATE_BUSY;
 80078e2:	0001      	movs	r1, r0
 80078e4:	2302      	movs	r3, #2
 80078e6:	3139      	adds	r1, #57	; 0x39
 80078e8:	700b      	strb	r3, [r1, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078ea:	6803      	ldr	r3, [r0, #0]
 80078ec:	2007      	movs	r0, #7
 80078ee:	689a      	ldr	r2, [r3, #8]
 80078f0:	4002      	ands	r2, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078f2:	2a06      	cmp	r2, #6
 80078f4:	d003      	beq.n	80078fe <HAL_TIM_Base_Start+0x1c>
    __HAL_TIM_ENABLE(htim);
 80078f6:	2201      	movs	r2, #1
 80078f8:	6818      	ldr	r0, [r3, #0]
 80078fa:	4302      	orrs	r2, r0
 80078fc:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 80078fe:	2301      	movs	r3, #1
}
 8007900:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007902:	700b      	strb	r3, [r1, #0]
}
 8007904:	4770      	bx	lr
	...

08007908 <HAL_TIM_Base_Stop>:
  htim->State = HAL_TIM_STATE_BUSY;
 8007908:	0001      	movs	r1, r0
 800790a:	2302      	movs	r3, #2
 800790c:	3139      	adds	r1, #57	; 0x39
 800790e:	700b      	strb	r3, [r1, #0]
  __HAL_TIM_DISABLE(htim);
 8007910:	6803      	ldr	r3, [r0, #0]
 8007912:	4a06      	ldr	r2, [pc, #24]	; (800792c <HAL_TIM_Base_Stop+0x24>)
 8007914:	6a18      	ldr	r0, [r3, #32]
 8007916:	4210      	tst	r0, r2
 8007918:	d103      	bne.n	8007922 <HAL_TIM_Base_Stop+0x1a>
 800791a:	2001      	movs	r0, #1
 800791c:	681a      	ldr	r2, [r3, #0]
 800791e:	4382      	bics	r2, r0
 8007920:	601a      	str	r2, [r3, #0]
  htim->State = HAL_TIM_STATE_READY;
 8007922:	2301      	movs	r3, #1
}
 8007924:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8007926:	700b      	strb	r3, [r1, #0]
}
 8007928:	4770      	bx	lr
 800792a:	46c0      	nop			; (mov r8, r8)
 800792c:	00001111 	.word	0x00001111

08007930 <HAL_TIM_Base_Start_IT>:
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007930:	2201      	movs	r2, #1
 8007932:	6803      	ldr	r3, [r0, #0]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007934:	2007      	movs	r0, #7
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007936:	68d9      	ldr	r1, [r3, #12]
 8007938:	4311      	orrs	r1, r2
 800793a:	60d9      	str	r1, [r3, #12]
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800793c:	6899      	ldr	r1, [r3, #8]
 800793e:	4001      	ands	r1, r0
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007940:	2906      	cmp	r1, #6
 8007942:	d002      	beq.n	800794a <HAL_TIM_Base_Start_IT+0x1a>
    __HAL_TIM_ENABLE(htim);
 8007944:	6819      	ldr	r1, [r3, #0]
 8007946:	430a      	orrs	r2, r1
 8007948:	601a      	str	r2, [r3, #0]
}
 800794a:	2000      	movs	r0, #0
 800794c:	4770      	bx	lr
	...

08007950 <HAL_TIM_Base_Stop_IT>:
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007950:	2101      	movs	r1, #1
 8007952:	6803      	ldr	r3, [r0, #0]
 8007954:	68da      	ldr	r2, [r3, #12]
 8007956:	438a      	bics	r2, r1
 8007958:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE(htim);
 800795a:	6a18      	ldr	r0, [r3, #32]
 800795c:	4a03      	ldr	r2, [pc, #12]	; (800796c <HAL_TIM_Base_Stop_IT+0x1c>)
 800795e:	4210      	tst	r0, r2
 8007960:	d102      	bne.n	8007968 <HAL_TIM_Base_Stop_IT+0x18>
 8007962:	681a      	ldr	r2, [r3, #0]
 8007964:	438a      	bics	r2, r1
 8007966:	601a      	str	r2, [r3, #0]
}
 8007968:	2000      	movs	r0, #0
 800796a:	4770      	bx	lr
 800796c:	00001111 	.word	0x00001111

08007970 <HAL_TIM_ConfigClockSource>:
{
 8007970:	b5f0      	push	{r4, r5, r6, r7, lr}
  __HAL_LOCK(htim);
 8007972:	0004      	movs	r4, r0
 8007974:	2202      	movs	r2, #2
 8007976:	3438      	adds	r4, #56	; 0x38
 8007978:	7825      	ldrb	r5, [r4, #0]
{
 800797a:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 800797c:	0010      	movs	r0, r2
 800797e:	2d01      	cmp	r5, #1
 8007980:	d024      	beq.n	80079cc <HAL_TIM_ConfigClockSource+0x5c>
  htim->State = HAL_TIM_STATE_BUSY;
 8007982:	001d      	movs	r5, r3
  __HAL_LOCK(htim);
 8007984:	2601      	movs	r6, #1
  htim->State = HAL_TIM_STATE_BUSY;
 8007986:	3539      	adds	r5, #57	; 0x39
  __HAL_LOCK(htim);
 8007988:	7026      	strb	r6, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800798a:	702a      	strb	r2, [r5, #0]
  tmpsmcr = htim->Instance->SMCR;
 800798c:	681b      	ldr	r3, [r3, #0]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800798e:	4845      	ldr	r0, [pc, #276]	; (8007aa4 <HAL_TIM_ConfigClockSource+0x134>)
  tmpsmcr = htim->Instance->SMCR;
 8007990:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007992:	4002      	ands	r2, r0
  htim->Instance->SMCR = tmpsmcr;
 8007994:	609a      	str	r2, [r3, #8]
  switch (sClockSourceConfig->ClockSource)
 8007996:	680a      	ldr	r2, [r1, #0]
 8007998:	2a60      	cmp	r2, #96	; 0x60
 800799a:	d055      	beq.n	8007a48 <HAL_TIM_ConfigClockSource+0xd8>
 800799c:	d82f      	bhi.n	80079fe <HAL_TIM_ConfigClockSource+0x8e>
 800799e:	2a40      	cmp	r2, #64	; 0x40
 80079a0:	d100      	bne.n	80079a4 <HAL_TIM_ConfigClockSource+0x34>
 80079a2:	e069      	b.n	8007a78 <HAL_TIM_ConfigClockSource+0x108>
 80079a4:	d813      	bhi.n	80079ce <HAL_TIM_ConfigClockSource+0x5e>
 80079a6:	2a20      	cmp	r2, #32
 80079a8:	d004      	beq.n	80079b4 <HAL_TIM_ConfigClockSource+0x44>
 80079aa:	d809      	bhi.n	80079c0 <HAL_TIM_ConfigClockSource+0x50>
 80079ac:	2110      	movs	r1, #16
 80079ae:	0010      	movs	r0, r2
 80079b0:	4388      	bics	r0, r1
 80079b2:	d107      	bne.n	80079c4 <HAL_TIM_ConfigClockSource+0x54>
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80079b4:	2070      	movs	r0, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80079b6:	6899      	ldr	r1, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80079b8:	4381      	bics	r1, r0
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079ba:	430a      	orrs	r2, r1
 80079bc:	2107      	movs	r1, #7
 80079be:	e040      	b.n	8007a42 <HAL_TIM_ConfigClockSource+0xd2>
  switch (sClockSourceConfig->ClockSource)
 80079c0:	2a30      	cmp	r2, #48	; 0x30
 80079c2:	d0f7      	beq.n	80079b4 <HAL_TIM_ConfigClockSource+0x44>
  htim->State = HAL_TIM_STATE_READY;
 80079c4:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80079c6:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80079c8:	702b      	strb	r3, [r5, #0]
  __HAL_UNLOCK(htim);
 80079ca:	7020      	strb	r0, [r4, #0]
}
 80079cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
  switch (sClockSourceConfig->ClockSource)
 80079ce:	2a50      	cmp	r2, #80	; 0x50
 80079d0:	d1f8      	bne.n	80079c4 <HAL_TIM_ConfigClockSource+0x54>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80079d2:	6848      	ldr	r0, [r1, #4]
 80079d4:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 80079d6:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079d8:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079da:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80079dc:	43b7      	bics	r7, r6
 80079de:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079e0:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 80079e2:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80079e4:	43be      	bics	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80079e6:	4332      	orrs	r2, r6
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80079e8:	260a      	movs	r6, #10
 80079ea:	43b1      	bics	r1, r6
  tmpccer |= TIM_ICPolarity;
 80079ec:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 80079ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80079f0:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 80079f2:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 80079f4:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80079f6:	438a      	bics	r2, r1
 80079f8:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80079fa:	2257      	movs	r2, #87	; 0x57
 80079fc:	e021      	b.n	8007a42 <HAL_TIM_ConfigClockSource+0xd2>
  switch (sClockSourceConfig->ClockSource)
 80079fe:	2a70      	cmp	r2, #112	; 0x70
 8007a00:	d012      	beq.n	8007a28 <HAL_TIM_ConfigClockSource+0xb8>
 8007a02:	2080      	movs	r0, #128	; 0x80
 8007a04:	0180      	lsls	r0, r0, #6
 8007a06:	4282      	cmp	r2, r0
 8007a08:	d1dc      	bne.n	80079c4 <HAL_TIM_ConfigClockSource+0x54>
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007a0a:	689a      	ldr	r2, [r3, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a0c:	4826      	ldr	r0, [pc, #152]	; (8007aa8 <HAL_TIM_ConfigClockSource+0x138>)

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a0e:	684e      	ldr	r6, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a10:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a12:	688a      	ldr	r2, [r1, #8]
 8007a14:	68c9      	ldr	r1, [r1, #12]
 8007a16:	4332      	orrs	r2, r6
 8007a18:	0209      	lsls	r1, r1, #8
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	4302      	orrs	r2, r0

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007a1e:	609a      	str	r2, [r3, #8]
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a20:	2280      	movs	r2, #128	; 0x80
 8007a22:	6899      	ldr	r1, [r3, #8]
 8007a24:	01d2      	lsls	r2, r2, #7
 8007a26:	e00c      	b.n	8007a42 <HAL_TIM_ConfigClockSource+0xd2>
  tmpsmcr = TIMx->SMCR;
 8007a28:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a2a:	481f      	ldr	r0, [pc, #124]	; (8007aa8 <HAL_TIM_ConfigClockSource+0x138>)
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a2c:	684e      	ldr	r6, [r1, #4]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007a2e:	4010      	ands	r0, r2
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007a30:	688a      	ldr	r2, [r1, #8]
 8007a32:	68c9      	ldr	r1, [r1, #12]
 8007a34:	4332      	orrs	r2, r6
 8007a36:	0209      	lsls	r1, r1, #8
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	4302      	orrs	r2, r0
  TIMx->SMCR = tmpsmcr;
 8007a3c:	609a      	str	r2, [r3, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a3e:	2277      	movs	r2, #119	; 0x77
      tmpsmcr = htim->Instance->SMCR;
 8007a40:	6899      	ldr	r1, [r3, #8]
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a42:	430a      	orrs	r2, r1
  TIMx->SMCR = tmpsmcr;
 8007a44:	609a      	str	r2, [r3, #8]
}
 8007a46:	e7bd      	b.n	80079c4 <HAL_TIM_ConfigClockSource+0x54>
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a48:	2610      	movs	r6, #16
 8007a4a:	6a18      	ldr	r0, [r3, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a4c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a4e:	43b0      	bics	r0, r6
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a50:	68c9      	ldr	r1, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007a52:	6218      	str	r0, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007a54:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a56:	4f15      	ldr	r7, [pc, #84]	; (8007aac <HAL_TIM_ConfigClockSource+0x13c>)
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a58:	0309      	lsls	r1, r1, #12
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007a5a:	403e      	ands	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007a5c:	4331      	orrs	r1, r6
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a5e:	26a0      	movs	r6, #160	; 0xa0
  tmpccer = TIMx->CCER;
 8007a60:	6a18      	ldr	r0, [r3, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 8007a62:	6199      	str	r1, [r3, #24]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a64:	2170      	movs	r1, #112	; 0x70
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007a66:	43b0      	bics	r0, r6
  tmpccer |= (TIM_ICPolarity << 4U);
 8007a68:	0112      	lsls	r2, r2, #4
 8007a6a:	4302      	orrs	r2, r0
  TIMx->CCER = tmpccer;
 8007a6c:	621a      	str	r2, [r3, #32]
  tmpsmcr = TIMx->SMCR;
 8007a6e:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a70:	438a      	bics	r2, r1
 8007a72:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007a74:	2267      	movs	r2, #103	; 0x67
 8007a76:	e7e4      	b.n	8007a42 <HAL_TIM_ConfigClockSource+0xd2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a78:	6848      	ldr	r0, [r1, #4]
 8007a7a:	68ca      	ldr	r2, [r1, #12]
  tmpccer = TIMx->CCER;
 8007a7c:	6a19      	ldr	r1, [r3, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a7e:	6a1f      	ldr	r7, [r3, #32]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a80:	0112      	lsls	r2, r2, #4
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007a82:	43b7      	bics	r7, r6
 8007a84:	621f      	str	r7, [r3, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a86:	27f0      	movs	r7, #240	; 0xf0
  tmpccmr1 = TIMx->CCMR1;
 8007a88:	699e      	ldr	r6, [r3, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007a8a:	43be      	bics	r6, r7
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007a8c:	4332      	orrs	r2, r6
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007a8e:	260a      	movs	r6, #10
 8007a90:	43b1      	bics	r1, r6
  tmpccer |= TIM_ICPolarity;
 8007a92:	4301      	orrs	r1, r0
  TIMx->CCMR1 = tmpccmr1;
 8007a94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007a96:	6219      	str	r1, [r3, #32]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a98:	2170      	movs	r1, #112	; 0x70
  tmpsmcr = TIMx->SMCR;
 8007a9a:	689a      	ldr	r2, [r3, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 8007a9c:	438a      	bics	r2, r1
 8007a9e:	0011      	movs	r1, r2
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007aa0:	2247      	movs	r2, #71	; 0x47
 8007aa2:	e7ce      	b.n	8007a42 <HAL_TIM_ConfigClockSource+0xd2>
 8007aa4:	ffff0088 	.word	0xffff0088
 8007aa8:	ffff00ff 	.word	0xffff00ff
 8007aac:	ffff0fff 	.word	0xffff0fff

08007ab0 <HAL_TIM_PeriodElapsedCallback>:
 8007ab0:	4770      	bx	lr

08007ab2 <HAL_TIM_OC_DelayElapsedCallback>:
 8007ab2:	4770      	bx	lr

08007ab4 <HAL_TIM_IC_CaptureCallback>:
 8007ab4:	4770      	bx	lr

08007ab6 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007ab6:	4770      	bx	lr

08007ab8 <HAL_TIM_TriggerCallback>:
 8007ab8:	4770      	bx	lr

08007aba <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007aba:	2202      	movs	r2, #2
 8007abc:	6803      	ldr	r3, [r0, #0]
{
 8007abe:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ac0:	6919      	ldr	r1, [r3, #16]
{
 8007ac2:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ac4:	4211      	tst	r1, r2
 8007ac6:	d00d      	beq.n	8007ae4 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ac8:	68d9      	ldr	r1, [r3, #12]
 8007aca:	4211      	tst	r1, r2
 8007acc:	d00a      	beq.n	8007ae4 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007ace:	3a05      	subs	r2, #5
 8007ad0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007ad2:	3204      	adds	r2, #4
 8007ad4:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007ad6:	699b      	ldr	r3, [r3, #24]
 8007ad8:	079b      	lsls	r3, r3, #30
 8007ada:	d05e      	beq.n	8007b9a <HAL_TIM_IRQHandler+0xe0>
          HAL_TIM_IC_CaptureCallback(htim);
 8007adc:	f7ff ffea 	bl	8007ab4 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ae0:	2300      	movs	r3, #0
 8007ae2:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007ae4:	2204      	movs	r2, #4
 8007ae6:	6823      	ldr	r3, [r4, #0]
 8007ae8:	6919      	ldr	r1, [r3, #16]
 8007aea:	4211      	tst	r1, r2
 8007aec:	d010      	beq.n	8007b10 <HAL_TIM_IRQHandler+0x56>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007aee:	68d9      	ldr	r1, [r3, #12]
 8007af0:	4211      	tst	r1, r2
 8007af2:	d00d      	beq.n	8007b10 <HAL_TIM_IRQHandler+0x56>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007af4:	3a09      	subs	r2, #9
 8007af6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007af8:	3207      	adds	r2, #7
 8007afa:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007afc:	699a      	ldr	r2, [r3, #24]
 8007afe:	23c0      	movs	r3, #192	; 0xc0
 8007b00:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8007b02:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007b04:	421a      	tst	r2, r3
 8007b06:	d04e      	beq.n	8007ba6 <HAL_TIM_IRQHandler+0xec>
        HAL_TIM_IC_CaptureCallback(htim);
 8007b08:	f7ff ffd4 	bl	8007ab4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007b10:	2208      	movs	r2, #8
 8007b12:	6823      	ldr	r3, [r4, #0]
 8007b14:	6919      	ldr	r1, [r3, #16]
 8007b16:	4211      	tst	r1, r2
 8007b18:	d00e      	beq.n	8007b38 <HAL_TIM_IRQHandler+0x7e>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007b1a:	68d9      	ldr	r1, [r3, #12]
 8007b1c:	4211      	tst	r1, r2
 8007b1e:	d00b      	beq.n	8007b38 <HAL_TIM_IRQHandler+0x7e>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007b20:	3a11      	subs	r2, #17
 8007b22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007b24:	320d      	adds	r2, #13
 8007b26:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b28:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8007b2a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007b2c:	079b      	lsls	r3, r3, #30
 8007b2e:	d040      	beq.n	8007bb2 <HAL_TIM_IRQHandler+0xf8>
        HAL_TIM_IC_CaptureCallback(htim);
 8007b30:	f7ff ffc0 	bl	8007ab4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b34:	2300      	movs	r3, #0
 8007b36:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007b38:	2210      	movs	r2, #16
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	6919      	ldr	r1, [r3, #16]
 8007b3e:	4211      	tst	r1, r2
 8007b40:	d010      	beq.n	8007b64 <HAL_TIM_IRQHandler+0xaa>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b42:	68d9      	ldr	r1, [r3, #12]
 8007b44:	4211      	tst	r1, r2
 8007b46:	d00d      	beq.n	8007b64 <HAL_TIM_IRQHandler+0xaa>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b48:	3a21      	subs	r2, #33	; 0x21
 8007b4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b4c:	3219      	adds	r2, #25
 8007b4e:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b50:	69da      	ldr	r2, [r3, #28]
 8007b52:	23c0      	movs	r3, #192	; 0xc0
 8007b54:	009b      	lsls	r3, r3, #2
        HAL_TIM_IC_CaptureCallback(htim);
 8007b56:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b58:	421a      	tst	r2, r3
 8007b5a:	d030      	beq.n	8007bbe <HAL_TIM_IRQHandler+0x104>
        HAL_TIM_IC_CaptureCallback(htim);
 8007b5c:	f7ff ffaa 	bl	8007ab4 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b60:	2300      	movs	r3, #0
 8007b62:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b64:	2201      	movs	r2, #1
 8007b66:	6823      	ldr	r3, [r4, #0]
 8007b68:	6919      	ldr	r1, [r3, #16]
 8007b6a:	4211      	tst	r1, r2
 8007b6c:	d007      	beq.n	8007b7e <HAL_TIM_IRQHandler+0xc4>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b6e:	68d9      	ldr	r1, [r3, #12]
 8007b70:	4211      	tst	r1, r2
 8007b72:	d004      	beq.n	8007b7e <HAL_TIM_IRQHandler+0xc4>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b74:	3a03      	subs	r2, #3
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b76:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b78:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b7a:	f7ff ff99 	bl	8007ab0 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007b7e:	2240      	movs	r2, #64	; 0x40
 8007b80:	6823      	ldr	r3, [r4, #0]
 8007b82:	6919      	ldr	r1, [r3, #16]
 8007b84:	4211      	tst	r1, r2
 8007b86:	d007      	beq.n	8007b98 <HAL_TIM_IRQHandler+0xde>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007b88:	68d9      	ldr	r1, [r3, #12]
 8007b8a:	4211      	tst	r1, r2
 8007b8c:	d004      	beq.n	8007b98 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b8e:	3a81      	subs	r2, #129	; 0x81
      HAL_TIM_TriggerCallback(htim);
 8007b90:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007b92:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8007b94:	f7ff ff90 	bl	8007ab8 <HAL_TIM_TriggerCallback>
}
 8007b98:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b9a:	f7ff ff8a 	bl	8007ab2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b9e:	0020      	movs	r0, r4
 8007ba0:	f7ff ff89 	bl	8007ab6 <HAL_TIM_PWM_PulseFinishedCallback>
 8007ba4:	e79c      	b.n	8007ae0 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ba6:	f7ff ff84 	bl	8007ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007baa:	0020      	movs	r0, r4
 8007bac:	f7ff ff83 	bl	8007ab6 <HAL_TIM_PWM_PulseFinishedCallback>
 8007bb0:	e7ac      	b.n	8007b0c <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bb2:	f7ff ff7e 	bl	8007ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bb6:	0020      	movs	r0, r4
 8007bb8:	f7ff ff7d 	bl	8007ab6 <HAL_TIM_PWM_PulseFinishedCallback>
 8007bbc:	e7ba      	b.n	8007b34 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bbe:	f7ff ff78 	bl	8007ab2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bc2:	0020      	movs	r0, r4
 8007bc4:	f7ff ff77 	bl	8007ab6 <HAL_TIM_PWM_PulseFinishedCallback>
 8007bc8:	e7ca      	b.n	8007b60 <HAL_TIM_IRQHandler+0xa6>

08007bca <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007bca:	b570      	push	{r4, r5, r6, lr}
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007bcc:	0004      	movs	r4, r0
 8007bce:	2202      	movs	r2, #2
 8007bd0:	3438      	adds	r4, #56	; 0x38
 8007bd2:	7825      	ldrb	r5, [r4, #0]
{
 8007bd4:	0003      	movs	r3, r0
  __HAL_LOCK(htim);
 8007bd6:	0010      	movs	r0, r2
 8007bd8:	2d01      	cmp	r5, #1
 8007bda:	d013      	beq.n	8007c04 <HAL_TIMEx_MasterConfigSynchronization+0x3a>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bdc:	0018      	movs	r0, r3

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bde:	2670      	movs	r6, #112	; 0x70
  htim->State = HAL_TIM_STATE_BUSY;
 8007be0:	3039      	adds	r0, #57	; 0x39
 8007be2:	7002      	strb	r2, [r0, #0]
  tmpcr2 = htim->Instance->CR2;
 8007be4:	681d      	ldr	r5, [r3, #0]
 8007be6:	686a      	ldr	r2, [r5, #4]
  tmpsmcr = htim->Instance->SMCR;
 8007be8:	68ab      	ldr	r3, [r5, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8007bea:	43b2      	bics	r2, r6
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bec:	680e      	ldr	r6, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bee:	6849      	ldr	r1, [r1, #4]
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007bf0:	4332      	orrs	r2, r6
  tmpsmcr &= ~TIM_SMCR_MSM;
 8007bf2:	2680      	movs	r6, #128	; 0x80
 8007bf4:	43b3      	bics	r3, r6
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007bf6:	430b      	orrs	r3, r1

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007bf8:	606a      	str	r2, [r5, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8007bfa:	60ab      	str	r3, [r5, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	7003      	strb	r3, [r0, #0]

  __HAL_UNLOCK(htim);
 8007c00:	2000      	movs	r0, #0
 8007c02:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 8007c04:	bd70      	pop	{r4, r5, r6, pc}
	...

08007c08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c0a:	0005      	movs	r5, r0
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c0c:	692c      	ldr	r4, [r5, #16]
 8007c0e:	68aa      	ldr	r2, [r5, #8]
  if (UART_INSTANCE_LOWPOWER(huart))
 8007c10:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c12:	4322      	orrs	r2, r4
 8007c14:	696c      	ldr	r4, [r5, #20]
 8007c16:	69c1      	ldr	r1, [r0, #28]
 8007c18:	4322      	orrs	r2, r4
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c1a:	6818      	ldr	r0, [r3, #0]
 8007c1c:	4c89      	ldr	r4, [pc, #548]	; (8007e44 <UART_SetConfig+0x23c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007c1e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007c20:	4020      	ands	r0, r4
 8007c22:	4302      	orrs	r2, r0
 8007c24:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c26:	685a      	ldr	r2, [r3, #4]
 8007c28:	4887      	ldr	r0, [pc, #540]	; (8007e48 <UART_SetConfig+0x240>)
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c2a:	4c88      	ldr	r4, [pc, #544]	; (8007e4c <UART_SetConfig+0x244>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c2c:	4002      	ands	r2, r0
 8007c2e:	68e8      	ldr	r0, [r5, #12]
 8007c30:	4302      	orrs	r2, r0
 8007c32:	605a      	str	r2, [r3, #4]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007c34:	69a8      	ldr	r0, [r5, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007c36:	42a3      	cmp	r3, r4
 8007c38:	d001      	beq.n	8007c3e <UART_SetConfig+0x36>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007c3a:	6a2a      	ldr	r2, [r5, #32]
 8007c3c:	4310      	orrs	r0, r2
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007c3e:	689a      	ldr	r2, [r3, #8]
 8007c40:	4e83      	ldr	r6, [pc, #524]	; (8007e50 <UART_SetConfig+0x248>)
 8007c42:	4032      	ands	r2, r6
 8007c44:	4302      	orrs	r2, r0
 8007c46:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c48:	4a82      	ldr	r2, [pc, #520]	; (8007e54 <UART_SetConfig+0x24c>)
 8007c4a:	4293      	cmp	r3, r2
 8007c4c:	d113      	bne.n	8007c76 <UART_SetConfig+0x6e>
 8007c4e:	2203      	movs	r2, #3
 8007c50:	4b81      	ldr	r3, [pc, #516]	; (8007e58 <UART_SetConfig+0x250>)
 8007c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c54:	4013      	ands	r3, r2
 8007c56:	3b01      	subs	r3, #1
 8007c58:	4a80      	ldr	r2, [pc, #512]	; (8007e5c <UART_SetConfig+0x254>)
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d913      	bls.n	8007c86 <UART_SetConfig+0x7e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c5e:	2380      	movs	r3, #128	; 0x80
 8007c60:	021b      	lsls	r3, r3, #8
 8007c62:	4299      	cmp	r1, r3
 8007c64:	d100      	bne.n	8007c68 <UART_SetConfig+0x60>
 8007c66:	e085      	b.n	8007d74 <UART_SetConfig+0x16c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007c68:	f7ff f8d2 	bl	8006e10 <HAL_RCC_GetPCLK2Freq>
        {
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
        }
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007c6c:	686b      	ldr	r3, [r5, #4]
 8007c6e:	085b      	lsrs	r3, r3, #1
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007c70:	6869      	ldr	r1, [r5, #4]
 8007c72:	18c0      	adds	r0, r0, r3
 8007c74:	e0c7      	b.n	8007e06 <UART_SetConfig+0x1fe>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007c76:	4a7a      	ldr	r2, [pc, #488]	; (8007e60 <UART_SetConfig+0x258>)
 8007c78:	4293      	cmp	r3, r2
 8007c7a:	d115      	bne.n	8007ca8 <UART_SetConfig+0xa0>
 8007c7c:	220c      	movs	r2, #12
 8007c7e:	4b76      	ldr	r3, [pc, #472]	; (8007e58 <UART_SetConfig+0x250>)
 8007c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007c82:	4013      	ands	r3, r2
 8007c84:	4a77      	ldr	r2, [pc, #476]	; (8007e64 <UART_SetConfig+0x25c>)
 8007c86:	5cd4      	ldrb	r4, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007c88:	2380      	movs	r3, #128	; 0x80
 8007c8a:	021b      	lsls	r3, r3, #8
 8007c8c:	4299      	cmp	r1, r3
 8007c8e:	d000      	beq.n	8007c92 <UART_SetConfig+0x8a>
 8007c90:	e096      	b.n	8007dc0 <UART_SetConfig+0x1b8>
    switch (clocksource)
 8007c92:	2c08      	cmp	r4, #8
 8007c94:	d900      	bls.n	8007c98 <UART_SetConfig+0x90>
 8007c96:	e090      	b.n	8007dba <UART_SetConfig+0x1b2>
 8007c98:	0020      	movs	r0, r4
 8007c9a:	f7fa fbf5 	bl	8002488 <__gnu_thumb1_case_uqi>
 8007c9e:	6b52      	.short	0x6b52
 8007ca0:	8e868e73 	.word	0x8e868e73
 8007ca4:	8e8e      	.short	0x8e8e
 8007ca6:	89          	.byte	0x89
 8007ca7:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007ca8:	42a3      	cmp	r3, r4
 8007caa:	d000      	beq.n	8007cae <UART_SetConfig+0xa6>
 8007cac:	e0c3      	b.n	8007e36 <UART_SetConfig+0x22e>
 8007cae:	21c0      	movs	r1, #192	; 0xc0
 8007cb0:	2080      	movs	r0, #128	; 0x80
 8007cb2:	4a69      	ldr	r2, [pc, #420]	; (8007e58 <UART_SetConfig+0x250>)
 8007cb4:	0109      	lsls	r1, r1, #4
 8007cb6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
 8007cb8:	0100      	lsls	r0, r0, #4
 8007cba:	400b      	ands	r3, r1
 8007cbc:	4283      	cmp	r3, r0
 8007cbe:	d017      	beq.n	8007cf0 <UART_SetConfig+0xe8>
 8007cc0:	d807      	bhi.n	8007cd2 <UART_SetConfig+0xca>
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d00a      	beq.n	8007cdc <UART_SetConfig+0xd4>
 8007cc6:	2280      	movs	r2, #128	; 0x80
 8007cc8:	00d2      	lsls	r2, r2, #3
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d036      	beq.n	8007d3c <UART_SetConfig+0x134>
        ret = HAL_ERROR;
 8007cce:	2401      	movs	r4, #1
 8007cd0:	e009      	b.n	8007ce6 <UART_SetConfig+0xde>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007cd2:	428b      	cmp	r3, r1
 8007cd4:	d1fb      	bne.n	8007cce <UART_SetConfig+0xc6>
 8007cd6:	2080      	movs	r0, #128	; 0x80
 8007cd8:	0200      	lsls	r0, r0, #8
 8007cda:	e013      	b.n	8007d04 <UART_SetConfig+0xfc>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8007cdc:	f7ff f888 	bl	8006df0 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 8007ce0:	2400      	movs	r4, #0
 8007ce2:	42a0      	cmp	r0, r4
 8007ce4:	d10e      	bne.n	8007d04 <UART_SetConfig+0xfc>
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ce6:	2300      	movs	r3, #0
  huart->TxISR = NULL;

  return ret;
}
 8007ce8:	0020      	movs	r0, r4
  huart->RxISR = NULL;
 8007cea:	662b      	str	r3, [r5, #96]	; 0x60
  huart->TxISR = NULL;
 8007cec:	666b      	str	r3, [r5, #100]	; 0x64
}
 8007cee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007cf0:	2310      	movs	r3, #16
 8007cf2:	6810      	ldr	r0, [r2, #0]
 8007cf4:	4018      	ands	r0, r3
          lpuart_ker_ck_pres = (uint32_t)(HSI_VALUE >> 2U);
 8007cf6:	4243      	negs	r3, r0
 8007cf8:	4158      	adcs	r0, r3
 8007cfa:	4b5b      	ldr	r3, [pc, #364]	; (8007e68 <UART_SetConfig+0x260>)
 8007cfc:	4240      	negs	r0, r0
 8007cfe:	4018      	ands	r0, r3
 8007d00:	4b5a      	ldr	r3, [pc, #360]	; (8007e6c <UART_SetConfig+0x264>)
 8007d02:	18c0      	adds	r0, r0, r3
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d04:	2303      	movs	r3, #3
 8007d06:	686a      	ldr	r2, [r5, #4]
 8007d08:	4353      	muls	r3, r2
 8007d0a:	4283      	cmp	r3, r0
 8007d0c:	d8df      	bhi.n	8007cce <UART_SetConfig+0xc6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007d0e:	0313      	lsls	r3, r2, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007d10:	4283      	cmp	r3, r0
 8007d12:	d3dc      	bcc.n	8007cce <UART_SetConfig+0xc6>
        usartdiv = (uint32_t)(UART_DIV_LPUART(lpuart_ker_ck_pres, huart->Init.BaudRate));
 8007d14:	2700      	movs	r7, #0
 8007d16:	0856      	lsrs	r6, r2, #1
 8007d18:	0e04      	lsrs	r4, r0, #24
 8007d1a:	0203      	lsls	r3, r0, #8
 8007d1c:	199b      	adds	r3, r3, r6
 8007d1e:	417c      	adcs	r4, r7
 8007d20:	0018      	movs	r0, r3
 8007d22:	0021      	movs	r1, r4
 8007d24:	003b      	movs	r3, r7
 8007d26:	f7fa fd45 	bl	80027b4 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007d2a:	4b51      	ldr	r3, [pc, #324]	; (8007e70 <UART_SetConfig+0x268>)
 8007d2c:	18c2      	adds	r2, r0, r3
 8007d2e:	4b51      	ldr	r3, [pc, #324]	; (8007e74 <UART_SetConfig+0x26c>)
 8007d30:	429a      	cmp	r2, r3
 8007d32:	d8cc      	bhi.n	8007cce <UART_SetConfig+0xc6>
          huart->Instance->BRR = usartdiv;
 8007d34:	682b      	ldr	r3, [r5, #0]
 8007d36:	003c      	movs	r4, r7
 8007d38:	60d8      	str	r0, [r3, #12]
 8007d3a:	e7d4      	b.n	8007ce6 <UART_SetConfig+0xde>
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8007d3c:	f7fe fce0 	bl	8006700 <HAL_RCC_GetSysClockFreq>
        break;
 8007d40:	e7ce      	b.n	8007ce0 <UART_SetConfig+0xd8>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007d42:	f7ff f855 	bl	8006df0 <HAL_RCC_GetPCLK1Freq>
 8007d46:	686b      	ldr	r3, [r5, #4]
 8007d48:	0040      	lsls	r0, r0, #1
 8007d4a:	085b      	lsrs	r3, r3, #1
 8007d4c:	6869      	ldr	r1, [r5, #4]
 8007d4e:	18c0      	adds	r0, r0, r3
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007d50:	f7fa fbae 	bl	80024b0 <__udivsi3>
 8007d54:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d56:	0003      	movs	r3, r0
 8007d58:	4a47      	ldr	r2, [pc, #284]	; (8007e78 <UART_SetConfig+0x270>)
 8007d5a:	3b10      	subs	r3, #16
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d8b6      	bhi.n	8007cce <UART_SetConfig+0xc6>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d60:	230f      	movs	r3, #15
 8007d62:	0002      	movs	r2, r0
 8007d64:	439a      	bics	r2, r3
 8007d66:	0013      	movs	r3, r2
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d68:	0700      	lsls	r0, r0, #28
      huart->Instance->BRR = brrtemp;
 8007d6a:	682a      	ldr	r2, [r5, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d6c:	0f40      	lsrs	r0, r0, #29
      huart->Instance->BRR = brrtemp;
 8007d6e:	4318      	orrs	r0, r3
 8007d70:	60d0      	str	r0, [r2, #12]
 8007d72:	e7b8      	b.n	8007ce6 <UART_SetConfig+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8007d74:	f7ff f84c 	bl	8006e10 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007d78:	686b      	ldr	r3, [r5, #4]
 8007d7a:	0040      	lsls	r0, r0, #1
 8007d7c:	085b      	lsrs	r3, r3, #1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007d7e:	6869      	ldr	r1, [r5, #4]
 8007d80:	18c0      	adds	r0, r0, r3
 8007d82:	e00a      	b.n	8007d9a <UART_SetConfig+0x192>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007d84:	4b34      	ldr	r3, [pc, #208]	; (8007e58 <UART_SetConfig+0x250>)
 8007d86:	6869      	ldr	r1, [r5, #4]
 8007d88:	681a      	ldr	r2, [r3, #0]
 8007d8a:	2310      	movs	r3, #16
 8007d8c:	0014      	movs	r4, r2
 8007d8e:	0848      	lsrs	r0, r1, #1
 8007d90:	401c      	ands	r4, r3
 8007d92:	421a      	tst	r2, r3
 8007d94:	d006      	beq.n	8007da4 <UART_SetConfig+0x19c>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8007d96:	4b39      	ldr	r3, [pc, #228]	; (8007e7c <UART_SetConfig+0x274>)
 8007d98:	18c0      	adds	r0, r0, r3
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007d9a:	f7fa fb89 	bl	80024b0 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8007d9e:	2400      	movs	r4, #0
 8007da0:	b280      	uxth	r0, r0
        break;
 8007da2:	e7d8      	b.n	8007d56 <UART_SetConfig+0x14e>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007da4:	4b36      	ldr	r3, [pc, #216]	; (8007e80 <UART_SetConfig+0x278>)
 8007da6:	18c0      	adds	r0, r0, r3
 8007da8:	e7d2      	b.n	8007d50 <UART_SetConfig+0x148>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007daa:	f7fe fca9 	bl	8006700 <HAL_RCC_GetSysClockFreq>
 8007dae:	e7e3      	b.n	8007d78 <UART_SetConfig+0x170>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8007db0:	686b      	ldr	r3, [r5, #4]
 8007db2:	0858      	lsrs	r0, r3, #1
 8007db4:	2380      	movs	r3, #128	; 0x80
 8007db6:	025b      	lsls	r3, r3, #9
 8007db8:	e7e1      	b.n	8007d7e <UART_SetConfig+0x176>
        ret = HAL_ERROR;
 8007dba:	2401      	movs	r4, #1
  uint32_t usartdiv                   = 0x00000000U;
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	e7ca      	b.n	8007d56 <UART_SetConfig+0x14e>
    switch (clocksource)
 8007dc0:	2c08      	cmp	r4, #8
 8007dc2:	d83c      	bhi.n	8007e3e <UART_SetConfig+0x236>
 8007dc4:	0020      	movs	r0, r4
 8007dc6:	f7fa fb69 	bl	800249c <__gnu_thumb1_case_shi>
 8007dca:	0009      	.short	0x0009
 8007dcc:	0013ff4f 	.word	0x0013ff4f
 8007dd0:	002e003a 	.word	0x002e003a
 8007dd4:	003a003a 	.word	0x003a003a
 8007dd8:	0031003a 	.word	0x0031003a
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8007ddc:	f7ff f808 	bl	8006df0 <HAL_RCC_GetPCLK1Freq>
 8007de0:	686b      	ldr	r3, [r5, #4]
 8007de2:	6869      	ldr	r1, [r5, #4]
 8007de4:	085b      	lsrs	r3, r3, #1
 8007de6:	1818      	adds	r0, r3, r0
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007de8:	f7fa fb62 	bl	80024b0 <__udivsi3>
 8007dec:	b280      	uxth	r0, r0
 8007dee:	e00e      	b.n	8007e0e <UART_SetConfig+0x206>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007df0:	4b19      	ldr	r3, [pc, #100]	; (8007e58 <UART_SetConfig+0x250>)
 8007df2:	6869      	ldr	r1, [r5, #4]
 8007df4:	681a      	ldr	r2, [r3, #0]
 8007df6:	2310      	movs	r3, #16
 8007df8:	0014      	movs	r4, r2
 8007dfa:	0848      	lsrs	r0, r1, #1
 8007dfc:	401c      	ands	r4, r3
 8007dfe:	421a      	tst	r2, r3
 8007e00:	d00e      	beq.n	8007e20 <UART_SetConfig+0x218>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16((HSI_VALUE >> 2U), huart->Init.BaudRate));
 8007e02:	4b1a      	ldr	r3, [pc, #104]	; (8007e6c <UART_SetConfig+0x264>)
 8007e04:	18c0      	adds	r0, r0, r3
 8007e06:	f7fa fb53 	bl	80024b0 <__udivsi3>
  HAL_StatusTypeDef ret               = HAL_OK;
 8007e0a:	2400      	movs	r4, #0
 8007e0c:	b280      	uxth	r0, r0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e0e:	0003      	movs	r3, r0
 8007e10:	4a19      	ldr	r2, [pc, #100]	; (8007e78 <UART_SetConfig+0x270>)
 8007e12:	3b10      	subs	r3, #16
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d900      	bls.n	8007e1a <UART_SetConfig+0x212>
 8007e18:	e759      	b.n	8007cce <UART_SetConfig+0xc6>
      huart->Instance->BRR = usartdiv;
 8007e1a:	682b      	ldr	r3, [r5, #0]
 8007e1c:	60d8      	str	r0, [r3, #12]
 8007e1e:	e762      	b.n	8007ce6 <UART_SetConfig+0xde>
          usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8007e20:	4b18      	ldr	r3, [pc, #96]	; (8007e84 <UART_SetConfig+0x27c>)
 8007e22:	18c0      	adds	r0, r0, r3
 8007e24:	e7e0      	b.n	8007de8 <UART_SetConfig+0x1e0>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8007e26:	f7fe fc6b 	bl	8006700 <HAL_RCC_GetSysClockFreq>
 8007e2a:	e71f      	b.n	8007c6c <UART_SetConfig+0x64>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8007e2c:	686b      	ldr	r3, [r5, #4]
 8007e2e:	0858      	lsrs	r0, r3, #1
 8007e30:	2380      	movs	r3, #128	; 0x80
 8007e32:	021b      	lsls	r3, r3, #8
 8007e34:	e71c      	b.n	8007c70 <UART_SetConfig+0x68>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e36:	2380      	movs	r3, #128	; 0x80
 8007e38:	021b      	lsls	r3, r3, #8
 8007e3a:	4299      	cmp	r1, r3
 8007e3c:	d0bd      	beq.n	8007dba <UART_SetConfig+0x1b2>
 8007e3e:	2401      	movs	r4, #1
 8007e40:	2000      	movs	r0, #0
 8007e42:	e7e4      	b.n	8007e0e <UART_SetConfig+0x206>
 8007e44:	efff69f3 	.word	0xefff69f3
 8007e48:	ffffcfff 	.word	0xffffcfff
 8007e4c:	40004800 	.word	0x40004800
 8007e50:	fffff4ff 	.word	0xfffff4ff
 8007e54:	40013800 	.word	0x40013800
 8007e58:	40021000 	.word	0x40021000
 8007e5c:	0800afbd 	.word	0x0800afbd
 8007e60:	40004400 	.word	0x40004400
 8007e64:	0800afc0 	.word	0x0800afc0
 8007e68:	00b71b00 	.word	0x00b71b00
 8007e6c:	003d0900 	.word	0x003d0900
 8007e70:	fffffd00 	.word	0xfffffd00
 8007e74:	000ffcff 	.word	0x000ffcff
 8007e78:	0000ffef 	.word	0x0000ffef
 8007e7c:	007a1200 	.word	0x007a1200
 8007e80:	01e84800 	.word	0x01e84800
 8007e84:	00f42400 	.word	0x00f42400

08007e88 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e88:	6a43      	ldr	r3, [r0, #36]	; 0x24
{
 8007e8a:	b530      	push	{r4, r5, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e8c:	07da      	lsls	r2, r3, #31
 8007e8e:	d506      	bpl.n	8007e9e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e90:	6801      	ldr	r1, [r0, #0]
 8007e92:	4c28      	ldr	r4, [pc, #160]	; (8007f34 <UART_AdvFeatureConfig+0xac>)
 8007e94:	684a      	ldr	r2, [r1, #4]
 8007e96:	4022      	ands	r2, r4
 8007e98:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8007e9a:	4322      	orrs	r2, r4
 8007e9c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e9e:	079a      	lsls	r2, r3, #30
 8007ea0:	d506      	bpl.n	8007eb0 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007ea2:	6801      	ldr	r1, [r0, #0]
 8007ea4:	4c24      	ldr	r4, [pc, #144]	; (8007f38 <UART_AdvFeatureConfig+0xb0>)
 8007ea6:	684a      	ldr	r2, [r1, #4]
 8007ea8:	4022      	ands	r2, r4
 8007eaa:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8007eac:	4322      	orrs	r2, r4
 8007eae:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007eb0:	075a      	lsls	r2, r3, #29
 8007eb2:	d506      	bpl.n	8007ec2 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007eb4:	6801      	ldr	r1, [r0, #0]
 8007eb6:	4c21      	ldr	r4, [pc, #132]	; (8007f3c <UART_AdvFeatureConfig+0xb4>)
 8007eb8:	684a      	ldr	r2, [r1, #4]
 8007eba:	4022      	ands	r2, r4
 8007ebc:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8007ebe:	4322      	orrs	r2, r4
 8007ec0:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007ec2:	071a      	lsls	r2, r3, #28
 8007ec4:	d506      	bpl.n	8007ed4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ec6:	6801      	ldr	r1, [r0, #0]
 8007ec8:	4c1d      	ldr	r4, [pc, #116]	; (8007f40 <UART_AdvFeatureConfig+0xb8>)
 8007eca:	684a      	ldr	r2, [r1, #4]
 8007ecc:	4022      	ands	r2, r4
 8007ece:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8007ed0:	4322      	orrs	r2, r4
 8007ed2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ed4:	06da      	lsls	r2, r3, #27
 8007ed6:	d506      	bpl.n	8007ee6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ed8:	6801      	ldr	r1, [r0, #0]
 8007eda:	4c1a      	ldr	r4, [pc, #104]	; (8007f44 <UART_AdvFeatureConfig+0xbc>)
 8007edc:	688a      	ldr	r2, [r1, #8]
 8007ede:	4022      	ands	r2, r4
 8007ee0:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8007ee2:	4322      	orrs	r2, r4
 8007ee4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ee6:	069a      	lsls	r2, r3, #26
 8007ee8:	d506      	bpl.n	8007ef8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007eea:	6801      	ldr	r1, [r0, #0]
 8007eec:	4c16      	ldr	r4, [pc, #88]	; (8007f48 <UART_AdvFeatureConfig+0xc0>)
 8007eee:	688a      	ldr	r2, [r1, #8]
 8007ef0:	4022      	ands	r2, r4
 8007ef2:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8007ef4:	4322      	orrs	r2, r4
 8007ef6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007ef8:	065a      	lsls	r2, r3, #25
 8007efa:	d510      	bpl.n	8007f1e <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007efc:	6801      	ldr	r1, [r0, #0]
 8007efe:	4d13      	ldr	r5, [pc, #76]	; (8007f4c <UART_AdvFeatureConfig+0xc4>)
 8007f00:	684a      	ldr	r2, [r1, #4]
 8007f02:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8007f04:	402a      	ands	r2, r5
 8007f06:	4322      	orrs	r2, r4
 8007f08:	604a      	str	r2, [r1, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f0a:	2280      	movs	r2, #128	; 0x80
 8007f0c:	0352      	lsls	r2, r2, #13
 8007f0e:	4294      	cmp	r4, r2
 8007f10:	d105      	bne.n	8007f1e <UART_AdvFeatureConfig+0x96>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f12:	684a      	ldr	r2, [r1, #4]
 8007f14:	4c0e      	ldr	r4, [pc, #56]	; (8007f50 <UART_AdvFeatureConfig+0xc8>)
 8007f16:	4022      	ands	r2, r4
 8007f18:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8007f1a:	4322      	orrs	r2, r4
 8007f1c:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f1e:	061b      	lsls	r3, r3, #24
 8007f20:	d506      	bpl.n	8007f30 <UART_AdvFeatureConfig+0xa8>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f22:	6802      	ldr	r2, [r0, #0]
 8007f24:	490b      	ldr	r1, [pc, #44]	; (8007f54 <UART_AdvFeatureConfig+0xcc>)
 8007f26:	6853      	ldr	r3, [r2, #4]
 8007f28:	400b      	ands	r3, r1
 8007f2a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8007f2c:	430b      	orrs	r3, r1
 8007f2e:	6053      	str	r3, [r2, #4]
  }
}
 8007f30:	bd30      	pop	{r4, r5, pc}
 8007f32:	46c0      	nop			; (mov r8, r8)
 8007f34:	fffdffff 	.word	0xfffdffff
 8007f38:	fffeffff 	.word	0xfffeffff
 8007f3c:	fffbffff 	.word	0xfffbffff
 8007f40:	ffff7fff 	.word	0xffff7fff
 8007f44:	ffffefff 	.word	0xffffefff
 8007f48:	ffffdfff 	.word	0xffffdfff
 8007f4c:	ffefffff 	.word	0xffefffff
 8007f50:	ff9fffff 	.word	0xff9fffff
 8007f54:	fff7ffff 	.word	0xfff7ffff

08007f58 <UART_WaitOnFlagUntilTimeout>:
  * @param Tickstart Tick start value
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f5a:	0004      	movs	r4, r0
 8007f5c:	000d      	movs	r5, r1
 8007f5e:	0017      	movs	r7, r2
 8007f60:	001e      	movs	r6, r3
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f62:	6822      	ldr	r2, [r4, #0]
 8007f64:	69d3      	ldr	r3, [r2, #28]
 8007f66:	402b      	ands	r3, r5
 8007f68:	1b5b      	subs	r3, r3, r5
 8007f6a:	4259      	negs	r1, r3
 8007f6c:	414b      	adcs	r3, r1
 8007f6e:	42bb      	cmp	r3, r7
 8007f70:	d001      	beq.n	8007f76 <UART_WaitOnFlagUntilTimeout+0x1e>

        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8007f72:	2000      	movs	r0, #0
 8007f74:	e01b      	b.n	8007fae <UART_WaitOnFlagUntilTimeout+0x56>
    if (Timeout != HAL_MAX_DELAY)
 8007f76:	9b06      	ldr	r3, [sp, #24]
 8007f78:	3301      	adds	r3, #1
 8007f7a:	d0f3      	beq.n	8007f64 <UART_WaitOnFlagUntilTimeout+0xc>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f7c:	f7fd fddc 	bl	8005b38 <HAL_GetTick>
 8007f80:	9b06      	ldr	r3, [sp, #24]
 8007f82:	1b80      	subs	r0, r0, r6
 8007f84:	4298      	cmp	r0, r3
 8007f86:	d801      	bhi.n	8007f8c <UART_WaitOnFlagUntilTimeout+0x34>
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d1ea      	bne.n	8007f62 <UART_WaitOnFlagUntilTimeout+0xa>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f8c:	6823      	ldr	r3, [r4, #0]
 8007f8e:	4908      	ldr	r1, [pc, #32]	; (8007fb0 <UART_WaitOnFlagUntilTimeout+0x58>)
 8007f90:	681a      	ldr	r2, [r3, #0]
        __HAL_UNLOCK(huart);
 8007f92:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f94:	400a      	ands	r2, r1
 8007f96:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f98:	689a      	ldr	r2, [r3, #8]
 8007f9a:	31a3      	adds	r1, #163	; 0xa3
 8007f9c:	31ff      	adds	r1, #255	; 0xff
 8007f9e:	438a      	bics	r2, r1
 8007fa0:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8007fa2:	2320      	movs	r3, #32
 8007fa4:	6763      	str	r3, [r4, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8007fa6:	67a3      	str	r3, [r4, #120]	; 0x78
        __HAL_UNLOCK(huart);
 8007fa8:	2300      	movs	r3, #0
 8007faa:	3470      	adds	r4, #112	; 0x70
 8007fac:	7023      	strb	r3, [r4, #0]
}
 8007fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fb0:	fffffe5f 	.word	0xfffffe5f

08007fb4 <HAL_UART_Transmit>:
{
 8007fb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007fb6:	b085      	sub	sp, #20
 8007fb8:	9303      	str	r3, [sp, #12]
  if (huart->gState == HAL_UART_STATE_READY)
 8007fba:	6f43      	ldr	r3, [r0, #116]	; 0x74
{
 8007fbc:	0004      	movs	r4, r0
 8007fbe:	000d      	movs	r5, r1
 8007fc0:	0016      	movs	r6, r2
    return HAL_BUSY;
 8007fc2:	2002      	movs	r0, #2
  if (huart->gState == HAL_UART_STATE_READY)
 8007fc4:	2b20      	cmp	r3, #32
 8007fc6:	d14d      	bne.n	8008064 <HAL_UART_Transmit+0xb0>
      return  HAL_ERROR;
 8007fc8:	3801      	subs	r0, #1
    if ((pData == NULL) || (Size == 0U))
 8007fca:	2900      	cmp	r1, #0
 8007fcc:	d04a      	beq.n	8008064 <HAL_UART_Transmit+0xb0>
 8007fce:	2a00      	cmp	r2, #0
 8007fd0:	d048      	beq.n	8008064 <HAL_UART_Transmit+0xb0>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007fd2:	2380      	movs	r3, #128	; 0x80
 8007fd4:	68a2      	ldr	r2, [r4, #8]
 8007fd6:	015b      	lsls	r3, r3, #5
 8007fd8:	429a      	cmp	r2, r3
 8007fda:	d104      	bne.n	8007fe6 <HAL_UART_Transmit+0x32>
 8007fdc:	6923      	ldr	r3, [r4, #16]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d101      	bne.n	8007fe6 <HAL_UART_Transmit+0x32>
      if ((((uint32_t)pData) & 1) != 0)
 8007fe2:	4201      	tst	r1, r0
 8007fe4:	d13e      	bne.n	8008064 <HAL_UART_Transmit+0xb0>
    __HAL_LOCK(huart);
 8007fe6:	0023      	movs	r3, r4
 8007fe8:	3370      	adds	r3, #112	; 0x70
 8007fea:	781a      	ldrb	r2, [r3, #0]
    return HAL_BUSY;
 8007fec:	2002      	movs	r0, #2
    __HAL_LOCK(huart);
 8007fee:	2a01      	cmp	r2, #1
 8007ff0:	d038      	beq.n	8008064 <HAL_UART_Transmit+0xb0>
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	701a      	strb	r2, [r3, #0]
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	67e3      	str	r3, [r4, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007ffa:	3321      	adds	r3, #33	; 0x21
 8007ffc:	6763      	str	r3, [r4, #116]	; 0x74
    tickstart = HAL_GetTick();
 8007ffe:	f7fd fd9b 	bl	8005b38 <HAL_GetTick>
    huart->TxXferSize  = Size;
 8008002:	0023      	movs	r3, r4
 8008004:	3350      	adds	r3, #80	; 0x50
 8008006:	801e      	strh	r6, [r3, #0]
    huart->TxXferCount = Size;
 8008008:	3302      	adds	r3, #2
 800800a:	801e      	strh	r6, [r3, #0]
 800800c:	9302      	str	r3, [sp, #8]
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800800e:	2380      	movs	r3, #128	; 0x80
 8008010:	68a2      	ldr	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8008012:	0007      	movs	r7, r0
      pdata16bits = NULL;
 8008014:	2600      	movs	r6, #0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008016:	015b      	lsls	r3, r3, #5
 8008018:	429a      	cmp	r2, r3
 800801a:	d104      	bne.n	8008026 <HAL_UART_Transmit+0x72>
 800801c:	6923      	ldr	r3, [r4, #16]
 800801e:	42b3      	cmp	r3, r6
 8008020:	d101      	bne.n	8008026 <HAL_UART_Transmit+0x72>
 8008022:	002e      	movs	r6, r5
      pdata8bits  = NULL;
 8008024:	001d      	movs	r5, r3
    while (huart->TxXferCount > 0U)
 8008026:	0023      	movs	r3, r4
 8008028:	3352      	adds	r3, #82	; 0x52
 800802a:	881b      	ldrh	r3, [r3, #0]
 800802c:	b29a      	uxth	r2, r3
 800802e:	2b00      	cmp	r3, #0
 8008030:	d10d      	bne.n	800804e <HAL_UART_Transmit+0x9a>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008032:	9b03      	ldr	r3, [sp, #12]
 8008034:	2140      	movs	r1, #64	; 0x40
 8008036:	9300      	str	r3, [sp, #0]
 8008038:	0020      	movs	r0, r4
 800803a:	003b      	movs	r3, r7
 800803c:	f7ff ff8c 	bl	8007f58 <UART_WaitOnFlagUntilTimeout>
 8008040:	2800      	cmp	r0, #0
 8008042:	d10e      	bne.n	8008062 <HAL_UART_Transmit+0xae>
    huart->gState = HAL_UART_STATE_READY;
 8008044:	2320      	movs	r3, #32
    __HAL_UNLOCK(huart);
 8008046:	3470      	adds	r4, #112	; 0x70
    huart->gState = HAL_UART_STATE_READY;
 8008048:	6063      	str	r3, [r4, #4]
    __HAL_UNLOCK(huart);
 800804a:	7020      	strb	r0, [r4, #0]
    return HAL_OK;
 800804c:	e00a      	b.n	8008064 <HAL_UART_Transmit+0xb0>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800804e:	9b03      	ldr	r3, [sp, #12]
 8008050:	2200      	movs	r2, #0
 8008052:	9300      	str	r3, [sp, #0]
 8008054:	2180      	movs	r1, #128	; 0x80
 8008056:	003b      	movs	r3, r7
 8008058:	0020      	movs	r0, r4
 800805a:	f7ff ff7d 	bl	8007f58 <UART_WaitOnFlagUntilTimeout>
 800805e:	2800      	cmp	r0, #0
 8008060:	d002      	beq.n	8008068 <HAL_UART_Transmit+0xb4>
        return HAL_TIMEOUT;
 8008062:	2003      	movs	r0, #3
}
 8008064:	b005      	add	sp, #20
 8008066:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if (pdata8bits == NULL)
 8008068:	6822      	ldr	r2, [r4, #0]
 800806a:	2d00      	cmp	r5, #0
 800806c:	d10b      	bne.n	8008086 <HAL_UART_Transmit+0xd2>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800806e:	8833      	ldrh	r3, [r6, #0]
        pdata16bits++;
 8008070:	3602      	adds	r6, #2
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008072:	05db      	lsls	r3, r3, #23
 8008074:	0ddb      	lsrs	r3, r3, #23
 8008076:	6293      	str	r3, [r2, #40]	; 0x28
      huart->TxXferCount--;
 8008078:	9b02      	ldr	r3, [sp, #8]
 800807a:	9a02      	ldr	r2, [sp, #8]
 800807c:	881b      	ldrh	r3, [r3, #0]
 800807e:	3b01      	subs	r3, #1
 8008080:	b29b      	uxth	r3, r3
 8008082:	8013      	strh	r3, [r2, #0]
 8008084:	e7cf      	b.n	8008026 <HAL_UART_Transmit+0x72>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008086:	782b      	ldrb	r3, [r5, #0]
        pdata8bits++;
 8008088:	3501      	adds	r5, #1
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800808a:	6293      	str	r3, [r2, #40]	; 0x28
        pdata8bits++;
 800808c:	e7f4      	b.n	8008078 <HAL_UART_Transmit+0xc4>
	...

08008090 <UART_CheckIdleState>:
{
 8008090:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008092:	2600      	movs	r6, #0
{
 8008094:	0004      	movs	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008096:	67c6      	str	r6, [r0, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8008098:	f7fd fd4e 	bl	8005b38 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800809c:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800809e:	0005      	movs	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	071b      	lsls	r3, r3, #28
 80080a4:	d415      	bmi.n	80080d2 <UART_CheckIdleState+0x42>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80080a6:	6823      	ldr	r3, [r4, #0]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	075b      	lsls	r3, r3, #29
 80080ac:	d50a      	bpl.n	80080c4 <UART_CheckIdleState+0x34>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080ae:	2180      	movs	r1, #128	; 0x80
 80080b0:	4b0e      	ldr	r3, [pc, #56]	; (80080ec <UART_CheckIdleState+0x5c>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	9300      	str	r3, [sp, #0]
 80080b6:	0020      	movs	r0, r4
 80080b8:	002b      	movs	r3, r5
 80080ba:	03c9      	lsls	r1, r1, #15
 80080bc:	f7ff ff4c 	bl	8007f58 <UART_WaitOnFlagUntilTimeout>
 80080c0:	2800      	cmp	r0, #0
 80080c2:	d111      	bne.n	80080e8 <UART_CheckIdleState+0x58>
  huart->gState = HAL_UART_STATE_READY;
 80080c4:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80080c6:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80080c8:	6763      	str	r3, [r4, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80080ca:	67a3      	str	r3, [r4, #120]	; 0x78
  __HAL_UNLOCK(huart);
 80080cc:	3470      	adds	r4, #112	; 0x70
 80080ce:	7020      	strb	r0, [r4, #0]
  return HAL_OK;
 80080d0:	e00b      	b.n	80080ea <UART_CheckIdleState+0x5a>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80080d2:	2180      	movs	r1, #128	; 0x80
 80080d4:	4b05      	ldr	r3, [pc, #20]	; (80080ec <UART_CheckIdleState+0x5c>)
 80080d6:	0032      	movs	r2, r6
 80080d8:	9300      	str	r3, [sp, #0]
 80080da:	0389      	lsls	r1, r1, #14
 80080dc:	0003      	movs	r3, r0
 80080de:	0020      	movs	r0, r4
 80080e0:	f7ff ff3a 	bl	8007f58 <UART_WaitOnFlagUntilTimeout>
 80080e4:	2800      	cmp	r0, #0
 80080e6:	d0de      	beq.n	80080a6 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80080e8:	2003      	movs	r0, #3
}
 80080ea:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
 80080ec:	01ffffff 	.word	0x01ffffff

080080f0 <HAL_UART_Init>:
{
 80080f0:	b510      	push	{r4, lr}
 80080f2:	1e04      	subs	r4, r0, #0
  if (huart == NULL)
 80080f4:	d101      	bne.n	80080fa <HAL_UART_Init+0xa>
    return HAL_ERROR;
 80080f6:	2001      	movs	r0, #1
}
 80080f8:	bd10      	pop	{r4, pc}
  if (huart->gState == HAL_UART_STATE_RESET)
 80080fa:	6f43      	ldr	r3, [r0, #116]	; 0x74
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d104      	bne.n	800810a <HAL_UART_Init+0x1a>
    huart->Lock = HAL_UNLOCKED;
 8008100:	0002      	movs	r2, r0
 8008102:	3270      	adds	r2, #112	; 0x70
 8008104:	7013      	strb	r3, [r2, #0]
    HAL_UART_MspInit(huart);
 8008106:	f7fd fc01 	bl	800590c <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800810a:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 800810c:	2101      	movs	r1, #1
 800810e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8008110:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8008112:	6813      	ldr	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8008114:	0020      	movs	r0, r4
  __HAL_UART_DISABLE(huart);
 8008116:	438b      	bics	r3, r1
 8008118:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800811a:	f7ff fd75 	bl	8007c08 <UART_SetConfig>
 800811e:	2801      	cmp	r0, #1
 8008120:	d0e9      	beq.n	80080f6 <HAL_UART_Init+0x6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8008122:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008124:	2b00      	cmp	r3, #0
 8008126:	d002      	beq.n	800812e <HAL_UART_Init+0x3e>
    UART_AdvFeatureConfig(huart);
 8008128:	0020      	movs	r0, r4
 800812a:	f7ff fead 	bl	8007e88 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800812e:	6823      	ldr	r3, [r4, #0]
 8008130:	4907      	ldr	r1, [pc, #28]	; (8008150 <HAL_UART_Init+0x60>)
 8008132:	685a      	ldr	r2, [r3, #4]
  return (UART_CheckIdleState(huart));
 8008134:	0020      	movs	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008136:	400a      	ands	r2, r1
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008138:	212a      	movs	r1, #42	; 0x2a
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800813a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800813c:	689a      	ldr	r2, [r3, #8]
 800813e:	438a      	bics	r2, r1
 8008140:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8008142:	2201      	movs	r2, #1
 8008144:	6819      	ldr	r1, [r3, #0]
 8008146:	430a      	orrs	r2, r1
 8008148:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800814a:	f7ff ffa1 	bl	8008090 <UART_CheckIdleState>
 800814e:	e7d3      	b.n	80080f8 <HAL_UART_Init+0x8>
 8008150:	ffffb7ff 	.word	0xffffb7ff

08008154 <FlashRead>:

  return nRet;
}

FLS_RW_StatusTypeDef FlashRead(uint32_t nAddress, uint16_t cNbBytes, uint8_t* pcBuffer)
{
 8008154:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008156:	b089      	sub	sp, #36	; 0x24
 8008158:	9004      	str	r0, [sp, #16]
 800815a:	0015      	movs	r5, r2
	
  //	if(cNbBytes > FLASH_PAGE_SIZE*MAX_NO_OF_PAGES)
  //		frRetStatus = FLS_RW_OUT_OF_RANGE;

  if(pcBuffer == NULL)
    frRetStatus = FLS_RW_ERROR;
 800815c:	2001      	movs	r0, #1
{
 800815e:	9105      	str	r1, [sp, #20]
  if(pcBuffer == NULL)
 8008160:	2a00      	cmp	r2, #0
 8008162:	d007      	beq.n	8008174 <FlashRead+0x20>
      pageIdx = (i/4)*4;		/* Every 4 bytes moves ahead */
	
	if(CheckFlashAddress(nAddress+pageIdx) == FLS_RW_OK)
	{
	  tmp = *((__IO uint32_t *)(nAddress+pageIdx));
		pcBuffer[i] = (tmp&(0xFF000000>>(count4*8)))>>(24-(count4*8));
 8008164:	27ff      	movs	r7, #255	; 0xff
 8008166:	2400      	movs	r4, #0
 8008168:	2603      	movs	r6, #3
 800816a:	063f      	lsls	r7, r7, #24
    for(i=0; i<cNbBytes; i++)
 800816c:	9b05      	ldr	r3, [sp, #20]
 800816e:	429c      	cmp	r4, r3
 8008170:	d302      	bcc.n	8008178 <FlashRead+0x24>
  FLS_RW_StatusTypeDef frRetStatus = FLS_RW_OK;
 8008172:	2000      	movs	r0, #0
	}
    }
  }
	
  return frRetStatus;
}
 8008174:	b009      	add	sp, #36	; 0x24
 8008176:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(CheckFlashAddress(nAddress+pageIdx) == FLS_RW_OK)
 8008178:	9a04      	ldr	r2, [sp, #16]
      pageIdx = (i/4)*4;		/* Every 4 bytes moves ahead */
 800817a:	08a3      	lsrs	r3, r4, #2
	if(CheckFlashAddress(nAddress+pageIdx) == FLS_RW_OK)
 800817c:	009b      	lsls	r3, r3, #2
 800817e:	189b      	adds	r3, r3, r2
	  tmp = *((__IO uint32_t *)(nAddress+pageIdx));
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	9300      	str	r3, [sp, #0]
 8008184:	2300      	movs	r3, #0
 8008186:	9301      	str	r3, [sp, #4]
 8008188:	9a00      	ldr	r2, [sp, #0]
 800818a:	9b01      	ldr	r3, [sp, #4]
 800818c:	9206      	str	r2, [sp, #24]
 800818e:	9307      	str	r3, [sp, #28]
		pcBuffer[i] = (tmp&(0xFF000000>>(count4*8)))>>(24-(count4*8));
 8008190:	9806      	ldr	r0, [sp, #24]
 8008192:	9907      	ldr	r1, [sp, #28]
 8008194:	0022      	movs	r2, r4
 8008196:	9002      	str	r0, [sp, #8]
 8008198:	9103      	str	r1, [sp, #12]
 800819a:	0039      	movs	r1, r7
 800819c:	4032      	ands	r2, r6
 800819e:	00d3      	lsls	r3, r2, #3
 80081a0:	40d9      	lsrs	r1, r3
 80081a2:	9802      	ldr	r0, [sp, #8]
 80081a4:	1ab2      	subs	r2, r6, r2
 80081a6:	4008      	ands	r0, r1
 80081a8:	00d2      	lsls	r2, r2, #3
 80081aa:	2100      	movs	r1, #0
 80081ac:	f7fa faf6 	bl	800279c <__aeabi_llsr>
 80081b0:	5528      	strb	r0, [r5, r4]
    for(i=0; i<cNbBytes; i++)
 80081b2:	3401      	adds	r4, #1
 80081b4:	b2e4      	uxtb	r4, r4
 80081b6:	e7d9      	b.n	800816c <FlashRead+0x18>

080081b8 <DataEepromErase>:
  }

  return frRetStatus;
}

FLS_RW_StatusTypeDef DataEepromErase(uint32_t nAddress) {
 80081b8:	b510      	push	{r4, lr}
 80081ba:	0004      	movs	r4, r0
  uint32_t __attribute__ ((unused)) error_code;
  FLS_RW_StatusTypeDef frRetStatus = FLS_RW_ERROR;
	
  /* Unlock the Flash to enable the flash control register access */
  if(HAL_FLASHEx_DATAEEPROM_Unlock() == HAL_OK)
 80081bc:	f7fe f96e 	bl	800649c <HAL_FLASHEx_DATAEEPROM_Unlock>
 80081c0:	2800      	cmp	r0, #0
 80081c2:	d003      	beq.n	80081cc <DataEepromErase+0x14>
    }
  }

  if(frRetStatus == FLS_RW_ERROR)
  {
    error_code = HAL_FLASH_GetError();
 80081c4:	f7fe f928 	bl	8006418 <HAL_FLASH_GetError>
  }
	
  return FLS_RW_OK;
}
 80081c8:	2000      	movs	r0, #0
 80081ca:	bd10      	pop	{r4, pc}
    if(HAL_FLASHEx_DATAEEPROM_Erase(nAddress) == HAL_OK)
 80081cc:	0020      	movs	r0, r4
 80081ce:	f7fe f987 	bl	80064e0 <HAL_FLASHEx_DATAEEPROM_Erase>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d1f6      	bne.n	80081c4 <DataEepromErase+0xc>
      if(HAL_FLASHEx_DATAEEPROM_Lock() == HAL_OK)
 80081d6:	f7fe f979 	bl	80064cc <HAL_FLASHEx_DATAEEPROM_Lock>
 80081da:	2800      	cmp	r0, #0
 80081dc:	d1f2      	bne.n	80081c4 <DataEepromErase+0xc>
 80081de:	e7f3      	b.n	80081c8 <DataEepromErase+0x10>

080081e0 <FlashErase>:

FLS_RW_StatusTypeDef FlashErase(uint32_t nAddress, uint32_t nPages)
{
 80081e0:	b510      	push	{r4, lr}
 80081e2:	0004      	movs	r4, r0
  uint32_t __attribute__ ((unused)) error_code;
  FLS_RW_StatusTypeDef frRetStatus = FLS_RW_ERROR;
	
  /* Unlock the Flash to enable the flash control register access */
  if(HAL_FLASHEx_DATAEEPROM_Unlock() == HAL_OK)
 80081e4:	f7fe f95a 	bl	800649c <HAL_FLASHEx_DATAEEPROM_Unlock>
 80081e8:	2800      	cmp	r0, #0
 80081ea:	d003      	beq.n	80081f4 <FlashErase+0x14>
    }
  }

  if(frRetStatus == FLS_RW_ERROR)
  {
    error_code = HAL_FLASH_GetError();
 80081ec:	f7fe f914 	bl	8006418 <HAL_FLASH_GetError>
  }

  return FLS_RW_OK;
}
 80081f0:	2000      	movs	r0, #0
 80081f2:	bd10      	pop	{r4, pc}
    if(HAL_FLASHEx_DATAEEPROM_Erase(nAddress) == HAL_OK)
 80081f4:	0020      	movs	r0, r4
 80081f6:	f7fe f973 	bl	80064e0 <HAL_FLASHEx_DATAEEPROM_Erase>
 80081fa:	2800      	cmp	r0, #0
 80081fc:	d1f6      	bne.n	80081ec <FlashErase+0xc>
      if(HAL_FLASHEx_DATAEEPROM_Lock() == HAL_OK)
 80081fe:	f7fe f965 	bl	80064cc <HAL_FLASHEx_DATAEEPROM_Lock>
 8008202:	2800      	cmp	r0, #0
 8008204:	d1f2      	bne.n	80081ec <FlashErase+0xc>
 8008206:	e7f3      	b.n	80081f0 <FlashErase+0x10>

08008208 <FlashWrite>:
{
 8008208:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800820a:	000e      	movs	r6, r1
 800820c:	9201      	str	r2, [sp, #4]
  nRet = (!nTmp)?(nBytesCount/FLASH_PAGE_SIZE):(nBytesCount/FLASH_PAGE_SIZE)+1;
 800820e:	227f      	movs	r2, #127	; 0x7f
 8008210:	4032      	ands	r2, r6
{
 8008212:	0007      	movs	r7, r0
  nRet = (!nTmp)?(nBytesCount/FLASH_PAGE_SIZE):(nBytesCount/FLASH_PAGE_SIZE)+1;
 8008214:	1e50      	subs	r0, r2, #1
 8008216:	4182      	sbcs	r2, r0
    frRetStatus = FLS_RW_OUT_OF_RANGE;
 8008218:	2420      	movs	r4, #32
 800821a:	09c9      	lsrs	r1, r1, #7
  nRet = (!nTmp)?(nBytesCount/FLASH_PAGE_SIZE):(nBytesCount/FLASH_PAGE_SIZE)+1;
 800821c:	1889      	adds	r1, r1, r2
    frRetStatus = FLS_RW_OUT_OF_RANGE;
 800821e:	428c      	cmp	r4, r1
 8008220:	41a4      	sbcs	r4, r4
  if(pcBuffer == NULL)
 8008222:	9a01      	ldr	r2, [sp, #4]
    frRetStatus = FLS_RW_OUT_OF_RANGE;
 8008224:	4264      	negs	r4, r4
 8008226:	0064      	lsls	r4, r4, #1
  if(pcBuffer == NULL)
 8008228:	2a00      	cmp	r2, #0
 800822a:	d02d      	beq.n	8008288 <FlashWrite+0x80>
  if (eraseBeforeWrite) {
 800822c:	2b00      	cmp	r3, #0
 800822e:	d003      	beq.n	8008238 <FlashWrite+0x30>
		frRetStatus = FlashErase(nAddress, GetNumberOfPagesByBytes(cNbBytes));
 8008230:	0038      	movs	r0, r7
 8008232:	f7ff ffd5 	bl	80081e0 <FlashErase>
 8008236:	0004      	movs	r4, r0
  if(frRetStatus == FLS_RW_OK)
 8008238:	2c00      	cmp	r4, #0
 800823a:	d120      	bne.n	800827e <FlashWrite+0x76>
    HAL_FLASHEx_DATAEEPROM_Unlock();
 800823c:	f7fe f92e 	bl	800649c <HAL_FLASHEx_DATAEEPROM_Unlock>
		for(i=0; i<cNbBytes; i++)
 8008240:	0025      	movs	r5, r4
    temp_word = 0;
 8008242:	0022      	movs	r2, r4
		for(i=0; i<cNbBytes; i++)
 8008244:	42b5      	cmp	r5, r6
 8008246:	d218      	bcs.n	800827a <FlashWrite+0x72>
      temp_word |= ((uint32_t)pcBuffer[i])<<(24-(8*count4));
 8008248:	2103      	movs	r1, #3
 800824a:	9b01      	ldr	r3, [sp, #4]
 800824c:	43a9      	bics	r1, r5
 800824e:	5d5b      	ldrb	r3, [r3, r5]
 8008250:	00c9      	lsls	r1, r1, #3
 8008252:	408b      	lsls	r3, r1
 8008254:	2003      	movs	r0, #3
 8008256:	431a      	orrs	r2, r3
      if((i == cNbBytes-1) || count4 == 3 )/* Write every 4 bytes or if bytes in args are less than 4 */
 8008258:	1e73      	subs	r3, r6, #1
 800825a:	4028      	ands	r0, r5
 800825c:	429d      	cmp	r5, r3
 800825e:	d001      	beq.n	8008264 <FlashWrite+0x5c>
 8008260:	2803      	cmp	r0, #3
 8008262:	d10e      	bne.n	8008282 <FlashWrite+0x7a>
      pageIdx = (i/4)*4; 	/* Every 4 bytes writes page */
 8008264:	08a9      	lsrs	r1, r5, #2
	  if (HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAM_WORD, nAddress+pageIdx, temp_word) == HAL_OK)
 8008266:	0089      	lsls	r1, r1, #2
 8008268:	2002      	movs	r0, #2
 800826a:	19c9      	adds	r1, r1, r7
 800826c:	f7fe f94a 	bl	8006504 <HAL_FLASHEx_DATAEEPROM_Program>
 8008270:	1e02      	subs	r2, r0, #0
 8008272:	d006      	beq.n	8008282 <FlashWrite+0x7a>
	    error_code = HAL_FLASH_GetError();
 8008274:	f7fe f8d0 	bl	8006418 <HAL_FLASH_GetError>
	    frRetStatus = FLS_RW_ERROR;
 8008278:	2401      	movs	r4, #1
    HAL_FLASHEx_DATAEEPROM_Lock();
 800827a:	f7fe f927 	bl	80064cc <HAL_FLASHEx_DATAEEPROM_Lock>
}
 800827e:	0020      	movs	r0, r4
 8008280:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
		for(i=0; i<cNbBytes; i++)
 8008282:	3501      	adds	r5, #1
 8008284:	b2ed      	uxtb	r5, r5
 8008286:	e7dd      	b.n	8008244 <FlashWrite+0x3c>
  if (eraseBeforeWrite) {
 8008288:	2b00      	cmp	r3, #0
 800828a:	d1d1      	bne.n	8008230 <FlashWrite+0x28>
    frRetStatus = FLS_RW_ERROR;
 800828c:	2401      	movs	r4, #1
  return frRetStatus;
 800828e:	e7f6      	b.n	800827e <FlashWrite+0x76>

08008290 <MCU_API_get_device_id_and_payload_encryption_flag>:
{
	_encryptedPayload = ePayload;
}

sfx_u8 MCU_API_get_device_id_and_payload_encryption_flag(sfx_u8 dev_id[ID_LENGTH], sfx_bool *payload_encryption_enabled)
{
 8008290:	b510      	push	{r4, lr}
 8008292:	000c      	movs	r4, r1
	//printf("MCU encryption_flag IN\n\r");
	enc_utils_get_id(dev_id);
 8008294:	f7f8 fcee 	bl	8000c74 <enc_utils_get_id>
	(*payload_encryption_enabled) = _encryptedPayload;
 8008298:	4b02      	ldr	r3, [pc, #8]	; (80082a4 <MCU_API_get_device_id_and_payload_encryption_flag+0x14>)
	//printf("MCU encryption_flag OUT\n\r");
	return SFX_ERR_NONE;
}
 800829a:	2000      	movs	r0, #0
	(*payload_encryption_enabled) = _encryptedPayload;
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	7023      	strb	r3, [r4, #0]
}
 80082a0:	bd10      	pop	{r4, pc}
 80082a2:	46c0      	nop			; (mov r8, r8)
 80082a4:	200003e8 	.word	0x200003e8

080082a8 <MCU_API_get_initial_pac>:

sfx_u8 MCU_API_get_initial_pac(sfx_u8 initial_pac[PAC_LENGTH])
{
 80082a8:	b510      	push	{r4, lr}
	// printf("MCU_API_get_initial_pac IN\n\r");
	enc_utils_get_initial_pac(initial_pac);
 80082aa:	f7f8 fcf4 	bl	8000c96 <enc_utils_get_initial_pac>
	//printf("MCU_API_get_initial_pac OUT\n\r");
	return SFX_ERR_NONE;
}
 80082ae:	2000      	movs	r0, #0
 80082b0:	bd10      	pop	{r4, pc}
	...

080082b4 <MCU_API_malloc>:
{
	//printf("MCU_API_malloc IN\n\r");

	static sfx_u32 mem[500/4];

	if(size>500)
 80082b4:	22fa      	movs	r2, #250	; 0xfa
	{
		//printf("MCU_API_malloc OUT\n\r");
		return MCU_ERR_API_MALLOC;
 80082b6:	2311      	movs	r3, #17
	if(size>500)
 80082b8:	0052      	lsls	r2, r2, #1
 80082ba:	4290      	cmp	r0, r2
 80082bc:	d802      	bhi.n	80082c4 <MCU_API_malloc+0x10>
	}
	else
	{
		(*returned_pointer)=(sfx_u8*)mem;
 80082be:	4b02      	ldr	r3, [pc, #8]	; (80082c8 <MCU_API_malloc+0x14>)
 80082c0:	600b      	str	r3, [r1, #0]
	}

	//printf("MCU_API_malloc OUT\n\r");

	return SFX_ERR_NONE;
 80082c2:	2300      	movs	r3, #0
}
 80082c4:	0018      	movs	r0, r3
 80082c6:	4770      	bx	lr
 80082c8:	200003ec 	.word	0x200003ec

080082cc <MCU_API_get_nv_mem>:

sfx_u8 MCU_API_get_nv_mem(sfx_u8 read_data[SFX_NVMEM_BLOCK_SIZE])
{
 80082cc:	b510      	push	{r4, lr}
	//printf("MCU_API_get_nv_mem IN\n\r");

	/* Read data */
	NVM_RW_RESULTS res = NVM_ReadRecord((uint8_t *)read_data, SFX_NVMEM_BLOCK_SIZE);
 80082ce:	2107      	movs	r1, #7
 80082d0:	f000 f86c 	bl	80083ac <NVM_ReadRecord>

	//printf("MCU_API_get_nv_mem OUT\n\r");
	return res;
}
 80082d4:	bd10      	pop	{r4, pc}

080082d6 <MCU_API_set_nv_mem>:

sfx_u8 MCU_API_set_nv_mem(sfx_u8 data_to_write[SFX_NVMEM_BLOCK_SIZE])
{
 80082d6:	b510      	push	{r4, lr}
	//printf("MCU_API_set_nv_mem IN\n\r");

	/* Write data */
	NVM_RW_RESULTS res = NVM_WriteRecord((uint8_t *)data_to_write, SFX_NVMEM_BLOCK_SIZE);
 80082d8:	2107      	movs	r1, #7
 80082da:	f000 f8cd 	bl	8008478 <NVM_WriteRecord>

	//printf("MCU_API_set_nv_mem OUT\n\r");
	return res;
}
 80082de:	bd10      	pop	{r4, pc}

080082e0 <MCU_API_free>:
{
	//printf("MCU_API_free IN\n\r");
	//printf("MCU_API_free OUT\n\r");

	return SFX_ERR_NONE;
}
 80082e0:	2000      	movs	r0, #0
 80082e2:	4770      	bx	lr

080082e4 <MCU_API_get_voltage_temperature>:

sfx_u8 MCU_API_get_voltage_temperature(sfx_u16 *voltage_idle, sfx_u16 *voltage_tx, sfx_s16 *temperature) {
 80082e4:	0003      	movs	r3, r0
	(*temperature)=(sfx_s16)temp*10;

	HT_setVddTx(0);
#else

	(*voltage_idle)=0;
 80082e6:	2000      	movs	r0, #0
 80082e8:	8018      	strh	r0, [r3, #0]
	(*voltage_tx)=0;
 80082ea:	8008      	strh	r0, [r1, #0]
	(*temperature)=0;
 80082ec:	8010      	strh	r0, [r2, #0]

#endif

	return SFX_ERR_NONE;
}
 80082ee:	4770      	bx	lr

080082f0 <MCU_API_delay>:

	//printf("priv_ST_MCU_API_delay OUT\n\r");
}

sfx_u8 MCU_API_delay(sfx_delay_t delay_type)
{
 80082f0:	b510      	push	{r4, lr}
	switch(delay_type)
 80082f2:	2802      	cmp	r0, #2
 80082f4:	d00b      	beq.n	800830e <MCU_API_delay+0x1e>
 80082f6:	d901      	bls.n	80082fc <MCU_API_delay+0xc>
 80082f8:	2803      	cmp	r0, #3
 80082fa:	d106      	bne.n	800830a <MCU_API_delay+0x1a>
		/* ramping should be considered in the ramp up/down:
    since we have 72 samples in the ramp
    (18ms for each ramp, we need to compensate 36 ms)
    Moreover we have also 6ms of silence (2 before and 4 after packet)
		 */
		priv_ST_MCU_API_delay(500-2*ST_RF_API_get_ramp_duration());
 80082fc:	f000 fe3a 	bl	8008f74 <ST_RF_API_get_ramp_duration>
 8008300:	23fa      	movs	r3, #250	; 0xfa
		break;
	case SFX_DLY_OOB_ACK:
		priv_ST_MCU_API_delay(2000-2*ST_RF_API_get_ramp_duration());
 8008302:	1a18      	subs	r0, r3, r0
 8008304:	0040      	lsls	r0, r0, #1
	HAL_Delay(delay_ms);
 8008306:	f7fd fc1d 	bl	8005b44 <HAL_Delay>
	}

	//printf("MCU_API_delay OUT\n\r");

	return SFX_ERR_NONE;
}
 800830a:	2000      	movs	r0, #0
 800830c:	bd10      	pop	{r4, pc}
		priv_ST_MCU_API_delay(2000-2*ST_RF_API_get_ramp_duration());
 800830e:	f000 fe31 	bl	8008f74 <ST_RF_API_get_ramp_duration>
 8008312:	23fa      	movs	r3, #250	; 0xfa
 8008314:	009b      	lsls	r3, r3, #2
 8008316:	e7f4      	b.n	8008302 <MCU_API_delay+0x12>

08008318 <MCU_API_aes_128_cbc_encrypt>:
sfx_u8 MCU_API_aes_128_cbc_encrypt(sfx_u8 *encrypted_data,
		sfx_u8 *data_to_encrypt,
		sfx_u8 aes_block_len,
		sfx_u8 key[16],
		sfx_credentials_use_key_t use_key)
{
 8008318:	b513      	push	{r0, r1, r4, lr}
 800831a:	ac04      	add	r4, sp, #16
 800831c:	7824      	ldrb	r4, [r4, #0]
	/* Let the retriever encrypts the requested buffer using the ID_KEY_RETRIEVER function.
  The retriever knows the KEY of this node. */
	//printf("MCU_API_aes_128_cbc_encrypt IN\n\r");

	enc_utils_encrypt(encrypted_data, data_to_encrypt, aes_block_len, key, use_key);
 800831e:	9400      	str	r4, [sp, #0]
 8008320:	f7f8 fc75 	bl	8000c0e <enc_utils_encrypt>

	//printf("MCU_API_aes_128_cbc_encrypt OUT\n\r");

	return SFX_ERR_NONE;
}
 8008324:	2000      	movs	r0, #0
 8008326:	bd16      	pop	{r1, r2, r4, pc}

08008328 <MCU_API_get_version>:

sfx_u8 MCU_API_get_version(sfx_u8 **version, sfx_u8 *size)
{
	(*size) = sizeof(_libVersion);
 8008328:	2307      	movs	r3, #7
 800832a:	700b      	strb	r3, [r1, #0]
	(*version) = (sfx_u8*)_libVersion;
 800832c:	4b01      	ldr	r3, [pc, #4]	; (8008334 <MCU_API_get_version+0xc>)
 800832e:	6003      	str	r3, [r0, #0]

	return SFX_ERR_NONE;
}
 8008330:	2000      	movs	r0, #0
 8008332:	4770      	bx	lr
 8008334:	0800afcd 	.word	0x0800afcd

08008338 <MCU_API_report_test_result>:
	// use this function to : print output result : status and rssi on uart if you have one or any link is available on device
	// or use a gpio to indicate at least the status
	// or to send a message over the air using any link to report the status with rssi
	// you could also use the RF part in specific modulation (ook ask or gfsk or else to return status and rssi
	return SFX_ERR_NONE;
}
 8008338:	2000      	movs	r0, #0
 800833a:	4770      	bx	lr

0800833c <GetNVMBoardDataAddress>:
  return _nvmType;
}

uint32_t GetNVMBoardDataAddress()
{
  return _boardDataAddress;
 800833c:	4b01      	ldr	r3, [pc, #4]	; (8008344 <GetNVMBoardDataAddress+0x8>)
 800833e:	6818      	ldr	r0, [r3, #0]
}
 8008340:	4770      	bx	lr
 8008342:	46c0      	nop			; (mov r8, r8)
 8008344:	200005e4 	.word	0x200005e4

08008348 <NVM_Read>:
{
  return _sfxDataAddress;
}

NVM_RW_RESULTS NVM_Read(uint32_t nAddress, uint8_t cNbBytes, uint8_t* pcBuffer)
{
 8008348:	b510      	push	{r4, lr}
  NVM_RW_RESULTS tRet = NVM_RW_OK;
  FLS_RW_StatusTypeDef flRet = FLS_RW_OK;

  flRet = (FLS_RW_StatusTypeDef)_nvmReadOperation(nAddress, cNbBytes, pcBuffer);
 800834a:	f7ff ff03 	bl	8008154 <FlashRead>

  if(flRet != FLS_RW_OK)
 800834e:	2800      	cmp	r0, #0
 8008350:	d000      	beq.n	8008354 <NVM_Read+0xc>
    tRet = NVM_READ_ERROR;
 8008352:	2002      	movs	r0, #2

  return tRet;
}
 8008354:	bd10      	pop	{r4, pc}

08008356 <NVM_Write>:

NVM_RW_RESULTS NVM_Write(uint32_t nAddress, uint8_t cNbBytes, uint8_t* pcBuffer, NVM_WRITE_MODE writeMode)
{
 8008356:	b510      	push	{r4, lr}
  NVM_RW_RESULTS tRet = NVM_RW_OK;
  FLS_RW_StatusTypeDef flRet = FLS_RW_OK;

  flRet = (FLS_RW_StatusTypeDef)_nvmWriteOperation(nAddress, cNbBytes, pcBuffer, writeMode);
 8008358:	f7ff ff56 	bl	8008208 <FlashWrite>

  if(flRet != FLS_RW_OK)
 800835c:	1e43      	subs	r3, r0, #1
 800835e:	4198      	sbcs	r0, r3
    tRet = NVM_WRITE_ERROR;

  return tRet;
 8008360:	b2c0      	uxtb	r0, r0
}
 8008362:	bd10      	pop	{r4, pc}

08008364 <_writeRecordInternal>:
{
 8008364:	b573      	push	{r0, r1, r4, r5, r6, lr}
    wrState = NVM_BLOCK_INVALID_2;
 8008366:	2300      	movs	r3, #0
{
 8008368:	0015      	movs	r5, r2
    wrState = NVM_BLOCK_INVALID_2;
 800836a:	22fe      	movs	r2, #254	; 0xfe
{
 800836c:	000e      	movs	r6, r1
    wrState = NVM_BLOCK_INVALID_2;
 800836e:	9200      	str	r2, [sp, #0]
 8008370:	9301      	str	r3, [sp, #4]
    tRet = NVM_Write(addr, BLOCK_HEADER_SIZE/2, (uint8_t*)&wrState, NVM_WRITE_MODE_ERASE);
 8008372:	2104      	movs	r1, #4
 8008374:	2301      	movs	r3, #1
 8008376:	466a      	mov	r2, sp
{
 8008378:	0004      	movs	r4, r0
    tRet = NVM_Write(addr, BLOCK_HEADER_SIZE/2, (uint8_t*)&wrState, NVM_WRITE_MODE_ERASE);
 800837a:	f7ff ffec 	bl	8008356 <NVM_Write>
 800837e:	1e03      	subs	r3, r0, #0
  if(tRet == NVM_RW_OK)
 8008380:	d111      	bne.n	80083a6 <_writeRecordInternal+0x42>
    tRet = NVM_Write(addr+BLOCK_HEADER_SIZE, recordSize, (uint8_t *)nvmRecord, NVM_WRITE_MODE_WRITEOVER);
 8008382:	0020      	movs	r0, r4
 8008384:	0032      	movs	r2, r6
 8008386:	b2e9      	uxtb	r1, r5
 8008388:	3008      	adds	r0, #8
 800838a:	f7ff ffe4 	bl	8008356 <NVM_Write>
 800838e:	1e03      	subs	r3, r0, #0
  if(tRet == NVM_RW_OK)
 8008390:	d109      	bne.n	80083a6 <_writeRecordInternal+0x42>
    wrState = NVM_BLOCK_VALID_2;
 8008392:	20fc      	movs	r0, #252	; 0xfc
 8008394:	2100      	movs	r1, #0
    tRet = NVM_Write(addr+BLOCK_HEADER_SIZE/2, BLOCK_HEADER_SIZE/2, (uint8_t*)&wrState, NVM_WRITE_MODE_WRITEOVER);
 8008396:	466a      	mov	r2, sp
    wrState = NVM_BLOCK_VALID_2;
 8008398:	9000      	str	r0, [sp, #0]
 800839a:	9101      	str	r1, [sp, #4]
    tRet = NVM_Write(addr+BLOCK_HEADER_SIZE/2, BLOCK_HEADER_SIZE/2, (uint8_t*)&wrState, NVM_WRITE_MODE_WRITEOVER);
 800839c:	2104      	movs	r1, #4
 800839e:	1d20      	adds	r0, r4, #4
 80083a0:	f7ff ffd9 	bl	8008356 <NVM_Write>
 80083a4:	0003      	movs	r3, r0
}
 80083a6:	0018      	movs	r0, r3
 80083a8:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
	...

080083ac <NVM_ReadRecord>:
NVM_RW_RESULTS NVM_ReadRecord(uint8_t* nvmRecord, uint32_t recordSize)
{
  NVM_RW_RESULTS tRet = NVM_RW_OK;

  uint64_t currentBlockState;
  currentBlockState = NVM_BLOCK_INVALID;
 80083ac:	2300      	movs	r3, #0
 80083ae:	22fe      	movs	r2, #254	; 0xfe
{
 80083b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80083b2:	b085      	sub	sp, #20
  currentBlockState = NVM_BLOCK_INVALID;
 80083b4:	9202      	str	r2, [sp, #8]
 80083b6:	9303      	str	r3, [sp, #12]

  _blockPointer = _sfxDataAddress;
 80083b8:	4b24      	ldr	r3, [pc, #144]	; (800844c <NVM_ReadRecord+0xa0>)
 80083ba:	4c25      	ldr	r4, [pc, #148]	; (8008450 <NVM_ReadRecord+0xa4>)
 80083bc:	681b      	ldr	r3, [r3, #0]
{
 80083be:	0006      	movs	r6, r0
  _blockPointer = _sfxDataAddress;
 80083c0:	6023      	str	r3, [r4, #0]

  if (_nvmType == NVM_TYPE_FLASH)
 80083c2:	4b24      	ldr	r3, [pc, #144]	; (8008454 <NVM_ReadRecord+0xa8>)
{
 80083c4:	000d      	movs	r5, r1
  if (_nvmType == NVM_TYPE_FLASH)
 80083c6:	781b      	ldrb	r3, [r3, #0]
 80083c8:	2b01      	cmp	r3, #1
 80083ca:	d13b      	bne.n	8008444 <NVM_ReadRecord+0x98>
  {
    while(currentBlockState != NVM_BLOCK_EMPTY)
    {
	if(NVM_Read(_blockPointer, BLOCK_HEADER_SIZE, (uint8_t*)&currentBlockState) == NVM_RW_OK)
 80083cc:	2108      	movs	r1, #8
 80083ce:	6820      	ldr	r0, [r4, #0]
 80083d0:	aa02      	add	r2, sp, #8
 80083d2:	f7ff ffb9 	bl	8008348 <NVM_Read>
 80083d6:	2800      	cmp	r0, #0
 80083d8:	d11a      	bne.n	8008410 <NVM_ReadRecord+0x64>
	{
	  if(_blockPointer + (BLOCK_BODY_SIZE+BLOCK_HEADER_SIZE) == (uint32_t)FLASH_USER_END_ADDR)
 80083da:	9b02      	ldr	r3, [sp, #8]
 80083dc:	6822      	ldr	r2, [r4, #0]
 80083de:	9301      	str	r3, [sp, #4]
 80083e0:	2380      	movs	r3, #128	; 0x80
 80083e2:	469c      	mov	ip, r3
 80083e4:	4f1c      	ldr	r7, [pc, #112]	; (8008458 <NVM_ReadRecord+0xac>)
 80083e6:	3210      	adds	r2, #16
 80083e8:	44bc      	add	ip, r7
 80083ea:	9903      	ldr	r1, [sp, #12]
 80083ec:	4562      	cmp	r2, ip
 80083ee:	d005      	beq.n	80083fc <NVM_ReadRecord+0x50>
	    break;
	  else
	    _blockPointer += BLOCK_BODY_SIZE+BLOCK_HEADER_SIZE;
 80083f0:	6822      	ldr	r2, [r4, #0]
    while(currentBlockState != NVM_BLOCK_EMPTY)
 80083f2:	9b01      	ldr	r3, [sp, #4]
	    _blockPointer += BLOCK_BODY_SIZE+BLOCK_HEADER_SIZE;
 80083f4:	3210      	adds	r2, #16
 80083f6:	6022      	str	r2, [r4, #0]
    while(currentBlockState != NVM_BLOCK_EMPTY)
 80083f8:	430b      	orrs	r3, r1
 80083fa:	d1e7      	bne.n	80083cc <NVM_ReadRecord+0x20>
	}
    }

    if(tRet == NVM_RW_OK)
    {
	while(currentBlockState != NVM_BLOCK_VALID && tRet == NVM_RW_OK)
 80083fc:	9b02      	ldr	r3, [sp, #8]
 80083fe:	2bfe      	cmp	r3, #254	; 0xfe
 8008400:	d102      	bne.n	8008408 <NVM_ReadRecord+0x5c>
 8008402:	9b03      	ldr	r3, [sp, #12]
 8008404:	2bfc      	cmp	r3, #252	; 0xfc
 8008406:	d014      	beq.n	8008432 <NVM_ReadRecord+0x86>
 8008408:	2800      	cmp	r0, #0
 800840a:	d003      	beq.n	8008414 <NVM_ReadRecord+0x68>
	  tRet = NVM_Read(_blockPointer, BLOCK_HEADER_SIZE, (uint8_t*)&currentBlockState);
	}

	if(tRet == NVM_RW_OK)
	  tRet = NVM_Read(_blockPointer+BLOCK_HEADER_SIZE, recordSize, (uint8_t *)nvmRecord);
	else if (tRet != NVM_NO_RECORDS)
 800840c:	2806      	cmp	r0, #6
 800840e:	d007      	beq.n	8008420 <NVM_ReadRecord+0x74>
	  tRet = NVM_READ_RECORD_ERROR;
 8008410:	2004      	movs	r0, #4
 8008412:	e006      	b.n	8008422 <NVM_ReadRecord+0x76>
	  _blockPointer -= (BLOCK_BODY_SIZE+BLOCK_HEADER_SIZE);
 8008414:	6823      	ldr	r3, [r4, #0]
 8008416:	3b10      	subs	r3, #16
 8008418:	6023      	str	r3, [r4, #0]
	  if(_blockPointer < (uint32_t)FLASH_USER_START_ADDR)
 800841a:	6823      	ldr	r3, [r4, #0]
 800841c:	429f      	cmp	r7, r3
 800841e:	d902      	bls.n	8008426 <NVM_ReadRecord+0x7a>
	  tRet = NVM_READ_RECORD_ERROR;
 8008420:	2006      	movs	r0, #6
  }
  else
    tRet = NVM_Read(_blockPointer, recordSize, (uint8_t *)nvmRecord);

  return tRet;
}
 8008422:	b005      	add	sp, #20
 8008424:	bdf0      	pop	{r4, r5, r6, r7, pc}
	  tRet = NVM_Read(_blockPointer, BLOCK_HEADER_SIZE, (uint8_t*)&currentBlockState);
 8008426:	2108      	movs	r1, #8
 8008428:	6820      	ldr	r0, [r4, #0]
 800842a:	aa02      	add	r2, sp, #8
 800842c:	f7ff ff8c 	bl	8008348 <NVM_Read>
 8008430:	e7e4      	b.n	80083fc <NVM_ReadRecord+0x50>
	if(tRet == NVM_RW_OK)
 8008432:	2800      	cmp	r0, #0
 8008434:	d1ea      	bne.n	800840c <NVM_ReadRecord+0x60>
	  tRet = NVM_Read(_blockPointer+BLOCK_HEADER_SIZE, recordSize, (uint8_t *)nvmRecord);
 8008436:	6820      	ldr	r0, [r4, #0]
 8008438:	b2e9      	uxtb	r1, r5
 800843a:	3008      	adds	r0, #8
    tRet = NVM_Read(_blockPointer, recordSize, (uint8_t *)nvmRecord);
 800843c:	0032      	movs	r2, r6
 800843e:	f7ff ff83 	bl	8008348 <NVM_Read>
 8008442:	e7ee      	b.n	8008422 <NVM_ReadRecord+0x76>
 8008444:	6820      	ldr	r0, [r4, #0]
 8008446:	b2c9      	uxtb	r1, r1
 8008448:	e7f8      	b.n	800843c <NVM_ReadRecord+0x90>
 800844a:	46c0      	nop			; (mov r8, r8)
 800844c:	200005ec 	.word	0x200005ec
 8008450:	200005e0 	.word	0x200005e0
 8008454:	200005e9 	.word	0x200005e9
 8008458:	08080080 	.word	0x08080080

0800845c <eraseAllSector>:

void eraseAllSector(void) { 
	uint32_t aux = _blockPointer;
 800845c:	4b05      	ldr	r3, [pc, #20]	; (8008474 <eraseAllSector+0x18>)
void eraseAllSector(void) { 
 800845e:	b570      	push	{r4, r5, r6, lr}
	uint32_t aux = _blockPointer;
 8008460:	681c      	ldr	r4, [r3, #0]
	
	for(uint8_t i = 0; i < MAX_NO_OF_PAGES; i++) {
 8008462:	0025      	movs	r5, r4
 8008464:	3580      	adds	r5, #128	; 0x80
		DataEepromErase(aux);
 8008466:	0020      	movs	r0, r4
		aux += 4;
 8008468:	3404      	adds	r4, #4
		DataEepromErase(aux);
 800846a:	f7ff fea5 	bl	80081b8 <DataEepromErase>
	for(uint8_t i = 0; i < MAX_NO_OF_PAGES; i++) {
 800846e:	42a5      	cmp	r5, r4
 8008470:	d1f9      	bne.n	8008466 <eraseAllSector+0xa>
	}
}
 8008472:	bd70      	pop	{r4, r5, r6, pc}
 8008474:	200005e0 	.word	0x200005e0

08008478 <NVM_WriteRecord>:

NVM_RW_RESULTS NVM_WriteRecord(uint8_t* nvmRecord, uint32_t recordSize)
{
 8008478:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  NVM_RW_RESULTS tRet = NVM_RW_OK;
  uint64_t currentBlockState;
  currentBlockState = NVM_BLOCK_INVALID;
 800847a:	2300      	movs	r3, #0
 800847c:	22fe      	movs	r2, #254	; 0xfe
 800847e:	9200      	str	r2, [sp, #0]
 8008480:	9301      	str	r3, [sp, #4]

  _blockPointer = _sfxDataAddress;
 8008482:	4b18      	ldr	r3, [pc, #96]	; (80084e4 <NVM_WriteRecord+0x6c>)
 8008484:	4c18      	ldr	r4, [pc, #96]	; (80084e8 <NVM_WriteRecord+0x70>)
 8008486:	681b      	ldr	r3, [r3, #0]
{
 8008488:	0006      	movs	r6, r0
  _blockPointer = _sfxDataAddress;
 800848a:	6023      	str	r3, [r4, #0]
	
  if (_nvmType == NVM_TYPE_FLASH)
 800848c:	4b17      	ldr	r3, [pc, #92]	; (80084ec <NVM_WriteRecord+0x74>)
{
 800848e:	000d      	movs	r5, r1
  if (_nvmType == NVM_TYPE_FLASH)
 8008490:	781b      	ldrb	r3, [r3, #0]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d11d      	bne.n	80084d2 <NVM_WriteRecord+0x5a>
  {
    while(currentBlockState != NVM_BLOCK_EMPTY)
    {

			if(_blockPointer != (uint32_t)FLASH_USER_END_ADDR) {
 8008496:	4f16      	ldr	r7, [pc, #88]	; (80084f0 <NVM_WriteRecord+0x78>)
 8008498:	6823      	ldr	r3, [r4, #0]
 800849a:	4a16      	ldr	r2, [pc, #88]	; (80084f4 <NVM_WriteRecord+0x7c>)
 800849c:	4293      	cmp	r3, r2
 800849e:	d014      	beq.n	80084ca <NVM_WriteRecord+0x52>
				if(NVM_Read(_blockPointer, BLOCK_HEADER_SIZE, (uint8_t *)&currentBlockState) == NVM_RW_OK) {
 80084a0:	466a      	mov	r2, sp
 80084a2:	2108      	movs	r1, #8
 80084a4:	6820      	ldr	r0, [r4, #0]
 80084a6:	f7ff ff4f 	bl	8008348 <NVM_Read>
 80084aa:	2800      	cmp	r0, #0
 80084ac:	d118      	bne.n	80084e0 <NVM_WriteRecord+0x68>
					if(currentBlockState == NVM_BLOCK_EMPTY) {
 80084ae:	9b00      	ldr	r3, [sp, #0]
 80084b0:	9a01      	ldr	r2, [sp, #4]
 80084b2:	4313      	orrs	r3, r2
 80084b4:	d105      	bne.n	80084c2 <NVM_WriteRecord+0x4a>
					break;
				}
			} else {
			_blockPointer = (uint32_t)FLASH_USER_START_ADDR;
			eraseAllSector();	
			tRet = _writeRecordInternal(_blockPointer, nvmRecord, recordSize);
 80084b6:	002a      	movs	r2, r5
 80084b8:	0031      	movs	r1, r6
 80084ba:	6820      	ldr	r0, [r4, #0]
 80084bc:	f7ff ff52 	bl	8008364 <_writeRecordInternal>
  }
  else
    tRet = NVM_Write(_blockPointer, recordSize, nvmRecord, NVM_WRITE_MODE_WRITEOVER);

  return tRet;
}
 80084c0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
					_blockPointer += (BLOCK_BODY_SIZE+BLOCK_HEADER_SIZE);
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	3310      	adds	r3, #16
 80084c6:	6023      	str	r3, [r4, #0]
    while(currentBlockState != NVM_BLOCK_EMPTY)
 80084c8:	e7e6      	b.n	8008498 <NVM_WriteRecord+0x20>
			_blockPointer = (uint32_t)FLASH_USER_START_ADDR;
 80084ca:	6027      	str	r7, [r4, #0]
			eraseAllSector();	
 80084cc:	f7ff ffc6 	bl	800845c <eraseAllSector>
 80084d0:	e7f1      	b.n	80084b6 <NVM_WriteRecord+0x3e>
    tRet = NVM_Write(_blockPointer, recordSize, nvmRecord, NVM_WRITE_MODE_WRITEOVER);
 80084d2:	2300      	movs	r3, #0
 80084d4:	0032      	movs	r2, r6
 80084d6:	6820      	ldr	r0, [r4, #0]
 80084d8:	b2c9      	uxtb	r1, r1
 80084da:	f7ff ff3c 	bl	8008356 <NVM_Write>
 80084de:	e7ef      	b.n	80084c0 <NVM_WriteRecord+0x48>
					tRet = NVM_READ_RECORD_ERROR;
 80084e0:	2004      	movs	r0, #4
 80084e2:	e7ed      	b.n	80084c0 <NVM_WriteRecord+0x48>
 80084e4:	200005ec 	.word	0x200005ec
 80084e8:	200005e0 	.word	0x200005e0
 80084ec:	200005e9 	.word	0x200005e9
 80084f0:	08080080 	.word	0x08080080
 80084f4:	08080100 	.word	0x08080100

080084f8 <SetNVMInitial>:
{
 80084f8:	b507      	push	{r0, r1, r2, lr}
  _nvmType = config->nvmType;
 80084fa:	4b10      	ldr	r3, [pc, #64]	; (800853c <SetNVMInitial+0x44>)
 80084fc:	7802      	ldrb	r2, [r0, #0]
  _sfxDataAddress = config->sfxDataAddress ;
 80084fe:	6881      	ldr	r1, [r0, #8]
  _nvmType = config->nvmType;
 8008500:	701a      	strb	r2, [r3, #0]
  _sfxDataAddress = config->sfxDataAddress ;
 8008502:	4a0f      	ldr	r2, [pc, #60]	; (8008540 <SetNVMInitial+0x48>)
 8008504:	6011      	str	r1, [r2, #0]
  _boardDataAddress = config->boardDataAddress;
 8008506:	4a0f      	ldr	r2, [pc, #60]	; (8008544 <SetNVMInitial+0x4c>)
 8008508:	6841      	ldr	r1, [r0, #4]
 800850a:	6011      	str	r1, [r2, #0]
  _msgSq = config->messageSequenceNumber;
 800850c:	7b01      	ldrb	r1, [r0, #12]
 800850e:	4a0e      	ldr	r2, [pc, #56]	; (8008548 <SetNVMInitial+0x50>)
 8008510:	7011      	strb	r1, [r2, #0]
  if(_nvmType == NVM_TYPE_FLASH)
 8008512:	781b      	ldrb	r3, [r3, #0]
 8008514:	2b01      	cmp	r3, #1
 8008516:	d110      	bne.n	800853a <SetNVMInitial+0x42>
    if (NVM_ReadRecord(cleanBuf, BLOCK_BODY_SIZE) == NVM_NO_RECORDS)
 8008518:	2108      	movs	r1, #8
 800851a:	4668      	mov	r0, sp
 800851c:	f7ff ff46 	bl	80083ac <NVM_ReadRecord>
 8008520:	2806      	cmp	r0, #6
 8008522:	d10a      	bne.n	800853a <SetNVMInitial+0x42>
	memset(cleanBuf, FLASH_ERASE_VALUE, BLOCK_BODY_SIZE);
 8008524:	2100      	movs	r1, #0
 8008526:	2208      	movs	r2, #8
 8008528:	4668      	mov	r0, sp
 800852a:	f001 f81e 	bl	800956a <memset>
	eraseAllSector();
 800852e:	f7ff ff95 	bl	800845c <eraseAllSector>
	NVM_WriteRecord(&cleanBuf[0], BLOCK_BODY_SIZE);
 8008532:	2108      	movs	r1, #8
 8008534:	4668      	mov	r0, sp
 8008536:	f7ff ff9f 	bl	8008478 <NVM_WriteRecord>
}
 800853a:	bd07      	pop	{r0, r1, r2, pc}
 800853c:	200005e9 	.word	0x200005e9
 8008540:	200005ec 	.word	0x200005ec
 8008544:	200005e4 	.word	0x200005e4
 8008548:	200005e8 	.word	0x200005e8

0800854c <priv_ST_MANUF_WriteRegisters>:
	priv_ST_MANUF_SpiRaw(2,tx_spi_buffer,NULL);
}

/* write registers function */
static void priv_ST_MANUF_WriteRegisters(uint8_t address, uint8_t n_bytes, uint8_t* buffer)
{
 800854c:	b510      	push	{r4, lr}
 800854e:	b086      	sub	sp, #24
	uint8_t tx_spi_buffer[24];

	tx_spi_buffer[0]=0x00;
 8008550:	466c      	mov	r4, sp
 8008552:	2300      	movs	r3, #0
	tx_spi_buffer[1]=address;
 8008554:	7060      	strb	r0, [r4, #1]
	tx_spi_buffer[0]=0x00;
 8008556:	7023      	strb	r3, [r4, #0]

	for(uint32_t i=0;i<n_bytes;i++)
	{
		tx_spi_buffer[i+2]=buffer[i];
 8008558:	0018      	movs	r0, r3
 800855a:	5cd4      	ldrb	r4, [r2, r3]
 800855c:	4468      	add	r0, sp
	for(uint32_t i=0;i<n_bytes;i++)
 800855e:	3301      	adds	r3, #1
		tx_spi_buffer[i+2]=buffer[i];
 8008560:	7084      	strb	r4, [r0, #2]
	for(uint32_t i=0;i<n_bytes;i++)
 8008562:	4299      	cmp	r1, r3
 8008564:	d8f8      	bhi.n	8008558 <priv_ST_MANUF_WriteRegisters+0xc>
	}

	priv_ST_MANUF_SpiRaw(n_bytes+2,tx_spi_buffer,NULL);
 8008566:	2300      	movs	r3, #0
 8008568:	3102      	adds	r1, #2
 800856a:	b2c8      	uxtb	r0, r1
 800856c:	001a      	movs	r2, r3
 800856e:	4669      	mov	r1, sp
 8008570:	f7fc fe30 	bl	80051d4 <ST_MCU_API_SpiRaw>
}
 8008574:	b006      	add	sp, #24
 8008576:	bd10      	pop	{r4, pc}

08008578 <priv_ST_MANUF_tx_rf_dbpsk_init>:
#endif
}

/* radio configuration for TX and RX */
static void priv_ST_MANUF_tx_rf_dbpsk_init(sfx_modulation_type_t type)
{
 8008578:	b5f0      	push	{r4, r5, r6, r7, lr}
	return st_manuf_context->priv_xtal_freq;
 800857a:	4bbc      	ldr	r3, [pc, #752]	; (800886c <priv_ST_MANUF_tx_rf_dbpsk_init+0x2f4>)
	uint8_t mod_e = 0x00;
	uint8_t fdev_e = 0x00;
	uint8_t fdev_m = 0x00;
	uint8_t regs[3];

	if(f_dig>DIG_DOMAIN_XTAL_THRESH) {
 800857c:	4ebc      	ldr	r6, [pc, #752]	; (8008870 <priv_ST_MANUF_tx_rf_dbpsk_init+0x2f8>)
	return st_manuf_context->priv_xtal_freq;
 800857e:	69db      	ldr	r3, [r3, #28]
{
 8008580:	0007      	movs	r7, r0
 8008582:	b089      	sub	sp, #36	; 0x24
	if(f_dig>DIG_DOMAIN_XTAL_THRESH) {
 8008584:	42b3      	cmp	r3, r6
 8008586:	d900      	bls.n	800858a <priv_ST_MANUF_tx_rf_dbpsk_init+0x12>
		f_dig >>= 1;
 8008588:	085b      	lsrs	r3, r3, #1
	}

#if defined(FOR_ETSI) || defined(FOR_ARIB) || defined(FOR_ALL)
#if defined(FOR_ALL)
	if(type==SFX_DBPSK_100BPS)
 800858a:	2f01      	cmp	r7, #1
 800858c:	d000      	beq.n	8008590 <priv_ST_MANUF_tx_rf_dbpsk_init+0x18>
 800858e:	e0c3      	b.n	8008718 <priv_ST_MANUF_tx_rf_dbpsk_init+0x1a0>
		/* ETSI datarate is 100bps - chip datarate 500 (500*8/40=100) */

		/* modulation is POLAR | DR EXPONENT = 1 */
		mod_e=0x60|0x01;
		/* dr_num=(2**32)*500 */
		dr_m=(uint16_t)((uint64_t)0x1f400000000/f_dig-65536);
 8008590:	9300      	str	r3, [sp, #0]
 8008592:	2300      	movs	r3, #0
 8008594:	21fa      	movs	r1, #250	; 0xfa
 8008596:	9301      	str	r3, [sp, #4]
 8008598:	9a00      	ldr	r2, [sp, #0]
 800859a:	9b01      	ldr	r3, [sp, #4]
 800859c:	2000      	movs	r0, #0
 800859e:	0049      	lsls	r1, r1, #1
 80085a0:	f7fa f908 	bl	80027b4 <__aeabi_uldivmod>
 80085a4:	b283      	uxth	r3, r0

		/* understand if we are getting the nearest integer */
		uint64_t tgt1,tgt2;
		tgt1=(uint64_t)f_dig*((uint64_t)dr_m+65536);
 80085a6:	b282      	uxth	r2, r0
 80085a8:	2080      	movs	r0, #128	; 0x80
 80085aa:	2100      	movs	r1, #0
		dr_m=(uint16_t)((uint64_t)0x1f400000000/f_dig-65536);
 80085ac:	9304      	str	r3, [sp, #16]
		tgt1=(uint64_t)f_dig*((uint64_t)dr_m+65536);
 80085ae:	9b01      	ldr	r3, [sp, #4]
 80085b0:	0240      	lsls	r0, r0, #9
 80085b2:	1880      	adds	r0, r0, r2
 80085b4:	4159      	adcs	r1, r3
 80085b6:	9a00      	ldr	r2, [sp, #0]
 80085b8:	9b01      	ldr	r3, [sp, #4]
 80085ba:	f7fa f91b 	bl	80027f4 <__aeabi_lmul>
 80085be:	000b      	movs	r3, r1
		tgt2=(uint64_t)f_dig*((uint64_t)dr_m+1+65536);
		dr_m=((uint64_t)0x1f400000000-tgt1>tgt2-(uint64_t)0x1f400000000)?(dr_m+1):(dr_m);
 80085c0:	21fa      	movs	r1, #250	; 0xfa
		tgt1=(uint64_t)f_dig*((uint64_t)dr_m+65536);
 80085c2:	0002      	movs	r2, r0
		dr_m=((uint64_t)0x1f400000000-tgt1>tgt2-(uint64_t)0x1f400000000)?(dr_m+1):(dr_m);
 80085c4:	2000      	movs	r0, #0
 80085c6:	0049      	lsls	r1, r1, #1
 80085c8:	0004      	movs	r4, r0
 80085ca:	000d      	movs	r5, r1
 80085cc:	1aa4      	subs	r4, r4, r2
 80085ce:	419d      	sbcs	r5, r3
 80085d0:	9402      	str	r4, [sp, #8]
 80085d2:	9503      	str	r5, [sp, #12]
		tgt2=(uint64_t)f_dig*((uint64_t)dr_m+1+65536);
 80085d4:	9c00      	ldr	r4, [sp, #0]
 80085d6:	9d01      	ldr	r5, [sp, #4]
 80085d8:	18a4      	adds	r4, r4, r2
 80085da:	415d      	adcs	r5, r3
		dr_m=((uint64_t)0x1f400000000-tgt1>tgt2-(uint64_t)0x1f400000000)?(dr_m+1):(dr_m);
 80085dc:	1a24      	subs	r4, r4, r0
 80085de:	418d      	sbcs	r5, r1
 80085e0:	9b03      	ldr	r3, [sp, #12]
 80085e2:	42ab      	cmp	r3, r5
 80085e4:	d803      	bhi.n	80085ee <priv_ST_MANUF_tx_rf_dbpsk_init+0x76>
 80085e6:	d106      	bne.n	80085f6 <priv_ST_MANUF_tx_rf_dbpsk_init+0x7e>
 80085e8:	9b02      	ldr	r3, [sp, #8]
 80085ea:	42a3      	cmp	r3, r4
 80085ec:	d903      	bls.n	80085f6 <priv_ST_MANUF_tx_rf_dbpsk_init+0x7e>
 80085ee:	9b04      	ldr	r3, [sp, #16]
 80085f0:	3301      	adds	r3, #1
 80085f2:	b29b      	uxth	r3, r3
 80085f4:	9304      	str	r3, [sp, #16]
	return st_manuf_context->priv_xtal_freq;
 80085f6:	4c9d      	ldr	r4, [pc, #628]	; (800886c <priv_ST_MANUF_tx_rf_dbpsk_init+0x2f4>)
 80085f8:	69e3      	ldr	r3, [r4, #28]
 80085fa:	69e2      	ldr	r2, [r4, #28]

		if(privGetXtalFrequency()>DIG_DOMAIN_XTAL_THRESH)
 80085fc:	42b3      	cmp	r3, r6
 80085fe:	d932      	bls.n	8008666 <priv_ST_MANUF_tx_rf_dbpsk_init+0xee>
		{
			fdev_e=0;
			/* fdev_num=((2**22)*2000) */
			fdev_m=(uint8_t)((uint64_t)8388608000/privGetXtalFrequency());
 8008600:	20f4      	movs	r0, #244	; 0xf4
 8008602:	2300      	movs	r3, #0
 8008604:	2101      	movs	r1, #1
 8008606:	0600      	lsls	r0, r0, #24
 8008608:	f7fa f8d4 	bl	80027b4 <__aeabi_uldivmod>
 800860c:	0003      	movs	r3, r0
 800860e:	2700      	movs	r7, #0
 8008610:	b2c2      	uxtb	r2, r0
 8008612:	b2de      	uxtb	r6, r3
	return st_manuf_context->priv_xtal_freq;
 8008614:	69e0      	ldr	r0, [r4, #28]
 8008616:	69e3      	ldr	r3, [r4, #28]
			/* understand if we are getting the nearest integer */
			uint64_t tgt1,tgt2;
			tgt1=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m);
			tgt2=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m+1);
			fdev_m=((uint64_t)8388608000-tgt1>tgt2-(uint64_t)8388608000)?(fdev_m+1):(fdev_m);
 8008618:	24f4      	movs	r4, #244	; 0xf4
 800861a:	2501      	movs	r5, #1
			fdev_m=(uint8_t)((uint64_t)8388608000/privGetXtalFrequency());
 800861c:	9200      	str	r2, [sp, #0]
	return st_manuf_context->priv_xtal_freq;
 800861e:	9305      	str	r3, [sp, #20]
			tgt1=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m);
 8008620:	0032      	movs	r2, r6
 8008622:	003b      	movs	r3, r7
			fdev_m=((uint64_t)8388608000-tgt1>tgt2-(uint64_t)8388608000)?(fdev_m+1):(fdev_m);
 8008624:	0624      	lsls	r4, r4, #24
			tgt1=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m);
 8008626:	0039      	movs	r1, r7
 8008628:	f7fa f8e4 	bl	80027f4 <__aeabi_lmul>
			fdev_m=((uint64_t)8388608000-tgt1>tgt2-(uint64_t)8388608000)?(fdev_m+1):(fdev_m);
 800862c:	0022      	movs	r2, r4
 800862e:	002b      	movs	r3, r5
 8008630:	1a12      	subs	r2, r2, r0
 8008632:	418b      	sbcs	r3, r1
			tgt2=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m+1);
 8008634:	2001      	movs	r0, #1
 8008636:	2100      	movs	r1, #0
			fdev_m=((uint64_t)8388608000-tgt1>tgt2-(uint64_t)8388608000)?(fdev_m+1):(fdev_m);
 8008638:	9202      	str	r2, [sp, #8]
 800863a:	9303      	str	r3, [sp, #12]
			tgt2=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m+1);
 800863c:	1980      	adds	r0, r0, r6
 800863e:	4179      	adcs	r1, r7
 8008640:	003b      	movs	r3, r7
 8008642:	9a05      	ldr	r2, [sp, #20]
 8008644:	f7fa f8d6 	bl	80027f4 <__aeabi_lmul>
			fdev_m=((uint64_t)8388608000-tgt1>tgt2-(uint64_t)8388608000)?(fdev_m+1):(fdev_m);
 8008648:	1b00      	subs	r0, r0, r4
 800864a:	41a9      	sbcs	r1, r5
 800864c:	9b03      	ldr	r3, [sp, #12]
 800864e:	428b      	cmp	r3, r1
 8008650:	d803      	bhi.n	800865a <priv_ST_MANUF_tx_rf_dbpsk_init+0xe2>
 8008652:	d106      	bne.n	8008662 <priv_ST_MANUF_tx_rf_dbpsk_init+0xea>
 8008654:	9b02      	ldr	r3, [sp, #8]
 8008656:	4283      	cmp	r3, r0
 8008658:	d903      	bls.n	8008662 <priv_ST_MANUF_tx_rf_dbpsk_init+0xea>
 800865a:	9b00      	ldr	r3, [sp, #0]
 800865c:	3301      	adds	r3, #1
 800865e:	b2db      	uxtb	r3, r3
 8008660:	9300      	str	r3, [sp, #0]
			fdev_e=0;
 8008662:	2700      	movs	r7, #0
 8008664:	e033      	b.n	80086ce <priv_ST_MANUF_tx_rf_dbpsk_init+0x156>
		}
		else
		{
			fdev_e=1;
			fdev_m=(uint8_t)((uint64_t)8388608000/privGetXtalFrequency()-256);
 8008666:	20f4      	movs	r0, #244	; 0xf4
 8008668:	2300      	movs	r3, #0
 800866a:	2101      	movs	r1, #1
 800866c:	0600      	lsls	r0, r0, #24
 800866e:	f7fa f8a1 	bl	80027b4 <__aeabi_uldivmod>
 8008672:	b2c3      	uxtb	r3, r0
 8008674:	b2c5      	uxtb	r5, r0
			/* understand if we are getting the nearest integer */
			uint64_t tgt1,tgt2;
			tgt1=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m+256);
 8008676:	2080      	movs	r0, #128	; 0x80
 8008678:	2600      	movs	r6, #0
 800867a:	2100      	movs	r1, #0
 800867c:	0040      	lsls	r0, r0, #1
	return st_manuf_context->priv_xtal_freq;
 800867e:	69e2      	ldr	r2, [r4, #28]
			fdev_m=(uint8_t)((uint64_t)8388608000/privGetXtalFrequency()-256);
 8008680:	9300      	str	r3, [sp, #0]
			tgt1=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m+256);
 8008682:	1940      	adds	r0, r0, r5
 8008684:	4171      	adcs	r1, r6
 8008686:	0033      	movs	r3, r6
 8008688:	f7fa f8b4 	bl	80027f4 <__aeabi_lmul>
			tgt2=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m+1+256);
			fdev_m=((uint64_t)8388608000-tgt1>tgt2-(uint64_t)8388608000)?(fdev_m+1):(fdev_m);
 800868c:	22f4      	movs	r2, #244	; 0xf4
 800868e:	2301      	movs	r3, #1
 8008690:	0612      	lsls	r2, r2, #24
 8008692:	1a12      	subs	r2, r2, r0
 8008694:	418b      	sbcs	r3, r1
			tgt2=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m+1+256);
 8008696:	2002      	movs	r0, #2
 8008698:	2100      	movs	r1, #0
	return st_manuf_context->priv_xtal_freq;
 800869a:	69e4      	ldr	r4, [r4, #28]
			tgt2=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m+1+256);
 800869c:	30ff      	adds	r0, #255	; 0xff
			fdev_m=((uint64_t)8388608000-tgt1>tgt2-(uint64_t)8388608000)?(fdev_m+1):(fdev_m);
 800869e:	9202      	str	r2, [sp, #8]
 80086a0:	9303      	str	r3, [sp, #12]
			tgt2=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m+1+256);
 80086a2:	1940      	adds	r0, r0, r5
 80086a4:	4171      	adcs	r1, r6
 80086a6:	0022      	movs	r2, r4
 80086a8:	0033      	movs	r3, r6
 80086aa:	f7fa f8a3 	bl	80027f4 <__aeabi_lmul>
			fdev_m=((uint64_t)8388608000-tgt1>tgt2-(uint64_t)8388608000)?(fdev_m+1):(fdev_m);
 80086ae:	23f4      	movs	r3, #244	; 0xf4
 80086b0:	2401      	movs	r4, #1
 80086b2:	061b      	lsls	r3, r3, #24
 80086b4:	1ac0      	subs	r0, r0, r3
 80086b6:	41a1      	sbcs	r1, r4
 80086b8:	9b03      	ldr	r3, [sp, #12]
 80086ba:	428b      	cmp	r3, r1
 80086bc:	d803      	bhi.n	80086c6 <priv_ST_MANUF_tx_rf_dbpsk_init+0x14e>
 80086be:	d106      	bne.n	80086ce <priv_ST_MANUF_tx_rf_dbpsk_init+0x156>
 80086c0:	9b02      	ldr	r3, [sp, #8]
 80086c2:	4283      	cmp	r3, r0
 80086c4:	d903      	bls.n	80086ce <priv_ST_MANUF_tx_rf_dbpsk_init+0x156>
 80086c6:	9b00      	ldr	r3, [sp, #0]
 80086c8:	3301      	adds	r3, #1
 80086ca:	b2db      	uxtb	r3, r3
 80086cc:	9300      	str	r3, [sp, #0]
		mod_e=0x60|0x01;
 80086ce:	2361      	movs	r3, #97	; 0x61
	}
#endif  /* FOR_ALL */
#endif /* FOR_FCC, FOR_ALL */

	/* write DATARATE mantissa and exponent */
	regs[0]=(dr_m>>8)&0xFF;
 80086d0:	9a04      	ldr	r2, [sp, #16]
 80086d2:	ac07      	add	r4, sp, #28
 80086d4:	ba52      	rev16	r2, r2
	regs[1]=(dr_m)&0xFF;
	regs[2]=mod_e;
	priv_ST_MANUF_WriteRegisters(0x0E,3,regs);
 80086d6:	2103      	movs	r1, #3
 80086d8:	200e      	movs	r0, #14
	regs[0]=(dr_m>>8)&0xFF;
 80086da:	8022      	strh	r2, [r4, #0]
	priv_ST_MANUF_WriteRegisters(0x0E,3,regs);
 80086dc:	0022      	movs	r2, r4
	regs[2]=mod_e;
 80086de:	70a3      	strb	r3, [r4, #2]
	priv_ST_MANUF_WriteRegisters(0x0E,3,regs);
 80086e0:	f7ff ff34 	bl	800854c <priv_ST_MANUF_WriteRegisters>

	/* write FDEV mantissa and exponent */
	/* here the exponent is in | with 0x80 to enable the digital smooth of the ramps */
	regs[0]=fdev_e|0x80;
 80086e4:	2080      	movs	r0, #128	; 0x80
	regs[1]=fdev_m;
 80086e6:	9b00      	ldr	r3, [sp, #0]
	regs[0]=fdev_e|0x80;
 80086e8:	4240      	negs	r0, r0
	priv_ST_MANUF_WriteRegisters(0x11,2,regs);
 80086ea:	0022      	movs	r2, r4
 80086ec:	2102      	movs	r1, #2
	regs[0]=fdev_e|0x80;
 80086ee:	4307      	orrs	r7, r0
	priv_ST_MANUF_WriteRegisters(0x11,2,regs);
 80086f0:	3091      	adds	r0, #145	; 0x91
	regs[1]=fdev_m;
 80086f2:	7063      	strb	r3, [r4, #1]
	regs[0]=fdev_e|0x80;
 80086f4:	7027      	strb	r7, [r4, #0]
	priv_ST_MANUF_WriteRegisters(0x11,2,regs);
 80086f6:	f7ff ff29 	bl	800854c <priv_ST_MANUF_WriteRegisters>

#if defined(FOR_ALL)
	if(st_manuf_context->pa_flag)
 80086fa:	4b5c      	ldr	r3, [pc, #368]	; (800886c <priv_ST_MANUF_tx_rf_dbpsk_init+0x2f4>)
#endif


#ifndef RAMPS_IN_RAM
	for(uint8_t i=0;i<82;i++)
		st_manuf_context->aux_fifo_ramp_fast[i]=st_manuf_context->bpsk_ramps->fifo_ramp_fast[i];
 80086fc:	495d      	ldr	r1, [pc, #372]	; (8008874 <priv_ST_MANUF_tx_rf_dbpsk_init+0x2fc>)
	if(st_manuf_context->pa_flag)
 80086fe:	1dda      	adds	r2, r3, #7
 8008700:	7fd2      	ldrb	r2, [r2, #31]
		st_manuf_context->bpsk_ramps=st_manuf_context->fcc_bpsk_ramps;
 8008702:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008704:	339c      	adds	r3, #156	; 0x9c
 8008706:	601a      	str	r2, [r3, #0]
 8008708:	2300      	movs	r3, #0
		st_manuf_context->aux_fifo_ramp_fast[i]=st_manuf_context->bpsk_ramps->fifo_ramp_fast[i];
 800870a:	5cd0      	ldrb	r0, [r2, r3]
 800870c:	54c8      	strb	r0, [r1, r3]
	for(uint8_t i=0;i<82;i++)
 800870e:	3301      	adds	r3, #1
 8008710:	2b52      	cmp	r3, #82	; 0x52
 8008712:	d1fa      	bne.n	800870a <priv_ST_MANUF_tx_rf_dbpsk_init+0x192>
#endif
}
 8008714:	b009      	add	sp, #36	; 0x24
 8008716:	bdf0      	pop	{r4, r5, r6, r7, pc}
	else if(type==SFX_DBPSK_600BPS)
 8008718:	2f02      	cmp	r7, #2
 800871a:	d000      	beq.n	800871e <priv_ST_MANUF_tx_rf_dbpsk_init+0x1a6>
 800871c:	e0a1      	b.n	8008862 <priv_ST_MANUF_tx_rf_dbpsk_init+0x2ea>
		dr_m=(uint16_t)((uint64_t)0x2EE00000000/f_dig-65536);
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	2300      	movs	r3, #0
 8008722:	9301      	str	r3, [sp, #4]
 8008724:	9a00      	ldr	r2, [sp, #0]
 8008726:	9b01      	ldr	r3, [sp, #4]
 8008728:	2000      	movs	r0, #0
 800872a:	4953      	ldr	r1, [pc, #332]	; (8008878 <priv_ST_MANUF_tx_rf_dbpsk_init+0x300>)
 800872c:	f7fa f842 	bl	80027b4 <__aeabi_uldivmod>
 8008730:	b283      	uxth	r3, r0
		tgt1=(uint64_t)f_dig*((uint64_t)dr_m+65536);
 8008732:	b282      	uxth	r2, r0
 8008734:	2080      	movs	r0, #128	; 0x80
 8008736:	2100      	movs	r1, #0
		dr_m=(uint16_t)((uint64_t)0x2EE00000000/f_dig-65536);
 8008738:	9304      	str	r3, [sp, #16]
		tgt1=(uint64_t)f_dig*((uint64_t)dr_m+65536);
 800873a:	9b01      	ldr	r3, [sp, #4]
 800873c:	0240      	lsls	r0, r0, #9
 800873e:	1880      	adds	r0, r0, r2
 8008740:	4159      	adcs	r1, r3
 8008742:	9a00      	ldr	r2, [sp, #0]
 8008744:	9b01      	ldr	r3, [sp, #4]
 8008746:	f7fa f855 	bl	80027f4 <__aeabi_lmul>
 800874a:	0002      	movs	r2, r0
		dr_m=((uint64_t)0x2EE00000000-tgt1>tgt2-(uint64_t)0x2EE00000000)?(dr_m+1):(dr_m);
 800874c:	2000      	movs	r0, #0
		tgt1=(uint64_t)f_dig*((uint64_t)dr_m+65536);
 800874e:	000b      	movs	r3, r1
		dr_m=((uint64_t)0x2EE00000000-tgt1>tgt2-(uint64_t)0x2EE00000000)?(dr_m+1):(dr_m);
 8008750:	4949      	ldr	r1, [pc, #292]	; (8008878 <priv_ST_MANUF_tx_rf_dbpsk_init+0x300>)
 8008752:	0004      	movs	r4, r0
 8008754:	000d      	movs	r5, r1
 8008756:	1aa4      	subs	r4, r4, r2
 8008758:	419d      	sbcs	r5, r3
 800875a:	9402      	str	r4, [sp, #8]
 800875c:	9503      	str	r5, [sp, #12]
		tgt2=(uint64_t)f_dig*((uint64_t)dr_m+1+65536);
 800875e:	9c00      	ldr	r4, [sp, #0]
 8008760:	9d01      	ldr	r5, [sp, #4]
 8008762:	18a4      	adds	r4, r4, r2
 8008764:	415d      	adcs	r5, r3
		dr_m=((uint64_t)0x2EE00000000-tgt1>tgt2-(uint64_t)0x2EE00000000)?(dr_m+1):(dr_m);
 8008766:	1a24      	subs	r4, r4, r0
 8008768:	418d      	sbcs	r5, r1
 800876a:	9b03      	ldr	r3, [sp, #12]
 800876c:	42ab      	cmp	r3, r5
 800876e:	d803      	bhi.n	8008778 <priv_ST_MANUF_tx_rf_dbpsk_init+0x200>
 8008770:	d106      	bne.n	8008780 <priv_ST_MANUF_tx_rf_dbpsk_init+0x208>
 8008772:	9b02      	ldr	r3, [sp, #8]
 8008774:	42a3      	cmp	r3, r4
 8008776:	d903      	bls.n	8008780 <priv_ST_MANUF_tx_rf_dbpsk_init+0x208>
 8008778:	9b04      	ldr	r3, [sp, #16]
 800877a:	3301      	adds	r3, #1
 800877c:	b29b      	uxth	r3, r3
 800877e:	9304      	str	r3, [sp, #16]
	return st_manuf_context->priv_xtal_freq;
 8008780:	4c3a      	ldr	r4, [pc, #232]	; (800886c <priv_ST_MANUF_tx_rf_dbpsk_init+0x2f4>)
 8008782:	69e3      	ldr	r3, [r4, #28]
 8008784:	69e2      	ldr	r2, [r4, #28]
		if(privGetXtalFrequency()>DIG_DOMAIN_XTAL_THRESH)
 8008786:	42b3      	cmp	r3, r6
 8008788:	d935      	bls.n	80087f6 <priv_ST_MANUF_tx_rf_dbpsk_init+0x27e>
			fdev_m=(uint8_t)((uint64_t)25165824000/privGetXtalFrequency()-256);
 800878a:	20dc      	movs	r0, #220	; 0xdc
 800878c:	2300      	movs	r3, #0
 800878e:	2105      	movs	r1, #5
 8008790:	0600      	lsls	r0, r0, #24
 8008792:	f7fa f80f 	bl	80027b4 <__aeabi_uldivmod>
 8008796:	b2c3      	uxtb	r3, r0
 8008798:	b2c5      	uxtb	r5, r0
			tgt1=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m+256);
 800879a:	2080      	movs	r0, #128	; 0x80
 800879c:	2600      	movs	r6, #0
 800879e:	2100      	movs	r1, #0
 80087a0:	0040      	lsls	r0, r0, #1
	return st_manuf_context->priv_xtal_freq;
 80087a2:	69e2      	ldr	r2, [r4, #28]
			fdev_m=(uint8_t)((uint64_t)25165824000/privGetXtalFrequency()-256);
 80087a4:	9300      	str	r3, [sp, #0]
			tgt1=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m+256);
 80087a6:	1940      	adds	r0, r0, r5
 80087a8:	4171      	adcs	r1, r6
 80087aa:	0033      	movs	r3, r6
 80087ac:	f7fa f822 	bl	80027f4 <__aeabi_lmul>
			fdev_m=((uint64_t)25165824000-tgt1>tgt2-(uint64_t)25165824000)?(fdev_m+1):(fdev_m);
 80087b0:	22dc      	movs	r2, #220	; 0xdc
 80087b2:	2305      	movs	r3, #5
 80087b4:	0612      	lsls	r2, r2, #24
 80087b6:	1a12      	subs	r2, r2, r0
 80087b8:	418b      	sbcs	r3, r1
			tgt2=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m+1+256);
 80087ba:	2002      	movs	r0, #2
 80087bc:	2100      	movs	r1, #0
	return st_manuf_context->priv_xtal_freq;
 80087be:	69e4      	ldr	r4, [r4, #28]
			tgt2=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m+1+256);
 80087c0:	30ff      	adds	r0, #255	; 0xff
			fdev_m=((uint64_t)25165824000-tgt1>tgt2-(uint64_t)25165824000)?(fdev_m+1):(fdev_m);
 80087c2:	9202      	str	r2, [sp, #8]
 80087c4:	9303      	str	r3, [sp, #12]
			tgt2=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m+1+256);
 80087c6:	1940      	adds	r0, r0, r5
 80087c8:	4171      	adcs	r1, r6
 80087ca:	0022      	movs	r2, r4
 80087cc:	0033      	movs	r3, r6
 80087ce:	f7fa f811 	bl	80027f4 <__aeabi_lmul>
			fdev_m=((uint64_t)25165824000-tgt1>tgt2-(uint64_t)25165824000)?(fdev_m+1):(fdev_m);
 80087d2:	23dc      	movs	r3, #220	; 0xdc
 80087d4:	2405      	movs	r4, #5
 80087d6:	061b      	lsls	r3, r3, #24
 80087d8:	1ac0      	subs	r0, r0, r3
 80087da:	41a1      	sbcs	r1, r4
 80087dc:	9b03      	ldr	r3, [sp, #12]
 80087de:	428b      	cmp	r3, r1
 80087e0:	d803      	bhi.n	80087ea <priv_ST_MANUF_tx_rf_dbpsk_init+0x272>
 80087e2:	d106      	bne.n	80087f2 <priv_ST_MANUF_tx_rf_dbpsk_init+0x27a>
 80087e4:	9b02      	ldr	r3, [sp, #8]
 80087e6:	4283      	cmp	r3, r0
 80087e8:	d903      	bls.n	80087f2 <priv_ST_MANUF_tx_rf_dbpsk_init+0x27a>
 80087ea:	9b00      	ldr	r3, [sp, #0]
 80087ec:	3301      	adds	r3, #1
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	9300      	str	r3, [sp, #0]
		mod_e=0x60|0x03;
 80087f2:	2363      	movs	r3, #99	; 0x63
 80087f4:	e76c      	b.n	80086d0 <priv_ST_MANUF_tx_rf_dbpsk_init+0x158>
			fdev_m=(uint8_t)((uint64_t)12582912000/privGetXtalFrequency()-256);
 80087f6:	20ee      	movs	r0, #238	; 0xee
 80087f8:	2300      	movs	r3, #0
 80087fa:	2102      	movs	r1, #2
 80087fc:	0600      	lsls	r0, r0, #24
 80087fe:	f7f9 ffd9 	bl	80027b4 <__aeabi_uldivmod>
 8008802:	b2c3      	uxtb	r3, r0
 8008804:	b2c6      	uxtb	r6, r0
			tgt1=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m+256);
 8008806:	2080      	movs	r0, #128	; 0x80
 8008808:	2700      	movs	r7, #0
	return st_manuf_context->priv_xtal_freq;
 800880a:	69e2      	ldr	r2, [r4, #28]
			fdev_m=(uint8_t)((uint64_t)12582912000/privGetXtalFrequency()-256);
 800880c:	9300      	str	r3, [sp, #0]
			tgt1=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m+256);
 800880e:	2100      	movs	r1, #0
	return st_manuf_context->priv_xtal_freq;
 8008810:	69e3      	ldr	r3, [r4, #28]
			fdev_m=((uint64_t)12582912000-tgt1>tgt2-(uint64_t)12582912000)?(fdev_m+1):(fdev_m);
 8008812:	24ee      	movs	r4, #238	; 0xee
 8008814:	2502      	movs	r5, #2
			tgt1=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m+256);
 8008816:	0040      	lsls	r0, r0, #1
	return st_manuf_context->priv_xtal_freq;
 8008818:	9305      	str	r3, [sp, #20]
			fdev_m=((uint64_t)12582912000-tgt1>tgt2-(uint64_t)12582912000)?(fdev_m+1):(fdev_m);
 800881a:	0624      	lsls	r4, r4, #24
			tgt1=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m+256);
 800881c:	003b      	movs	r3, r7
 800881e:	1980      	adds	r0, r0, r6
 8008820:	4179      	adcs	r1, r7
 8008822:	f7f9 ffe7 	bl	80027f4 <__aeabi_lmul>
			fdev_m=((uint64_t)12582912000-tgt1>tgt2-(uint64_t)12582912000)?(fdev_m+1):(fdev_m);
 8008826:	0022      	movs	r2, r4
 8008828:	002b      	movs	r3, r5
 800882a:	1a12      	subs	r2, r2, r0
 800882c:	418b      	sbcs	r3, r1
			tgt2=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m+1+256);
 800882e:	2002      	movs	r0, #2
 8008830:	2100      	movs	r1, #0
 8008832:	30ff      	adds	r0, #255	; 0xff
			fdev_m=((uint64_t)12582912000-tgt1>tgt2-(uint64_t)12582912000)?(fdev_m+1):(fdev_m);
 8008834:	9202      	str	r2, [sp, #8]
 8008836:	9303      	str	r3, [sp, #12]
			tgt2=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m+1+256);
 8008838:	1980      	adds	r0, r0, r6
 800883a:	4179      	adcs	r1, r7
 800883c:	003b      	movs	r3, r7
 800883e:	9a05      	ldr	r2, [sp, #20]
 8008840:	f7f9 ffd8 	bl	80027f4 <__aeabi_lmul>
			fdev_m=((uint64_t)12582912000-tgt1>tgt2-(uint64_t)12582912000)?(fdev_m+1):(fdev_m);
 8008844:	1b00      	subs	r0, r0, r4
 8008846:	41a9      	sbcs	r1, r5
 8008848:	9b03      	ldr	r3, [sp, #12]
 800884a:	428b      	cmp	r3, r1
 800884c:	d803      	bhi.n	8008856 <priv_ST_MANUF_tx_rf_dbpsk_init+0x2de>
 800884e:	d106      	bne.n	800885e <priv_ST_MANUF_tx_rf_dbpsk_init+0x2e6>
 8008850:	9b02      	ldr	r3, [sp, #8]
 8008852:	4283      	cmp	r3, r0
 8008854:	d903      	bls.n	800885e <priv_ST_MANUF_tx_rf_dbpsk_init+0x2e6>
 8008856:	9b00      	ldr	r3, [sp, #0]
 8008858:	3301      	adds	r3, #1
 800885a:	b2db      	uxtb	r3, r3
 800885c:	9300      	str	r3, [sp, #0]
			fdev_e=3;
 800885e:	2703      	movs	r7, #3
 8008860:	e7c7      	b.n	80087f2 <priv_ST_MANUF_tx_rf_dbpsk_init+0x27a>
	uint8_t fdev_m = 0x00;
 8008862:	2700      	movs	r7, #0
	uint8_t mod_e = 0x00;
 8008864:	003b      	movs	r3, r7
	uint8_t fdev_e = 0x00;
 8008866:	9700      	str	r7, [sp, #0]
	uint16_t dr_m = 0x0000;
 8008868:	9704      	str	r7, [sp, #16]
 800886a:	e731      	b.n	80086d0 <priv_ST_MANUF_tx_rf_dbpsk_init+0x158>
 800886c:	200000c4 	.word	0x200000c4
 8008870:	01c9c380 	.word	0x01c9c380
 8008874:	2000010c 	.word	0x2000010c
 8008878:	000002ee 	.word	0x000002ee

0800887c <priv_ST_MANUF_ReadRegisters>:
{
 800887c:	b530      	push	{r4, r5, lr}
 800887e:	b0c3      	sub	sp, #268	; 0x10c
 8008880:	000c      	movs	r4, r1
	tx_spi_buffer[0]=0x01;
 8008882:	2301      	movs	r3, #1
 8008884:	a921      	add	r1, sp, #132	; 0x84
	tx_spi_buffer[1]=address;
 8008886:	7048      	strb	r0, [r1, #1]
{
 8008888:	0015      	movs	r5, r2
		tx_spi_buffer[i+2]=0xFF;
 800888a:	20ff      	movs	r0, #255	; 0xff
	tx_spi_buffer[0]=0x01;
 800888c:	700b      	strb	r3, [r1, #0]
	for(uint32_t i=0;i<n_bytes;i++)
 800888e:	1c5a      	adds	r2, r3, #1
 8008890:	3b01      	subs	r3, #1
 8008892:	429c      	cmp	r4, r3
 8008894:	d80a      	bhi.n	80088ac <priv_ST_MANUF_ReadRegisters+0x30>
	priv_ST_MANUF_SpiRaw(n_bytes+2,tx_spi_buffer,rx_spi_buffer);
 8008896:	1ca0      	adds	r0, r4, #2
 8008898:	2300      	movs	r3, #0
 800889a:	466a      	mov	r2, sp
 800889c:	b2c0      	uxtb	r0, r0
 800889e:	f7fc fc99 	bl	80051d4 <ST_MCU_API_SpiRaw>
	for(uint32_t i=0;i<n_bytes;i++)
 80088a2:	2300      	movs	r3, #0
 80088a4:	429c      	cmp	r4, r3
 80088a6:	d804      	bhi.n	80088b2 <priv_ST_MANUF_ReadRegisters+0x36>
}
 80088a8:	b043      	add	sp, #268	; 0x10c
 80088aa:	bd30      	pop	{r4, r5, pc}
		tx_spi_buffer[i+2]=0xFF;
 80088ac:	0013      	movs	r3, r2
 80088ae:	5488      	strb	r0, [r1, r2]
	for(uint32_t i=0;i<n_bytes;i++)
 80088b0:	e7ed      	b.n	800888e <priv_ST_MANUF_ReadRegisters+0x12>
		buffer[i]=rx_spi_buffer[i+2];
 80088b2:	001a      	movs	r2, r3
 80088b4:	446a      	add	r2, sp
 80088b6:	7892      	ldrb	r2, [r2, #2]
 80088b8:	54ea      	strb	r2, [r5, r3]
	for(uint32_t i=0;i<n_bytes;i++)
 80088ba:	3301      	adds	r3, #1
 80088bc:	e7f2      	b.n	80088a4 <priv_ST_MANUF_ReadRegisters+0x28>

080088be <priv_ST_MANUF_CmdStrobe>:
{
 80088be:	b507      	push	{r0, r1, r2, lr}
	tx_spi_buffer[0]=0x80;
 80088c0:	2380      	movs	r3, #128	; 0x80
 80088c2:	466a      	mov	r2, sp
 80088c4:	7113      	strb	r3, [r2, #4]
	priv_ST_MANUF_SpiRaw(2,tx_spi_buffer,NULL);
 80088c6:	2300      	movs	r3, #0
	tx_spi_buffer[1]=cmd;
 80088c8:	7150      	strb	r0, [r2, #5]
	priv_ST_MANUF_SpiRaw(2,tx_spi_buffer,NULL);
 80088ca:	a901      	add	r1, sp, #4
 80088cc:	001a      	movs	r2, r3
 80088ce:	2002      	movs	r0, #2
 80088d0:	f7fc fc80 	bl	80051d4 <ST_MCU_API_SpiRaw>
}
 80088d4:	bd07      	pop	{r0, r1, r2, pc}
	...

080088d8 <priv_ST_MANUF_SpiRaw_Ramp.constprop.0>:
static void priv_ST_MANUF_SpiRaw_Ramp(uint8_t n_bytes,uint8_t* buff_in, uint8_t* buff_out, uint8_t blocking)
 80088d8:	b5f0      	push	{r4, r5, r6, r7, lr}
	if(st_manuf_context->power_reduction!=0 && buff_in!=zeroes)
 80088da:	4c17      	ldr	r4, [pc, #92]	; (8008938 <priv_ST_MANUF_SpiRaw_Ramp.constprop.0+0x60>)
static void priv_ST_MANUF_SpiRaw_Ramp(uint8_t n_bytes,uint8_t* buff_in, uint8_t* buff_out, uint8_t blocking)
 80088dc:	b09b      	sub	sp, #108	; 0x6c
 80088de:	9202      	str	r2, [sp, #8]
	if(st_manuf_context->power_reduction!=0 && buff_in!=zeroes)
 80088e0:	232e      	movs	r3, #46	; 0x2e
 80088e2:	5ee2      	ldrsh	r2, [r4, r3]
 80088e4:	9201      	str	r2, [sp, #4]
 80088e6:	2a00      	cmp	r2, #0
 80088e8:	d023      	beq.n	8008932 <priv_ST_MANUF_SpiRaw_Ramp.constprop.0+0x5a>
 80088ea:	4d14      	ldr	r5, [pc, #80]	; (800893c <priv_ST_MANUF_SpiRaw_Ramp.constprop.0+0x64>)
 80088ec:	42a9      	cmp	r1, r5
 80088ee:	d020      	beq.n	8008932 <priv_ST_MANUF_SpiRaw_Ramp.constprop.0+0x5a>
			if(((i%2)!=0) && (buff_in[i]+st_manuf_context->power_reduction<st_manuf_context->bpsk_ramps->min_power))
 80088f0:	349c      	adds	r4, #156	; 0x9c
 80088f2:	6824      	ldr	r4, [r4, #0]
		fifo_buff[0]=buff_in[0];
 80088f4:	780d      	ldrb	r5, [r1, #0]
			if(((i%2)!=0) && (buff_in[i]+st_manuf_context->power_reduction<st_manuf_context->bpsk_ramps->min_power))
 80088f6:	9403      	str	r4, [sp, #12]
		for(i=2;i<n_bytes;i++)
 80088f8:	2402      	movs	r4, #2
		fifo_buff[0]=buff_in[0];
 80088fa:	ae05      	add	r6, sp, #20
 80088fc:	7035      	strb	r5, [r6, #0]
		fifo_buff[1]=buff_in[1];
 80088fe:	784d      	ldrb	r5, [r1, #1]
 8008900:	7075      	strb	r5, [r6, #1]
			if(((i%2)!=0) && (buff_in[i]+st_manuf_context->power_reduction<st_manuf_context->bpsk_ramps->min_power))
 8008902:	2701      	movs	r7, #1
 8008904:	5d0d      	ldrb	r5, [r1, r4]
 8008906:	423c      	tst	r4, r7
 8008908:	d008      	beq.n	800891c <priv_ST_MANUF_SpiRaw_Ramp.constprop.0+0x44>
 800890a:	22e0      	movs	r2, #224	; 0xe0
 800890c:	9b01      	ldr	r3, [sp, #4]
 800890e:	32ff      	adds	r2, #255	; 0xff
 8008910:	18ef      	adds	r7, r5, r3
 8008912:	9b03      	ldr	r3, [sp, #12]
 8008914:	5c9b      	ldrb	r3, [r3, r2]
 8008916:	429f      	cmp	r7, r3
 8008918:	da00      	bge.n	800891c <priv_ST_MANUF_SpiRaw_Ramp.constprop.0+0x44>
				fifo_buff[i]=buff_in[i]+st_manuf_context->power_reduction;
 800891a:	b2fd      	uxtb	r5, r7
 800891c:	5535      	strb	r5, [r6, r4]
		for(i=2;i<n_bytes;i++)
 800891e:	3401      	adds	r4, #1
 8008920:	4284      	cmp	r4, r0
 8008922:	d3ee      	bcc.n	8008902 <priv_ST_MANUF_SpiRaw_Ramp.constprop.0+0x2a>
		priv_ST_MANUF_SpiRaw_(n_bytes,fifo_buff,buff_out,blocking);
 8008924:	2200      	movs	r2, #0
 8008926:	0031      	movs	r1, r6
 8008928:	9b02      	ldr	r3, [sp, #8]
		priv_ST_MANUF_SpiRaw_(n_bytes,buff_in,buff_out,blocking);
 800892a:	f7fc fc53 	bl	80051d4 <ST_MCU_API_SpiRaw>
}
 800892e:	b01b      	add	sp, #108	; 0x6c
 8008930:	bdf0      	pop	{r4, r5, r6, r7, pc}
		priv_ST_MANUF_SpiRaw_(n_bytes,buff_in,buff_out,blocking);
 8008932:	2200      	movs	r2, #0
 8008934:	9b02      	ldr	r3, [sp, #8]
 8008936:	e7f8      	b.n	800892a <priv_ST_MANUF_SpiRaw_Ramp.constprop.0+0x52>
 8008938:	200000c4 	.word	0x200000c4
 800893c:	0800b39e 	.word	0x0800b39e

08008940 <priv_ST_MANUF_tx_rf_dbpsk_single_bit>:
}

/* Function to transmit a single bit */
static void priv_ST_MANUF_tx_rf_dbpsk_single_bit(uint8_t bit)
{
	if(bit==0)
 8008940:	4b0e      	ldr	r3, [pc, #56]	; (800897c <priv_ST_MANUF_tx_rf_dbpsk_single_bit+0x3c>)
{
 8008942:	b510      	push	{r4, lr}
 8008944:	001a      	movs	r2, r3
 8008946:	329c      	adds	r2, #156	; 0x9c
 8008948:	6811      	ldr	r1, [r2, #0]
	if(bit==0)
 800894a:	2800      	cmp	r0, #0
 800894c:	d112      	bne.n	8008974 <priv_ST_MANUF_tx_rf_dbpsk_single_bit+0x34>
	{
		/* Give FDEV a peak in the FDEV_PEAK position.
    This value should be the opposite of the last one. */
#ifndef RAMPS_IN_RAM
		/* If ramps are in flash, we change the auxiliary buffer in RAM */
		st_manuf_context->aux_fifo_ramp_fast[82-32]=(st_manuf_context->aux_fifo_ramp_fast[82-32]==st_manuf_context->bpsk_ramps->fdev_neg)?(st_manuf_context->bpsk_ramps->fdev_pos):(st_manuf_context->bpsk_ramps->fdev_neg);
 800894e:	22ee      	movs	r2, #238	; 0xee
 8008950:	0018      	movs	r0, r3
 8008952:	0052      	lsls	r2, r2, #1
 8008954:	307a      	adds	r0, #122	; 0x7a
 8008956:	5c8a      	ldrb	r2, [r1, r2]
 8008958:	7800      	ldrb	r0, [r0, #0]
 800895a:	4290      	cmp	r0, r2
 800895c:	d102      	bne.n	8008964 <priv_ST_MANUF_tx_rf_dbpsk_single_bit+0x24>
 800895e:	22de      	movs	r2, #222	; 0xde
 8008960:	32ff      	adds	r2, #255	; 0xff
 8008962:	5c8a      	ldrb	r2, [r1, r2]
 8008964:	337a      	adds	r3, #122	; 0x7a
 8008966:	701a      	strb	r2, [r3, #0]
		priv_ST_MANUF_SpiRaw_Ramp(82, st_manuf_context->aux_fifo_ramp_fast, NULL, 1);
 8008968:	2201      	movs	r2, #1
 800896a:	4905      	ldr	r1, [pc, #20]	; (8008980 <priv_ST_MANUF_tx_rf_dbpsk_single_bit+0x40>)
	else
	{
		/* If the bit to be transmitted is '1' --> proceed with a constant
    pattern that does not change the instantaneous frequency and keeps power constant to max.
    fifo_const_fast stores this one. */
		priv_ST_MANUF_SpiRaw_Ramp(82, (uint8_t*)st_manuf_context->bpsk_ramps->fifo_const_fast, NULL, 1);
 800896c:	2052      	movs	r0, #82	; 0x52
 800896e:	f7ff ffb3 	bl	80088d8 <priv_ST_MANUF_SpiRaw_Ramp.constprop.0>
	}
}
 8008972:	bd10      	pop	{r4, pc}
		priv_ST_MANUF_SpiRaw_Ramp(82, (uint8_t*)st_manuf_context->bpsk_ramps->fifo_const_fast, NULL, 1);
 8008974:	2201      	movs	r2, #1
 8008976:	3152      	adds	r1, #82	; 0x52
 8008978:	e7f8      	b.n	800896c <priv_ST_MANUF_tx_rf_dbpsk_single_bit+0x2c>
 800897a:	46c0      	nop			; (mov r8, r8)
 800897c:	200000c4 	.word	0x200000c4
 8008980:	2000010c 	.word	0x2000010c

08008984 <priv_ST_MANUF_rf_load_first_ramp_up>:
	}
}

/* Function used both for BPSK MOD and CONTINUOS BPSK */
static void priv_ST_MANUF_rf_load_first_ramp_up()
{
 8008984:	b513      	push	{r0, r1, r4, lr}
	uint8_t tmp;
	/* TX FIFO flush */
	CMD_STROBE_FTX();
 8008986:	2072      	movs	r0, #114	; 0x72
 8008988:	f7ff ff99 	bl	80088be <priv_ST_MANUF_CmdStrobe>

	/* fill the 1st part of the FIFO */
	priv_ST_MANUF_SpiRaw_Ramp(18, (uint8_t*)zeroes, NULL,0);
 800898c:	2200      	movs	r2, #0
 800898e:	2012      	movs	r0, #18
 8008990:	4910      	ldr	r1, [pc, #64]	; (80089d4 <priv_ST_MANUF_rf_load_first_ramp_up+0x50>)
 8008992:	f7ff ffa1 	bl	80088d8 <priv_ST_MANUF_SpiRaw_Ramp.constprop.0>
	priv_ST_MANUF_SpiRaw_Ramp(82, (uint8_t*)st_manuf_context->bpsk_ramps->fifo_start_ramp_up_1, NULL,0);
 8008996:	4c10      	ldr	r4, [pc, #64]	; (80089d8 <priv_ST_MANUF_rf_load_first_ramp_up+0x54>)
 8008998:	2200      	movs	r2, #0
 800899a:	0023      	movs	r3, r4
 800899c:	339c      	adds	r3, #156	; 0x9c
 800899e:	6819      	ldr	r1, [r3, #0]
 80089a0:	2052      	movs	r0, #82	; 0x52
 80089a2:	3149      	adds	r1, #73	; 0x49
 80089a4:	31ff      	adds	r1, #255	; 0xff
 80089a6:	f7ff ff97 	bl	80088d8 <priv_ST_MANUF_SpiRaw_Ramp.constprop.0>

	/* GPIO interrupt on S2-LP side */
	tmp=0x32;
 80089aa:	466b      	mov	r3, sp
 80089ac:	1dda      	adds	r2, r3, #7
 80089ae:	2332      	movs	r3, #50	; 0x32
 80089b0:	7013      	strb	r3, [r2, #0]
	priv_ST_MANUF_WriteRegisters(st_manuf_context->gpio_function_struct.gpio_irq_pin,1,&tmp);
 80089b2:	78e0      	ldrb	r0, [r4, #3]
 80089b4:	2101      	movs	r1, #1
 80089b6:	f7ff fdc9 	bl	800854c <priv_ST_MANUF_WriteRegisters>

	/* S2-LP IRQ on MCU side */
	ST_MCU_API_GpioIRQ(st_manuf_context->gpio_function_struct.gpio_irq_pin, SFX_TRUE, SFX_TRUE);
 80089ba:	2201      	movs	r2, #1
 80089bc:	78e0      	ldrb	r0, [r4, #3]
 80089be:	0011      	movs	r1, r2
 80089c0:	f7fb ffc8 	bl	8004954 <ST_MCU_API_GpioIRQ>

	/* manuf_state to TX */
	st_manuf_context->manuf_state=ST_MANUF_STATE_TX;
 80089c4:	0023      	movs	r3, r4
 80089c6:	2201      	movs	r2, #1
 80089c8:	332c      	adds	r3, #44	; 0x2c
 80089ca:	701a      	strb	r2, [r3, #0]

	/* next TX state is the 2nd part of the ramp-up */
	st_manuf_context->tx_packet_struct.tx_state=ST_TX_STATE_RAMP_UP_2;
 80089cc:	2302      	movs	r3, #2
 80089ce:	7123      	strb	r3, [r4, #4]
}
 80089d0:	bd13      	pop	{r0, r1, r4, pc}
 80089d2:	46c0      	nop			; (mov r8, r8)
 80089d4:	0800b39e 	.word	0x0800b39e
 80089d8:	200000c4 	.word	0x200000c4

080089dc <pn9_next>:
	retval =  (((*last & 0x20) >> 5) ^ *last) << 8;
 80089dc:	8802      	ldrh	r2, [r0, #0]
 80089de:	0693      	lsls	r3, r2, #26
 80089e0:	0fdb      	lsrs	r3, r3, #31
 80089e2:	4053      	eors	r3, r2
	retval |= (*last >> 1) & 0xff;
 80089e4:	0852      	lsrs	r2, r2, #1
 80089e6:	b2d2      	uxtb	r2, r2
	retval =  (((*last & 0x20) >> 5) ^ *last) << 8;
 80089e8:	021b      	lsls	r3, r3, #8
	retval |= (*last >> 1) & 0xff;
 80089ea:	4313      	orrs	r3, r2
	*last = retval & 0x1ff;
 80089ec:	05db      	lsls	r3, r3, #23
 80089ee:	0ddb      	lsrs	r3, r3, #23
 80089f0:	8003      	strh	r3, [r0, #0]
}
 80089f2:	4770      	bx	lr

080089f4 <pn9_next_byte>:
{
 80089f4:	b513      	push	{r0, r1, r4, lr}
 80089f6:	466b      	mov	r3, sp
 80089f8:	2408      	movs	r4, #8
 80089fa:	80d8      	strh	r0, [r3, #6]
		pn9_next(&state);
 80089fc:	466b      	mov	r3, sp
 80089fe:	3c01      	subs	r4, #1
 8008a00:	1d98      	adds	r0, r3, #6
 8008a02:	f7ff ffeb 	bl	80089dc <pn9_next>
	for (i=0; i<8; i++) {
 8008a06:	2c00      	cmp	r4, #0
 8008a08:	d1f8      	bne.n	80089fc <pn9_next_byte+0x8>
	return state;
 8008a0a:	466b      	mov	r3, sp
 8008a0c:	88d8      	ldrh	r0, [r3, #6]
}
 8008a0e:	bd16      	pop	{r1, r2, r4, pc}

08008a10 <ST_RF_API_custom_setting>:
 *
 ********************************************************/

__weak void ST_RF_API_custom_setting(void)
{
}
 8008a10:	4770      	bx	lr
	...

08008a14 <RF_API_init>:
 *
 * \retval SFX_ERRNONE:              No error
 * \retval RF_ERR_API_INIT:          Init Radio link error
 *******************************************************************/
sfx_u8 RF_API_init(sfx_rf_mode_t rf_mode)
{
 8008a14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008a16:	0005      	movs	r5, r0
 8008a18:	4c7d      	ldr	r4, [pc, #500]	; (8008c10 <RF_API_init+0x1fc>)
 8008a1a:	b08d      	sub	sp, #52	; 0x34
	sfx_u8 tmp;

#if defined(FOR_ARIB) || defined(FOR_ALL)
	if(rf_mode==SFX_RF_MODE_TX && st_manuf_context->tx_is_ready)
 8008a1c:	2800      	cmp	r0, #0
 8008a1e:	d108      	bne.n	8008a32 <RF_API_init+0x1e>
 8008a20:	0023      	movs	r3, r4
 8008a22:	3332      	adds	r3, #50	; 0x32
 8008a24:	781b      	ldrb	r3, [r3, #0]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d003      	beq.n	8008a32 <RF_API_init+0x1e>
	{
		st_manuf_context->tx_packet_struct.tx_state=ST_TX_STATE_NONE;
 8008a2a:	7120      	strb	r0, [r4, #4]
	}

	ST_RF_API_custom_setting();

	return SFX_ERR_NONE;
}
 8008a2c:	2000      	movs	r0, #0
 8008a2e:	b00d      	add	sp, #52	; 0x34
 8008a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if(st_manuf_context->xtal_lib==0)
 8008a32:	69a3      	ldr	r3, [r4, #24]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d101      	bne.n	8008a3c <RF_API_init+0x28>
	return st_manuf_context->priv_xtal_freq;
 8008a38:	69e3      	ldr	r3, [r4, #28]
		st_manuf_context->xtal_lib=privGetXtalFrequency();
 8008a3a:	61a3      	str	r3, [r4, #24]
	ST_MCU_API_Shutdown(1);
 8008a3c:	2001      	movs	r0, #1
 8008a3e:	f7fb ff23 	bl	8004888 <ST_MCU_API_Shutdown>
	ST_MCU_API_Shutdown(0);
 8008a42:	2000      	movs	r0, #0
 8008a44:	f7fb ff20 	bl	8004888 <ST_MCU_API_Shutdown>
	if(st_manuf_context->tcxo_flag)
 8008a48:	1da3      	adds	r3, r4, #6
 8008a4a:	7fdb      	ldrb	r3, [r3, #31]
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d007      	beq.n	8008a60 <RF_API_init+0x4c>
		tmp=0xB0; priv_ST_MANUF_WriteRegisters(0x6D,1,&tmp);
 8008a50:	23b0      	movs	r3, #176	; 0xb0
 8008a52:	aa06      	add	r2, sp, #24
 8008a54:	7093      	strb	r3, [r2, #2]
 8008a56:	2101      	movs	r1, #1
 8008a58:	206d      	movs	r0, #109	; 0x6d
 8008a5a:	3202      	adds	r2, #2
 8008a5c:	f7ff fd76 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	if(st_manuf_context->pa_flag)
 8008a60:	1de3      	adds	r3, r4, #7
 8008a62:	7fdb      	ldrb	r3, [r3, #31]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d100      	bne.n	8008a6a <RF_API_init+0x56>
 8008a68:	e0cf      	b.n	8008c0a <RF_API_init+0x1f6>
		st_manuf_context->bpsk_ramps=st_manuf_context->fcc_bpsk_ramps;
 8008a6a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8008a6c:	0022      	movs	r2, r4
 8008a6e:	329c      	adds	r2, #156	; 0x9c
 8008a70:	6013      	str	r3, [r2, #0]
	ST_MCU_API_GpioIRQ(st_manuf_context->gpio_function_struct.gpio_irq_pin, SFX_FALSE, SFX_FALSE);
 8008a72:	2200      	movs	r2, #0
 8008a74:	78e0      	ldrb	r0, [r4, #3]
 8008a76:	0011      	movs	r1, r2
 8008a78:	f7fb ff6c 	bl	8004954 <ST_MCU_API_GpioIRQ>
	int32_t xtal_off=(576*st_manuf_context->rf_offset)/5000; //MCR
 8008a7c:	2090      	movs	r0, #144	; 0x90
 8008a7e:	6a23      	ldr	r3, [r4, #32]
 8008a80:	0080      	lsls	r0, r0, #2
 8008a82:	4358      	muls	r0, r3
 8008a84:	4963      	ldr	r1, [pc, #396]	; (8008c14 <RF_API_init+0x200>)
 8008a86:	f7f9 fd9d 	bl	80025c4 <__divsi3>
	privSetXtalFrequency(st_manuf_context->xtal_lib-xtal_off);
 8008a8a:	69a6      	ldr	r6, [r4, #24]
		tmp=0x2E;
 8008a8c:	aa06      	add	r2, sp, #24
	privSetXtalFrequency(st_manuf_context->xtal_lib-xtal_off);
 8008a8e:	1a36      	subs	r6, r6, r0
	st_manuf_context->priv_xtal_freq = lXtalFrequency;
 8008a90:	61e6      	str	r6, [r4, #28]
	return st_manuf_context->priv_xtal_freq;
 8008a92:	69e3      	ldr	r3, [r4, #28]
		tmp=0x2E;
 8008a94:	232e      	movs	r3, #46	; 0x2e
		priv_ST_MANUF_WriteRegisters(0x6C, 1, &tmp);
 8008a96:	2101      	movs	r1, #1
		tmp=0x2E;
 8008a98:	7093      	strb	r3, [r2, #2]
		priv_ST_MANUF_WriteRegisters(0x6C, 1, &tmp);
 8008a9a:	206c      	movs	r0, #108	; 0x6c
 8008a9c:	3202      	adds	r2, #2
 8008a9e:	f7ff fd55 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	uint8_t gpio_conf[3]={0x92,0x52,0x2A};
 8008aa2:	2203      	movs	r2, #3
 8008aa4:	495c      	ldr	r1, [pc, #368]	; (8008c18 <RF_API_init+0x204>)
 8008aa6:	a808      	add	r0, sp, #32
 8008aa8:	f000 fd56 	bl	8009558 <memcpy>
	if(st_manuf_context->gpio_function_struct.gpio_tx_rx_pin!=0xFF)
 8008aac:	7820      	ldrb	r0, [r4, #0]
 8008aae:	28ff      	cmp	r0, #255	; 0xff
 8008ab0:	d003      	beq.n	8008aba <RF_API_init+0xa6>
		priv_ST_MANUF_WriteRegisters(st_manuf_context->gpio_function_struct.gpio_tx_rx_pin,1,&gpio_conf[0]);
 8008ab2:	2101      	movs	r1, #1
 8008ab4:	aa08      	add	r2, sp, #32
 8008ab6:	f7ff fd49 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	if(st_manuf_context->gpio_function_struct.gpio_rx_pin!=0xFF)
 8008aba:	7860      	ldrb	r0, [r4, #1]
 8008abc:	28ff      	cmp	r0, #255	; 0xff
 8008abe:	d005      	beq.n	8008acc <RF_API_init+0xb8>
		priv_ST_MANUF_WriteRegisters(st_manuf_context->gpio_function_struct.gpio_rx_pin,1,&gpio_conf[1]);
 8008ac0:	2209      	movs	r2, #9
 8008ac2:	ab06      	add	r3, sp, #24
 8008ac4:	2101      	movs	r1, #1
 8008ac6:	18d2      	adds	r2, r2, r3
 8008ac8:	f7ff fd40 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	if(st_manuf_context->gpio_function_struct.gpio_tx_pin!=0xFF)
 8008acc:	78a0      	ldrb	r0, [r4, #2]
 8008ace:	28ff      	cmp	r0, #255	; 0xff
 8008ad0:	d005      	beq.n	8008ade <RF_API_init+0xca>
		priv_ST_MANUF_WriteRegisters(st_manuf_context->gpio_function_struct.gpio_tx_pin,1,&gpio_conf[2]);
 8008ad2:	220a      	movs	r2, #10
 8008ad4:	ab06      	add	r3, sp, #24
 8008ad6:	2101      	movs	r1, #1
 8008ad8:	18d2      	adds	r2, r2, r3
 8008ada:	f7ff fd37 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	switch (rf_mode)
 8008ade:	2d01      	cmp	r5, #1
 8008ae0:	d100      	bne.n	8008ae4 <RF_API_init+0xd0>
 8008ae2:	e09f      	b.n	8008c24 <RF_API_init+0x210>
 8008ae4:	d931      	bls.n	8008b4a <RF_API_init+0x136>
 8008ae6:	1eab      	subs	r3, r5, #2
 8008ae8:	2b01      	cmp	r3, #1
 8008aea:	d900      	bls.n	8008aee <RF_API_init+0xda>
 8008aec:	e08a      	b.n	8008c04 <RF_API_init+0x1f0>
	return st_manuf_context->priv_xtal_freq;
 8008aee:	69e6      	ldr	r6, [r4, #28]
		if(f_dig>DIG_DOMAIN_XTAL_THRESH) {
 8008af0:	4b4a      	ldr	r3, [pc, #296]	; (8008c1c <RF_API_init+0x208>)
 8008af2:	429e      	cmp	r6, r3
 8008af4:	d900      	bls.n	8008af8 <RF_API_init+0xe4>
			f_dig >>= 1;
 8008af6:	0876      	lsrs	r6, r6, #1
	return st_manuf_context->priv_xtal_freq;
 8008af8:	69e2      	ldr	r2, [r4, #28]
		if_regs[0] = (uint8_t)(((uint64_t)7372800000/privGetXtalFrequency())-100);
 8008afa:	2300      	movs	r3, #0
 8008afc:	2101      	movs	r1, #1
 8008afe:	4848      	ldr	r0, [pc, #288]	; (8008c20 <RF_API_init+0x20c>)
 8008b00:	f7f9 fe58 	bl	80027b4 <__aeabi_uldivmod>
 8008b04:	ab06      	add	r3, sp, #24
 8008b06:	3864      	subs	r0, #100	; 0x64
		if_regs[1] = (uint8_t)(((uint64_t)7372800000/f_dig)-100);
 8008b08:	0032      	movs	r2, r6
		if_regs[0] = (uint8_t)(((uint64_t)7372800000/privGetXtalFrequency())-100);
 8008b0a:	7418      	strb	r0, [r3, #16]
		if_regs[1] = (uint8_t)(((uint64_t)7372800000/f_dig)-100);
 8008b0c:	2101      	movs	r1, #1
 8008b0e:	2300      	movs	r3, #0
 8008b10:	4843      	ldr	r0, [pc, #268]	; (8008c20 <RF_API_init+0x20c>)
 8008b12:	f7f9 fe4f 	bl	80027b4 <__aeabi_uldivmod>
 8008b16:	ab06      	add	r3, sp, #24
 8008b18:	3864      	subs	r0, #100	; 0x64
 8008b1a:	7458      	strb	r0, [r3, #17]
		priv_ST_MANUF_WriteRegisters(0x09, 2, if_regs);
 8008b1c:	2102      	movs	r1, #2
 8008b1e:	2009      	movs	r0, #9
 8008b20:	aa0a      	add	r2, sp, #40	; 0x28
 8008b22:	f7ff fd13 	bl	800854c <priv_ST_MANUF_WriteRegisters>
		if(rf_mode==SFX_RF_MODE_CS300K_RX)
 8008b26:	ae09      	add	r6, sp, #36	; 0x24
		tmp=0x81; /* 200kHz+ filter */
 8008b28:	2381      	movs	r3, #129	; 0x81
		if(rf_mode==SFX_RF_MODE_CS300K_RX)
 8008b2a:	2d03      	cmp	r5, #3
 8008b2c:	d100      	bne.n	8008b30 <RF_API_init+0x11c>
			tmp=0x51;  /* 300kHz+ filter */
 8008b2e:	2351      	movs	r3, #81	; 0x51
		priv_ST_MANUF_WriteRegisters(0x13,1,&tmp);
 8008b30:	0032      	movs	r2, r6
 8008b32:	2101      	movs	r1, #1
 8008b34:	2013      	movs	r0, #19
			tmp=0x51;  /* 300kHz+ filter */
 8008b36:	7033      	strb	r3, [r6, #0]
		priv_ST_MANUF_WriteRegisters(0x13,1,&tmp);
 8008b38:	f7ff fd08 	bl	800854c <priv_ST_MANUF_WriteRegisters>
		tmp=0x20;
 8008b3c:	2320      	movs	r3, #32
		priv_ST_MANUF_WriteRegisters(0x2E,1,&tmp);
 8008b3e:	0032      	movs	r2, r6
 8008b40:	2101      	movs	r1, #1
 8008b42:	202e      	movs	r0, #46	; 0x2e
		tmp=0x20;
 8008b44:	7033      	strb	r3, [r6, #0]
		priv_ST_MANUF_WriteRegisters(0x2E,1,&tmp);
 8008b46:	f7ff fd01 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	tmp=0x04;
 8008b4a:	2304      	movs	r3, #4
 8008b4c:	ad0a      	add	r5, sp, #40	; 0x28
	priv_ST_MANUF_WriteRegisters(0x30, 1, &tmp);
 8008b4e:	002a      	movs	r2, r5
 8008b50:	2101      	movs	r1, #1
 8008b52:	2030      	movs	r0, #48	; 0x30
	tmp=0x04;
 8008b54:	702b      	strb	r3, [r5, #0]
	priv_ST_MANUF_WriteRegisters(0x30, 1, &tmp);
 8008b56:	f7ff fcf9 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	tmp=0x07;
 8008b5a:	2307      	movs	r3, #7
	tmp&=0xFD;
 8008b5c:	2702      	movs	r7, #2
	priv_ST_MANUF_WriteRegisters(0x62, 1, &tmp);
 8008b5e:	002a      	movs	r2, r5
 8008b60:	2101      	movs	r1, #1
 8008b62:	2062      	movs	r0, #98	; 0x62
	tmp=0x07;
 8008b64:	702b      	strb	r3, [r5, #0]
	priv_ST_MANUF_WriteRegisters(0x62, 1, &tmp);
 8008b66:	f7ff fcf1 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	priv_ST_MANUF_ReadRegisters(0x63, 1, &tmp);
 8008b6a:	002a      	movs	r2, r5
 8008b6c:	2101      	movs	r1, #1
 8008b6e:	2063      	movs	r0, #99	; 0x63
 8008b70:	f7ff fe84 	bl	800887c <priv_ST_MANUF_ReadRegisters>
	tmp&=0xFD;
 8008b74:	782b      	ldrb	r3, [r5, #0]
	priv_ST_MANUF_WriteRegisters(0x63, 1, &tmp);
 8008b76:	002a      	movs	r2, r5
	tmp&=0xFD;
 8008b78:	43bb      	bics	r3, r7
	priv_ST_MANUF_WriteRegisters(0x63, 1, &tmp);
 8008b7a:	2101      	movs	r1, #1
 8008b7c:	2063      	movs	r0, #99	; 0x63
	tmp&=0xFD;
 8008b7e:	702b      	strb	r3, [r5, #0]
	priv_ST_MANUF_WriteRegisters(0x63, 1, &tmp);
 8008b80:	f7ff fce4 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	tmp=0xD7;
 8008b84:	23d7      	movs	r3, #215	; 0xd7
	priv_ST_MANUF_WriteRegisters(0x65, 1, &tmp);
 8008b86:	002a      	movs	r2, r5
 8008b88:	2101      	movs	r1, #1
 8008b8a:	2065      	movs	r0, #101	; 0x65
	tmp=0xD7;
 8008b8c:	702b      	strb	r3, [r5, #0]
	priv_ST_MANUF_WriteRegisters(0x65, 1, &tmp);
 8008b8e:	f7ff fcdd 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	tmp=0x9C;
 8008b92:	239c      	movs	r3, #156	; 0x9c
	priv_ST_MANUF_WriteRegisters(0x76, 1, &tmp);
 8008b94:	002a      	movs	r2, r5
 8008b96:	2101      	movs	r1, #1
 8008b98:	2076      	movs	r0, #118	; 0x76
	tmp=0x9C;
 8008b9a:	702b      	strb	r3, [r5, #0]
	priv_ST_MANUF_WriteRegisters(0x76, 1, &tmp);
 8008b9c:	f7ff fcd6 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	tmp=0x28;
 8008ba0:	2328      	movs	r3, #40	; 0x28
	priv_ST_MANUF_WriteRegisters(0x77, 1, &tmp);
 8008ba2:	002a      	movs	r2, r5
 8008ba4:	2101      	movs	r1, #1
 8008ba6:	2077      	movs	r0, #119	; 0x77
	tmp=0x28;
 8008ba8:	702b      	strb	r3, [r5, #0]
	priv_ST_MANUF_WriteRegisters(0x77, 1, &tmp);
 8008baa:	f7ff fccf 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	tmp=0xC8;
 8008bae:	23c8      	movs	r3, #200	; 0xc8
	priv_ST_MANUF_WriteRegisters(0x64, 1, &tmp);
 8008bb0:	002a      	movs	r2, r5
 8008bb2:	2101      	movs	r1, #1
 8008bb4:	2064      	movs	r0, #100	; 0x64
	if(st_manuf_context->smps_mode>0 && st_manuf_context->smps_mode<8)
 8008bb6:	1d66      	adds	r6, r4, #5
	tmp=0xC8;
 8008bb8:	702b      	strb	r3, [r5, #0]
	priv_ST_MANUF_WriteRegisters(0x64, 1, &tmp);
 8008bba:	f7ff fcc7 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	if(st_manuf_context->smps_mode>0 && st_manuf_context->smps_mode<8)
 8008bbe:	7ff3      	ldrb	r3, [r6, #31]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d015      	beq.n	8008bf0 <RF_API_init+0x1dc>
 8008bc4:	7ff3      	ldrb	r3, [r6, #31]
 8008bc6:	2b07      	cmp	r3, #7
 8008bc8:	d812      	bhi.n	8008bf0 <RF_API_init+0x1dc>
		tmp=(st_manuf_context->smps_mode<<4)|0x02;
 8008bca:	7ff3      	ldrb	r3, [r6, #31]
		priv_ST_MANUF_WriteRegisters(0x79, 1, &tmp);
 8008bcc:	002a      	movs	r2, r5
		tmp=(st_manuf_context->smps_mode<<4)|0x02;
 8008bce:	011b      	lsls	r3, r3, #4
 8008bd0:	431f      	orrs	r7, r3
		priv_ST_MANUF_WriteRegisters(0x79, 1, &tmp);
 8008bd2:	2101      	movs	r1, #1
 8008bd4:	2079      	movs	r0, #121	; 0x79
		tmp=(st_manuf_context->smps_mode<<4)|0x02;
 8008bd6:	702f      	strb	r7, [r5, #0]
		priv_ST_MANUF_WriteRegisters(0x79, 1, &tmp);
 8008bd8:	f7ff fcb8 	bl	800854c <priv_ST_MANUF_WriteRegisters>
		if(st_manuf_context->smps_mode>4)
 8008bdc:	7ff3      	ldrb	r3, [r6, #31]
 8008bde:	2b04      	cmp	r3, #4
 8008be0:	d906      	bls.n	8008bf0 <RF_API_init+0x1dc>
			tmp=0x88;
 8008be2:	2388      	movs	r3, #136	; 0x88
			priv_ST_MANUF_WriteRegisters(0x64, 1, &tmp);
 8008be4:	002a      	movs	r2, r5
 8008be6:	2101      	movs	r1, #1
 8008be8:	2064      	movs	r0, #100	; 0x64
			tmp=0x88;
 8008bea:	702b      	strb	r3, [r5, #0]
			priv_ST_MANUF_WriteRegisters(0x64, 1, &tmp);
 8008bec:	f7ff fcae 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	tmp=48;
 8008bf0:	2330      	movs	r3, #48	; 0x30
	priv_ST_MANUF_WriteRegisters(0x3F,1,&tmp);
 8008bf2:	002a      	movs	r2, r5
 8008bf4:	2101      	movs	r1, #1
 8008bf6:	203f      	movs	r0, #63	; 0x3f
	tmp=48;
 8008bf8:	702b      	strb	r3, [r5, #0]
	priv_ST_MANUF_WriteRegisters(0x3F,1,&tmp);
 8008bfa:	f7ff fca7 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	st_manuf_context->tx_is_ready=1;
 8008bfe:	2301      	movs	r3, #1
 8008c00:	3432      	adds	r4, #50	; 0x32
 8008c02:	7023      	strb	r3, [r4, #0]
	ST_RF_API_custom_setting();
 8008c04:	f7ff ff04 	bl	8008a10 <ST_RF_API_custom_setting>
	return SFX_ERR_NONE;
 8008c08:	e710      	b.n	8008a2c <RF_API_init+0x18>
		st_manuf_context->bpsk_ramps=st_manuf_context->etsi_bpsk_ramps;
 8008c0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c0c:	e72e      	b.n	8008a6c <RF_API_init+0x58>
 8008c0e:	46c0      	nop			; (mov r8, r8)
 8008c10:	200000c4 	.word	0x200000c4
 8008c14:	00001388 	.word	0x00001388
 8008c18:	0800afb6 	.word	0x0800afb6
 8008c1c:	01c9c380 	.word	0x01c9c380
 8008c20:	b7740000 	.word	0xb7740000
	uint8_t pckt_setting[]={0,0,0,0,15};
 8008c24:	2205      	movs	r2, #5
 8008c26:	4974      	ldr	r1, [pc, #464]	; (8008df8 <RF_API_init+0x3e4>)
 8008c28:	a80a      	add	r0, sp, #40	; 0x28
	return st_manuf_context->priv_xtal_freq;
 8008c2a:	69e4      	ldr	r4, [r4, #28]
	uint8_t pckt_setting[]={0,0,0,0,15};
 8008c2c:	f000 fc94 	bl	8009558 <memcpy>
	if(f_dig>DIG_DOMAIN_XTAL_THRESH) {
 8008c30:	4b72      	ldr	r3, [pc, #456]	; (8008dfc <RF_API_init+0x3e8>)
 8008c32:	429c      	cmp	r4, r3
 8008c34:	d900      	bls.n	8008c38 <RF_API_init+0x224>
		f_dig >>= 1;
 8008c36:	0864      	lsrs	r4, r4, #1
	dr_m=(uint16_t)((uint64_t)0x25800000000/f_dig-65536);
 8008c38:	2700      	movs	r7, #0
 8008c3a:	2196      	movs	r1, #150	; 0x96
 8008c3c:	0022      	movs	r2, r4
 8008c3e:	003b      	movs	r3, r7
 8008c40:	2000      	movs	r0, #0
 8008c42:	0089      	lsls	r1, r1, #2
 8008c44:	f7f9 fdb6 	bl	80027b4 <__aeabi_uldivmod>
 8008c48:	b283      	uxth	r3, r0
	tgt1=(uint64_t)f_dig*((uint64_t)dr_m+65536);
 8008c4a:	b282      	uxth	r2, r0
 8008c4c:	2080      	movs	r0, #128	; 0x80
	dr_m=(uint16_t)((uint64_t)0x25800000000/f_dig-65536);
 8008c4e:	9304      	str	r3, [sp, #16]
	tgt1=(uint64_t)f_dig*((uint64_t)dr_m+65536);
 8008c50:	2100      	movs	r1, #0
 8008c52:	003b      	movs	r3, r7
 8008c54:	0240      	lsls	r0, r0, #9
 8008c56:	1880      	adds	r0, r0, r2
 8008c58:	4159      	adcs	r1, r3
	dr_m=((uint64_t)0x25800000000-tgt1>tgt2-(uint64_t)0x25800000000)?(dr_m+1):(dr_m);
 8008c5a:	2596      	movs	r5, #150	; 0x96
	tgt1=(uint64_t)f_dig*((uint64_t)dr_m+65536);
 8008c5c:	0022      	movs	r2, r4
 8008c5e:	f7f9 fdc9 	bl	80027f4 <__aeabi_lmul>
	dr_m=(uint16_t)((uint64_t)0x25800000000/f_dig-65536);
 8008c62:	0026      	movs	r6, r4
	dr_m=((uint64_t)0x25800000000-tgt1>tgt2-(uint64_t)0x25800000000)?(dr_m+1):(dr_m);
 8008c64:	2400      	movs	r4, #0
 8008c66:	00ad      	lsls	r5, r5, #2
	tgt1=(uint64_t)f_dig*((uint64_t)dr_m+65536);
 8008c68:	0002      	movs	r2, r0
 8008c6a:	000b      	movs	r3, r1
	dr_m=((uint64_t)0x25800000000-tgt1>tgt2-(uint64_t)0x25800000000)?(dr_m+1):(dr_m);
 8008c6c:	0020      	movs	r0, r4
 8008c6e:	0029      	movs	r1, r5
 8008c70:	1a80      	subs	r0, r0, r2
 8008c72:	4199      	sbcs	r1, r3
	tgt2=(uint64_t)f_dig*((uint64_t)dr_m+1+65536);
 8008c74:	1992      	adds	r2, r2, r6
 8008c76:	417b      	adcs	r3, r7
	dr_m=((uint64_t)0x25800000000-tgt1>tgt2-(uint64_t)0x25800000000)?(dr_m+1):(dr_m);
 8008c78:	1b12      	subs	r2, r2, r4
 8008c7a:	41ab      	sbcs	r3, r5
 8008c7c:	4299      	cmp	r1, r3
 8008c7e:	d802      	bhi.n	8008c86 <RF_API_init+0x272>
 8008c80:	d105      	bne.n	8008c8e <RF_API_init+0x27a>
 8008c82:	4290      	cmp	r0, r2
 8008c84:	d903      	bls.n	8008c8e <RF_API_init+0x27a>
 8008c86:	9b04      	ldr	r3, [sp, #16]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	b29b      	uxth	r3, r3
 8008c8c:	9304      	str	r3, [sp, #16]
	fdev_m=(uint8_t)((uint64_t)3355443200/privGetXtalFrequency());
 8008c8e:	20c8      	movs	r0, #200	; 0xc8
	return st_manuf_context->priv_xtal_freq;
 8008c90:	4b5b      	ldr	r3, [pc, #364]	; (8008e00 <RF_API_init+0x3ec>)
	fdev_m=(uint8_t)((uint64_t)3355443200/privGetXtalFrequency());
 8008c92:	0600      	lsls	r0, r0, #24
	return st_manuf_context->priv_xtal_freq;
 8008c94:	69d9      	ldr	r1, [r3, #28]
	fdev_m=(uint8_t)((uint64_t)3355443200/privGetXtalFrequency());
 8008c96:	f7f9 fc0b 	bl	80024b0 <__udivsi3>
	tgt1=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m);
 8008c9a:	2500      	movs	r5, #0
	fdev_m=(uint8_t)((uint64_t)3355443200/privGetXtalFrequency());
 8008c9c:	b2c3      	uxtb	r3, r0
 8008c9e:	9301      	str	r3, [sp, #4]
	return st_manuf_context->priv_xtal_freq;
 8008ca0:	4b57      	ldr	r3, [pc, #348]	; (8008e00 <RF_API_init+0x3ec>)
	tgt1=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m);
 8008ca2:	9c01      	ldr	r4, [sp, #4]
	return st_manuf_context->priv_xtal_freq;
 8008ca4:	69d8      	ldr	r0, [r3, #28]
 8008ca6:	69db      	ldr	r3, [r3, #28]
	tgt1=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m);
 8008ca8:	0022      	movs	r2, r4
	return st_manuf_context->priv_xtal_freq;
 8008caa:	9305      	str	r3, [sp, #20]
	tgt1=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m);
 8008cac:	0029      	movs	r1, r5
 8008cae:	002b      	movs	r3, r5
 8008cb0:	f7f9 fda0 	bl	80027f4 <__aeabi_lmul>
	fdev_m=((uint64_t)3355443200-tgt1>tgt2-(uint64_t)3355443200)?(fdev_m+1):(fdev_m);
 8008cb4:	22c8      	movs	r2, #200	; 0xc8
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	0612      	lsls	r2, r2, #24
 8008cba:	1a12      	subs	r2, r2, r0
 8008cbc:	418b      	sbcs	r3, r1
	tgt2=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m+1);
 8008cbe:	2001      	movs	r0, #1
 8008cc0:	2100      	movs	r1, #0
	fdev_m=((uint64_t)3355443200-tgt1>tgt2-(uint64_t)3355443200)?(fdev_m+1):(fdev_m);
 8008cc2:	9202      	str	r2, [sp, #8]
 8008cc4:	9303      	str	r3, [sp, #12]
	tgt2=(uint64_t)privGetXtalFrequency()*((uint64_t)fdev_m+1);
 8008cc6:	1900      	adds	r0, r0, r4
 8008cc8:	4169      	adcs	r1, r5
 8008cca:	002b      	movs	r3, r5
 8008ccc:	9a05      	ldr	r2, [sp, #20]
 8008cce:	f7f9 fd91 	bl	80027f4 <__aeabi_lmul>
	fdev_m=((uint64_t)3355443200-tgt1>tgt2-(uint64_t)3355443200)?(fdev_m+1):(fdev_m);
 8008cd2:	23c8      	movs	r3, #200	; 0xc8
 8008cd4:	2400      	movs	r4, #0
 8008cd6:	061b      	lsls	r3, r3, #24
 8008cd8:	1ac0      	subs	r0, r0, r3
 8008cda:	41a1      	sbcs	r1, r4
 8008cdc:	9b03      	ldr	r3, [sp, #12]
 8008cde:	428b      	cmp	r3, r1
 8008ce0:	d803      	bhi.n	8008cea <RF_API_init+0x2d6>
 8008ce2:	d106      	bne.n	8008cf2 <RF_API_init+0x2de>
 8008ce4:	9b02      	ldr	r3, [sp, #8]
 8008ce6:	4283      	cmp	r3, r0
 8008ce8:	d903      	bls.n	8008cf2 <RF_API_init+0x2de>
 8008cea:	9b01      	ldr	r3, [sp, #4]
 8008cec:	3301      	adds	r3, #1
 8008cee:	b2db      	uxtb	r3, r3
 8008cf0:	9301      	str	r3, [sp, #4]
	if_regs[0] = (uint8_t)(((uint64_t)7372800000/privGetXtalFrequency())-100);
 8008cf2:	2500      	movs	r5, #0
	return st_manuf_context->priv_xtal_freq;
 8008cf4:	4b42      	ldr	r3, [pc, #264]	; (8008e00 <RF_API_init+0x3ec>)
	if_regs[0] = (uint8_t)(((uint64_t)7372800000/privGetXtalFrequency())-100);
 8008cf6:	2101      	movs	r1, #1
	return st_manuf_context->priv_xtal_freq;
 8008cf8:	69da      	ldr	r2, [r3, #28]
	if_regs[0] = (uint8_t)(((uint64_t)7372800000/privGetXtalFrequency())-100);
 8008cfa:	4842      	ldr	r0, [pc, #264]	; (8008e04 <RF_API_init+0x3f0>)
 8008cfc:	002b      	movs	r3, r5
 8008cfe:	f7f9 fd59 	bl	80027b4 <__aeabi_uldivmod>
 8008d02:	ab06      	add	r3, sp, #24
 8008d04:	3864      	subs	r0, #100	; 0x64
	if_regs[1] = (uint8_t)(((uint64_t)7372800000/f_dig)-100);
 8008d06:	0032      	movs	r2, r6
	if_regs[0] = (uint8_t)(((uint64_t)7372800000/privGetXtalFrequency())-100);
 8008d08:	7118      	strb	r0, [r3, #4]
	if_regs[1] = (uint8_t)(((uint64_t)7372800000/f_dig)-100);
 8008d0a:	2101      	movs	r1, #1
 8008d0c:	003b      	movs	r3, r7
 8008d0e:	483d      	ldr	r0, [pc, #244]	; (8008e04 <RF_API_init+0x3f0>)
 8008d10:	f7f9 fd50 	bl	80027b4 <__aeabi_uldivmod>
	regs[2]=mod_e;
 8008d14:	2621      	movs	r6, #33	; 0x21
	if_regs[1] = (uint8_t)(((uint64_t)7372800000/f_dig)-100);
 8008d16:	ab06      	add	r3, sp, #24
 8008d18:	3864      	subs	r0, #100	; 0x64
 8008d1a:	7158      	strb	r0, [r3, #5]
	priv_ST_MANUF_WriteRegisters(0x09, 2, if_regs);
 8008d1c:	2102      	movs	r1, #2
 8008d1e:	2009      	movs	r0, #9
 8008d20:	aa07      	add	r2, sp, #28
 8008d22:	f7ff fc13 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	regs[0]=(dr_m>>8)&0xFF;
 8008d26:	9b04      	ldr	r3, [sp, #16]
 8008d28:	ac09      	add	r4, sp, #36	; 0x24
 8008d2a:	ba5b      	rev16	r3, r3
	priv_ST_MANUF_WriteRegisters(0x0E,3,regs);
 8008d2c:	0022      	movs	r2, r4
	regs[0]=(dr_m>>8)&0xFF;
 8008d2e:	8023      	strh	r3, [r4, #0]
	priv_ST_MANUF_WriteRegisters(0x0E,3,regs);
 8008d30:	2103      	movs	r1, #3
 8008d32:	200e      	movs	r0, #14
	regs[2]=mod_e;
 8008d34:	70a6      	strb	r6, [r4, #2]
	priv_ST_MANUF_WriteRegisters(0x0E,3,regs);
 8008d36:	f7ff fc09 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	regs[1]=fdev_m;
 8008d3a:	9b01      	ldr	r3, [sp, #4]
	priv_ST_MANUF_WriteRegisters(0x11,2,regs);
 8008d3c:	0022      	movs	r2, r4
 8008d3e:	2102      	movs	r1, #2
 8008d40:	2011      	movs	r0, #17
	regs[1]=fdev_m;
 8008d42:	7063      	strb	r3, [r4, #1]
	regs[0]=fdev_e;
 8008d44:	7025      	strb	r5, [r4, #0]
	priv_ST_MANUF_WriteRegisters(0x11,2,regs);
 8008d46:	f7ff fc01 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	tmp=0x88; //2.1 KHz
 8008d4a:	ab06      	add	r3, sp, #24
 8008d4c:	1cdc      	adds	r4, r3, #3
 8008d4e:	2388      	movs	r3, #136	; 0x88
	pckt_setting[0]=0x40;
 8008d50:	2740      	movs	r7, #64	; 0x40
	priv_ST_MANUF_WriteRegisters(0x13,1,&tmp);
 8008d52:	0022      	movs	r2, r4
 8008d54:	2101      	movs	r1, #1
 8008d56:	2013      	movs	r0, #19
	tmp=0x88; //2.1 KHz
 8008d58:	7023      	strb	r3, [r4, #0]
	priv_ST_MANUF_WriteRegisters(0x13,1,&tmp);
 8008d5a:	f7ff fbf7 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	priv_ST_MANUF_WriteRegisters(0x2E, 5, pckt_setting);
 8008d5e:	2105      	movs	r1, #5
 8008d60:	202e      	movs	r0, #46	; 0x2e
 8008d62:	aa0a      	add	r2, sp, #40	; 0x28
 8008d64:	f7ff fbf2 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	pckt_setting[0]=0x40;
 8008d68:	aa06      	add	r2, sp, #24
	priv_ST_MANUF_WriteRegisters(0x2B, 1, pckt_setting);
 8008d6a:	2101      	movs	r1, #1
 8008d6c:	202b      	movs	r0, #43	; 0x2b
	pckt_setting[0]=0x40;
 8008d6e:	7417      	strb	r7, [r2, #16]
	priv_ST_MANUF_WriteRegisters(0x2B, 1, pckt_setting);
 8008d70:	aa0a      	add	r2, sp, #40	; 0x28
 8008d72:	f7ff fbeb 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	pckt_setting[0]=0x27;
 8008d76:	4b24      	ldr	r3, [pc, #144]	; (8008e08 <RF_API_init+0x3f4>)
 8008d78:	aa06      	add	r2, sp, #24
 8008d7a:	8213      	strh	r3, [r2, #16]
	priv_ST_MANUF_WriteRegisters(0x35, 2, pckt_setting);
 8008d7c:	2102      	movs	r1, #2
 8008d7e:	2035      	movs	r0, #53	; 0x35
 8008d80:	aa0a      	add	r2, sp, #40	; 0x28
 8008d82:	f7ff fbe3 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	pckt_setting[0]=0x40;
 8008d86:	aa06      	add	r2, sp, #24
	priv_ST_MANUF_WriteRegisters(0x39, 2, pckt_setting);
 8008d88:	2102      	movs	r1, #2
 8008d8a:	2039      	movs	r0, #57	; 0x39
	pckt_setting[0]=0x40;
 8008d8c:	8217      	strh	r7, [r2, #16]
	priv_ST_MANUF_WriteRegisters(0x39, 2, pckt_setting);
 8008d8e:	aa0a      	add	r2, sp, #40	; 0x28
 8008d90:	f7ff fbdc 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	priv_ST_MANUF_WriteRegisters(0x1f,1,&tmp);
 8008d94:	0022      	movs	r2, r4
 8008d96:	2101      	movs	r1, #1
 8008d98:	201f      	movs	r0, #31
	tmp=0x00;
 8008d9a:	7025      	strb	r5, [r4, #0]
	priv_ST_MANUF_WriteRegisters(0x1f,1,&tmp);
 8008d9c:	f7ff fbd6 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	tmp=0x07;
 8008da0:	2307      	movs	r3, #7
	priv_ST_MANUF_WriteRegisters(0x18,1,&tmp);
 8008da2:	0022      	movs	r2, r4
 8008da4:	2101      	movs	r1, #1
 8008da6:	2018      	movs	r0, #24
	tmp=0x07;
 8008da8:	7023      	strb	r3, [r4, #0]
	priv_ST_MANUF_WriteRegisters(0x18,1,&tmp);
 8008daa:	f7ff fbcf 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	tmp=0x70;
 8008dae:	2370      	movs	r3, #112	; 0x70
	priv_ST_MANUF_WriteRegisters(0x21,1,&tmp);
 8008db0:	0022      	movs	r2, r4
 8008db2:	2101      	movs	r1, #1
 8008db4:	0030      	movs	r0, r6
	tmp=0x70;
 8008db6:	7023      	strb	r3, [r4, #0]
	priv_ST_MANUF_WriteRegisters(0x21,1,&tmp);
 8008db8:	f7ff fbc8 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	tmp=0x20;
 8008dbc:	2020      	movs	r0, #32
	priv_ST_MANUF_WriteRegisters(0x20,1,&tmp);
 8008dbe:	0022      	movs	r2, r4
 8008dc0:	2101      	movs	r1, #1
	tmp=0x20;
 8008dc2:	7020      	strb	r0, [r4, #0]
	priv_ST_MANUF_WriteRegisters(0x20,1,&tmp);
 8008dc4:	f7ff fbc2 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	priv_ST_MANUF_WriteRegisters(0x14,1,&tmp);
 8008dc8:	0022      	movs	r2, r4
 8008dca:	2101      	movs	r1, #1
 8008dcc:	2014      	movs	r0, #20
	tmp=0x00;
 8008dce:	7025      	strb	r5, [r4, #0]
	priv_ST_MANUF_WriteRegisters(0x14,1,&tmp);
 8008dd0:	f7ff fbbc 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	tmp=0x88;
 8008dd4:	2388      	movs	r3, #136	; 0x88
	priv_ST_MANUF_WriteRegisters(0x76, 1, &tmp);
 8008dd6:	0022      	movs	r2, r4
 8008dd8:	2101      	movs	r1, #1
 8008dda:	2076      	movs	r0, #118	; 0x76
	tmp=0x88;
 8008ddc:	7023      	strb	r3, [r4, #0]
	priv_ST_MANUF_WriteRegisters(0x76, 1, &tmp);
 8008dde:	f7ff fbb5 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	priv_ST_MANUF_WriteRegisters(0x77, 1, &tmp);
 8008de2:	0022      	movs	r2, r4
 8008de4:	2101      	movs	r1, #1
 8008de6:	2077      	movs	r0, #119	; 0x77
	tmp=0x00;
 8008de8:	7025      	strb	r5, [r4, #0]
	priv_ST_MANUF_WriteRegisters(0x77, 1, &tmp);
 8008dea:	f7ff fbaf 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	st_manuf_context->tx_is_ready=0;
 8008dee:	4b04      	ldr	r3, [pc, #16]	; (8008e00 <RF_API_init+0x3ec>)
 8008df0:	3332      	adds	r3, #50	; 0x32
 8008df2:	701d      	strb	r5, [r3, #0]
}
 8008df4:	e706      	b.n	8008c04 <RF_API_init+0x1f0>
 8008df6:	46c0      	nop			; (mov r8, r8)
 8008df8:	0800aad8 	.word	0x0800aad8
 8008dfc:	01c9c380 	.word	0x01c9c380
 8008e00:	200000c4 	.word	0x200000c4
 8008e04:	b7740000 	.word	0xb7740000
 8008e08:	ffffb227 	.word	0xffffb227

08008e0c <RF_API_change_frequency>:
 *
 * \retval SFX_ERR_NONE:                    No error
 * \retval RF_ERR_API_CHANGE_FREQ:          Change frequency error
 *******************************************************************/
sfx_u8 RF_API_change_frequency(sfx_u32 frequency)
{
 8008e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
	return st_manuf_context->priv_xtal_freq;
 8008e0e:	4c36      	ldr	r4, [pc, #216]	; (8008ee8 <RF_API_change_frequency+0xdc>)
{
 8008e10:	b08b      	sub	sp, #44	; 0x2c
	uint8_t tmp[4];
	uint32_t synth;

	synth=((uint64_t)2097152*frequency/privGetXtalFrequency());
 8008e12:	0ac7      	lsrs	r7, r0, #11
 8008e14:	0546      	lsls	r6, r0, #21
	return st_manuf_context->priv_xtal_freq;
 8008e16:	69e2      	ldr	r2, [r4, #28]
	synth=((uint64_t)2097152*frequency/privGetXtalFrequency());
 8008e18:	2300      	movs	r3, #0
{
 8008e1a:	9006      	str	r0, [sp, #24]
	synth=((uint64_t)2097152*frequency/privGetXtalFrequency());
 8008e1c:	0039      	movs	r1, r7
 8008e1e:	0030      	movs	r0, r6
 8008e20:	f7f9 fcc8 	bl	80027b4 <__aeabi_uldivmod>
 8008e24:	2300      	movs	r3, #0
 8008e26:	0005      	movs	r5, r0
 8008e28:	9301      	str	r3, [sp, #4]
 8008e2a:	9003      	str	r0, [sp, #12]
	return st_manuf_context->priv_xtal_freq;
 8008e2c:	69e0      	ldr	r0, [r4, #28]
 8008e2e:	69e3      	ldr	r3, [r4, #28]
 8008e30:	9500      	str	r5, [sp, #0]
 8008e32:	9307      	str	r3, [sp, #28]
	/* understand if we are getting the nearest integer */
	uint64_t tgt1,tgt2;
	tgt1=(uint64_t)privGetXtalFrequency()*((uint64_t)synth);
 8008e34:	2100      	movs	r1, #0
 8008e36:	9a00      	ldr	r2, [sp, #0]
 8008e38:	9b01      	ldr	r3, [sp, #4]
 8008e3a:	f7f9 fcdb 	bl	80027f4 <__aeabi_lmul>
	tgt2=(uint64_t)privGetXtalFrequency()*((uint64_t)synth+1);
	synth=((uint64_t)2097152*frequency-tgt1>tgt2-(uint64_t)2097152*frequency)?(synth+1):(synth);
 8008e3e:	0032      	movs	r2, r6
 8008e40:	003b      	movs	r3, r7
 8008e42:	1a12      	subs	r2, r2, r0
 8008e44:	418b      	sbcs	r3, r1
	tgt2=(uint64_t)privGetXtalFrequency()*((uint64_t)synth+1);
 8008e46:	2001      	movs	r0, #1
 8008e48:	2100      	movs	r1, #0
	synth=((uint64_t)2097152*frequency-tgt1>tgt2-(uint64_t)2097152*frequency)?(synth+1):(synth);
 8008e4a:	9204      	str	r2, [sp, #16]
 8008e4c:	9305      	str	r3, [sp, #20]
	tgt2=(uint64_t)privGetXtalFrequency()*((uint64_t)synth+1);
 8008e4e:	9a00      	ldr	r2, [sp, #0]
 8008e50:	9b01      	ldr	r3, [sp, #4]
 8008e52:	1880      	adds	r0, r0, r2
 8008e54:	4159      	adcs	r1, r3
 8008e56:	9b01      	ldr	r3, [sp, #4]
 8008e58:	9a07      	ldr	r2, [sp, #28]
 8008e5a:	f7f9 fccb 	bl	80027f4 <__aeabi_lmul>
	synth=((uint64_t)2097152*frequency-tgt1>tgt2-(uint64_t)2097152*frequency)?(synth+1):(synth);
 8008e5e:	1b80      	subs	r0, r0, r6
 8008e60:	41b9      	sbcs	r1, r7
 8008e62:	9b05      	ldr	r3, [sp, #20]
 8008e64:	428b      	cmp	r3, r1
 8008e66:	d803      	bhi.n	8008e70 <RF_API_change_frequency+0x64>
 8008e68:	d104      	bne.n	8008e74 <RF_API_change_frequency+0x68>
 8008e6a:	9b04      	ldr	r3, [sp, #16]
 8008e6c:	4283      	cmp	r3, r0
 8008e6e:	d901      	bls.n	8008e74 <RF_API_change_frequency+0x68>
 8008e70:	1c6b      	adds	r3, r5, #1
 8008e72:	9303      	str	r3, [sp, #12]

	/* CHARGE PUMP */
	uint32_t vcofreq = frequency*4;
 8008e74:	9b06      	ldr	r3, [sp, #24]
	uint8_t cp_isel,pfd_split;

	/* Set the correct charge pump word */
	if(vcofreq>=(uint64_t)3600000000) {
 8008e76:	4a1d      	ldr	r2, [pc, #116]	; (8008eec <RF_API_change_frequency+0xe0>)
	uint32_t vcofreq = frequency*4;
 8008e78:	009f      	lsls	r7, r3, #2
 8008e7a:	4b1d      	ldr	r3, [pc, #116]	; (8008ef0 <RF_API_change_frequency+0xe4>)
	if(vcofreq>=(uint64_t)3600000000) {
 8008e7c:	4297      	cmp	r7, r2
 8008e7e:	d929      	bls.n	8008ed4 <RF_API_change_frequency+0xc8>
	return st_manuf_context->priv_xtal_freq;
 8008e80:	69e2      	ldr	r2, [r4, #28]
		if(privGetXtalFrequency()>DIG_DOMAIN_XTAL_THRESH) {
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d82d      	bhi.n	8008ee2 <RF_API_change_frequency+0xd6>
			cp_isel = 0x02;
			pfd_split = 0;
		}
		else {
			cp_isel = 0x01;
			pfd_split = 1;
 8008e86:	2501      	movs	r5, #1
			cp_isel = 0x01;
 8008e88:	002e      	movs	r6, r5
			pfd_split = 1;
		}
	}

	priv_ST_MANUF_ReadRegisters(0x65, 1, tmp);
	tmp[0] &= (~0x04);
 8008e8a:	2704      	movs	r7, #4
	priv_ST_MANUF_ReadRegisters(0x65, 1, tmp);
 8008e8c:	ac09      	add	r4, sp, #36	; 0x24
 8008e8e:	0022      	movs	r2, r4
 8008e90:	2101      	movs	r1, #1
 8008e92:	2065      	movs	r0, #101	; 0x65
 8008e94:	f7ff fcf2 	bl	800887c <priv_ST_MANUF_ReadRegisters>
	tmp[0] &= (~0x04);
 8008e98:	7823      	ldrb	r3, [r4, #0]
	tmp[0] |= (pfd_split<<2);
 8008e9a:	00ad      	lsls	r5, r5, #2
	tmp[0] &= (~0x04);
 8008e9c:	43bb      	bics	r3, r7
	tmp[0] |= (pfd_split<<2);
 8008e9e:	431d      	orrs	r5, r3
	priv_ST_MANUF_WriteRegisters(0x65, 1, tmp);
 8008ea0:	0022      	movs	r2, r4
 8008ea2:	2101      	movs	r1, #1
 8008ea4:	2065      	movs	r0, #101	; 0x65
	tmp[0] |= (pfd_split<<2);
 8008ea6:	7025      	strb	r5, [r4, #0]
	priv_ST_MANUF_WriteRegisters(0x65, 1, tmp);
 8008ea8:	f7ff fb50 	bl	800854c <priv_ST_MANUF_WriteRegisters>

	tmp[0] = (((uint8_t)(synth>>24)) & 0x0F) | (cp_isel<<5);
 8008eac:	9b03      	ldr	r3, [sp, #12]
 8008eae:	0176      	lsls	r6, r6, #5
 8008eb0:	40bb      	lsls	r3, r7
 8008eb2:	0f1b      	lsrs	r3, r3, #28
 8008eb4:	431e      	orrs	r6, r3
	tmp[1] = (uint8_t)(synth>>16);
 8008eb6:	9b03      	ldr	r3, [sp, #12]
	tmp[2] = (uint8_t)(synth>>8);
	tmp[3] = (uint8_t)synth;

	priv_ST_MANUF_WriteRegisters(0x05, 4, tmp);
 8008eb8:	0022      	movs	r2, r4
	tmp[1] = (uint8_t)(synth>>16);
 8008eba:	0c1b      	lsrs	r3, r3, #16
 8008ebc:	7063      	strb	r3, [r4, #1]
	tmp[2] = (uint8_t)(synth>>8);
 8008ebe:	9b03      	ldr	r3, [sp, #12]
	priv_ST_MANUF_WriteRegisters(0x05, 4, tmp);
 8008ec0:	0039      	movs	r1, r7
	tmp[2] = (uint8_t)(synth>>8);
 8008ec2:	ba5b      	rev16	r3, r3
	priv_ST_MANUF_WriteRegisters(0x05, 4, tmp);
 8008ec4:	2005      	movs	r0, #5
	tmp[2] = (uint8_t)(synth>>8);
 8008ec6:	8063      	strh	r3, [r4, #2]
	tmp[0] = (((uint8_t)(synth>>24)) & 0x0F) | (cp_isel<<5);
 8008ec8:	7026      	strb	r6, [r4, #0]
	priv_ST_MANUF_WriteRegisters(0x05, 4, tmp);
 8008eca:	f7ff fb3f 	bl	800854c <priv_ST_MANUF_WriteRegisters>

	return SFX_ERR_NONE;
}
 8008ece:	2000      	movs	r0, #0
 8008ed0:	b00b      	add	sp, #44	; 0x2c
 8008ed2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return st_manuf_context->priv_xtal_freq;
 8008ed4:	69e2      	ldr	r2, [r4, #28]
			pfd_split = 1;
 8008ed6:	2501      	movs	r5, #1
		if(privGetXtalFrequency()>DIG_DOMAIN_XTAL_THRESH) {
 8008ed8:	429a      	cmp	r2, r3
 8008eda:	d903      	bls.n	8008ee4 <RF_API_change_frequency+0xd8>
			pfd_split = 0;
 8008edc:	2500      	movs	r5, #0
			cp_isel = 0x03;
 8008ede:	2603      	movs	r6, #3
 8008ee0:	e7d3      	b.n	8008e8a <RF_API_change_frequency+0x7e>
			pfd_split = 0;
 8008ee2:	2500      	movs	r5, #0
			cp_isel = 0x02;
 8008ee4:	2602      	movs	r6, #2
 8008ee6:	e7d0      	b.n	8008e8a <RF_API_change_frequency+0x7e>
 8008ee8:	200000c4 	.word	0x200000c4
 8008eec:	d693a3ff 	.word	0xd693a3ff
 8008ef0:	01c9c380 	.word	0x01c9c380

08008ef4 <RF_API_get_version>:
 * \retval SFX_ERR_NONE:                No error
 * \retval RF_ERR_API_GET_VERSION:      Get Version error
 *******************************************************************/
sfx_u8 RF_API_get_version(sfx_u8 **version, sfx_u8 *size)
{
	(*size) = ST_RF_API_VER_SIZE;
 8008ef4:	2308      	movs	r3, #8
 8008ef6:	700b      	strb	r3, [r1, #0]
	(*version) = (sfx_u8*)ST_RF_API_VER;
 8008ef8:	4b01      	ldr	r3, [pc, #4]	; (8008f00 <RF_API_get_version+0xc>)
 8008efa:	6003      	str	r3, [r0, #0]

	return SFX_ERR_NONE;
}
 8008efc:	2000      	movs	r0, #0
 8008efe:	4770      	bx	lr
 8008f00:	0800afd4 	.word	0x0800afd4

08008f04 <ST_RF_API_Timer_CB>:

/* This is the callback that notifies that the MCU timer called
 *  by the MANUF_API_timer_start started/has expired. */
void ST_RF_API_Timer_CB(sfx_u8 state)
{
	st_manuf_context->api_timer_raised=state;
 8008f04:	4b01      	ldr	r3, [pc, #4]	; (8008f0c <ST_RF_API_Timer_CB+0x8>)
 8008f06:	3329      	adds	r3, #41	; 0x29
 8008f08:	7018      	strb	r0, [r3, #0]
}
 8008f0a:	4770      	bx	lr
 8008f0c:	200000c4 	.word	0x200000c4

08008f10 <ST_RF_API_Timer_Channel_Clear_CB>:

/* This is the callback that notifies that the MCU timer started
 *  by the MANUF_API_timer_start has expired. */
void ST_RF_API_Timer_Channel_Clear_CB(void)
{
	st_manuf_context->api_timer_channel_clear_raised=1;
 8008f10:	2201      	movs	r2, #1
 8008f12:	4b02      	ldr	r3, [pc, #8]	; (8008f1c <ST_RF_API_Timer_Channel_Clear_CB+0xc>)
 8008f14:	332a      	adds	r3, #42	; 0x2a
 8008f16:	701a      	strb	r2, [r3, #0]
}
 8008f18:	4770      	bx	lr
 8008f1a:	46c0      	nop			; (mov r8, r8)
 8008f1c:	200000c4 	.word	0x200000c4

08008f20 <ST_RF_API_set_rssi_offset>:
}

/* RSSI offset as param */
sfx_u8 ST_RF_API_set_rssi_offset(int8_t rssi_off)
{
	st_manuf_context->rssi_offset=rssi_off;
 8008f20:	4b02      	ldr	r3, [pc, #8]	; (8008f2c <ST_RF_API_set_rssi_offset+0xc>)
 8008f22:	3330      	adds	r3, #48	; 0x30
 8008f24:	7018      	strb	r0, [r3, #0]

	return SFX_ERR_NONE;
}
 8008f26:	2000      	movs	r0, #0
 8008f28:	4770      	bx	lr
 8008f2a:	46c0      	nop			; (mov r8, r8)
 8008f2c:	200000c4 	.word	0x200000c4

08008f30 <ST_RF_API_set_xtal_freq>:
}

/* XTAL FREQ as param */
sfx_u8 ST_RF_API_set_xtal_freq(sfx_u32 xtal)
{
	st_manuf_context->xtal_lib=xtal;
 8008f30:	4b01      	ldr	r3, [pc, #4]	; (8008f38 <ST_RF_API_set_xtal_freq+0x8>)
 8008f32:	6198      	str	r0, [r3, #24]

	return SFX_ERR_NONE;
}
 8008f34:	2000      	movs	r0, #0
 8008f36:	4770      	bx	lr
 8008f38:	200000c4 	.word	0x200000c4

08008f3c <ST_RF_API_set_freq_offset>:
}

/* FREQ offset as param */
sfx_u8 ST_RF_API_set_freq_offset(sfx_s32 offset)
{
	st_manuf_context->rf_offset=offset;
 8008f3c:	4b01      	ldr	r3, [pc, #4]	; (8008f44 <ST_RF_API_set_freq_offset+0x8>)
 8008f3e:	6218      	str	r0, [r3, #32]

	return SFX_ERR_NONE;
}
 8008f40:	2000      	movs	r0, #0
 8008f42:	4770      	bx	lr
 8008f44:	200000c4 	.word	0x200000c4

08008f48 <ST_RF_API_set_lbt_thr_offset>:
}

/* LBT offset as param */
sfx_u8 ST_RF_API_set_lbt_thr_offset(sfx_s8 lbt_thr_off)
{
	st_manuf_context->lbt_thr_offset=lbt_thr_off;
 8008f48:	4b02      	ldr	r3, [pc, #8]	; (8008f54 <ST_RF_API_set_lbt_thr_offset+0xc>)
 8008f4a:	3331      	adds	r3, #49	; 0x31
 8008f4c:	7018      	strb	r0, [r3, #0]

	return SFX_ERR_NONE;
}
 8008f4e:	2000      	movs	r0, #0
 8008f50:	4770      	bx	lr
 8008f52:	46c0      	nop			; (mov r8, r8)
 8008f54:	200000c4 	.word	0x200000c4

08008f58 <ST_RF_API_reduce_output_power>:
sfx_u8 ST_RF_API_reduce_output_power(int16_t reduction)
{
	if((int16_t)st_manuf_context->bpsk_ramps->fifo_ramp_fast[3]+reduction<st_manuf_context->bpsk_ramps->max_power)
	{}//return ST_MANUF_POWER_ERROR;

	st_manuf_context->power_reduction=reduction;
 8008f58:	4b01      	ldr	r3, [pc, #4]	; (8008f60 <ST_RF_API_reduce_output_power+0x8>)
 8008f5a:	85d8      	strh	r0, [r3, #46]	; 0x2e

	return SFX_ERR_NONE;
}
 8008f5c:	2000      	movs	r0, #0
 8008f5e:	4770      	bx	lr
 8008f60:	200000c4 	.word	0x200000c4

08008f64 <ST_RF_API_set_pa>:
	return SFX_ERR_NONE;
}

sfx_u8 ST_RF_API_set_pa(uint8_t pa)
{
	st_manuf_context->pa_flag=pa;
 8008f64:	4b02      	ldr	r3, [pc, #8]	; (8008f70 <ST_RF_API_set_pa+0xc>)
 8008f66:	3307      	adds	r3, #7
 8008f68:	77d8      	strb	r0, [r3, #31]

	return SFX_ERR_NONE;
}
 8008f6a:	2000      	movs	r0, #0
 8008f6c:	4770      	bx	lr
 8008f6e:	46c0      	nop			; (mov r8, r8)
 8008f70:	200000c4 	.word	0x200000c4

08008f74 <ST_RF_API_get_ramp_duration>:

sfx_u8 ST_RF_API_get_ramp_duration(void)
{
	return st_manuf_context->bpsk_ramps->ramp_start_duration;
 8008f74:	4b03      	ldr	r3, [pc, #12]	; (8008f84 <ST_RF_API_get_ramp_duration+0x10>)
 8008f76:	339c      	adds	r3, #156	; 0x9c
 8008f78:	681a      	ldr	r2, [r3, #0]
 8008f7a:	23ef      	movs	r3, #239	; 0xef
 8008f7c:	005b      	lsls	r3, r3, #1
 8008f7e:	5cd0      	ldrb	r0, [r2, r3]
}
 8008f80:	4770      	bx	lr
 8008f82:	46c0      	nop			; (mov r8, r8)
 8008f84:	200000c4 	.word	0x200000c4

08008f88 <ST_RF_API_smps>:

sfx_u8 ST_RF_API_smps(uint8_t mode)
{
	st_manuf_context->smps_mode=mode;
 8008f88:	4b02      	ldr	r3, [pc, #8]	; (8008f94 <ST_RF_API_smps+0xc>)
 8008f8a:	3305      	adds	r3, #5
 8008f8c:	77d8      	strb	r0, [r3, #31]

	return SFX_ERR_NONE;
}
 8008f8e:	2000      	movs	r0, #0
 8008f90:	4770      	bx	lr
 8008f92:	46c0      	nop			; (mov r8, r8)
 8008f94:	200000c4 	.word	0x200000c4

08008f98 <ST_RF_API_Get_Continuous_TX_or_MONARCH_Scan_Flag>:

sfx_u8 ST_RF_API_Get_Continuous_TX_or_MONARCH_Scan_Flag(void)
{
	return (sfx_u8) st_manuf_context->tx_packet_struct.continuous_tx_flag;
 8008f98:	4b01      	ldr	r3, [pc, #4]	; (8008fa0 <ST_RF_API_Get_Continuous_TX_or_MONARCH_Scan_Flag+0x8>)
 8008f9a:	7c98      	ldrb	r0, [r3, #18]
}
 8008f9c:	4770      	bx	lr
 8008f9e:	46c0      	nop			; (mov r8, r8)
 8008fa0:	200000c4 	.word	0x200000c4

08008fa4 <ST_RF_API_StartTx>:

sfx_u8 ST_RF_API_StartTx(void)
{
 8008fa4:	b510      	push	{r4, lr}
	/*Configure External FE module*/
	if (st_manuf_context->pa_flag==0)
 8008fa6:	4b07      	ldr	r3, [pc, #28]	; (8008fc4 <ST_RF_API_StartTx+0x20>)
		FEM_Operation(FEM_TX_BYPASS);
 8008fa8:	2001      	movs	r0, #1
	if (st_manuf_context->pa_flag==0)
 8008faa:	3307      	adds	r3, #7
 8008fac:	7fdb      	ldrb	r3, [r3, #31]
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d000      	beq.n	8008fb4 <ST_RF_API_StartTx+0x10>
	else
		FEM_Operation(FEM_TX);
 8008fb2:	2002      	movs	r0, #2
 8008fb4:	f7fc fd5a 	bl	8005a6c <FEM_Operation>

	/*Put S2LP in TX*/
	CMD_STROBE_TX();
 8008fb8:	2060      	movs	r0, #96	; 0x60
 8008fba:	f7ff fc80 	bl	80088be <priv_ST_MANUF_CmdStrobe>
	return SFX_ERR_NONE;
}
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	bd10      	pop	{r4, pc}
 8008fc2:	46c0      	nop			; (mov r8, r8)
 8008fc4:	200000c4 	.word	0x200000c4

08008fc8 <RF_API_send>:
{
 8008fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fca:	0007      	movs	r7, r0
 8008fcc:	0016      	movs	r6, r2
 8008fce:	0008      	movs	r0, r1
		return RF_ERR_API_SEND;
 8008fd0:	2531      	movs	r5, #49	; 0x31
	if(type==SFX_NO_MODULATION || st_manuf_context->manuf_state!=ST_MANUF_STATE_IDLE)
 8008fd2:	2900      	cmp	r1, #0
 8008fd4:	d01b      	beq.n	800900e <RF_API_send+0x46>
 8008fd6:	4c11      	ldr	r4, [pc, #68]	; (800901c <RF_API_send+0x54>)
 8008fd8:	0023      	movs	r3, r4
 8008fda:	332c      	adds	r3, #44	; 0x2c
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	b2dd      	uxtb	r5, r3
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d119      	bne.n	8009018 <RF_API_send+0x50>
	priv_ST_MANUF_tx_rf_dbpsk_init(type);
 8008fe4:	f7ff fac8 	bl	8008578 <priv_ST_MANUF_tx_rf_dbpsk_init>
	st_manuf_context->tx_packet_struct.continuous_tx_flag=0; //The transmission will be a packet and not PN9
 8008fe8:	74a5      	strb	r5, [r4, #18]
	st_manuf_context->tx_packet_struct.data_to_send=stream;
 8008fea:	60e7      	str	r7, [r4, #12]
	st_manuf_context->tx_packet_struct.data_to_send_size=size;
 8008fec:	80e6      	strh	r6, [r4, #6]
	priv_ST_MANUF_rf_load_first_ramp_up();
 8008fee:	f7ff fcc9 	bl	8008984 <priv_ST_MANUF_rf_load_first_ramp_up>
	ST_RF_API_StartTx();
 8008ff2:	f7ff ffd7 	bl	8008fa4 <ST_RF_API_StartTx>
	st_manuf_context->s2lp_irq_raised=0;
 8008ff6:	0023      	movs	r3, r4
 8008ff8:	3328      	adds	r3, #40	; 0x28
 8008ffa:	701d      	strb	r5, [r3, #0]
	while(!st_manuf_context->s2lp_irq_raised){
 8008ffc:	0022      	movs	r2, r4
 8008ffe:	3228      	adds	r2, #40	; 0x28
 8009000:	7813      	ldrb	r3, [r2, #0]
 8009002:	2b00      	cmp	r3, #0
 8009004:	d005      	beq.n	8009012 <RF_API_send+0x4a>
	st_manuf_context->s2lp_irq_raised=0;
 8009006:	2300      	movs	r3, #0
	st_manuf_context->manuf_state=ST_MANUF_STATE_IDLE;
 8009008:	342c      	adds	r4, #44	; 0x2c
	st_manuf_context->s2lp_irq_raised=0;
 800900a:	7013      	strb	r3, [r2, #0]
	st_manuf_context->manuf_state=ST_MANUF_STATE_IDLE;
 800900c:	7023      	strb	r3, [r4, #0]
}
 800900e:	0028      	movs	r0, r5
 8009010:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ST_MCU_API_WaitForInterrupt();
 8009012:	f7fc fc35 	bl	8005880 <ST_MCU_API_WaitForInterrupt>
 8009016:	e7f1      	b.n	8008ffc <RF_API_send+0x34>
		return RF_ERR_API_SEND;
 8009018:	2531      	movs	r5, #49	; 0x31
 800901a:	e7f8      	b.n	800900e <RF_API_send+0x46>
 800901c:	200000c4 	.word	0x200000c4

08009020 <RF_API_start_continuous_transmission>:
{
 8009020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if(st_manuf_context->manuf_state!=ST_MANUF_STATE_IDLE)
 8009022:	4c22      	ldr	r4, [pc, #136]	; (80090ac <RF_API_start_continuous_transmission+0x8c>)
{
 8009024:	0005      	movs	r5, r0
	if(st_manuf_context->manuf_state!=ST_MANUF_STATE_IDLE)
 8009026:	0027      	movs	r7, r4
 8009028:	372c      	adds	r7, #44	; 0x2c
 800902a:	783b      	ldrb	r3, [r7, #0]
 800902c:	b2de      	uxtb	r6, r3
 800902e:	2b00      	cmp	r3, #0
 8009030:	d13a      	bne.n	80090a8 <RF_API_start_continuous_transmission+0x88>
	if (type==SFX_DBPSK_100BPS || type==SFX_DBPSK_600BPS)
 8009032:	1e43      	subs	r3, r0, #1
 8009034:	2b01      	cmp	r3, #1
 8009036:	d811      	bhi.n	800905c <RF_API_start_continuous_transmission+0x3c>
		ST_MCU_API_GpioIRQ(st_manuf_context->gpio_function_struct.gpio_irq_pin, SFX_TRUE, SFX_TRUE);
 8009038:	2201      	movs	r2, #1
 800903a:	78e0      	ldrb	r0, [r4, #3]
 800903c:	0011      	movs	r1, r2
 800903e:	f7fb fc89 	bl	8004954 <ST_MCU_API_GpioIRQ>
		st_manuf_context->tx_packet_struct.continuous_tx_flag=1; //The transmission will be a PN9 and no packets
 8009042:	2301      	movs	r3, #1
 8009044:	74a3      	strb	r3, [r4, #18]
		st_manuf_context->tx_packet_struct.current_pn9=PN9_INITIALIZER;
 8009046:	4b1a      	ldr	r3, [pc, #104]	; (80090b0 <RF_API_start_continuous_transmission+0x90>)
		priv_ST_MANUF_tx_rf_dbpsk_init(type);
 8009048:	0028      	movs	r0, r5
		st_manuf_context->tx_packet_struct.current_pn9=PN9_INITIALIZER;
 800904a:	8223      	strh	r3, [r4, #16]
		priv_ST_MANUF_tx_rf_dbpsk_init(type);
 800904c:	f7ff fa94 	bl	8008578 <priv_ST_MANUF_tx_rf_dbpsk_init>
		priv_ST_MANUF_rf_load_first_ramp_up();
 8009050:	f7ff fc98 	bl	8008984 <priv_ST_MANUF_rf_load_first_ramp_up>
		ST_RF_API_StartTx();
 8009054:	f7ff ffa6 	bl	8008fa4 <ST_RF_API_StartTx>
}
 8009058:	0030      	movs	r0, r6
 800905a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	else if (type==SFX_NO_MODULATION)
 800905c:	2800      	cmp	r0, #0
 800905e:	d1fb      	bne.n	8009058 <RF_API_start_continuous_transmission+0x38>
		ST_MCU_API_GpioIRQ(st_manuf_context->gpio_function_struct.gpio_irq_pin, SFX_FALSE, SFX_FALSE);
 8009060:	0032      	movs	r2, r6
 8009062:	0031      	movs	r1, r6
 8009064:	78e0      	ldrb	r0, [r4, #3]
 8009066:	f7fb fc75 	bl	8004954 <ST_MCU_API_GpioIRQ>
		priv_ST_MANUF_ReadRegisters(0x10, 1, &tmp);
 800906a:	466b      	mov	r3, sp
 800906c:	2101      	movs	r1, #1
 800906e:	1dda      	adds	r2, r3, #7
 8009070:	2010      	movs	r0, #16
 8009072:	f7ff fc03 	bl	800887c <priv_ST_MANUF_ReadRegisters>
		tmp &= (~0xF0);
 8009076:	466b      	mov	r3, sp
 8009078:	220f      	movs	r2, #15
 800907a:	79db      	ldrb	r3, [r3, #7]
		priv_ST_MANUF_WriteRegisters(0x10, 1, &tmp);
 800907c:	2101      	movs	r1, #1
		tmp &= (~0xF0);
 800907e:	401a      	ands	r2, r3
		tmp |= 0x70;
 8009080:	2370      	movs	r3, #112	; 0x70
 8009082:	4313      	orrs	r3, r2
 8009084:	466a      	mov	r2, sp
		priv_ST_MANUF_WriteRegisters(0x10, 1, &tmp);
 8009086:	2010      	movs	r0, #16
		tmp |= 0x70;
 8009088:	71d3      	strb	r3, [r2, #7]
		priv_ST_MANUF_WriteRegisters(0x10, 1, &tmp);
 800908a:	3207      	adds	r2, #7
 800908c:	f7ff fa5e 	bl	800854c <priv_ST_MANUF_WriteRegisters>
		tmp=34+st_manuf_context->power_reduction;
 8009090:	466a      	mov	r2, sp
 8009092:	8de3      	ldrh	r3, [r4, #46]	; 0x2e
		priv_ST_MANUF_WriteRegisters(0x5A, 1, &tmp);
 8009094:	2101      	movs	r1, #1
		tmp=34+st_manuf_context->power_reduction;
 8009096:	3322      	adds	r3, #34	; 0x22
 8009098:	71d3      	strb	r3, [r2, #7]
		priv_ST_MANUF_WriteRegisters(0x5A, 1, &tmp);
 800909a:	205a      	movs	r0, #90	; 0x5a
 800909c:	3207      	adds	r2, #7
 800909e:	f7ff fa55 	bl	800854c <priv_ST_MANUF_WriteRegisters>
		st_manuf_context->manuf_state=ST_MANUF_STATE_TX;
 80090a2:	2301      	movs	r3, #1
 80090a4:	703b      	strb	r3, [r7, #0]
 80090a6:	e7d5      	b.n	8009054 <RF_API_start_continuous_transmission+0x34>
		return RF_ERR_API_SEND;
 80090a8:	2631      	movs	r6, #49	; 0x31
 80090aa:	e7d5      	b.n	8009058 <RF_API_start_continuous_transmission+0x38>
 80090ac:	200000c4 	.word	0x200000c4
 80090b0:	000001ff 	.word	0x000001ff

080090b4 <ST_RF_API_StartRx>:

sfx_u8 ST_RF_API_StartRx(void)
{
 80090b4:	b510      	push	{r4, lr}
	/*Configure External FE module in RX*/
	FEM_Operation(FEM_RX);
 80090b6:	2003      	movs	r0, #3
 80090b8:	f7fc fcd8 	bl	8005a6c <FEM_Operation>
	/*Put S2LP in RX*/
	CMD_STROBE_RX();
 80090bc:	2061      	movs	r0, #97	; 0x61
 80090be:	f7ff fbfe 	bl	80088be <priv_ST_MANUF_CmdStrobe>
	return SFX_ERR_NONE;
}
 80090c2:	2000      	movs	r0, #0
 80090c4:	bd10      	pop	{r4, pc}

080090c6 <ST_RF_API_StopRxTx>:

sfx_u8 ST_RF_API_StopRxTx(void)
{
 80090c6:	b510      	push	{r4, lr}
	/*Put S2LP in READY*/
	CMD_STROBE_SABORT();
 80090c8:	2067      	movs	r0, #103	; 0x67
 80090ca:	f7ff fbf8 	bl	80088be <priv_ST_MANUF_CmdStrobe>

	/*Configure External FE module in RX*/
	FEM_Operation(FEM_SHUTDOWN);
 80090ce:	2000      	movs	r0, #0
 80090d0:	f7fc fccc 	bl	8005a6c <FEM_Operation>

	return SFX_ERR_NONE;
}
 80090d4:	2000      	movs	r0, #0
 80090d6:	bd10      	pop	{r4, pc}

080090d8 <RF_API_stop>:
{
 80090d8:	b510      	push	{r4, lr}
	ST_RF_API_StopRxTx();
 80090da:	f7ff fff4 	bl	80090c6 <ST_RF_API_StopRxTx>
	ST_MCU_API_Shutdown(1);
 80090de:	2001      	movs	r0, #1
 80090e0:	f7fb fbd2 	bl	8004888 <ST_MCU_API_Shutdown>
	if (st_manuf_context->manuf_state==ST_MANUF_STATE_MONARCH_SCAN)
 80090e4:	4b07      	ldr	r3, [pc, #28]	; (8009104 <RF_API_stop+0x2c>)
 80090e6:	001a      	movs	r2, r3
 80090e8:	322c      	adds	r2, #44	; 0x2c
 80090ea:	7811      	ldrb	r1, [r2, #0]
 80090ec:	2905      	cmp	r1, #5
 80090ee:	d101      	bne.n	80090f4 <RF_API_stop+0x1c>
		st_manuf_context->manuf_state=ST_MANUF_STATE_IDLE;
 80090f0:	2100      	movs	r1, #0
 80090f2:	7011      	strb	r1, [r2, #0]
	st_manuf_context->s2lp_irq_raised=0;
 80090f4:	001a      	movs	r2, r3
 80090f6:	2000      	movs	r0, #0
 80090f8:	3228      	adds	r2, #40	; 0x28
	st_manuf_context->tx_is_ready=0;
 80090fa:	3332      	adds	r3, #50	; 0x32
	st_manuf_context->s2lp_irq_raised=0;
 80090fc:	7010      	strb	r0, [r2, #0]
	st_manuf_context->tx_is_ready=0;
 80090fe:	7018      	strb	r0, [r3, #0]
}
 8009100:	bd10      	pop	{r4, pc}
 8009102:	46c0      	nop			; (mov r8, r8)
 8009104:	200000c4 	.word	0x200000c4

08009108 <RF_API_stop_continuous_transmission>:
{
 8009108:	b510      	push	{r4, lr}
	ST_RF_API_StopRxTx();
 800910a:	f7ff ffdc 	bl	80090c6 <ST_RF_API_StopRxTx>
	st_manuf_context->manuf_state=ST_MANUF_STATE_IDLE;
 800910e:	4b07      	ldr	r3, [pc, #28]	; (800912c <RF_API_stop_continuous_transmission+0x24>)
 8009110:	2100      	movs	r1, #0
 8009112:	001a      	movs	r2, r3
 8009114:	322c      	adds	r2, #44	; 0x2c
 8009116:	7011      	strb	r1, [r2, #0]
	if (st_manuf_context->tx_packet_struct.continuous_tx_flag)
 8009118:	7c9a      	ldrb	r2, [r3, #18]
 800911a:	428a      	cmp	r2, r1
 800911c:	d003      	beq.n	8009126 <RF_API_stop_continuous_transmission+0x1e>
		ST_MCU_API_GpioIRQ(st_manuf_context->gpio_function_struct.gpio_irq_pin, SFX_FALSE, SFX_FALSE);
 800911e:	000a      	movs	r2, r1
 8009120:	78d8      	ldrb	r0, [r3, #3]
 8009122:	f7fb fc17 	bl	8004954 <ST_MCU_API_GpioIRQ>
}
 8009126:	2000      	movs	r0, #0
 8009128:	bd10      	pop	{r4, pc}
 800912a:	46c0      	nop			; (mov r8, r8)
 800912c:	200000c4 	.word	0x200000c4

08009130 <RF_API_wait_frame>:
	tmp[2]=0x20;
 8009130:	2390      	movs	r3, #144	; 0x90
{
 8009132:	b5f0      	push	{r4, r5, r6, r7, lr}
	sfx_u8 n_bytes, tmp[4]={0,0,0,0};
 8009134:	2400      	movs	r4, #0
	tmp[0]=0x02;
 8009136:	2702      	movs	r7, #2
{
 8009138:	b087      	sub	sp, #28
	tmp[2]=0x20;
 800913a:	005b      	lsls	r3, r3, #1
{
 800913c:	9200      	str	r2, [sp, #0]
	tmp[2]=0x20;
 800913e:	aa04      	add	r2, sp, #16
{
 8009140:	9002      	str	r0, [sp, #8]
 8009142:	9103      	str	r1, [sp, #12]
	priv_ST_MANUF_WriteRegisters(0x50,4,tmp);
 8009144:	2050      	movs	r0, #80	; 0x50
 8009146:	2104      	movs	r1, #4
	sfx_u8 n_bytes, tmp[4]={0,0,0,0};
 8009148:	9405      	str	r4, [sp, #20]
	tmp[2]=0x20;
 800914a:	80d3      	strh	r3, [r2, #6]
	priv_ST_MANUF_WriteRegisters(0x50,4,tmp);
 800914c:	aa05      	add	r2, sp, #20
 800914e:	f7ff f9fd 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	tmp[0]=0x02;
 8009152:	ab04      	add	r3, sp, #16
	priv_ST_MANUF_WriteRegisters(st_manuf_context->gpio_function_struct.gpio_irq_pin,1,tmp);
 8009154:	4d37      	ldr	r5, [pc, #220]	; (8009234 <RF_API_wait_frame+0x104>)
	tmp[0]=0x02;
 8009156:	711f      	strb	r7, [r3, #4]
	priv_ST_MANUF_WriteRegisters(st_manuf_context->gpio_function_struct.gpio_irq_pin,1,tmp);
 8009158:	2101      	movs	r1, #1
 800915a:	78e8      	ldrb	r0, [r5, #3]
 800915c:	aa05      	add	r2, sp, #20
 800915e:	f7ff f9f5 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	ST_MCU_API_GpioIRQ(st_manuf_context->gpio_function_struct.gpio_irq_pin, SFX_TRUE, SFX_FALSE);
 8009162:	0022      	movs	r2, r4
 8009164:	2101      	movs	r1, #1
 8009166:	78e8      	ldrb	r0, [r5, #3]
 8009168:	f7fb fbf4 	bl	8004954 <ST_MCU_API_GpioIRQ>
	CMD_STROBE_FRX();
 800916c:	2071      	movs	r0, #113	; 0x71
 800916e:	f7ff fba6 	bl	80088be <priv_ST_MANUF_CmdStrobe>
	priv_ST_MANUF_ReadRegisters(0xFA,4,tmp);
 8009172:	2104      	movs	r1, #4
 8009174:	20fa      	movs	r0, #250	; 0xfa
 8009176:	aa05      	add	r2, sp, #20
 8009178:	f7ff fb80 	bl	800887c <priv_ST_MANUF_ReadRegisters>
	st_manuf_context->s2lp_irq_raised=0;
 800917c:	002e      	movs	r6, r5
	st_manuf_context->manuf_state=ST_MANUF_STATE_RX;
 800917e:	002b      	movs	r3, r5
	st_manuf_context->s2lp_irq_raised=0;
 8009180:	3628      	adds	r6, #40	; 0x28
	st_manuf_context->manuf_state=ST_MANUF_STATE_RX;
 8009182:	332c      	adds	r3, #44	; 0x2c
	st_manuf_context->s2lp_irq_raised=0;
 8009184:	7034      	strb	r4, [r6, #0]
	st_manuf_context->manuf_state=ST_MANUF_STATE_RX;
 8009186:	701f      	strb	r7, [r3, #0]
	ST_RF_API_StartRx();
 8009188:	f7ff ff94 	bl	80090b4 <ST_RF_API_StartRx>
		if(st_manuf_context->s2lp_irq_raised)
 800918c:	9601      	str	r6, [sp, #4]
	while((!st_manuf_context->api_timer_raised) || sync_detected)
 800918e:	4b29      	ldr	r3, [pc, #164]	; (8009234 <RF_API_wait_frame+0x104>)
 8009190:	3329      	adds	r3, #41	; 0x29
 8009192:	781b      	ldrb	r3, [r3, #0]
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00f      	beq.n	80091b8 <RF_API_wait_frame+0x88>
 8009198:	2c00      	cmp	r4, #0
 800919a:	d10d      	bne.n	80091b8 <RF_API_wait_frame+0x88>
	ST_RF_API_StopRxTx();
 800919c:	f7ff ff93 	bl	80090c6 <ST_RF_API_StopRxTx>
	ST_MCU_API_GpioIRQ(st_manuf_context->gpio_function_struct.gpio_irq_pin, SFX_FALSE, SFX_FALSE);
 80091a0:	4b24      	ldr	r3, [pc, #144]	; (8009234 <RF_API_wait_frame+0x104>)
 80091a2:	0022      	movs	r2, r4
 80091a4:	78d8      	ldrb	r0, [r3, #3]
 80091a6:	0021      	movs	r1, r4
 80091a8:	f7fb fbd4 	bl	8004954 <ST_MCU_API_GpioIRQ>
	st_manuf_context->manuf_state=ST_MANUF_STATE_IDLE;
 80091ac:	4b21      	ldr	r3, [pc, #132]	; (8009234 <RF_API_wait_frame+0x104>)
 80091ae:	332c      	adds	r3, #44	; 0x2c
 80091b0:	701c      	strb	r4, [r3, #0]
	(*state) = DL_TIMEOUT;
 80091b2:	9b00      	ldr	r3, [sp, #0]
 80091b4:	701c      	strb	r4, [r3, #0]
	return SFX_ERR_NONE;
 80091b6:	e034      	b.n	8009222 <RF_API_wait_frame+0xf2>
		ST_MCU_API_WaitForInterrupt();
 80091b8:	f7fc fb62 	bl	8005880 <ST_MCU_API_WaitForInterrupt>
		if(st_manuf_context->s2lp_irq_raised)
 80091bc:	9b01      	ldr	r3, [sp, #4]
 80091be:	781b      	ldrb	r3, [r3, #0]
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d0e4      	beq.n	800918e <RF_API_wait_frame+0x5e>
			st_manuf_context->s2lp_irq_raised=0;
 80091c4:	2700      	movs	r7, #0
			if(tmp[3]&0x01)
 80091c6:	2601      	movs	r6, #1
			st_manuf_context->s2lp_irq_raised=0;
 80091c8:	9b01      	ldr	r3, [sp, #4]
			priv_ST_MANUF_ReadRegisters(0xFA,4,tmp);
 80091ca:	2104      	movs	r1, #4
 80091cc:	20fa      	movs	r0, #250	; 0xfa
 80091ce:	aa05      	add	r2, sp, #20
			st_manuf_context->s2lp_irq_raised=0;
 80091d0:	701f      	strb	r7, [r3, #0]
			priv_ST_MANUF_ReadRegisters(0xFA,4,tmp);
 80091d2:	f7ff fb53 	bl	800887c <priv_ST_MANUF_ReadRegisters>
			if(tmp[3]&0x01)
 80091d6:	ab04      	add	r3, sp, #16
 80091d8:	79db      	ldrb	r3, [r3, #7]
 80091da:	4233      	tst	r3, r6
 80091dc:	d024      	beq.n	8009228 <RF_API_wait_frame+0xf8>
				priv_ST_MANUF_ReadRegisters(0x90, 1, &n_bytes);
 80091de:	ab04      	add	r3, sp, #16
 80091e0:	1cdc      	adds	r4, r3, #3
 80091e2:	0022      	movs	r2, r4
 80091e4:	0031      	movs	r1, r6
 80091e6:	2090      	movs	r0, #144	; 0x90
 80091e8:	f7ff fb48 	bl	800887c <priv_ST_MANUF_ReadRegisters>
				priv_ST_MANUF_ReadFifo(n_bytes,frame);
 80091ec:	20ff      	movs	r0, #255	; 0xff
 80091ee:	7821      	ldrb	r1, [r4, #0]
 80091f0:	9a02      	ldr	r2, [sp, #8]
 80091f2:	f7ff fb43 	bl	800887c <priv_ST_MANUF_ReadRegisters>
				priv_ST_MANUF_ReadRegisters(0xA2, 1, &st_manuf_context->last_rssi_reg);
 80091f6:	0031      	movs	r1, r6
 80091f8:	20a2      	movs	r0, #162	; 0xa2
 80091fa:	4a0f      	ldr	r2, [pc, #60]	; (8009238 <RF_API_wait_frame+0x108>)
 80091fc:	f7ff fb3e 	bl	800887c <priv_ST_MANUF_ReadRegisters>
				(*rssi)=((sfx_s8)st_manuf_context->last_rssi_reg)-146+st_manuf_context->rssi_offset;
 8009200:	2230      	movs	r2, #48	; 0x30
 8009202:	2314      	movs	r3, #20
 8009204:	56aa      	ldrsb	r2, [r5, r2]
 8009206:	56eb      	ldrsb	r3, [r5, r3]
 8009208:	3a92      	subs	r2, #146	; 0x92
 800920a:	189b      	adds	r3, r3, r2
 800920c:	9a03      	ldr	r2, [sp, #12]
				ST_MCU_API_GpioIRQ(st_manuf_context->gpio_function_struct.gpio_irq_pin, SFX_FALSE, SFX_FALSE);
 800920e:	0039      	movs	r1, r7
				(*rssi)=((sfx_s8)st_manuf_context->last_rssi_reg)-146+st_manuf_context->rssi_offset;
 8009210:	8013      	strh	r3, [r2, #0]
				ST_MCU_API_GpioIRQ(st_manuf_context->gpio_function_struct.gpio_irq_pin, SFX_FALSE, SFX_FALSE);
 8009212:	78e8      	ldrb	r0, [r5, #3]
 8009214:	003a      	movs	r2, r7
 8009216:	f7fb fb9d 	bl	8004954 <ST_MCU_API_GpioIRQ>
				(*state) = DL_PASSED;
 800921a:	9b00      	ldr	r3, [sp, #0]
				st_manuf_context->manuf_state=ST_MANUF_STATE_IDLE;
 800921c:	352c      	adds	r5, #44	; 0x2c
 800921e:	702f      	strb	r7, [r5, #0]
				(*state) = DL_PASSED;
 8009220:	701e      	strb	r6, [r3, #0]
}
 8009222:	2000      	movs	r0, #0
 8009224:	b007      	add	sp, #28
 8009226:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if(tmp[2]&0x20)
 8009228:	ab04      	add	r3, sp, #16
 800922a:	799b      	ldrb	r3, [r3, #6]
 800922c:	069b      	lsls	r3, r3, #26
 800922e:	d5ae      	bpl.n	800918e <RF_API_wait_frame+0x5e>
				sync_detected=1;
 8009230:	0034      	movs	r4, r6
 8009232:	e7ac      	b.n	800918e <RF_API_wait_frame+0x5e>
 8009234:	200000c4 	.word	0x200000c4
 8009238:	200000d8 	.word	0x200000d8

0800923c <RF_API_wait_for_clear_channel>:
	uint8_t tmp[4]={0,0,0,0};
 800923c:	2300      	movs	r3, #0
{
 800923e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009240:	b085      	sub	sp, #20
	uint8_t tmp[4]={0,0,0,0};
 8009242:	9303      	str	r3, [sp, #12]
	return st_manuf_context->priv_xtal_freq;
 8009244:	4b5b      	ldr	r3, [pc, #364]	; (80093b4 <RF_API_wait_for_clear_channel+0x178>)
{
 8009246:	0007      	movs	r7, r0
	return st_manuf_context->priv_xtal_freq;
 8009248:	69de      	ldr	r6, [r3, #28]
	if(f_dig>DIG_DOMAIN_XTAL_THRESH) {
 800924a:	4b5b      	ldr	r3, [pc, #364]	; (80093b8 <RF_API_wait_for_clear_channel+0x17c>)
{
 800924c:	9101      	str	r1, [sp, #4]
 800924e:	9200      	str	r2, [sp, #0]
	if(f_dig>DIG_DOMAIN_XTAL_THRESH) {
 8009250:	429e      	cmp	r6, r3
 8009252:	d900      	bls.n	8009256 <RF_API_wait_for_clear_channel+0x1a>
		f_dig >>= 1;
 8009254:	0876      	lsrs	r6, r6, #1
	tmp[2]=0x40; /* RSSI_ABOVE_TH */
 8009256:	2340      	movs	r3, #64	; 0x40
 8009258:	ac03      	add	r4, sp, #12
	priv_ST_MANUF_WriteRegisters(0x50,4,tmp);
 800925a:	0022      	movs	r2, r4
 800925c:	2104      	movs	r1, #4
 800925e:	2050      	movs	r0, #80	; 0x50
	tmp[2]=0x40; /* RSSI_ABOVE_TH */
 8009260:	70a3      	strb	r3, [r4, #2]
	tmp[0]=0x10; /* RX timeout */
 8009262:	3b30      	subs	r3, #48	; 0x30
 8009264:	7023      	strb	r3, [r4, #0]
	priv_ST_MANUF_WriteRegisters(0x50,4,tmp);
 8009266:	f7ff f971 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	tmp[0]=0x02;
 800926a:	2302      	movs	r3, #2
	priv_ST_MANUF_WriteRegisters(st_manuf_context->gpio_function_struct.gpio_irq_pin,1,tmp);
 800926c:	4d51      	ldr	r5, [pc, #324]	; (80093b4 <RF_API_wait_for_clear_channel+0x178>)
	tmp[0]=0x02;
 800926e:	7023      	strb	r3, [r4, #0]
	priv_ST_MANUF_WriteRegisters(st_manuf_context->gpio_function_struct.gpio_irq_pin,1,tmp);
 8009270:	0022      	movs	r2, r4
 8009272:	2101      	movs	r1, #1
 8009274:	78e8      	ldrb	r0, [r5, #3]
 8009276:	f7ff f969 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	ST_MCU_API_GpioIRQ(st_manuf_context->gpio_function_struct.gpio_irq_pin, SFX_TRUE, SFX_FALSE);
 800927a:	2200      	movs	r2, #0
 800927c:	2101      	movs	r1, #1
 800927e:	78e8      	ldrb	r0, [r5, #3]
 8009280:	f7fb fb68 	bl	8004954 <ST_MCU_API_GpioIRQ>
	tmp[0]=(uint8_t)((sfx_s16)146+(sfx_s16)cs_threshold+st_manuf_context->rssi_offset+st_manuf_context->lbt_thr_offset);
 8009284:	002a      	movs	r2, r5
 8009286:	002b      	movs	r3, r5
 8009288:	3230      	adds	r2, #48	; 0x30
 800928a:	3331      	adds	r3, #49	; 0x31
 800928c:	7811      	ldrb	r1, [r2, #0]
 800928e:	781b      	ldrb	r3, [r3, #0]
	priv_ST_MANUF_WriteRegisters(0x18,1,tmp);
 8009290:	0022      	movs	r2, r4
	tmp[0]=(uint8_t)((sfx_s16)146+(sfx_s16)cs_threshold+st_manuf_context->rssi_offset+st_manuf_context->lbt_thr_offset);
 8009292:	18c9      	adds	r1, r1, r3
 8009294:	9b01      	ldr	r3, [sp, #4]
 8009296:	396e      	subs	r1, #110	; 0x6e
 8009298:	18c9      	adds	r1, r1, r3
	priv_ST_MANUF_WriteRegisters(0x18,1,tmp);
 800929a:	2018      	movs	r0, #24
	tmp[0]=(uint8_t)((sfx_s16)146+(sfx_s16)cs_threshold+st_manuf_context->rssi_offset+st_manuf_context->lbt_thr_offset);
 800929c:	7021      	strb	r1, [r4, #0]
	priv_ST_MANUF_WriteRegisters(0x18,1,tmp);
 800929e:	2101      	movs	r1, #1
 80092a0:	f7ff f954 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	tmp[0]=0x80;
 80092a4:	2380      	movs	r3, #128	; 0x80
	priv_ST_MANUF_WriteRegisters(0x39,1,tmp);
 80092a6:	0022      	movs	r2, r4
 80092a8:	2101      	movs	r1, #1
 80092aa:	2039      	movs	r0, #57	; 0x39
	tmp[0]=0x80;
 80092ac:	7023      	strb	r3, [r4, #0]
	priv_ST_MANUF_WriteRegisters(0x39,1,tmp);
 80092ae:	f7ff f94d 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	tmp[1]=(uint8_t)((((uint64_t)cs_min*f_dig/1000)/1210+1)/255);
 80092b2:	2300      	movs	r3, #0
 80092b4:	0032      	movs	r2, r6
 80092b6:	0038      	movs	r0, r7
 80092b8:	0019      	movs	r1, r3
 80092ba:	f7f9 fa9b 	bl	80027f4 <__aeabi_lmul>
 80092be:	2300      	movs	r3, #0
 80092c0:	4a3e      	ldr	r2, [pc, #248]	; (80093bc <RF_API_wait_for_clear_channel+0x180>)
 80092c2:	f7f9 fa77 	bl	80027b4 <__aeabi_uldivmod>
 80092c6:	2601      	movs	r6, #1
 80092c8:	2700      	movs	r7, #0
 80092ca:	1836      	adds	r6, r6, r0
 80092cc:	414f      	adcs	r7, r1
 80092ce:	22ff      	movs	r2, #255	; 0xff
 80092d0:	2300      	movs	r3, #0
 80092d2:	0030      	movs	r0, r6
 80092d4:	0039      	movs	r1, r7
 80092d6:	f7f9 fa6d 	bl	80027b4 <__aeabi_uldivmod>
		tmp[1]=1;
 80092da:	2201      	movs	r2, #1
	tmp[1]=(uint8_t)((((uint64_t)cs_min*f_dig/1000)/1210+1)/255);
 80092dc:	b2c0      	uxtb	r0, r0
	if(tmp[1]>1)
 80092de:	4290      	cmp	r0, r2
 80092e0:	d901      	bls.n	80092e6 <RF_API_wait_for_clear_channel+0xaa>
		tmp[1]--;
 80092e2:	3801      	subs	r0, #1
 80092e4:	b2c2      	uxtb	r2, r0
	tmp[0]=(uint8_t)((((uint64_t)cs_min*f_dig/1000)/1210+1)/(tmp[1]+1));
 80092e6:	2300      	movs	r3, #0
 80092e8:	0030      	movs	r0, r6
 80092ea:	0039      	movs	r1, r7
 80092ec:	7062      	strb	r2, [r4, #1]
 80092ee:	3201      	adds	r2, #1
 80092f0:	f7f9 fa60 	bl	80027b4 <__aeabi_uldivmod>
	priv_ST_MANUF_WriteRegisters(0x46,2,tmp);
 80092f4:	0022      	movs	r2, r4
	tmp[0]=(uint8_t)((((uint64_t)cs_min*f_dig/1000)/1210+1)/(tmp[1]+1));
 80092f6:	7020      	strb	r0, [r4, #0]
	priv_ST_MANUF_WriteRegisters(0x46,2,tmp);
 80092f8:	2102      	movs	r1, #2
 80092fa:	2046      	movs	r0, #70	; 0x46
 80092fc:	f7ff f926 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	st_manuf_context->manuf_state=ST_MANUF_STATE_WAIT_CLEAR_CH;
 8009300:	002b      	movs	r3, r5
 8009302:	2204      	movs	r2, #4
 8009304:	332c      	adds	r3, #44	; 0x2c
 8009306:	701a      	strb	r2, [r3, #0]
		st_manuf_context->s2lp_irq_raised=0;
 8009308:	002e      	movs	r6, r5
	(*state) = DL_PASSED;
 800930a:	2301      	movs	r3, #1
			if(tmp[2]&0x40)
 800930c:	2740      	movs	r7, #64	; 0x40
	(*state) = DL_PASSED;
 800930e:	9a00      	ldr	r2, [sp, #0]
		st_manuf_context->s2lp_irq_raised=0;
 8009310:	3628      	adds	r6, #40	; 0x28
	(*state) = DL_PASSED;
 8009312:	7013      	strb	r3, [r2, #0]
		CMD_STROBE_FRX();
 8009314:	2071      	movs	r0, #113	; 0x71
 8009316:	f7ff fad2 	bl	80088be <priv_ST_MANUF_CmdStrobe>
		priv_ST_MANUF_ReadRegisters(0xFA,4,tmp);
 800931a:	0022      	movs	r2, r4
 800931c:	2104      	movs	r1, #4
 800931e:	20fa      	movs	r0, #250	; 0xfa
 8009320:	f7ff faac 	bl	800887c <priv_ST_MANUF_ReadRegisters>
		st_manuf_context->s2lp_irq_raised=0;
 8009324:	2300      	movs	r3, #0
 8009326:	7033      	strb	r3, [r6, #0]
		ST_RF_API_StartRx();
 8009328:	f7ff fec4 	bl	80090b4 <ST_RF_API_StartRx>
		while(!(st_manuf_context->s2lp_irq_raised || st_manuf_context->api_timer_channel_clear_raised))
 800932c:	7833      	ldrb	r3, [r6, #0]
 800932e:	2b00      	cmp	r3, #0
 8009330:	d104      	bne.n	800933c <RF_API_wait_for_clear_channel+0x100>
 8009332:	002b      	movs	r3, r5
 8009334:	332a      	adds	r3, #42	; 0x2a
 8009336:	781b      	ldrb	r3, [r3, #0]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d022      	beq.n	8009382 <RF_API_wait_for_clear_channel+0x146>
		if(st_manuf_context->s2lp_irq_raised)
 800933c:	7833      	ldrb	r3, [r6, #0]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d00d      	beq.n	800935e <RF_API_wait_for_clear_channel+0x122>
			st_manuf_context->s2lp_irq_raised=0;
 8009342:	2300      	movs	r3, #0
			priv_ST_MANUF_ReadRegisters(0xFA,4,tmp);
 8009344:	0022      	movs	r2, r4
 8009346:	2104      	movs	r1, #4
 8009348:	20fa      	movs	r0, #250	; 0xfa
			st_manuf_context->s2lp_irq_raised=0;
 800934a:	7033      	strb	r3, [r6, #0]
			priv_ST_MANUF_ReadRegisters(0xFA,4,tmp);
 800934c:	f7ff fa96 	bl	800887c <priv_ST_MANUF_ReadRegisters>
			if(tmp[2]&0x40)
 8009350:	78a3      	ldrb	r3, [r4, #2]
 8009352:	001a      	movs	r2, r3
 8009354:	403a      	ands	r2, r7
 8009356:	423b      	tst	r3, r7
 8009358:	d016      	beq.n	8009388 <RF_API_wait_for_clear_channel+0x14c>
				ST_RF_API_StopRxTx();
 800935a:	f7ff feb4 	bl	80090c6 <ST_RF_API_StopRxTx>
		if(st_manuf_context->api_timer_channel_clear_raised)
 800935e:	002b      	movs	r3, r5
 8009360:	332a      	adds	r3, #42	; 0x2a
 8009362:	781a      	ldrb	r2, [r3, #0]
 8009364:	2a00      	cmp	r2, #0
 8009366:	d0d5      	beq.n	8009314 <RF_API_wait_for_clear_channel+0xd8>
			st_manuf_context->api_timer_channel_clear_raised=0;
 8009368:	2400      	movs	r4, #0
 800936a:	701c      	strb	r4, [r3, #0]
			(*state) = DL_TIMEOUT;
 800936c:	9b00      	ldr	r3, [sp, #0]
		ST_MCU_API_Shutdown(1);
 800936e:	2001      	movs	r0, #1
			(*state) = DL_TIMEOUT;
 8009370:	701c      	strb	r4, [r3, #0]
		ST_MCU_API_Shutdown(1);
 8009372:	f7fb fa89 	bl	8004888 <ST_MCU_API_Shutdown>
		MCU_API_timer_stop_carrier_sense();
 8009376:	f7fc fa63 	bl	8005840 <MCU_API_timer_stop_carrier_sense>
		st_manuf_context->tx_is_ready=0;
 800937a:	002b      	movs	r3, r5
 800937c:	3332      	adds	r3, #50	; 0x32
 800937e:	701c      	strb	r4, [r3, #0]
 8009380:	e00e      	b.n	80093a0 <RF_API_wait_for_clear_channel+0x164>
			ST_MCU_API_WaitForInterrupt();
 8009382:	f7fc fa7d 	bl	8005880 <ST_MCU_API_WaitForInterrupt>
 8009386:	e7d1      	b.n	800932c <RF_API_wait_for_clear_channel+0xf0>
			else if(tmp[0]&0x10)
 8009388:	7823      	ldrb	r3, [r4, #0]
 800938a:	06db      	lsls	r3, r3, #27
 800938c:	d5e7      	bpl.n	800935e <RF_API_wait_for_clear_channel+0x122>
				(*state) = DL_PASSED;
 800938e:	2301      	movs	r3, #1
 8009390:	9900      	ldr	r1, [sp, #0]
		tmp[1]=0x00;tmp[0]=0x00;
 8009392:	9203      	str	r2, [sp, #12]
				(*state) = DL_PASSED;
 8009394:	700b      	strb	r3, [r1, #0]
		priv_ST_MANUF_WriteRegisters(0x50,4,tmp);
 8009396:	0022      	movs	r2, r4
 8009398:	2104      	movs	r1, #4
 800939a:	2050      	movs	r0, #80	; 0x50
 800939c:	f7ff f8d6 	bl	800854c <priv_ST_MANUF_WriteRegisters>
	ST_MCU_API_GpioIRQ(st_manuf_context->gpio_function_struct.gpio_irq_pin, SFX_FALSE, SFX_FALSE);
 80093a0:	2200      	movs	r2, #0
 80093a2:	78e8      	ldrb	r0, [r5, #3]
 80093a4:	0011      	movs	r1, r2
 80093a6:	f7fb fad5 	bl	8004954 <ST_MCU_API_GpioIRQ>
	st_manuf_context->manuf_state=ST_MANUF_STATE_IDLE;
 80093aa:	2000      	movs	r0, #0
 80093ac:	352c      	adds	r5, #44	; 0x2c
 80093ae:	7028      	strb	r0, [r5, #0]
}
 80093b0:	b005      	add	sp, #20
 80093b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093b4:	200000c4 	.word	0x200000c4
 80093b8:	01c9c380 	.word	0x01c9c380
 80093bc:	00127690 	.word	0x00127690

080093c0 <ST_RF_API_S2LP_IRQ_CB>:
{
 80093c0:	b510      	push	{r4, lr}
	if((st_manuf_context->manuf_state!=ST_MANUF_STATE_TX) && (st_manuf_context->manuf_state!=ST_MANUF_STATE_MONARCH_SCAN))
 80093c2:	4c45      	ldr	r4, [pc, #276]	; (80094d8 <ST_RF_API_S2LP_IRQ_CB+0x118>)
 80093c4:	0023      	movs	r3, r4
 80093c6:	332c      	adds	r3, #44	; 0x2c
 80093c8:	781a      	ldrb	r2, [r3, #0]
 80093ca:	2a01      	cmp	r2, #1
 80093cc:	d006      	beq.n	80093dc <ST_RF_API_S2LP_IRQ_CB+0x1c>
 80093ce:	781b      	ldrb	r3, [r3, #0]
 80093d0:	2b05      	cmp	r3, #5
 80093d2:	d003      	beq.n	80093dc <ST_RF_API_S2LP_IRQ_CB+0x1c>
		st_manuf_context->s2lp_irq_raised=1;
 80093d4:	2301      	movs	r3, #1
 80093d6:	3428      	adds	r4, #40	; 0x28
		st_manuf_context->s2lp_irq_raised=1;
 80093d8:	7023      	strb	r3, [r4, #0]
}
 80093da:	e033      	b.n	8009444 <ST_RF_API_S2LP_IRQ_CB+0x84>
		if (S2LPGetSpiInUse()==0)
 80093dc:	f7fb ff00 	bl	80051e0 <S2LPGetSpiInUse>
 80093e0:	2800      	cmp	r0, #0
 80093e2:	d12f      	bne.n	8009444 <ST_RF_API_S2LP_IRQ_CB+0x84>
	switch(st_manuf_context->tx_packet_struct.tx_state)
 80093e4:	7920      	ldrb	r0, [r4, #4]
 80093e6:	3802      	subs	r0, #2
 80093e8:	2806      	cmp	r0, #6
 80093ea:	d82b      	bhi.n	8009444 <ST_RF_API_S2LP_IRQ_CB+0x84>
 80093ec:	f7f9 f84c 	bl	8002488 <__gnu_thumb1_case_uqi>
 80093f0:	491a2e04 	.word	0x491a2e04
 80093f4:	5d53      	.short	0x5d53
 80093f6:	64          	.byte	0x64
 80093f7:	00          	.byte	0x00
		priv_ST_MANUF_SpiRaw_Ramp(66, (uint8_t*)st_manuf_context->bpsk_ramps->fifo_start_ramp_up_2, NULL, 1);
 80093f8:	0023      	movs	r3, r4
 80093fa:	339c      	adds	r3, #156	; 0x9c
 80093fc:	6819      	ldr	r1, [r3, #0]
 80093fe:	2201      	movs	r2, #1
 8009400:	319b      	adds	r1, #155	; 0x9b
 8009402:	2042      	movs	r0, #66	; 0x42
 8009404:	31ff      	adds	r1, #255	; 0xff
 8009406:	f7ff fa67 	bl	80088d8 <priv_ST_MANUF_SpiRaw_Ramp.constprop.0>
		if (st_manuf_context->tx_packet_struct.continuous_tx_flag==1)
 800940a:	7ca3      	ldrb	r3, [r4, #18]
 800940c:	2b01      	cmp	r3, #1
 800940e:	d104      	bne.n	800941a <ST_RF_API_S2LP_IRQ_CB+0x5a>
			st_manuf_context->tx_packet_struct.bit_index=8;
 8009410:	3307      	adds	r3, #7
 8009412:	8163      	strh	r3, [r4, #10]
			st_manuf_context->tx_packet_struct.tx_state=ST_TX_CONTINUOS_BPSK;
 8009414:	3b04      	subs	r3, #4
		st_manuf_context->tx_packet_struct.tx_state=ST_TX_STATE_STOP;
 8009416:	7123      	strb	r3, [r4, #4]
		break;
 8009418:	e014      	b.n	8009444 <ST_RF_API_S2LP_IRQ_CB+0x84>
			st_manuf_context->tx_packet_struct.byte_index=0;
 800941a:	23e0      	movs	r3, #224	; 0xe0
 800941c:	02db      	lsls	r3, r3, #11
 800941e:	60a3      	str	r3, [r4, #8]
			st_manuf_context->tx_packet_struct.tx_state=ST_TX_STATE_DATA;
 8009420:	2303      	movs	r3, #3
 8009422:	e7f8      	b.n	8009416 <ST_RF_API_S2LP_IRQ_CB+0x56>
		uint8_t bit=(st_manuf_context->tx_packet_struct.current_pn9>>st_manuf_context->tx_packet_struct.bit_index) & 0x01;
 8009424:	8963      	ldrh	r3, [r4, #10]
 8009426:	8a20      	ldrh	r0, [r4, #16]
 8009428:	4118      	asrs	r0, r3
		priv_ST_MANUF_tx_rf_dbpsk_single_bit(bit);
 800942a:	2301      	movs	r3, #1
 800942c:	4018      	ands	r0, r3
 800942e:	f7ff fa87 	bl	8008940 <priv_ST_MANUF_tx_rf_dbpsk_single_bit>
		if(st_manuf_context->tx_packet_struct.bit_index==0)
 8009432:	8963      	ldrh	r3, [r4, #10]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d106      	bne.n	8009446 <ST_RF_API_S2LP_IRQ_CB+0x86>
			st_manuf_context->tx_packet_struct.bit_index=8;
 8009438:	3308      	adds	r3, #8
			st_manuf_context->tx_packet_struct.current_pn9 = pn9_next_byte(st_manuf_context->tx_packet_struct.current_pn9);
 800943a:	8a20      	ldrh	r0, [r4, #16]
			st_manuf_context->tx_packet_struct.bit_index=8;
 800943c:	8163      	strh	r3, [r4, #10]
			st_manuf_context->tx_packet_struct.current_pn9 = pn9_next_byte(st_manuf_context->tx_packet_struct.current_pn9);
 800943e:	f7ff fad9 	bl	80089f4 <pn9_next_byte>
 8009442:	8220      	strh	r0, [r4, #16]
}
 8009444:	bd10      	pop	{r4, pc}
		else st_manuf_context->tx_packet_struct.bit_index--;
 8009446:	3b01      	subs	r3, #1
 8009448:	8163      	strh	r3, [r4, #10]
 800944a:	e7fb      	b.n	8009444 <ST_RF_API_S2LP_IRQ_CB+0x84>
		uint8_t bit=(st_manuf_context->tx_packet_struct.data_to_send[st_manuf_context->tx_packet_struct.byte_index]>>st_manuf_context->tx_packet_struct.bit_index)&0x01;
 800944c:	8923      	ldrh	r3, [r4, #8]
 800944e:	68e2      	ldr	r2, [r4, #12]
 8009450:	5cd0      	ldrb	r0, [r2, r3]
 8009452:	8963      	ldrh	r3, [r4, #10]
 8009454:	4118      	asrs	r0, r3
		priv_ST_MANUF_tx_rf_dbpsk_single_bit(bit);
 8009456:	2301      	movs	r3, #1
 8009458:	4018      	ands	r0, r3
 800945a:	f7ff fa71 	bl	8008940 <priv_ST_MANUF_tx_rf_dbpsk_single_bit>
		if(st_manuf_context->tx_packet_struct.bit_index==0)
 800945e:	8962      	ldrh	r2, [r4, #10]
 8009460:	2a00      	cmp	r2, #0
 8009462:	d10b      	bne.n	800947c <ST_RF_API_S2LP_IRQ_CB+0xbc>
			st_manuf_context->tx_packet_struct.bit_index=7;
 8009464:	2307      	movs	r3, #7
 8009466:	8163      	strh	r3, [r4, #10]
			st_manuf_context->tx_packet_struct.byte_index++;
 8009468:	8923      	ldrh	r3, [r4, #8]
			if(st_manuf_context->tx_packet_struct.byte_index==st_manuf_context->tx_packet_struct.data_to_send_size)
 800946a:	88e1      	ldrh	r1, [r4, #6]
			st_manuf_context->tx_packet_struct.byte_index++;
 800946c:	3301      	adds	r3, #1
 800946e:	b29b      	uxth	r3, r3
 8009470:	8123      	strh	r3, [r4, #8]
			if(st_manuf_context->tx_packet_struct.byte_index==st_manuf_context->tx_packet_struct.data_to_send_size)
 8009472:	4299      	cmp	r1, r3
 8009474:	d1e6      	bne.n	8009444 <ST_RF_API_S2LP_IRQ_CB+0x84>
				st_manuf_context->tx_packet_struct.tx_state=ST_TX_STATE_RAMP_DOWN_1;
 8009476:	2305      	movs	r3, #5
				st_manuf_context->tx_packet_struct.byte_index=0;
 8009478:	8122      	strh	r2, [r4, #8]
				st_manuf_context->tx_packet_struct.tx_state=ST_TX_STATE_RAMP_DOWN_1;
 800947a:	e7cc      	b.n	8009416 <ST_RF_API_S2LP_IRQ_CB+0x56>
			st_manuf_context->tx_packet_struct.bit_index--;
 800947c:	3a01      	subs	r2, #1
 800947e:	8162      	strh	r2, [r4, #10]
 8009480:	e7e0      	b.n	8009444 <ST_RF_API_S2LP_IRQ_CB+0x84>
		priv_ST_MANUF_SpiRaw_Ramp(82, (uint8_t*)st_manuf_context->bpsk_ramps->fifo_start_ramp_down_1, NULL, 1);
 8009482:	0023      	movs	r3, r4
 8009484:	339c      	adds	r3, #156	; 0x9c
 8009486:	6819      	ldr	r1, [r3, #0]
 8009488:	2201      	movs	r2, #1
 800948a:	2052      	movs	r0, #82	; 0x52
 800948c:	31a4      	adds	r1, #164	; 0xa4
 800948e:	f7ff fa23 	bl	80088d8 <priv_ST_MANUF_SpiRaw_Ramp.constprop.0>
		st_manuf_context->tx_packet_struct.tx_state=ST_TX_STATE_RAMP_DOWN_2;
 8009492:	2306      	movs	r3, #6
 8009494:	e7bf      	b.n	8009416 <ST_RF_API_S2LP_IRQ_CB+0x56>
		priv_ST_MANUF_SpiRaw_Ramp(82, (uint8_t*)st_manuf_context->bpsk_ramps->fifo_start_ramp_down_2, NULL, 1);
 8009496:	0023      	movs	r3, r4
 8009498:	339c      	adds	r3, #156	; 0x9c
 800949a:	6819      	ldr	r1, [r3, #0]
 800949c:	2201      	movs	r2, #1
 800949e:	2052      	movs	r0, #82	; 0x52
 80094a0:	31f6      	adds	r1, #246	; 0xf6
 80094a2:	f7ff fa19 	bl	80088d8 <priv_ST_MANUF_SpiRaw_Ramp.constprop.0>
		st_manuf_context->tx_packet_struct.tx_state=ST_TX_STATE_RAMP_DOWN_3;
 80094a6:	2307      	movs	r3, #7
 80094a8:	e7b5      	b.n	8009416 <ST_RF_API_S2LP_IRQ_CB+0x56>
		priv_ST_MANUF_SpiRaw_Ramp(66, (uint8_t*)zeroes, NULL, 1);
 80094aa:	2201      	movs	r2, #1
 80094ac:	2042      	movs	r0, #66	; 0x42
 80094ae:	490b      	ldr	r1, [pc, #44]	; (80094dc <ST_RF_API_S2LP_IRQ_CB+0x11c>)
 80094b0:	f7ff fa12 	bl	80088d8 <priv_ST_MANUF_SpiRaw_Ramp.constprop.0>
		st_manuf_context->tx_packet_struct.tx_state=ST_TX_STATE_STOP;
 80094b4:	2308      	movs	r3, #8
 80094b6:	e7ae      	b.n	8009416 <ST_RF_API_S2LP_IRQ_CB+0x56>
		ST_RF_API_StopRxTx();
 80094b8:	f7ff fe05 	bl	80090c6 <ST_RF_API_StopRxTx>
		CMD_STROBE_FTX();
 80094bc:	2072      	movs	r0, #114	; 0x72
 80094be:	f7ff f9fe 	bl	80088be <priv_ST_MANUF_CmdStrobe>
		ST_MCU_API_GpioIRQ(st_manuf_context->gpio_function_struct.gpio_irq_pin, SFX_FALSE, SFX_TRUE);
 80094c2:	78e0      	ldrb	r0, [r4, #3]
 80094c4:	2201      	movs	r2, #1
 80094c6:	2100      	movs	r1, #0
 80094c8:	f7fb fa44 	bl	8004954 <ST_MCU_API_GpioIRQ>
		st_manuf_context->tx_packet_struct.tx_state=ST_TX_STATE_NONE;
 80094cc:	2300      	movs	r3, #0
 80094ce:	7123      	strb	r3, [r4, #4]
		st_manuf_context->s2lp_irq_raised=1;
 80094d0:	3428      	adds	r4, #40	; 0x28
 80094d2:	3301      	adds	r3, #1
 80094d4:	e780      	b.n	80093d8 <ST_RF_API_S2LP_IRQ_CB+0x18>
 80094d6:	46c0      	nop			; (mov r8, r8)
 80094d8:	200000c4 	.word	0x200000c4
 80094dc:	0800b39e 	.word	0x0800b39e

080094e0 <MONARCH_API_get_version>:
		sfx_monarch_listening_mode_t mode,
		sfx_error_t(* monarch_pattern_freq_result_callback_handler)(sfx_u32 freq, sfx_pattern_enum_t pattern, sfx_s16 rssi)){ return MONARCH_ERR_API_CONFIGURE_SEARCH_PATTERN; }

__weak sfx_u8 MONARCH_API_stop_search_pattern(void) { return MONARCH_ERR_API_STOP_SEARCH_PATTERN; }

__weak sfx_u8 MONARCH_API_get_version(sfx_u8 **version, sfx_u8 *size) { return MONARCH_ERR_API_TIMER_STOP; }
 80094e0:	2083      	movs	r0, #131	; 0x83
 80094e2:	4770      	bx	lr

080094e4 <__aeabi_memclr>:
 80094e4:	b510      	push	{r4, lr}
 80094e6:	2200      	movs	r2, #0
 80094e8:	f000 f805 	bl	80094f6 <__aeabi_memset>
 80094ec:	bd10      	pop	{r4, pc}

080094ee <__aeabi_memcpy>:
 80094ee:	b510      	push	{r4, lr}
 80094f0:	f000 f832 	bl	8009558 <memcpy>
 80094f4:	bd10      	pop	{r4, pc}

080094f6 <__aeabi_memset>:
 80094f6:	000b      	movs	r3, r1
 80094f8:	b510      	push	{r4, lr}
 80094fa:	0011      	movs	r1, r2
 80094fc:	001a      	movs	r2, r3
 80094fe:	f000 f834 	bl	800956a <memset>
 8009502:	bd10      	pop	{r4, pc}

08009504 <__errno>:
 8009504:	4b01      	ldr	r3, [pc, #4]	; (800950c <__errno+0x8>)
 8009506:	6818      	ldr	r0, [r3, #0]
 8009508:	4770      	bx	lr
 800950a:	46c0      	nop			; (mov r8, r8)
 800950c:	20000164 	.word	0x20000164

08009510 <__libc_init_array>:
 8009510:	b570      	push	{r4, r5, r6, lr}
 8009512:	2600      	movs	r6, #0
 8009514:	4d0c      	ldr	r5, [pc, #48]	; (8009548 <__libc_init_array+0x38>)
 8009516:	4c0d      	ldr	r4, [pc, #52]	; (800954c <__libc_init_array+0x3c>)
 8009518:	1b64      	subs	r4, r4, r5
 800951a:	10a4      	asrs	r4, r4, #2
 800951c:	42a6      	cmp	r6, r4
 800951e:	d109      	bne.n	8009534 <__libc_init_array+0x24>
 8009520:	2600      	movs	r6, #0
 8009522:	f001 fa65 	bl	800a9f0 <_init>
 8009526:	4d0a      	ldr	r5, [pc, #40]	; (8009550 <__libc_init_array+0x40>)
 8009528:	4c0a      	ldr	r4, [pc, #40]	; (8009554 <__libc_init_array+0x44>)
 800952a:	1b64      	subs	r4, r4, r5
 800952c:	10a4      	asrs	r4, r4, #2
 800952e:	42a6      	cmp	r6, r4
 8009530:	d105      	bne.n	800953e <__libc_init_array+0x2e>
 8009532:	bd70      	pop	{r4, r5, r6, pc}
 8009534:	00b3      	lsls	r3, r6, #2
 8009536:	58eb      	ldr	r3, [r5, r3]
 8009538:	4798      	blx	r3
 800953a:	3601      	adds	r6, #1
 800953c:	e7ee      	b.n	800951c <__libc_init_array+0xc>
 800953e:	00b3      	lsls	r3, r6, #2
 8009540:	58eb      	ldr	r3, [r5, r3]
 8009542:	4798      	blx	r3
 8009544:	3601      	adds	r6, #1
 8009546:	e7f2      	b.n	800952e <__libc_init_array+0x1e>
 8009548:	0800b488 	.word	0x0800b488
 800954c:	0800b488 	.word	0x0800b488
 8009550:	0800b488 	.word	0x0800b488
 8009554:	0800b48c 	.word	0x0800b48c

08009558 <memcpy>:
 8009558:	2300      	movs	r3, #0
 800955a:	b510      	push	{r4, lr}
 800955c:	429a      	cmp	r2, r3
 800955e:	d100      	bne.n	8009562 <memcpy+0xa>
 8009560:	bd10      	pop	{r4, pc}
 8009562:	5ccc      	ldrb	r4, [r1, r3]
 8009564:	54c4      	strb	r4, [r0, r3]
 8009566:	3301      	adds	r3, #1
 8009568:	e7f8      	b.n	800955c <memcpy+0x4>

0800956a <memset>:
 800956a:	0003      	movs	r3, r0
 800956c:	1882      	adds	r2, r0, r2
 800956e:	4293      	cmp	r3, r2
 8009570:	d100      	bne.n	8009574 <memset+0xa>
 8009572:	4770      	bx	lr
 8009574:	7019      	strb	r1, [r3, #0]
 8009576:	3301      	adds	r3, #1
 8009578:	e7f9      	b.n	800956e <memset+0x4>
	...

0800957c <iprintf>:
 800957c:	b40f      	push	{r0, r1, r2, r3}
 800957e:	4b0b      	ldr	r3, [pc, #44]	; (80095ac <iprintf+0x30>)
 8009580:	b513      	push	{r0, r1, r4, lr}
 8009582:	681c      	ldr	r4, [r3, #0]
 8009584:	2c00      	cmp	r4, #0
 8009586:	d005      	beq.n	8009594 <iprintf+0x18>
 8009588:	69a3      	ldr	r3, [r4, #24]
 800958a:	2b00      	cmp	r3, #0
 800958c:	d102      	bne.n	8009594 <iprintf+0x18>
 800958e:	0020      	movs	r0, r4
 8009590:	f000 faba 	bl	8009b08 <__sinit>
 8009594:	ab05      	add	r3, sp, #20
 8009596:	0020      	movs	r0, r4
 8009598:	9a04      	ldr	r2, [sp, #16]
 800959a:	68a1      	ldr	r1, [r4, #8]
 800959c:	9301      	str	r3, [sp, #4]
 800959e:	f000 fdf5 	bl	800a18c <_vfiprintf_r>
 80095a2:	bc16      	pop	{r1, r2, r4}
 80095a4:	bc08      	pop	{r3}
 80095a6:	b004      	add	sp, #16
 80095a8:	4718      	bx	r3
 80095aa:	46c0      	nop			; (mov r8, r8)
 80095ac:	20000164 	.word	0x20000164

080095b0 <putchar>:
 80095b0:	4b08      	ldr	r3, [pc, #32]	; (80095d4 <putchar+0x24>)
 80095b2:	b570      	push	{r4, r5, r6, lr}
 80095b4:	681c      	ldr	r4, [r3, #0]
 80095b6:	0005      	movs	r5, r0
 80095b8:	2c00      	cmp	r4, #0
 80095ba:	d005      	beq.n	80095c8 <putchar+0x18>
 80095bc:	69a3      	ldr	r3, [r4, #24]
 80095be:	2b00      	cmp	r3, #0
 80095c0:	d102      	bne.n	80095c8 <putchar+0x18>
 80095c2:	0020      	movs	r0, r4
 80095c4:	f000 faa0 	bl	8009b08 <__sinit>
 80095c8:	0029      	movs	r1, r5
 80095ca:	0020      	movs	r0, r4
 80095cc:	68a2      	ldr	r2, [r4, #8]
 80095ce:	f001 f899 	bl	800a704 <_putc_r>
 80095d2:	bd70      	pop	{r4, r5, r6, pc}
 80095d4:	20000164 	.word	0x20000164

080095d8 <_puts_r>:
 80095d8:	b570      	push	{r4, r5, r6, lr}
 80095da:	0005      	movs	r5, r0
 80095dc:	000e      	movs	r6, r1
 80095de:	2800      	cmp	r0, #0
 80095e0:	d004      	beq.n	80095ec <_puts_r+0x14>
 80095e2:	6983      	ldr	r3, [r0, #24]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d101      	bne.n	80095ec <_puts_r+0x14>
 80095e8:	f000 fa8e 	bl	8009b08 <__sinit>
 80095ec:	69ab      	ldr	r3, [r5, #24]
 80095ee:	68ac      	ldr	r4, [r5, #8]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d102      	bne.n	80095fa <_puts_r+0x22>
 80095f4:	0028      	movs	r0, r5
 80095f6:	f000 fa87 	bl	8009b08 <__sinit>
 80095fa:	4b2d      	ldr	r3, [pc, #180]	; (80096b0 <_puts_r+0xd8>)
 80095fc:	429c      	cmp	r4, r3
 80095fe:	d122      	bne.n	8009646 <_puts_r+0x6e>
 8009600:	686c      	ldr	r4, [r5, #4]
 8009602:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009604:	07db      	lsls	r3, r3, #31
 8009606:	d405      	bmi.n	8009614 <_puts_r+0x3c>
 8009608:	89a3      	ldrh	r3, [r4, #12]
 800960a:	059b      	lsls	r3, r3, #22
 800960c:	d402      	bmi.n	8009614 <_puts_r+0x3c>
 800960e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009610:	f000 fb1b 	bl	8009c4a <__retarget_lock_acquire_recursive>
 8009614:	89a3      	ldrh	r3, [r4, #12]
 8009616:	071b      	lsls	r3, r3, #28
 8009618:	d502      	bpl.n	8009620 <_puts_r+0x48>
 800961a:	6923      	ldr	r3, [r4, #16]
 800961c:	2b00      	cmp	r3, #0
 800961e:	d129      	bne.n	8009674 <_puts_r+0x9c>
 8009620:	0021      	movs	r1, r4
 8009622:	0028      	movs	r0, r5
 8009624:	f000 f8ca 	bl	80097bc <__swsetup_r>
 8009628:	2800      	cmp	r0, #0
 800962a:	d023      	beq.n	8009674 <_puts_r+0x9c>
 800962c:	2501      	movs	r5, #1
 800962e:	426d      	negs	r5, r5
 8009630:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009632:	07db      	lsls	r3, r3, #31
 8009634:	d405      	bmi.n	8009642 <_puts_r+0x6a>
 8009636:	89a3      	ldrh	r3, [r4, #12]
 8009638:	059b      	lsls	r3, r3, #22
 800963a:	d402      	bmi.n	8009642 <_puts_r+0x6a>
 800963c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800963e:	f000 fb05 	bl	8009c4c <__retarget_lock_release_recursive>
 8009642:	0028      	movs	r0, r5
 8009644:	bd70      	pop	{r4, r5, r6, pc}
 8009646:	4b1b      	ldr	r3, [pc, #108]	; (80096b4 <_puts_r+0xdc>)
 8009648:	429c      	cmp	r4, r3
 800964a:	d101      	bne.n	8009650 <_puts_r+0x78>
 800964c:	68ac      	ldr	r4, [r5, #8]
 800964e:	e7d8      	b.n	8009602 <_puts_r+0x2a>
 8009650:	4b19      	ldr	r3, [pc, #100]	; (80096b8 <_puts_r+0xe0>)
 8009652:	429c      	cmp	r4, r3
 8009654:	d1d5      	bne.n	8009602 <_puts_r+0x2a>
 8009656:	68ec      	ldr	r4, [r5, #12]
 8009658:	e7d3      	b.n	8009602 <_puts_r+0x2a>
 800965a:	3601      	adds	r6, #1
 800965c:	60a3      	str	r3, [r4, #8]
 800965e:	2b00      	cmp	r3, #0
 8009660:	da04      	bge.n	800966c <_puts_r+0x94>
 8009662:	69a2      	ldr	r2, [r4, #24]
 8009664:	429a      	cmp	r2, r3
 8009666:	dc16      	bgt.n	8009696 <_puts_r+0xbe>
 8009668:	290a      	cmp	r1, #10
 800966a:	d014      	beq.n	8009696 <_puts_r+0xbe>
 800966c:	6823      	ldr	r3, [r4, #0]
 800966e:	1c5a      	adds	r2, r3, #1
 8009670:	6022      	str	r2, [r4, #0]
 8009672:	7019      	strb	r1, [r3, #0]
 8009674:	68a3      	ldr	r3, [r4, #8]
 8009676:	7831      	ldrb	r1, [r6, #0]
 8009678:	3b01      	subs	r3, #1
 800967a:	2900      	cmp	r1, #0
 800967c:	d1ed      	bne.n	800965a <_puts_r+0x82>
 800967e:	60a3      	str	r3, [r4, #8]
 8009680:	2b00      	cmp	r3, #0
 8009682:	da0f      	bge.n	80096a4 <_puts_r+0xcc>
 8009684:	0028      	movs	r0, r5
 8009686:	0022      	movs	r2, r4
 8009688:	310a      	adds	r1, #10
 800968a:	f000 f841 	bl	8009710 <__swbuf_r>
 800968e:	250a      	movs	r5, #10
 8009690:	1c43      	adds	r3, r0, #1
 8009692:	d1cd      	bne.n	8009630 <_puts_r+0x58>
 8009694:	e7ca      	b.n	800962c <_puts_r+0x54>
 8009696:	0022      	movs	r2, r4
 8009698:	0028      	movs	r0, r5
 800969a:	f000 f839 	bl	8009710 <__swbuf_r>
 800969e:	1c43      	adds	r3, r0, #1
 80096a0:	d1e8      	bne.n	8009674 <_puts_r+0x9c>
 80096a2:	e7c3      	b.n	800962c <_puts_r+0x54>
 80096a4:	250a      	movs	r5, #10
 80096a6:	6823      	ldr	r3, [r4, #0]
 80096a8:	1c5a      	adds	r2, r3, #1
 80096aa:	6022      	str	r2, [r4, #0]
 80096ac:	701d      	strb	r5, [r3, #0]
 80096ae:	e7bf      	b.n	8009630 <_puts_r+0x58>
 80096b0:	0800b40c 	.word	0x0800b40c
 80096b4:	0800b42c 	.word	0x0800b42c
 80096b8:	0800b3ec 	.word	0x0800b3ec

080096bc <puts>:
 80096bc:	b510      	push	{r4, lr}
 80096be:	4b03      	ldr	r3, [pc, #12]	; (80096cc <puts+0x10>)
 80096c0:	0001      	movs	r1, r0
 80096c2:	6818      	ldr	r0, [r3, #0]
 80096c4:	f7ff ff88 	bl	80095d8 <_puts_r>
 80096c8:	bd10      	pop	{r4, pc}
 80096ca:	46c0      	nop			; (mov r8, r8)
 80096cc:	20000164 	.word	0x20000164

080096d0 <siprintf>:
 80096d0:	b40e      	push	{r1, r2, r3}
 80096d2:	b500      	push	{lr}
 80096d4:	490b      	ldr	r1, [pc, #44]	; (8009704 <siprintf+0x34>)
 80096d6:	b09c      	sub	sp, #112	; 0x70
 80096d8:	ab1d      	add	r3, sp, #116	; 0x74
 80096da:	9002      	str	r0, [sp, #8]
 80096dc:	9006      	str	r0, [sp, #24]
 80096de:	9107      	str	r1, [sp, #28]
 80096e0:	9104      	str	r1, [sp, #16]
 80096e2:	4809      	ldr	r0, [pc, #36]	; (8009708 <siprintf+0x38>)
 80096e4:	4909      	ldr	r1, [pc, #36]	; (800970c <siprintf+0x3c>)
 80096e6:	cb04      	ldmia	r3!, {r2}
 80096e8:	9105      	str	r1, [sp, #20]
 80096ea:	6800      	ldr	r0, [r0, #0]
 80096ec:	a902      	add	r1, sp, #8
 80096ee:	9301      	str	r3, [sp, #4]
 80096f0:	f000 fc24 	bl	8009f3c <_svfiprintf_r>
 80096f4:	2300      	movs	r3, #0
 80096f6:	9a02      	ldr	r2, [sp, #8]
 80096f8:	7013      	strb	r3, [r2, #0]
 80096fa:	b01c      	add	sp, #112	; 0x70
 80096fc:	bc08      	pop	{r3}
 80096fe:	b003      	add	sp, #12
 8009700:	4718      	bx	r3
 8009702:	46c0      	nop			; (mov r8, r8)
 8009704:	7fffffff 	.word	0x7fffffff
 8009708:	20000164 	.word	0x20000164
 800970c:	ffff0208 	.word	0xffff0208

08009710 <__swbuf_r>:
 8009710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009712:	0005      	movs	r5, r0
 8009714:	000e      	movs	r6, r1
 8009716:	0014      	movs	r4, r2
 8009718:	2800      	cmp	r0, #0
 800971a:	d004      	beq.n	8009726 <__swbuf_r+0x16>
 800971c:	6983      	ldr	r3, [r0, #24]
 800971e:	2b00      	cmp	r3, #0
 8009720:	d101      	bne.n	8009726 <__swbuf_r+0x16>
 8009722:	f000 f9f1 	bl	8009b08 <__sinit>
 8009726:	4b22      	ldr	r3, [pc, #136]	; (80097b0 <__swbuf_r+0xa0>)
 8009728:	429c      	cmp	r4, r3
 800972a:	d12e      	bne.n	800978a <__swbuf_r+0x7a>
 800972c:	686c      	ldr	r4, [r5, #4]
 800972e:	69a3      	ldr	r3, [r4, #24]
 8009730:	60a3      	str	r3, [r4, #8]
 8009732:	89a3      	ldrh	r3, [r4, #12]
 8009734:	071b      	lsls	r3, r3, #28
 8009736:	d532      	bpl.n	800979e <__swbuf_r+0x8e>
 8009738:	6923      	ldr	r3, [r4, #16]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d02f      	beq.n	800979e <__swbuf_r+0x8e>
 800973e:	6823      	ldr	r3, [r4, #0]
 8009740:	6922      	ldr	r2, [r4, #16]
 8009742:	b2f7      	uxtb	r7, r6
 8009744:	1a98      	subs	r0, r3, r2
 8009746:	6963      	ldr	r3, [r4, #20]
 8009748:	b2f6      	uxtb	r6, r6
 800974a:	4283      	cmp	r3, r0
 800974c:	dc05      	bgt.n	800975a <__swbuf_r+0x4a>
 800974e:	0021      	movs	r1, r4
 8009750:	0028      	movs	r0, r5
 8009752:	f000 f937 	bl	80099c4 <_fflush_r>
 8009756:	2800      	cmp	r0, #0
 8009758:	d127      	bne.n	80097aa <__swbuf_r+0x9a>
 800975a:	68a3      	ldr	r3, [r4, #8]
 800975c:	3001      	adds	r0, #1
 800975e:	3b01      	subs	r3, #1
 8009760:	60a3      	str	r3, [r4, #8]
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	1c5a      	adds	r2, r3, #1
 8009766:	6022      	str	r2, [r4, #0]
 8009768:	701f      	strb	r7, [r3, #0]
 800976a:	6963      	ldr	r3, [r4, #20]
 800976c:	4283      	cmp	r3, r0
 800976e:	d004      	beq.n	800977a <__swbuf_r+0x6a>
 8009770:	89a3      	ldrh	r3, [r4, #12]
 8009772:	07db      	lsls	r3, r3, #31
 8009774:	d507      	bpl.n	8009786 <__swbuf_r+0x76>
 8009776:	2e0a      	cmp	r6, #10
 8009778:	d105      	bne.n	8009786 <__swbuf_r+0x76>
 800977a:	0021      	movs	r1, r4
 800977c:	0028      	movs	r0, r5
 800977e:	f000 f921 	bl	80099c4 <_fflush_r>
 8009782:	2800      	cmp	r0, #0
 8009784:	d111      	bne.n	80097aa <__swbuf_r+0x9a>
 8009786:	0030      	movs	r0, r6
 8009788:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800978a:	4b0a      	ldr	r3, [pc, #40]	; (80097b4 <__swbuf_r+0xa4>)
 800978c:	429c      	cmp	r4, r3
 800978e:	d101      	bne.n	8009794 <__swbuf_r+0x84>
 8009790:	68ac      	ldr	r4, [r5, #8]
 8009792:	e7cc      	b.n	800972e <__swbuf_r+0x1e>
 8009794:	4b08      	ldr	r3, [pc, #32]	; (80097b8 <__swbuf_r+0xa8>)
 8009796:	429c      	cmp	r4, r3
 8009798:	d1c9      	bne.n	800972e <__swbuf_r+0x1e>
 800979a:	68ec      	ldr	r4, [r5, #12]
 800979c:	e7c7      	b.n	800972e <__swbuf_r+0x1e>
 800979e:	0021      	movs	r1, r4
 80097a0:	0028      	movs	r0, r5
 80097a2:	f000 f80b 	bl	80097bc <__swsetup_r>
 80097a6:	2800      	cmp	r0, #0
 80097a8:	d0c9      	beq.n	800973e <__swbuf_r+0x2e>
 80097aa:	2601      	movs	r6, #1
 80097ac:	4276      	negs	r6, r6
 80097ae:	e7ea      	b.n	8009786 <__swbuf_r+0x76>
 80097b0:	0800b40c 	.word	0x0800b40c
 80097b4:	0800b42c 	.word	0x0800b42c
 80097b8:	0800b3ec 	.word	0x0800b3ec

080097bc <__swsetup_r>:
 80097bc:	4b37      	ldr	r3, [pc, #220]	; (800989c <__swsetup_r+0xe0>)
 80097be:	b570      	push	{r4, r5, r6, lr}
 80097c0:	681d      	ldr	r5, [r3, #0]
 80097c2:	0006      	movs	r6, r0
 80097c4:	000c      	movs	r4, r1
 80097c6:	2d00      	cmp	r5, #0
 80097c8:	d005      	beq.n	80097d6 <__swsetup_r+0x1a>
 80097ca:	69ab      	ldr	r3, [r5, #24]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d102      	bne.n	80097d6 <__swsetup_r+0x1a>
 80097d0:	0028      	movs	r0, r5
 80097d2:	f000 f999 	bl	8009b08 <__sinit>
 80097d6:	4b32      	ldr	r3, [pc, #200]	; (80098a0 <__swsetup_r+0xe4>)
 80097d8:	429c      	cmp	r4, r3
 80097da:	d10f      	bne.n	80097fc <__swsetup_r+0x40>
 80097dc:	686c      	ldr	r4, [r5, #4]
 80097de:	230c      	movs	r3, #12
 80097e0:	5ee2      	ldrsh	r2, [r4, r3]
 80097e2:	b293      	uxth	r3, r2
 80097e4:	0711      	lsls	r1, r2, #28
 80097e6:	d42d      	bmi.n	8009844 <__swsetup_r+0x88>
 80097e8:	06d9      	lsls	r1, r3, #27
 80097ea:	d411      	bmi.n	8009810 <__swsetup_r+0x54>
 80097ec:	2309      	movs	r3, #9
 80097ee:	2001      	movs	r0, #1
 80097f0:	6033      	str	r3, [r6, #0]
 80097f2:	3337      	adds	r3, #55	; 0x37
 80097f4:	4313      	orrs	r3, r2
 80097f6:	81a3      	strh	r3, [r4, #12]
 80097f8:	4240      	negs	r0, r0
 80097fa:	bd70      	pop	{r4, r5, r6, pc}
 80097fc:	4b29      	ldr	r3, [pc, #164]	; (80098a4 <__swsetup_r+0xe8>)
 80097fe:	429c      	cmp	r4, r3
 8009800:	d101      	bne.n	8009806 <__swsetup_r+0x4a>
 8009802:	68ac      	ldr	r4, [r5, #8]
 8009804:	e7eb      	b.n	80097de <__swsetup_r+0x22>
 8009806:	4b28      	ldr	r3, [pc, #160]	; (80098a8 <__swsetup_r+0xec>)
 8009808:	429c      	cmp	r4, r3
 800980a:	d1e8      	bne.n	80097de <__swsetup_r+0x22>
 800980c:	68ec      	ldr	r4, [r5, #12]
 800980e:	e7e6      	b.n	80097de <__swsetup_r+0x22>
 8009810:	075b      	lsls	r3, r3, #29
 8009812:	d513      	bpl.n	800983c <__swsetup_r+0x80>
 8009814:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009816:	2900      	cmp	r1, #0
 8009818:	d008      	beq.n	800982c <__swsetup_r+0x70>
 800981a:	0023      	movs	r3, r4
 800981c:	3344      	adds	r3, #68	; 0x44
 800981e:	4299      	cmp	r1, r3
 8009820:	d002      	beq.n	8009828 <__swsetup_r+0x6c>
 8009822:	0030      	movs	r0, r6
 8009824:	f000 fa80 	bl	8009d28 <_free_r>
 8009828:	2300      	movs	r3, #0
 800982a:	6363      	str	r3, [r4, #52]	; 0x34
 800982c:	2224      	movs	r2, #36	; 0x24
 800982e:	89a3      	ldrh	r3, [r4, #12]
 8009830:	4393      	bics	r3, r2
 8009832:	81a3      	strh	r3, [r4, #12]
 8009834:	2300      	movs	r3, #0
 8009836:	6063      	str	r3, [r4, #4]
 8009838:	6923      	ldr	r3, [r4, #16]
 800983a:	6023      	str	r3, [r4, #0]
 800983c:	2308      	movs	r3, #8
 800983e:	89a2      	ldrh	r2, [r4, #12]
 8009840:	4313      	orrs	r3, r2
 8009842:	81a3      	strh	r3, [r4, #12]
 8009844:	6923      	ldr	r3, [r4, #16]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d10b      	bne.n	8009862 <__swsetup_r+0xa6>
 800984a:	21a0      	movs	r1, #160	; 0xa0
 800984c:	2280      	movs	r2, #128	; 0x80
 800984e:	89a3      	ldrh	r3, [r4, #12]
 8009850:	0089      	lsls	r1, r1, #2
 8009852:	0092      	lsls	r2, r2, #2
 8009854:	400b      	ands	r3, r1
 8009856:	4293      	cmp	r3, r2
 8009858:	d003      	beq.n	8009862 <__swsetup_r+0xa6>
 800985a:	0021      	movs	r1, r4
 800985c:	0030      	movs	r0, r6
 800985e:	f000 fa1f 	bl	8009ca0 <__smakebuf_r>
 8009862:	220c      	movs	r2, #12
 8009864:	5ea3      	ldrsh	r3, [r4, r2]
 8009866:	2001      	movs	r0, #1
 8009868:	001a      	movs	r2, r3
 800986a:	b299      	uxth	r1, r3
 800986c:	4002      	ands	r2, r0
 800986e:	4203      	tst	r3, r0
 8009870:	d00f      	beq.n	8009892 <__swsetup_r+0xd6>
 8009872:	2200      	movs	r2, #0
 8009874:	60a2      	str	r2, [r4, #8]
 8009876:	6962      	ldr	r2, [r4, #20]
 8009878:	4252      	negs	r2, r2
 800987a:	61a2      	str	r2, [r4, #24]
 800987c:	2000      	movs	r0, #0
 800987e:	6922      	ldr	r2, [r4, #16]
 8009880:	4282      	cmp	r2, r0
 8009882:	d1ba      	bne.n	80097fa <__swsetup_r+0x3e>
 8009884:	060a      	lsls	r2, r1, #24
 8009886:	d5b8      	bpl.n	80097fa <__swsetup_r+0x3e>
 8009888:	2240      	movs	r2, #64	; 0x40
 800988a:	4313      	orrs	r3, r2
 800988c:	81a3      	strh	r3, [r4, #12]
 800988e:	3801      	subs	r0, #1
 8009890:	e7b3      	b.n	80097fa <__swsetup_r+0x3e>
 8009892:	0788      	lsls	r0, r1, #30
 8009894:	d400      	bmi.n	8009898 <__swsetup_r+0xdc>
 8009896:	6962      	ldr	r2, [r4, #20]
 8009898:	60a2      	str	r2, [r4, #8]
 800989a:	e7ef      	b.n	800987c <__swsetup_r+0xc0>
 800989c:	20000164 	.word	0x20000164
 80098a0:	0800b40c 	.word	0x0800b40c
 80098a4:	0800b42c 	.word	0x0800b42c
 80098a8:	0800b3ec 	.word	0x0800b3ec

080098ac <__sflush_r>:
 80098ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80098ae:	898b      	ldrh	r3, [r1, #12]
 80098b0:	0005      	movs	r5, r0
 80098b2:	000c      	movs	r4, r1
 80098b4:	071a      	lsls	r2, r3, #28
 80098b6:	d45f      	bmi.n	8009978 <__sflush_r+0xcc>
 80098b8:	684a      	ldr	r2, [r1, #4]
 80098ba:	2a00      	cmp	r2, #0
 80098bc:	dc04      	bgt.n	80098c8 <__sflush_r+0x1c>
 80098be:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 80098c0:	2a00      	cmp	r2, #0
 80098c2:	dc01      	bgt.n	80098c8 <__sflush_r+0x1c>
 80098c4:	2000      	movs	r0, #0
 80098c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80098c8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80098ca:	2f00      	cmp	r7, #0
 80098cc:	d0fa      	beq.n	80098c4 <__sflush_r+0x18>
 80098ce:	2200      	movs	r2, #0
 80098d0:	2180      	movs	r1, #128	; 0x80
 80098d2:	682e      	ldr	r6, [r5, #0]
 80098d4:	602a      	str	r2, [r5, #0]
 80098d6:	001a      	movs	r2, r3
 80098d8:	0149      	lsls	r1, r1, #5
 80098da:	400a      	ands	r2, r1
 80098dc:	420b      	tst	r3, r1
 80098de:	d034      	beq.n	800994a <__sflush_r+0x9e>
 80098e0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80098e2:	89a3      	ldrh	r3, [r4, #12]
 80098e4:	075b      	lsls	r3, r3, #29
 80098e6:	d506      	bpl.n	80098f6 <__sflush_r+0x4a>
 80098e8:	6863      	ldr	r3, [r4, #4]
 80098ea:	1ac0      	subs	r0, r0, r3
 80098ec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d001      	beq.n	80098f6 <__sflush_r+0x4a>
 80098f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80098f4:	1ac0      	subs	r0, r0, r3
 80098f6:	0002      	movs	r2, r0
 80098f8:	6a21      	ldr	r1, [r4, #32]
 80098fa:	2300      	movs	r3, #0
 80098fc:	0028      	movs	r0, r5
 80098fe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8009900:	47b8      	blx	r7
 8009902:	89a1      	ldrh	r1, [r4, #12]
 8009904:	1c43      	adds	r3, r0, #1
 8009906:	d106      	bne.n	8009916 <__sflush_r+0x6a>
 8009908:	682b      	ldr	r3, [r5, #0]
 800990a:	2b1d      	cmp	r3, #29
 800990c:	d831      	bhi.n	8009972 <__sflush_r+0xc6>
 800990e:	4a2c      	ldr	r2, [pc, #176]	; (80099c0 <__sflush_r+0x114>)
 8009910:	40da      	lsrs	r2, r3
 8009912:	07d3      	lsls	r3, r2, #31
 8009914:	d52d      	bpl.n	8009972 <__sflush_r+0xc6>
 8009916:	2300      	movs	r3, #0
 8009918:	6063      	str	r3, [r4, #4]
 800991a:	6923      	ldr	r3, [r4, #16]
 800991c:	6023      	str	r3, [r4, #0]
 800991e:	04cb      	lsls	r3, r1, #19
 8009920:	d505      	bpl.n	800992e <__sflush_r+0x82>
 8009922:	1c43      	adds	r3, r0, #1
 8009924:	d102      	bne.n	800992c <__sflush_r+0x80>
 8009926:	682b      	ldr	r3, [r5, #0]
 8009928:	2b00      	cmp	r3, #0
 800992a:	d100      	bne.n	800992e <__sflush_r+0x82>
 800992c:	6560      	str	r0, [r4, #84]	; 0x54
 800992e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009930:	602e      	str	r6, [r5, #0]
 8009932:	2900      	cmp	r1, #0
 8009934:	d0c6      	beq.n	80098c4 <__sflush_r+0x18>
 8009936:	0023      	movs	r3, r4
 8009938:	3344      	adds	r3, #68	; 0x44
 800993a:	4299      	cmp	r1, r3
 800993c:	d002      	beq.n	8009944 <__sflush_r+0x98>
 800993e:	0028      	movs	r0, r5
 8009940:	f000 f9f2 	bl	8009d28 <_free_r>
 8009944:	2000      	movs	r0, #0
 8009946:	6360      	str	r0, [r4, #52]	; 0x34
 8009948:	e7bd      	b.n	80098c6 <__sflush_r+0x1a>
 800994a:	2301      	movs	r3, #1
 800994c:	0028      	movs	r0, r5
 800994e:	6a21      	ldr	r1, [r4, #32]
 8009950:	47b8      	blx	r7
 8009952:	1c43      	adds	r3, r0, #1
 8009954:	d1c5      	bne.n	80098e2 <__sflush_r+0x36>
 8009956:	682b      	ldr	r3, [r5, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d0c2      	beq.n	80098e2 <__sflush_r+0x36>
 800995c:	2b1d      	cmp	r3, #29
 800995e:	d001      	beq.n	8009964 <__sflush_r+0xb8>
 8009960:	2b16      	cmp	r3, #22
 8009962:	d101      	bne.n	8009968 <__sflush_r+0xbc>
 8009964:	602e      	str	r6, [r5, #0]
 8009966:	e7ad      	b.n	80098c4 <__sflush_r+0x18>
 8009968:	2340      	movs	r3, #64	; 0x40
 800996a:	89a2      	ldrh	r2, [r4, #12]
 800996c:	4313      	orrs	r3, r2
 800996e:	81a3      	strh	r3, [r4, #12]
 8009970:	e7a9      	b.n	80098c6 <__sflush_r+0x1a>
 8009972:	2340      	movs	r3, #64	; 0x40
 8009974:	430b      	orrs	r3, r1
 8009976:	e7fa      	b.n	800996e <__sflush_r+0xc2>
 8009978:	690f      	ldr	r7, [r1, #16]
 800997a:	2f00      	cmp	r7, #0
 800997c:	d0a2      	beq.n	80098c4 <__sflush_r+0x18>
 800997e:	680a      	ldr	r2, [r1, #0]
 8009980:	600f      	str	r7, [r1, #0]
 8009982:	1bd2      	subs	r2, r2, r7
 8009984:	9201      	str	r2, [sp, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	079b      	lsls	r3, r3, #30
 800998a:	d100      	bne.n	800998e <__sflush_r+0xe2>
 800998c:	694a      	ldr	r2, [r1, #20]
 800998e:	60a2      	str	r2, [r4, #8]
 8009990:	9b01      	ldr	r3, [sp, #4]
 8009992:	2b00      	cmp	r3, #0
 8009994:	dc00      	bgt.n	8009998 <__sflush_r+0xec>
 8009996:	e795      	b.n	80098c4 <__sflush_r+0x18>
 8009998:	003a      	movs	r2, r7
 800999a:	0028      	movs	r0, r5
 800999c:	9b01      	ldr	r3, [sp, #4]
 800999e:	6a21      	ldr	r1, [r4, #32]
 80099a0:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80099a2:	47b0      	blx	r6
 80099a4:	2800      	cmp	r0, #0
 80099a6:	dc06      	bgt.n	80099b6 <__sflush_r+0x10a>
 80099a8:	2340      	movs	r3, #64	; 0x40
 80099aa:	2001      	movs	r0, #1
 80099ac:	89a2      	ldrh	r2, [r4, #12]
 80099ae:	4240      	negs	r0, r0
 80099b0:	4313      	orrs	r3, r2
 80099b2:	81a3      	strh	r3, [r4, #12]
 80099b4:	e787      	b.n	80098c6 <__sflush_r+0x1a>
 80099b6:	9b01      	ldr	r3, [sp, #4]
 80099b8:	183f      	adds	r7, r7, r0
 80099ba:	1a1b      	subs	r3, r3, r0
 80099bc:	9301      	str	r3, [sp, #4]
 80099be:	e7e7      	b.n	8009990 <__sflush_r+0xe4>
 80099c0:	20400001 	.word	0x20400001

080099c4 <_fflush_r>:
 80099c4:	690b      	ldr	r3, [r1, #16]
 80099c6:	b570      	push	{r4, r5, r6, lr}
 80099c8:	0005      	movs	r5, r0
 80099ca:	000c      	movs	r4, r1
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d102      	bne.n	80099d6 <_fflush_r+0x12>
 80099d0:	2500      	movs	r5, #0
 80099d2:	0028      	movs	r0, r5
 80099d4:	bd70      	pop	{r4, r5, r6, pc}
 80099d6:	2800      	cmp	r0, #0
 80099d8:	d004      	beq.n	80099e4 <_fflush_r+0x20>
 80099da:	6983      	ldr	r3, [r0, #24]
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d101      	bne.n	80099e4 <_fflush_r+0x20>
 80099e0:	f000 f892 	bl	8009b08 <__sinit>
 80099e4:	4b14      	ldr	r3, [pc, #80]	; (8009a38 <_fflush_r+0x74>)
 80099e6:	429c      	cmp	r4, r3
 80099e8:	d11b      	bne.n	8009a22 <_fflush_r+0x5e>
 80099ea:	686c      	ldr	r4, [r5, #4]
 80099ec:	220c      	movs	r2, #12
 80099ee:	5ea3      	ldrsh	r3, [r4, r2]
 80099f0:	2b00      	cmp	r3, #0
 80099f2:	d0ed      	beq.n	80099d0 <_fflush_r+0xc>
 80099f4:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80099f6:	07d2      	lsls	r2, r2, #31
 80099f8:	d404      	bmi.n	8009a04 <_fflush_r+0x40>
 80099fa:	059b      	lsls	r3, r3, #22
 80099fc:	d402      	bmi.n	8009a04 <_fflush_r+0x40>
 80099fe:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a00:	f000 f923 	bl	8009c4a <__retarget_lock_acquire_recursive>
 8009a04:	0028      	movs	r0, r5
 8009a06:	0021      	movs	r1, r4
 8009a08:	f7ff ff50 	bl	80098ac <__sflush_r>
 8009a0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009a0e:	0005      	movs	r5, r0
 8009a10:	07db      	lsls	r3, r3, #31
 8009a12:	d4de      	bmi.n	80099d2 <_fflush_r+0xe>
 8009a14:	89a3      	ldrh	r3, [r4, #12]
 8009a16:	059b      	lsls	r3, r3, #22
 8009a18:	d4db      	bmi.n	80099d2 <_fflush_r+0xe>
 8009a1a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009a1c:	f000 f916 	bl	8009c4c <__retarget_lock_release_recursive>
 8009a20:	e7d7      	b.n	80099d2 <_fflush_r+0xe>
 8009a22:	4b06      	ldr	r3, [pc, #24]	; (8009a3c <_fflush_r+0x78>)
 8009a24:	429c      	cmp	r4, r3
 8009a26:	d101      	bne.n	8009a2c <_fflush_r+0x68>
 8009a28:	68ac      	ldr	r4, [r5, #8]
 8009a2a:	e7df      	b.n	80099ec <_fflush_r+0x28>
 8009a2c:	4b04      	ldr	r3, [pc, #16]	; (8009a40 <_fflush_r+0x7c>)
 8009a2e:	429c      	cmp	r4, r3
 8009a30:	d1dc      	bne.n	80099ec <_fflush_r+0x28>
 8009a32:	68ec      	ldr	r4, [r5, #12]
 8009a34:	e7da      	b.n	80099ec <_fflush_r+0x28>
 8009a36:	46c0      	nop			; (mov r8, r8)
 8009a38:	0800b40c 	.word	0x0800b40c
 8009a3c:	0800b42c 	.word	0x0800b42c
 8009a40:	0800b3ec 	.word	0x0800b3ec

08009a44 <std>:
 8009a44:	2300      	movs	r3, #0
 8009a46:	b510      	push	{r4, lr}
 8009a48:	0004      	movs	r4, r0
 8009a4a:	6003      	str	r3, [r0, #0]
 8009a4c:	6043      	str	r3, [r0, #4]
 8009a4e:	6083      	str	r3, [r0, #8]
 8009a50:	8181      	strh	r1, [r0, #12]
 8009a52:	6643      	str	r3, [r0, #100]	; 0x64
 8009a54:	0019      	movs	r1, r3
 8009a56:	81c2      	strh	r2, [r0, #14]
 8009a58:	6103      	str	r3, [r0, #16]
 8009a5a:	6143      	str	r3, [r0, #20]
 8009a5c:	6183      	str	r3, [r0, #24]
 8009a5e:	2208      	movs	r2, #8
 8009a60:	305c      	adds	r0, #92	; 0x5c
 8009a62:	f7ff fd82 	bl	800956a <memset>
 8009a66:	4b05      	ldr	r3, [pc, #20]	; (8009a7c <std+0x38>)
 8009a68:	6263      	str	r3, [r4, #36]	; 0x24
 8009a6a:	4b05      	ldr	r3, [pc, #20]	; (8009a80 <std+0x3c>)
 8009a6c:	6224      	str	r4, [r4, #32]
 8009a6e:	62a3      	str	r3, [r4, #40]	; 0x28
 8009a70:	4b04      	ldr	r3, [pc, #16]	; (8009a84 <std+0x40>)
 8009a72:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009a74:	4b04      	ldr	r3, [pc, #16]	; (8009a88 <std+0x44>)
 8009a76:	6323      	str	r3, [r4, #48]	; 0x30
 8009a78:	bd10      	pop	{r4, pc}
 8009a7a:	46c0      	nop			; (mov r8, r8)
 8009a7c:	0800a7bd 	.word	0x0800a7bd
 8009a80:	0800a7e5 	.word	0x0800a7e5
 8009a84:	0800a81d 	.word	0x0800a81d
 8009a88:	0800a849 	.word	0x0800a849

08009a8c <_cleanup_r>:
 8009a8c:	b510      	push	{r4, lr}
 8009a8e:	4902      	ldr	r1, [pc, #8]	; (8009a98 <_cleanup_r+0xc>)
 8009a90:	f000 f8ba 	bl	8009c08 <_fwalk_reent>
 8009a94:	bd10      	pop	{r4, pc}
 8009a96:	46c0      	nop			; (mov r8, r8)
 8009a98:	080099c5 	.word	0x080099c5

08009a9c <__sfmoreglue>:
 8009a9c:	b570      	push	{r4, r5, r6, lr}
 8009a9e:	2568      	movs	r5, #104	; 0x68
 8009aa0:	1e4a      	subs	r2, r1, #1
 8009aa2:	4355      	muls	r5, r2
 8009aa4:	000e      	movs	r6, r1
 8009aa6:	0029      	movs	r1, r5
 8009aa8:	3174      	adds	r1, #116	; 0x74
 8009aaa:	f000 f987 	bl	8009dbc <_malloc_r>
 8009aae:	1e04      	subs	r4, r0, #0
 8009ab0:	d008      	beq.n	8009ac4 <__sfmoreglue+0x28>
 8009ab2:	2100      	movs	r1, #0
 8009ab4:	002a      	movs	r2, r5
 8009ab6:	6001      	str	r1, [r0, #0]
 8009ab8:	6046      	str	r6, [r0, #4]
 8009aba:	300c      	adds	r0, #12
 8009abc:	60a0      	str	r0, [r4, #8]
 8009abe:	3268      	adds	r2, #104	; 0x68
 8009ac0:	f7ff fd53 	bl	800956a <memset>
 8009ac4:	0020      	movs	r0, r4
 8009ac6:	bd70      	pop	{r4, r5, r6, pc}

08009ac8 <__sfp_lock_acquire>:
 8009ac8:	b510      	push	{r4, lr}
 8009aca:	4802      	ldr	r0, [pc, #8]	; (8009ad4 <__sfp_lock_acquire+0xc>)
 8009acc:	f000 f8bd 	bl	8009c4a <__retarget_lock_acquire_recursive>
 8009ad0:	bd10      	pop	{r4, pc}
 8009ad2:	46c0      	nop			; (mov r8, r8)
 8009ad4:	20000914 	.word	0x20000914

08009ad8 <__sfp_lock_release>:
 8009ad8:	b510      	push	{r4, lr}
 8009ada:	4802      	ldr	r0, [pc, #8]	; (8009ae4 <__sfp_lock_release+0xc>)
 8009adc:	f000 f8b6 	bl	8009c4c <__retarget_lock_release_recursive>
 8009ae0:	bd10      	pop	{r4, pc}
 8009ae2:	46c0      	nop			; (mov r8, r8)
 8009ae4:	20000914 	.word	0x20000914

08009ae8 <__sinit_lock_acquire>:
 8009ae8:	b510      	push	{r4, lr}
 8009aea:	4802      	ldr	r0, [pc, #8]	; (8009af4 <__sinit_lock_acquire+0xc>)
 8009aec:	f000 f8ad 	bl	8009c4a <__retarget_lock_acquire_recursive>
 8009af0:	bd10      	pop	{r4, pc}
 8009af2:	46c0      	nop			; (mov r8, r8)
 8009af4:	2000090f 	.word	0x2000090f

08009af8 <__sinit_lock_release>:
 8009af8:	b510      	push	{r4, lr}
 8009afa:	4802      	ldr	r0, [pc, #8]	; (8009b04 <__sinit_lock_release+0xc>)
 8009afc:	f000 f8a6 	bl	8009c4c <__retarget_lock_release_recursive>
 8009b00:	bd10      	pop	{r4, pc}
 8009b02:	46c0      	nop			; (mov r8, r8)
 8009b04:	2000090f 	.word	0x2000090f

08009b08 <__sinit>:
 8009b08:	b513      	push	{r0, r1, r4, lr}
 8009b0a:	0004      	movs	r4, r0
 8009b0c:	f7ff ffec 	bl	8009ae8 <__sinit_lock_acquire>
 8009b10:	69a3      	ldr	r3, [r4, #24]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d002      	beq.n	8009b1c <__sinit+0x14>
 8009b16:	f7ff ffef 	bl	8009af8 <__sinit_lock_release>
 8009b1a:	bd13      	pop	{r0, r1, r4, pc}
 8009b1c:	64a3      	str	r3, [r4, #72]	; 0x48
 8009b1e:	64e3      	str	r3, [r4, #76]	; 0x4c
 8009b20:	6523      	str	r3, [r4, #80]	; 0x50
 8009b22:	4b13      	ldr	r3, [pc, #76]	; (8009b70 <__sinit+0x68>)
 8009b24:	4a13      	ldr	r2, [pc, #76]	; (8009b74 <__sinit+0x6c>)
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	62a2      	str	r2, [r4, #40]	; 0x28
 8009b2a:	9301      	str	r3, [sp, #4]
 8009b2c:	42a3      	cmp	r3, r4
 8009b2e:	d101      	bne.n	8009b34 <__sinit+0x2c>
 8009b30:	2301      	movs	r3, #1
 8009b32:	61a3      	str	r3, [r4, #24]
 8009b34:	0020      	movs	r0, r4
 8009b36:	f000 f81f 	bl	8009b78 <__sfp>
 8009b3a:	6060      	str	r0, [r4, #4]
 8009b3c:	0020      	movs	r0, r4
 8009b3e:	f000 f81b 	bl	8009b78 <__sfp>
 8009b42:	60a0      	str	r0, [r4, #8]
 8009b44:	0020      	movs	r0, r4
 8009b46:	f000 f817 	bl	8009b78 <__sfp>
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	2104      	movs	r1, #4
 8009b4e:	60e0      	str	r0, [r4, #12]
 8009b50:	6860      	ldr	r0, [r4, #4]
 8009b52:	f7ff ff77 	bl	8009a44 <std>
 8009b56:	2201      	movs	r2, #1
 8009b58:	2109      	movs	r1, #9
 8009b5a:	68a0      	ldr	r0, [r4, #8]
 8009b5c:	f7ff ff72 	bl	8009a44 <std>
 8009b60:	2202      	movs	r2, #2
 8009b62:	2112      	movs	r1, #18
 8009b64:	68e0      	ldr	r0, [r4, #12]
 8009b66:	f7ff ff6d 	bl	8009a44 <std>
 8009b6a:	2301      	movs	r3, #1
 8009b6c:	61a3      	str	r3, [r4, #24]
 8009b6e:	e7d2      	b.n	8009b16 <__sinit+0xe>
 8009b70:	0800b3e8 	.word	0x0800b3e8
 8009b74:	08009a8d 	.word	0x08009a8d

08009b78 <__sfp>:
 8009b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b7a:	0007      	movs	r7, r0
 8009b7c:	f7ff ffa4 	bl	8009ac8 <__sfp_lock_acquire>
 8009b80:	4b1f      	ldr	r3, [pc, #124]	; (8009c00 <__sfp+0x88>)
 8009b82:	681e      	ldr	r6, [r3, #0]
 8009b84:	69b3      	ldr	r3, [r6, #24]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d102      	bne.n	8009b90 <__sfp+0x18>
 8009b8a:	0030      	movs	r0, r6
 8009b8c:	f7ff ffbc 	bl	8009b08 <__sinit>
 8009b90:	3648      	adds	r6, #72	; 0x48
 8009b92:	68b4      	ldr	r4, [r6, #8]
 8009b94:	6873      	ldr	r3, [r6, #4]
 8009b96:	3b01      	subs	r3, #1
 8009b98:	d504      	bpl.n	8009ba4 <__sfp+0x2c>
 8009b9a:	6833      	ldr	r3, [r6, #0]
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d022      	beq.n	8009be6 <__sfp+0x6e>
 8009ba0:	6836      	ldr	r6, [r6, #0]
 8009ba2:	e7f6      	b.n	8009b92 <__sfp+0x1a>
 8009ba4:	220c      	movs	r2, #12
 8009ba6:	5ea5      	ldrsh	r5, [r4, r2]
 8009ba8:	2d00      	cmp	r5, #0
 8009baa:	d11a      	bne.n	8009be2 <__sfp+0x6a>
 8009bac:	0020      	movs	r0, r4
 8009bae:	4b15      	ldr	r3, [pc, #84]	; (8009c04 <__sfp+0x8c>)
 8009bb0:	3058      	adds	r0, #88	; 0x58
 8009bb2:	60e3      	str	r3, [r4, #12]
 8009bb4:	6665      	str	r5, [r4, #100]	; 0x64
 8009bb6:	f000 f847 	bl	8009c48 <__retarget_lock_init_recursive>
 8009bba:	f7ff ff8d 	bl	8009ad8 <__sfp_lock_release>
 8009bbe:	0020      	movs	r0, r4
 8009bc0:	2208      	movs	r2, #8
 8009bc2:	0029      	movs	r1, r5
 8009bc4:	6025      	str	r5, [r4, #0]
 8009bc6:	60a5      	str	r5, [r4, #8]
 8009bc8:	6065      	str	r5, [r4, #4]
 8009bca:	6125      	str	r5, [r4, #16]
 8009bcc:	6165      	str	r5, [r4, #20]
 8009bce:	61a5      	str	r5, [r4, #24]
 8009bd0:	305c      	adds	r0, #92	; 0x5c
 8009bd2:	f7ff fcca 	bl	800956a <memset>
 8009bd6:	6365      	str	r5, [r4, #52]	; 0x34
 8009bd8:	63a5      	str	r5, [r4, #56]	; 0x38
 8009bda:	64a5      	str	r5, [r4, #72]	; 0x48
 8009bdc:	64e5      	str	r5, [r4, #76]	; 0x4c
 8009bde:	0020      	movs	r0, r4
 8009be0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009be2:	3468      	adds	r4, #104	; 0x68
 8009be4:	e7d7      	b.n	8009b96 <__sfp+0x1e>
 8009be6:	2104      	movs	r1, #4
 8009be8:	0038      	movs	r0, r7
 8009bea:	f7ff ff57 	bl	8009a9c <__sfmoreglue>
 8009bee:	1e04      	subs	r4, r0, #0
 8009bf0:	6030      	str	r0, [r6, #0]
 8009bf2:	d1d5      	bne.n	8009ba0 <__sfp+0x28>
 8009bf4:	f7ff ff70 	bl	8009ad8 <__sfp_lock_release>
 8009bf8:	230c      	movs	r3, #12
 8009bfa:	603b      	str	r3, [r7, #0]
 8009bfc:	e7ef      	b.n	8009bde <__sfp+0x66>
 8009bfe:	46c0      	nop			; (mov r8, r8)
 8009c00:	0800b3e8 	.word	0x0800b3e8
 8009c04:	ffff0001 	.word	0xffff0001

08009c08 <_fwalk_reent>:
 8009c08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009c0a:	0004      	movs	r4, r0
 8009c0c:	0006      	movs	r6, r0
 8009c0e:	2700      	movs	r7, #0
 8009c10:	9101      	str	r1, [sp, #4]
 8009c12:	3448      	adds	r4, #72	; 0x48
 8009c14:	6863      	ldr	r3, [r4, #4]
 8009c16:	68a5      	ldr	r5, [r4, #8]
 8009c18:	9300      	str	r3, [sp, #0]
 8009c1a:	9b00      	ldr	r3, [sp, #0]
 8009c1c:	3b01      	subs	r3, #1
 8009c1e:	9300      	str	r3, [sp, #0]
 8009c20:	d504      	bpl.n	8009c2c <_fwalk_reent+0x24>
 8009c22:	6824      	ldr	r4, [r4, #0]
 8009c24:	2c00      	cmp	r4, #0
 8009c26:	d1f5      	bne.n	8009c14 <_fwalk_reent+0xc>
 8009c28:	0038      	movs	r0, r7
 8009c2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009c2c:	89ab      	ldrh	r3, [r5, #12]
 8009c2e:	2b01      	cmp	r3, #1
 8009c30:	d908      	bls.n	8009c44 <_fwalk_reent+0x3c>
 8009c32:	220e      	movs	r2, #14
 8009c34:	5eab      	ldrsh	r3, [r5, r2]
 8009c36:	3301      	adds	r3, #1
 8009c38:	d004      	beq.n	8009c44 <_fwalk_reent+0x3c>
 8009c3a:	0029      	movs	r1, r5
 8009c3c:	0030      	movs	r0, r6
 8009c3e:	9b01      	ldr	r3, [sp, #4]
 8009c40:	4798      	blx	r3
 8009c42:	4307      	orrs	r7, r0
 8009c44:	3568      	adds	r5, #104	; 0x68
 8009c46:	e7e8      	b.n	8009c1a <_fwalk_reent+0x12>

08009c48 <__retarget_lock_init_recursive>:
 8009c48:	4770      	bx	lr

08009c4a <__retarget_lock_acquire_recursive>:
 8009c4a:	4770      	bx	lr

08009c4c <__retarget_lock_release_recursive>:
 8009c4c:	4770      	bx	lr
	...

08009c50 <__swhatbuf_r>:
 8009c50:	b570      	push	{r4, r5, r6, lr}
 8009c52:	000e      	movs	r6, r1
 8009c54:	001d      	movs	r5, r3
 8009c56:	230e      	movs	r3, #14
 8009c58:	5ec9      	ldrsh	r1, [r1, r3]
 8009c5a:	0014      	movs	r4, r2
 8009c5c:	b096      	sub	sp, #88	; 0x58
 8009c5e:	2900      	cmp	r1, #0
 8009c60:	da07      	bge.n	8009c72 <__swhatbuf_r+0x22>
 8009c62:	2300      	movs	r3, #0
 8009c64:	602b      	str	r3, [r5, #0]
 8009c66:	89b3      	ldrh	r3, [r6, #12]
 8009c68:	061b      	lsls	r3, r3, #24
 8009c6a:	d411      	bmi.n	8009c90 <__swhatbuf_r+0x40>
 8009c6c:	2380      	movs	r3, #128	; 0x80
 8009c6e:	00db      	lsls	r3, r3, #3
 8009c70:	e00f      	b.n	8009c92 <__swhatbuf_r+0x42>
 8009c72:	466a      	mov	r2, sp
 8009c74:	f000 fe14 	bl	800a8a0 <_fstat_r>
 8009c78:	2800      	cmp	r0, #0
 8009c7a:	dbf2      	blt.n	8009c62 <__swhatbuf_r+0x12>
 8009c7c:	23f0      	movs	r3, #240	; 0xf0
 8009c7e:	9901      	ldr	r1, [sp, #4]
 8009c80:	021b      	lsls	r3, r3, #8
 8009c82:	4019      	ands	r1, r3
 8009c84:	4b05      	ldr	r3, [pc, #20]	; (8009c9c <__swhatbuf_r+0x4c>)
 8009c86:	18c9      	adds	r1, r1, r3
 8009c88:	424b      	negs	r3, r1
 8009c8a:	4159      	adcs	r1, r3
 8009c8c:	6029      	str	r1, [r5, #0]
 8009c8e:	e7ed      	b.n	8009c6c <__swhatbuf_r+0x1c>
 8009c90:	2340      	movs	r3, #64	; 0x40
 8009c92:	2000      	movs	r0, #0
 8009c94:	6023      	str	r3, [r4, #0]
 8009c96:	b016      	add	sp, #88	; 0x58
 8009c98:	bd70      	pop	{r4, r5, r6, pc}
 8009c9a:	46c0      	nop			; (mov r8, r8)
 8009c9c:	ffffe000 	.word	0xffffe000

08009ca0 <__smakebuf_r>:
 8009ca0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ca2:	2602      	movs	r6, #2
 8009ca4:	898b      	ldrh	r3, [r1, #12]
 8009ca6:	0005      	movs	r5, r0
 8009ca8:	000c      	movs	r4, r1
 8009caa:	4233      	tst	r3, r6
 8009cac:	d006      	beq.n	8009cbc <__smakebuf_r+0x1c>
 8009cae:	0023      	movs	r3, r4
 8009cb0:	3347      	adds	r3, #71	; 0x47
 8009cb2:	6023      	str	r3, [r4, #0]
 8009cb4:	6123      	str	r3, [r4, #16]
 8009cb6:	2301      	movs	r3, #1
 8009cb8:	6163      	str	r3, [r4, #20]
 8009cba:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009cbc:	466a      	mov	r2, sp
 8009cbe:	ab01      	add	r3, sp, #4
 8009cc0:	f7ff ffc6 	bl	8009c50 <__swhatbuf_r>
 8009cc4:	9900      	ldr	r1, [sp, #0]
 8009cc6:	0007      	movs	r7, r0
 8009cc8:	0028      	movs	r0, r5
 8009cca:	f000 f877 	bl	8009dbc <_malloc_r>
 8009cce:	2800      	cmp	r0, #0
 8009cd0:	d108      	bne.n	8009ce4 <__smakebuf_r+0x44>
 8009cd2:	220c      	movs	r2, #12
 8009cd4:	5ea3      	ldrsh	r3, [r4, r2]
 8009cd6:	059a      	lsls	r2, r3, #22
 8009cd8:	d4ef      	bmi.n	8009cba <__smakebuf_r+0x1a>
 8009cda:	2203      	movs	r2, #3
 8009cdc:	4393      	bics	r3, r2
 8009cde:	431e      	orrs	r6, r3
 8009ce0:	81a6      	strh	r6, [r4, #12]
 8009ce2:	e7e4      	b.n	8009cae <__smakebuf_r+0xe>
 8009ce4:	4b0f      	ldr	r3, [pc, #60]	; (8009d24 <__smakebuf_r+0x84>)
 8009ce6:	62ab      	str	r3, [r5, #40]	; 0x28
 8009ce8:	2380      	movs	r3, #128	; 0x80
 8009cea:	89a2      	ldrh	r2, [r4, #12]
 8009cec:	6020      	str	r0, [r4, #0]
 8009cee:	4313      	orrs	r3, r2
 8009cf0:	81a3      	strh	r3, [r4, #12]
 8009cf2:	9b00      	ldr	r3, [sp, #0]
 8009cf4:	6120      	str	r0, [r4, #16]
 8009cf6:	6163      	str	r3, [r4, #20]
 8009cf8:	9b01      	ldr	r3, [sp, #4]
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d00d      	beq.n	8009d1a <__smakebuf_r+0x7a>
 8009cfe:	0028      	movs	r0, r5
 8009d00:	230e      	movs	r3, #14
 8009d02:	5ee1      	ldrsh	r1, [r4, r3]
 8009d04:	f000 fdde 	bl	800a8c4 <_isatty_r>
 8009d08:	2800      	cmp	r0, #0
 8009d0a:	d006      	beq.n	8009d1a <__smakebuf_r+0x7a>
 8009d0c:	2203      	movs	r2, #3
 8009d0e:	89a3      	ldrh	r3, [r4, #12]
 8009d10:	4393      	bics	r3, r2
 8009d12:	001a      	movs	r2, r3
 8009d14:	2301      	movs	r3, #1
 8009d16:	4313      	orrs	r3, r2
 8009d18:	81a3      	strh	r3, [r4, #12]
 8009d1a:	89a0      	ldrh	r0, [r4, #12]
 8009d1c:	4307      	orrs	r7, r0
 8009d1e:	81a7      	strh	r7, [r4, #12]
 8009d20:	e7cb      	b.n	8009cba <__smakebuf_r+0x1a>
 8009d22:	46c0      	nop			; (mov r8, r8)
 8009d24:	08009a8d 	.word	0x08009a8d

08009d28 <_free_r>:
 8009d28:	b570      	push	{r4, r5, r6, lr}
 8009d2a:	0005      	movs	r5, r0
 8009d2c:	2900      	cmp	r1, #0
 8009d2e:	d010      	beq.n	8009d52 <_free_r+0x2a>
 8009d30:	1f0c      	subs	r4, r1, #4
 8009d32:	6823      	ldr	r3, [r4, #0]
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	da00      	bge.n	8009d3a <_free_r+0x12>
 8009d38:	18e4      	adds	r4, r4, r3
 8009d3a:	0028      	movs	r0, r5
 8009d3c:	f000 fe06 	bl	800a94c <__malloc_lock>
 8009d40:	4a1d      	ldr	r2, [pc, #116]	; (8009db8 <_free_r+0x90>)
 8009d42:	6813      	ldr	r3, [r2, #0]
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d105      	bne.n	8009d54 <_free_r+0x2c>
 8009d48:	6063      	str	r3, [r4, #4]
 8009d4a:	6014      	str	r4, [r2, #0]
 8009d4c:	0028      	movs	r0, r5
 8009d4e:	f000 fe05 	bl	800a95c <__malloc_unlock>
 8009d52:	bd70      	pop	{r4, r5, r6, pc}
 8009d54:	42a3      	cmp	r3, r4
 8009d56:	d908      	bls.n	8009d6a <_free_r+0x42>
 8009d58:	6821      	ldr	r1, [r4, #0]
 8009d5a:	1860      	adds	r0, r4, r1
 8009d5c:	4283      	cmp	r3, r0
 8009d5e:	d1f3      	bne.n	8009d48 <_free_r+0x20>
 8009d60:	6818      	ldr	r0, [r3, #0]
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	1841      	adds	r1, r0, r1
 8009d66:	6021      	str	r1, [r4, #0]
 8009d68:	e7ee      	b.n	8009d48 <_free_r+0x20>
 8009d6a:	001a      	movs	r2, r3
 8009d6c:	685b      	ldr	r3, [r3, #4]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d001      	beq.n	8009d76 <_free_r+0x4e>
 8009d72:	42a3      	cmp	r3, r4
 8009d74:	d9f9      	bls.n	8009d6a <_free_r+0x42>
 8009d76:	6811      	ldr	r1, [r2, #0]
 8009d78:	1850      	adds	r0, r2, r1
 8009d7a:	42a0      	cmp	r0, r4
 8009d7c:	d10b      	bne.n	8009d96 <_free_r+0x6e>
 8009d7e:	6820      	ldr	r0, [r4, #0]
 8009d80:	1809      	adds	r1, r1, r0
 8009d82:	1850      	adds	r0, r2, r1
 8009d84:	6011      	str	r1, [r2, #0]
 8009d86:	4283      	cmp	r3, r0
 8009d88:	d1e0      	bne.n	8009d4c <_free_r+0x24>
 8009d8a:	6818      	ldr	r0, [r3, #0]
 8009d8c:	685b      	ldr	r3, [r3, #4]
 8009d8e:	1841      	adds	r1, r0, r1
 8009d90:	6011      	str	r1, [r2, #0]
 8009d92:	6053      	str	r3, [r2, #4]
 8009d94:	e7da      	b.n	8009d4c <_free_r+0x24>
 8009d96:	42a0      	cmp	r0, r4
 8009d98:	d902      	bls.n	8009da0 <_free_r+0x78>
 8009d9a:	230c      	movs	r3, #12
 8009d9c:	602b      	str	r3, [r5, #0]
 8009d9e:	e7d5      	b.n	8009d4c <_free_r+0x24>
 8009da0:	6821      	ldr	r1, [r4, #0]
 8009da2:	1860      	adds	r0, r4, r1
 8009da4:	4283      	cmp	r3, r0
 8009da6:	d103      	bne.n	8009db0 <_free_r+0x88>
 8009da8:	6818      	ldr	r0, [r3, #0]
 8009daa:	685b      	ldr	r3, [r3, #4]
 8009dac:	1841      	adds	r1, r0, r1
 8009dae:	6021      	str	r1, [r4, #0]
 8009db0:	6063      	str	r3, [r4, #4]
 8009db2:	6054      	str	r4, [r2, #4]
 8009db4:	e7ca      	b.n	8009d4c <_free_r+0x24>
 8009db6:	46c0      	nop			; (mov r8, r8)
 8009db8:	200005f0 	.word	0x200005f0

08009dbc <_malloc_r>:
 8009dbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009dbe:	2303      	movs	r3, #3
 8009dc0:	1ccd      	adds	r5, r1, #3
 8009dc2:	439d      	bics	r5, r3
 8009dc4:	3508      	adds	r5, #8
 8009dc6:	0006      	movs	r6, r0
 8009dc8:	2d0c      	cmp	r5, #12
 8009dca:	d21f      	bcs.n	8009e0c <_malloc_r+0x50>
 8009dcc:	250c      	movs	r5, #12
 8009dce:	42a9      	cmp	r1, r5
 8009dd0:	d81e      	bhi.n	8009e10 <_malloc_r+0x54>
 8009dd2:	0030      	movs	r0, r6
 8009dd4:	f000 fdba 	bl	800a94c <__malloc_lock>
 8009dd8:	4925      	ldr	r1, [pc, #148]	; (8009e70 <_malloc_r+0xb4>)
 8009dda:	680a      	ldr	r2, [r1, #0]
 8009ddc:	0014      	movs	r4, r2
 8009dde:	2c00      	cmp	r4, #0
 8009de0:	d11a      	bne.n	8009e18 <_malloc_r+0x5c>
 8009de2:	4f24      	ldr	r7, [pc, #144]	; (8009e74 <_malloc_r+0xb8>)
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d104      	bne.n	8009df4 <_malloc_r+0x38>
 8009dea:	0021      	movs	r1, r4
 8009dec:	0030      	movs	r0, r6
 8009dee:	f000 fcd3 	bl	800a798 <_sbrk_r>
 8009df2:	6038      	str	r0, [r7, #0]
 8009df4:	0029      	movs	r1, r5
 8009df6:	0030      	movs	r0, r6
 8009df8:	f000 fcce 	bl	800a798 <_sbrk_r>
 8009dfc:	1c43      	adds	r3, r0, #1
 8009dfe:	d12b      	bne.n	8009e58 <_malloc_r+0x9c>
 8009e00:	230c      	movs	r3, #12
 8009e02:	0030      	movs	r0, r6
 8009e04:	6033      	str	r3, [r6, #0]
 8009e06:	f000 fda9 	bl	800a95c <__malloc_unlock>
 8009e0a:	e003      	b.n	8009e14 <_malloc_r+0x58>
 8009e0c:	2d00      	cmp	r5, #0
 8009e0e:	dade      	bge.n	8009dce <_malloc_r+0x12>
 8009e10:	230c      	movs	r3, #12
 8009e12:	6033      	str	r3, [r6, #0]
 8009e14:	2000      	movs	r0, #0
 8009e16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009e18:	6823      	ldr	r3, [r4, #0]
 8009e1a:	1b5b      	subs	r3, r3, r5
 8009e1c:	d419      	bmi.n	8009e52 <_malloc_r+0x96>
 8009e1e:	2b0b      	cmp	r3, #11
 8009e20:	d903      	bls.n	8009e2a <_malloc_r+0x6e>
 8009e22:	6023      	str	r3, [r4, #0]
 8009e24:	18e4      	adds	r4, r4, r3
 8009e26:	6025      	str	r5, [r4, #0]
 8009e28:	e003      	b.n	8009e32 <_malloc_r+0x76>
 8009e2a:	6863      	ldr	r3, [r4, #4]
 8009e2c:	42a2      	cmp	r2, r4
 8009e2e:	d10e      	bne.n	8009e4e <_malloc_r+0x92>
 8009e30:	600b      	str	r3, [r1, #0]
 8009e32:	0030      	movs	r0, r6
 8009e34:	f000 fd92 	bl	800a95c <__malloc_unlock>
 8009e38:	0020      	movs	r0, r4
 8009e3a:	2207      	movs	r2, #7
 8009e3c:	300b      	adds	r0, #11
 8009e3e:	1d23      	adds	r3, r4, #4
 8009e40:	4390      	bics	r0, r2
 8009e42:	1ac2      	subs	r2, r0, r3
 8009e44:	4298      	cmp	r0, r3
 8009e46:	d0e6      	beq.n	8009e16 <_malloc_r+0x5a>
 8009e48:	1a1b      	subs	r3, r3, r0
 8009e4a:	50a3      	str	r3, [r4, r2]
 8009e4c:	e7e3      	b.n	8009e16 <_malloc_r+0x5a>
 8009e4e:	6053      	str	r3, [r2, #4]
 8009e50:	e7ef      	b.n	8009e32 <_malloc_r+0x76>
 8009e52:	0022      	movs	r2, r4
 8009e54:	6864      	ldr	r4, [r4, #4]
 8009e56:	e7c2      	b.n	8009dde <_malloc_r+0x22>
 8009e58:	2303      	movs	r3, #3
 8009e5a:	1cc4      	adds	r4, r0, #3
 8009e5c:	439c      	bics	r4, r3
 8009e5e:	42a0      	cmp	r0, r4
 8009e60:	d0e1      	beq.n	8009e26 <_malloc_r+0x6a>
 8009e62:	1a21      	subs	r1, r4, r0
 8009e64:	0030      	movs	r0, r6
 8009e66:	f000 fc97 	bl	800a798 <_sbrk_r>
 8009e6a:	1c43      	adds	r3, r0, #1
 8009e6c:	d1db      	bne.n	8009e26 <_malloc_r+0x6a>
 8009e6e:	e7c7      	b.n	8009e00 <_malloc_r+0x44>
 8009e70:	200005f0 	.word	0x200005f0
 8009e74:	200005f4 	.word	0x200005f4

08009e78 <__ssputs_r>:
 8009e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009e7a:	688e      	ldr	r6, [r1, #8]
 8009e7c:	b085      	sub	sp, #20
 8009e7e:	0007      	movs	r7, r0
 8009e80:	000c      	movs	r4, r1
 8009e82:	9203      	str	r2, [sp, #12]
 8009e84:	9301      	str	r3, [sp, #4]
 8009e86:	429e      	cmp	r6, r3
 8009e88:	d83c      	bhi.n	8009f04 <__ssputs_r+0x8c>
 8009e8a:	2390      	movs	r3, #144	; 0x90
 8009e8c:	898a      	ldrh	r2, [r1, #12]
 8009e8e:	00db      	lsls	r3, r3, #3
 8009e90:	421a      	tst	r2, r3
 8009e92:	d034      	beq.n	8009efe <__ssputs_r+0x86>
 8009e94:	2503      	movs	r5, #3
 8009e96:	6909      	ldr	r1, [r1, #16]
 8009e98:	6823      	ldr	r3, [r4, #0]
 8009e9a:	1a5b      	subs	r3, r3, r1
 8009e9c:	9302      	str	r3, [sp, #8]
 8009e9e:	6963      	ldr	r3, [r4, #20]
 8009ea0:	9802      	ldr	r0, [sp, #8]
 8009ea2:	435d      	muls	r5, r3
 8009ea4:	0feb      	lsrs	r3, r5, #31
 8009ea6:	195d      	adds	r5, r3, r5
 8009ea8:	9b01      	ldr	r3, [sp, #4]
 8009eaa:	106d      	asrs	r5, r5, #1
 8009eac:	3301      	adds	r3, #1
 8009eae:	181b      	adds	r3, r3, r0
 8009eb0:	42ab      	cmp	r3, r5
 8009eb2:	d900      	bls.n	8009eb6 <__ssputs_r+0x3e>
 8009eb4:	001d      	movs	r5, r3
 8009eb6:	0553      	lsls	r3, r2, #21
 8009eb8:	d532      	bpl.n	8009f20 <__ssputs_r+0xa8>
 8009eba:	0029      	movs	r1, r5
 8009ebc:	0038      	movs	r0, r7
 8009ebe:	f7ff ff7d 	bl	8009dbc <_malloc_r>
 8009ec2:	1e06      	subs	r6, r0, #0
 8009ec4:	d109      	bne.n	8009eda <__ssputs_r+0x62>
 8009ec6:	230c      	movs	r3, #12
 8009ec8:	603b      	str	r3, [r7, #0]
 8009eca:	2340      	movs	r3, #64	; 0x40
 8009ecc:	2001      	movs	r0, #1
 8009ece:	89a2      	ldrh	r2, [r4, #12]
 8009ed0:	4240      	negs	r0, r0
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	81a3      	strh	r3, [r4, #12]
 8009ed6:	b005      	add	sp, #20
 8009ed8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009eda:	9a02      	ldr	r2, [sp, #8]
 8009edc:	6921      	ldr	r1, [r4, #16]
 8009ede:	f7ff fb3b 	bl	8009558 <memcpy>
 8009ee2:	89a3      	ldrh	r3, [r4, #12]
 8009ee4:	4a14      	ldr	r2, [pc, #80]	; (8009f38 <__ssputs_r+0xc0>)
 8009ee6:	401a      	ands	r2, r3
 8009ee8:	2380      	movs	r3, #128	; 0x80
 8009eea:	4313      	orrs	r3, r2
 8009eec:	81a3      	strh	r3, [r4, #12]
 8009eee:	9b02      	ldr	r3, [sp, #8]
 8009ef0:	6126      	str	r6, [r4, #16]
 8009ef2:	18f6      	adds	r6, r6, r3
 8009ef4:	6026      	str	r6, [r4, #0]
 8009ef6:	6165      	str	r5, [r4, #20]
 8009ef8:	9e01      	ldr	r6, [sp, #4]
 8009efa:	1aed      	subs	r5, r5, r3
 8009efc:	60a5      	str	r5, [r4, #8]
 8009efe:	9b01      	ldr	r3, [sp, #4]
 8009f00:	429e      	cmp	r6, r3
 8009f02:	d900      	bls.n	8009f06 <__ssputs_r+0x8e>
 8009f04:	9e01      	ldr	r6, [sp, #4]
 8009f06:	0032      	movs	r2, r6
 8009f08:	9903      	ldr	r1, [sp, #12]
 8009f0a:	6820      	ldr	r0, [r4, #0]
 8009f0c:	f000 fd0b 	bl	800a926 <memmove>
 8009f10:	68a3      	ldr	r3, [r4, #8]
 8009f12:	2000      	movs	r0, #0
 8009f14:	1b9b      	subs	r3, r3, r6
 8009f16:	60a3      	str	r3, [r4, #8]
 8009f18:	6823      	ldr	r3, [r4, #0]
 8009f1a:	199e      	adds	r6, r3, r6
 8009f1c:	6026      	str	r6, [r4, #0]
 8009f1e:	e7da      	b.n	8009ed6 <__ssputs_r+0x5e>
 8009f20:	002a      	movs	r2, r5
 8009f22:	0038      	movs	r0, r7
 8009f24:	f000 fd22 	bl	800a96c <_realloc_r>
 8009f28:	1e06      	subs	r6, r0, #0
 8009f2a:	d1e0      	bne.n	8009eee <__ssputs_r+0x76>
 8009f2c:	0038      	movs	r0, r7
 8009f2e:	6921      	ldr	r1, [r4, #16]
 8009f30:	f7ff fefa 	bl	8009d28 <_free_r>
 8009f34:	e7c7      	b.n	8009ec6 <__ssputs_r+0x4e>
 8009f36:	46c0      	nop			; (mov r8, r8)
 8009f38:	fffffb7f 	.word	0xfffffb7f

08009f3c <_svfiprintf_r>:
 8009f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f3e:	b0a1      	sub	sp, #132	; 0x84
 8009f40:	9003      	str	r0, [sp, #12]
 8009f42:	001d      	movs	r5, r3
 8009f44:	898b      	ldrh	r3, [r1, #12]
 8009f46:	000f      	movs	r7, r1
 8009f48:	0016      	movs	r6, r2
 8009f4a:	061b      	lsls	r3, r3, #24
 8009f4c:	d511      	bpl.n	8009f72 <_svfiprintf_r+0x36>
 8009f4e:	690b      	ldr	r3, [r1, #16]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10e      	bne.n	8009f72 <_svfiprintf_r+0x36>
 8009f54:	2140      	movs	r1, #64	; 0x40
 8009f56:	f7ff ff31 	bl	8009dbc <_malloc_r>
 8009f5a:	6038      	str	r0, [r7, #0]
 8009f5c:	6138      	str	r0, [r7, #16]
 8009f5e:	2800      	cmp	r0, #0
 8009f60:	d105      	bne.n	8009f6e <_svfiprintf_r+0x32>
 8009f62:	230c      	movs	r3, #12
 8009f64:	9a03      	ldr	r2, [sp, #12]
 8009f66:	3801      	subs	r0, #1
 8009f68:	6013      	str	r3, [r2, #0]
 8009f6a:	b021      	add	sp, #132	; 0x84
 8009f6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009f6e:	2340      	movs	r3, #64	; 0x40
 8009f70:	617b      	str	r3, [r7, #20]
 8009f72:	2300      	movs	r3, #0
 8009f74:	ac08      	add	r4, sp, #32
 8009f76:	6163      	str	r3, [r4, #20]
 8009f78:	3320      	adds	r3, #32
 8009f7a:	7663      	strb	r3, [r4, #25]
 8009f7c:	3310      	adds	r3, #16
 8009f7e:	76a3      	strb	r3, [r4, #26]
 8009f80:	9507      	str	r5, [sp, #28]
 8009f82:	0035      	movs	r5, r6
 8009f84:	782b      	ldrb	r3, [r5, #0]
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d001      	beq.n	8009f8e <_svfiprintf_r+0x52>
 8009f8a:	2b25      	cmp	r3, #37	; 0x25
 8009f8c:	d147      	bne.n	800a01e <_svfiprintf_r+0xe2>
 8009f8e:	1bab      	subs	r3, r5, r6
 8009f90:	9305      	str	r3, [sp, #20]
 8009f92:	42b5      	cmp	r5, r6
 8009f94:	d00c      	beq.n	8009fb0 <_svfiprintf_r+0x74>
 8009f96:	0032      	movs	r2, r6
 8009f98:	0039      	movs	r1, r7
 8009f9a:	9803      	ldr	r0, [sp, #12]
 8009f9c:	f7ff ff6c 	bl	8009e78 <__ssputs_r>
 8009fa0:	1c43      	adds	r3, r0, #1
 8009fa2:	d100      	bne.n	8009fa6 <_svfiprintf_r+0x6a>
 8009fa4:	e0ae      	b.n	800a104 <_svfiprintf_r+0x1c8>
 8009fa6:	6962      	ldr	r2, [r4, #20]
 8009fa8:	9b05      	ldr	r3, [sp, #20]
 8009faa:	4694      	mov	ip, r2
 8009fac:	4463      	add	r3, ip
 8009fae:	6163      	str	r3, [r4, #20]
 8009fb0:	782b      	ldrb	r3, [r5, #0]
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d100      	bne.n	8009fb8 <_svfiprintf_r+0x7c>
 8009fb6:	e0a5      	b.n	800a104 <_svfiprintf_r+0x1c8>
 8009fb8:	2201      	movs	r2, #1
 8009fba:	2300      	movs	r3, #0
 8009fbc:	4252      	negs	r2, r2
 8009fbe:	6062      	str	r2, [r4, #4]
 8009fc0:	a904      	add	r1, sp, #16
 8009fc2:	3254      	adds	r2, #84	; 0x54
 8009fc4:	1852      	adds	r2, r2, r1
 8009fc6:	1c6e      	adds	r6, r5, #1
 8009fc8:	6023      	str	r3, [r4, #0]
 8009fca:	60e3      	str	r3, [r4, #12]
 8009fcc:	60a3      	str	r3, [r4, #8]
 8009fce:	7013      	strb	r3, [r2, #0]
 8009fd0:	65a3      	str	r3, [r4, #88]	; 0x58
 8009fd2:	2205      	movs	r2, #5
 8009fd4:	7831      	ldrb	r1, [r6, #0]
 8009fd6:	4854      	ldr	r0, [pc, #336]	; (800a128 <_svfiprintf_r+0x1ec>)
 8009fd8:	f000 fc9a 	bl	800a910 <memchr>
 8009fdc:	1c75      	adds	r5, r6, #1
 8009fde:	2800      	cmp	r0, #0
 8009fe0:	d11f      	bne.n	800a022 <_svfiprintf_r+0xe6>
 8009fe2:	6822      	ldr	r2, [r4, #0]
 8009fe4:	06d3      	lsls	r3, r2, #27
 8009fe6:	d504      	bpl.n	8009ff2 <_svfiprintf_r+0xb6>
 8009fe8:	2353      	movs	r3, #83	; 0x53
 8009fea:	a904      	add	r1, sp, #16
 8009fec:	185b      	adds	r3, r3, r1
 8009fee:	2120      	movs	r1, #32
 8009ff0:	7019      	strb	r1, [r3, #0]
 8009ff2:	0713      	lsls	r3, r2, #28
 8009ff4:	d504      	bpl.n	800a000 <_svfiprintf_r+0xc4>
 8009ff6:	2353      	movs	r3, #83	; 0x53
 8009ff8:	a904      	add	r1, sp, #16
 8009ffa:	185b      	adds	r3, r3, r1
 8009ffc:	212b      	movs	r1, #43	; 0x2b
 8009ffe:	7019      	strb	r1, [r3, #0]
 800a000:	7833      	ldrb	r3, [r6, #0]
 800a002:	2b2a      	cmp	r3, #42	; 0x2a
 800a004:	d016      	beq.n	800a034 <_svfiprintf_r+0xf8>
 800a006:	0035      	movs	r5, r6
 800a008:	2100      	movs	r1, #0
 800a00a:	200a      	movs	r0, #10
 800a00c:	68e3      	ldr	r3, [r4, #12]
 800a00e:	782a      	ldrb	r2, [r5, #0]
 800a010:	1c6e      	adds	r6, r5, #1
 800a012:	3a30      	subs	r2, #48	; 0x30
 800a014:	2a09      	cmp	r2, #9
 800a016:	d94e      	bls.n	800a0b6 <_svfiprintf_r+0x17a>
 800a018:	2900      	cmp	r1, #0
 800a01a:	d111      	bne.n	800a040 <_svfiprintf_r+0x104>
 800a01c:	e017      	b.n	800a04e <_svfiprintf_r+0x112>
 800a01e:	3501      	adds	r5, #1
 800a020:	e7b0      	b.n	8009f84 <_svfiprintf_r+0x48>
 800a022:	4b41      	ldr	r3, [pc, #260]	; (800a128 <_svfiprintf_r+0x1ec>)
 800a024:	6822      	ldr	r2, [r4, #0]
 800a026:	1ac0      	subs	r0, r0, r3
 800a028:	2301      	movs	r3, #1
 800a02a:	4083      	lsls	r3, r0
 800a02c:	4313      	orrs	r3, r2
 800a02e:	002e      	movs	r6, r5
 800a030:	6023      	str	r3, [r4, #0]
 800a032:	e7ce      	b.n	8009fd2 <_svfiprintf_r+0x96>
 800a034:	9b07      	ldr	r3, [sp, #28]
 800a036:	1d19      	adds	r1, r3, #4
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	9107      	str	r1, [sp, #28]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	db01      	blt.n	800a044 <_svfiprintf_r+0x108>
 800a040:	930b      	str	r3, [sp, #44]	; 0x2c
 800a042:	e004      	b.n	800a04e <_svfiprintf_r+0x112>
 800a044:	425b      	negs	r3, r3
 800a046:	60e3      	str	r3, [r4, #12]
 800a048:	2302      	movs	r3, #2
 800a04a:	4313      	orrs	r3, r2
 800a04c:	6023      	str	r3, [r4, #0]
 800a04e:	782b      	ldrb	r3, [r5, #0]
 800a050:	2b2e      	cmp	r3, #46	; 0x2e
 800a052:	d10a      	bne.n	800a06a <_svfiprintf_r+0x12e>
 800a054:	786b      	ldrb	r3, [r5, #1]
 800a056:	2b2a      	cmp	r3, #42	; 0x2a
 800a058:	d135      	bne.n	800a0c6 <_svfiprintf_r+0x18a>
 800a05a:	9b07      	ldr	r3, [sp, #28]
 800a05c:	3502      	adds	r5, #2
 800a05e:	1d1a      	adds	r2, r3, #4
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	9207      	str	r2, [sp, #28]
 800a064:	2b00      	cmp	r3, #0
 800a066:	db2b      	blt.n	800a0c0 <_svfiprintf_r+0x184>
 800a068:	9309      	str	r3, [sp, #36]	; 0x24
 800a06a:	4e30      	ldr	r6, [pc, #192]	; (800a12c <_svfiprintf_r+0x1f0>)
 800a06c:	2203      	movs	r2, #3
 800a06e:	0030      	movs	r0, r6
 800a070:	7829      	ldrb	r1, [r5, #0]
 800a072:	f000 fc4d 	bl	800a910 <memchr>
 800a076:	2800      	cmp	r0, #0
 800a078:	d006      	beq.n	800a088 <_svfiprintf_r+0x14c>
 800a07a:	2340      	movs	r3, #64	; 0x40
 800a07c:	1b80      	subs	r0, r0, r6
 800a07e:	4083      	lsls	r3, r0
 800a080:	6822      	ldr	r2, [r4, #0]
 800a082:	3501      	adds	r5, #1
 800a084:	4313      	orrs	r3, r2
 800a086:	6023      	str	r3, [r4, #0]
 800a088:	7829      	ldrb	r1, [r5, #0]
 800a08a:	2206      	movs	r2, #6
 800a08c:	4828      	ldr	r0, [pc, #160]	; (800a130 <_svfiprintf_r+0x1f4>)
 800a08e:	1c6e      	adds	r6, r5, #1
 800a090:	7621      	strb	r1, [r4, #24]
 800a092:	f000 fc3d 	bl	800a910 <memchr>
 800a096:	2800      	cmp	r0, #0
 800a098:	d03c      	beq.n	800a114 <_svfiprintf_r+0x1d8>
 800a09a:	4b26      	ldr	r3, [pc, #152]	; (800a134 <_svfiprintf_r+0x1f8>)
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d125      	bne.n	800a0ec <_svfiprintf_r+0x1b0>
 800a0a0:	2207      	movs	r2, #7
 800a0a2:	9b07      	ldr	r3, [sp, #28]
 800a0a4:	3307      	adds	r3, #7
 800a0a6:	4393      	bics	r3, r2
 800a0a8:	3308      	adds	r3, #8
 800a0aa:	9307      	str	r3, [sp, #28]
 800a0ac:	6963      	ldr	r3, [r4, #20]
 800a0ae:	9a04      	ldr	r2, [sp, #16]
 800a0b0:	189b      	adds	r3, r3, r2
 800a0b2:	6163      	str	r3, [r4, #20]
 800a0b4:	e765      	b.n	8009f82 <_svfiprintf_r+0x46>
 800a0b6:	4343      	muls	r3, r0
 800a0b8:	0035      	movs	r5, r6
 800a0ba:	2101      	movs	r1, #1
 800a0bc:	189b      	adds	r3, r3, r2
 800a0be:	e7a6      	b.n	800a00e <_svfiprintf_r+0xd2>
 800a0c0:	2301      	movs	r3, #1
 800a0c2:	425b      	negs	r3, r3
 800a0c4:	e7d0      	b.n	800a068 <_svfiprintf_r+0x12c>
 800a0c6:	2300      	movs	r3, #0
 800a0c8:	200a      	movs	r0, #10
 800a0ca:	001a      	movs	r2, r3
 800a0cc:	3501      	adds	r5, #1
 800a0ce:	6063      	str	r3, [r4, #4]
 800a0d0:	7829      	ldrb	r1, [r5, #0]
 800a0d2:	1c6e      	adds	r6, r5, #1
 800a0d4:	3930      	subs	r1, #48	; 0x30
 800a0d6:	2909      	cmp	r1, #9
 800a0d8:	d903      	bls.n	800a0e2 <_svfiprintf_r+0x1a6>
 800a0da:	2b00      	cmp	r3, #0
 800a0dc:	d0c5      	beq.n	800a06a <_svfiprintf_r+0x12e>
 800a0de:	9209      	str	r2, [sp, #36]	; 0x24
 800a0e0:	e7c3      	b.n	800a06a <_svfiprintf_r+0x12e>
 800a0e2:	4342      	muls	r2, r0
 800a0e4:	0035      	movs	r5, r6
 800a0e6:	2301      	movs	r3, #1
 800a0e8:	1852      	adds	r2, r2, r1
 800a0ea:	e7f1      	b.n	800a0d0 <_svfiprintf_r+0x194>
 800a0ec:	ab07      	add	r3, sp, #28
 800a0ee:	9300      	str	r3, [sp, #0]
 800a0f0:	003a      	movs	r2, r7
 800a0f2:	0021      	movs	r1, r4
 800a0f4:	4b10      	ldr	r3, [pc, #64]	; (800a138 <_svfiprintf_r+0x1fc>)
 800a0f6:	9803      	ldr	r0, [sp, #12]
 800a0f8:	e000      	b.n	800a0fc <_svfiprintf_r+0x1c0>
 800a0fa:	bf00      	nop
 800a0fc:	9004      	str	r0, [sp, #16]
 800a0fe:	9b04      	ldr	r3, [sp, #16]
 800a100:	3301      	adds	r3, #1
 800a102:	d1d3      	bne.n	800a0ac <_svfiprintf_r+0x170>
 800a104:	89bb      	ldrh	r3, [r7, #12]
 800a106:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a108:	065b      	lsls	r3, r3, #25
 800a10a:	d400      	bmi.n	800a10e <_svfiprintf_r+0x1d2>
 800a10c:	e72d      	b.n	8009f6a <_svfiprintf_r+0x2e>
 800a10e:	2001      	movs	r0, #1
 800a110:	4240      	negs	r0, r0
 800a112:	e72a      	b.n	8009f6a <_svfiprintf_r+0x2e>
 800a114:	ab07      	add	r3, sp, #28
 800a116:	9300      	str	r3, [sp, #0]
 800a118:	003a      	movs	r2, r7
 800a11a:	0021      	movs	r1, r4
 800a11c:	4b06      	ldr	r3, [pc, #24]	; (800a138 <_svfiprintf_r+0x1fc>)
 800a11e:	9803      	ldr	r0, [sp, #12]
 800a120:	f000 f9de 	bl	800a4e0 <_printf_i>
 800a124:	e7ea      	b.n	800a0fc <_svfiprintf_r+0x1c0>
 800a126:	46c0      	nop			; (mov r8, r8)
 800a128:	0800b44c 	.word	0x0800b44c
 800a12c:	0800b452 	.word	0x0800b452
 800a130:	0800b456 	.word	0x0800b456
 800a134:	00000000 	.word	0x00000000
 800a138:	08009e79 	.word	0x08009e79

0800a13c <__sfputc_r>:
 800a13c:	6893      	ldr	r3, [r2, #8]
 800a13e:	b510      	push	{r4, lr}
 800a140:	3b01      	subs	r3, #1
 800a142:	6093      	str	r3, [r2, #8]
 800a144:	2b00      	cmp	r3, #0
 800a146:	da04      	bge.n	800a152 <__sfputc_r+0x16>
 800a148:	6994      	ldr	r4, [r2, #24]
 800a14a:	42a3      	cmp	r3, r4
 800a14c:	db07      	blt.n	800a15e <__sfputc_r+0x22>
 800a14e:	290a      	cmp	r1, #10
 800a150:	d005      	beq.n	800a15e <__sfputc_r+0x22>
 800a152:	6813      	ldr	r3, [r2, #0]
 800a154:	1c58      	adds	r0, r3, #1
 800a156:	6010      	str	r0, [r2, #0]
 800a158:	7019      	strb	r1, [r3, #0]
 800a15a:	0008      	movs	r0, r1
 800a15c:	bd10      	pop	{r4, pc}
 800a15e:	f7ff fad7 	bl	8009710 <__swbuf_r>
 800a162:	0001      	movs	r1, r0
 800a164:	e7f9      	b.n	800a15a <__sfputc_r+0x1e>

0800a166 <__sfputs_r>:
 800a166:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a168:	0006      	movs	r6, r0
 800a16a:	000f      	movs	r7, r1
 800a16c:	0014      	movs	r4, r2
 800a16e:	18d5      	adds	r5, r2, r3
 800a170:	42ac      	cmp	r4, r5
 800a172:	d101      	bne.n	800a178 <__sfputs_r+0x12>
 800a174:	2000      	movs	r0, #0
 800a176:	e007      	b.n	800a188 <__sfputs_r+0x22>
 800a178:	7821      	ldrb	r1, [r4, #0]
 800a17a:	003a      	movs	r2, r7
 800a17c:	0030      	movs	r0, r6
 800a17e:	f7ff ffdd 	bl	800a13c <__sfputc_r>
 800a182:	3401      	adds	r4, #1
 800a184:	1c43      	adds	r3, r0, #1
 800a186:	d1f3      	bne.n	800a170 <__sfputs_r+0xa>
 800a188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a18c <_vfiprintf_r>:
 800a18c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a18e:	b0a1      	sub	sp, #132	; 0x84
 800a190:	0006      	movs	r6, r0
 800a192:	000c      	movs	r4, r1
 800a194:	001f      	movs	r7, r3
 800a196:	9203      	str	r2, [sp, #12]
 800a198:	2800      	cmp	r0, #0
 800a19a:	d004      	beq.n	800a1a6 <_vfiprintf_r+0x1a>
 800a19c:	6983      	ldr	r3, [r0, #24]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d101      	bne.n	800a1a6 <_vfiprintf_r+0x1a>
 800a1a2:	f7ff fcb1 	bl	8009b08 <__sinit>
 800a1a6:	4b8e      	ldr	r3, [pc, #568]	; (800a3e0 <_vfiprintf_r+0x254>)
 800a1a8:	429c      	cmp	r4, r3
 800a1aa:	d11c      	bne.n	800a1e6 <_vfiprintf_r+0x5a>
 800a1ac:	6874      	ldr	r4, [r6, #4]
 800a1ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1b0:	07db      	lsls	r3, r3, #31
 800a1b2:	d405      	bmi.n	800a1c0 <_vfiprintf_r+0x34>
 800a1b4:	89a3      	ldrh	r3, [r4, #12]
 800a1b6:	059b      	lsls	r3, r3, #22
 800a1b8:	d402      	bmi.n	800a1c0 <_vfiprintf_r+0x34>
 800a1ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a1bc:	f7ff fd45 	bl	8009c4a <__retarget_lock_acquire_recursive>
 800a1c0:	89a3      	ldrh	r3, [r4, #12]
 800a1c2:	071b      	lsls	r3, r3, #28
 800a1c4:	d502      	bpl.n	800a1cc <_vfiprintf_r+0x40>
 800a1c6:	6923      	ldr	r3, [r4, #16]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d11d      	bne.n	800a208 <_vfiprintf_r+0x7c>
 800a1cc:	0021      	movs	r1, r4
 800a1ce:	0030      	movs	r0, r6
 800a1d0:	f7ff faf4 	bl	80097bc <__swsetup_r>
 800a1d4:	2800      	cmp	r0, #0
 800a1d6:	d017      	beq.n	800a208 <_vfiprintf_r+0x7c>
 800a1d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a1da:	07db      	lsls	r3, r3, #31
 800a1dc:	d50d      	bpl.n	800a1fa <_vfiprintf_r+0x6e>
 800a1de:	2001      	movs	r0, #1
 800a1e0:	4240      	negs	r0, r0
 800a1e2:	b021      	add	sp, #132	; 0x84
 800a1e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a1e6:	4b7f      	ldr	r3, [pc, #508]	; (800a3e4 <_vfiprintf_r+0x258>)
 800a1e8:	429c      	cmp	r4, r3
 800a1ea:	d101      	bne.n	800a1f0 <_vfiprintf_r+0x64>
 800a1ec:	68b4      	ldr	r4, [r6, #8]
 800a1ee:	e7de      	b.n	800a1ae <_vfiprintf_r+0x22>
 800a1f0:	4b7d      	ldr	r3, [pc, #500]	; (800a3e8 <_vfiprintf_r+0x25c>)
 800a1f2:	429c      	cmp	r4, r3
 800a1f4:	d1db      	bne.n	800a1ae <_vfiprintf_r+0x22>
 800a1f6:	68f4      	ldr	r4, [r6, #12]
 800a1f8:	e7d9      	b.n	800a1ae <_vfiprintf_r+0x22>
 800a1fa:	89a3      	ldrh	r3, [r4, #12]
 800a1fc:	059b      	lsls	r3, r3, #22
 800a1fe:	d4ee      	bmi.n	800a1de <_vfiprintf_r+0x52>
 800a200:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a202:	f7ff fd23 	bl	8009c4c <__retarget_lock_release_recursive>
 800a206:	e7ea      	b.n	800a1de <_vfiprintf_r+0x52>
 800a208:	2300      	movs	r3, #0
 800a20a:	ad08      	add	r5, sp, #32
 800a20c:	616b      	str	r3, [r5, #20]
 800a20e:	3320      	adds	r3, #32
 800a210:	766b      	strb	r3, [r5, #25]
 800a212:	3310      	adds	r3, #16
 800a214:	76ab      	strb	r3, [r5, #26]
 800a216:	9707      	str	r7, [sp, #28]
 800a218:	9f03      	ldr	r7, [sp, #12]
 800a21a:	783b      	ldrb	r3, [r7, #0]
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d001      	beq.n	800a224 <_vfiprintf_r+0x98>
 800a220:	2b25      	cmp	r3, #37	; 0x25
 800a222:	d14e      	bne.n	800a2c2 <_vfiprintf_r+0x136>
 800a224:	9b03      	ldr	r3, [sp, #12]
 800a226:	1afb      	subs	r3, r7, r3
 800a228:	9305      	str	r3, [sp, #20]
 800a22a:	9b03      	ldr	r3, [sp, #12]
 800a22c:	429f      	cmp	r7, r3
 800a22e:	d00d      	beq.n	800a24c <_vfiprintf_r+0xc0>
 800a230:	9b05      	ldr	r3, [sp, #20]
 800a232:	0021      	movs	r1, r4
 800a234:	0030      	movs	r0, r6
 800a236:	9a03      	ldr	r2, [sp, #12]
 800a238:	f7ff ff95 	bl	800a166 <__sfputs_r>
 800a23c:	1c43      	adds	r3, r0, #1
 800a23e:	d100      	bne.n	800a242 <_vfiprintf_r+0xb6>
 800a240:	e0b5      	b.n	800a3ae <_vfiprintf_r+0x222>
 800a242:	696a      	ldr	r2, [r5, #20]
 800a244:	9b05      	ldr	r3, [sp, #20]
 800a246:	4694      	mov	ip, r2
 800a248:	4463      	add	r3, ip
 800a24a:	616b      	str	r3, [r5, #20]
 800a24c:	783b      	ldrb	r3, [r7, #0]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d100      	bne.n	800a254 <_vfiprintf_r+0xc8>
 800a252:	e0ac      	b.n	800a3ae <_vfiprintf_r+0x222>
 800a254:	2201      	movs	r2, #1
 800a256:	1c7b      	adds	r3, r7, #1
 800a258:	9303      	str	r3, [sp, #12]
 800a25a:	2300      	movs	r3, #0
 800a25c:	4252      	negs	r2, r2
 800a25e:	606a      	str	r2, [r5, #4]
 800a260:	a904      	add	r1, sp, #16
 800a262:	3254      	adds	r2, #84	; 0x54
 800a264:	1852      	adds	r2, r2, r1
 800a266:	602b      	str	r3, [r5, #0]
 800a268:	60eb      	str	r3, [r5, #12]
 800a26a:	60ab      	str	r3, [r5, #8]
 800a26c:	7013      	strb	r3, [r2, #0]
 800a26e:	65ab      	str	r3, [r5, #88]	; 0x58
 800a270:	9b03      	ldr	r3, [sp, #12]
 800a272:	2205      	movs	r2, #5
 800a274:	7819      	ldrb	r1, [r3, #0]
 800a276:	485d      	ldr	r0, [pc, #372]	; (800a3ec <_vfiprintf_r+0x260>)
 800a278:	f000 fb4a 	bl	800a910 <memchr>
 800a27c:	9b03      	ldr	r3, [sp, #12]
 800a27e:	1c5f      	adds	r7, r3, #1
 800a280:	2800      	cmp	r0, #0
 800a282:	d120      	bne.n	800a2c6 <_vfiprintf_r+0x13a>
 800a284:	682a      	ldr	r2, [r5, #0]
 800a286:	06d3      	lsls	r3, r2, #27
 800a288:	d504      	bpl.n	800a294 <_vfiprintf_r+0x108>
 800a28a:	2353      	movs	r3, #83	; 0x53
 800a28c:	a904      	add	r1, sp, #16
 800a28e:	185b      	adds	r3, r3, r1
 800a290:	2120      	movs	r1, #32
 800a292:	7019      	strb	r1, [r3, #0]
 800a294:	0713      	lsls	r3, r2, #28
 800a296:	d504      	bpl.n	800a2a2 <_vfiprintf_r+0x116>
 800a298:	2353      	movs	r3, #83	; 0x53
 800a29a:	a904      	add	r1, sp, #16
 800a29c:	185b      	adds	r3, r3, r1
 800a29e:	212b      	movs	r1, #43	; 0x2b
 800a2a0:	7019      	strb	r1, [r3, #0]
 800a2a2:	9b03      	ldr	r3, [sp, #12]
 800a2a4:	781b      	ldrb	r3, [r3, #0]
 800a2a6:	2b2a      	cmp	r3, #42	; 0x2a
 800a2a8:	d016      	beq.n	800a2d8 <_vfiprintf_r+0x14c>
 800a2aa:	2100      	movs	r1, #0
 800a2ac:	68eb      	ldr	r3, [r5, #12]
 800a2ae:	9f03      	ldr	r7, [sp, #12]
 800a2b0:	783a      	ldrb	r2, [r7, #0]
 800a2b2:	1c78      	adds	r0, r7, #1
 800a2b4:	3a30      	subs	r2, #48	; 0x30
 800a2b6:	4684      	mov	ip, r0
 800a2b8:	2a09      	cmp	r2, #9
 800a2ba:	d94f      	bls.n	800a35c <_vfiprintf_r+0x1d0>
 800a2bc:	2900      	cmp	r1, #0
 800a2be:	d111      	bne.n	800a2e4 <_vfiprintf_r+0x158>
 800a2c0:	e017      	b.n	800a2f2 <_vfiprintf_r+0x166>
 800a2c2:	3701      	adds	r7, #1
 800a2c4:	e7a9      	b.n	800a21a <_vfiprintf_r+0x8e>
 800a2c6:	4b49      	ldr	r3, [pc, #292]	; (800a3ec <_vfiprintf_r+0x260>)
 800a2c8:	682a      	ldr	r2, [r5, #0]
 800a2ca:	1ac0      	subs	r0, r0, r3
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	4083      	lsls	r3, r0
 800a2d0:	4313      	orrs	r3, r2
 800a2d2:	602b      	str	r3, [r5, #0]
 800a2d4:	9703      	str	r7, [sp, #12]
 800a2d6:	e7cb      	b.n	800a270 <_vfiprintf_r+0xe4>
 800a2d8:	9b07      	ldr	r3, [sp, #28]
 800a2da:	1d19      	adds	r1, r3, #4
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	9107      	str	r1, [sp, #28]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	db01      	blt.n	800a2e8 <_vfiprintf_r+0x15c>
 800a2e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2e6:	e004      	b.n	800a2f2 <_vfiprintf_r+0x166>
 800a2e8:	425b      	negs	r3, r3
 800a2ea:	60eb      	str	r3, [r5, #12]
 800a2ec:	2302      	movs	r3, #2
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	602b      	str	r3, [r5, #0]
 800a2f2:	783b      	ldrb	r3, [r7, #0]
 800a2f4:	2b2e      	cmp	r3, #46	; 0x2e
 800a2f6:	d10a      	bne.n	800a30e <_vfiprintf_r+0x182>
 800a2f8:	787b      	ldrb	r3, [r7, #1]
 800a2fa:	2b2a      	cmp	r3, #42	; 0x2a
 800a2fc:	d137      	bne.n	800a36e <_vfiprintf_r+0x1e2>
 800a2fe:	9b07      	ldr	r3, [sp, #28]
 800a300:	3702      	adds	r7, #2
 800a302:	1d1a      	adds	r2, r3, #4
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	9207      	str	r2, [sp, #28]
 800a308:	2b00      	cmp	r3, #0
 800a30a:	db2d      	blt.n	800a368 <_vfiprintf_r+0x1dc>
 800a30c:	9309      	str	r3, [sp, #36]	; 0x24
 800a30e:	2203      	movs	r2, #3
 800a310:	7839      	ldrb	r1, [r7, #0]
 800a312:	4837      	ldr	r0, [pc, #220]	; (800a3f0 <_vfiprintf_r+0x264>)
 800a314:	f000 fafc 	bl	800a910 <memchr>
 800a318:	2800      	cmp	r0, #0
 800a31a:	d007      	beq.n	800a32c <_vfiprintf_r+0x1a0>
 800a31c:	4b34      	ldr	r3, [pc, #208]	; (800a3f0 <_vfiprintf_r+0x264>)
 800a31e:	682a      	ldr	r2, [r5, #0]
 800a320:	1ac0      	subs	r0, r0, r3
 800a322:	2340      	movs	r3, #64	; 0x40
 800a324:	4083      	lsls	r3, r0
 800a326:	4313      	orrs	r3, r2
 800a328:	3701      	adds	r7, #1
 800a32a:	602b      	str	r3, [r5, #0]
 800a32c:	7839      	ldrb	r1, [r7, #0]
 800a32e:	1c7b      	adds	r3, r7, #1
 800a330:	2206      	movs	r2, #6
 800a332:	4830      	ldr	r0, [pc, #192]	; (800a3f4 <_vfiprintf_r+0x268>)
 800a334:	9303      	str	r3, [sp, #12]
 800a336:	7629      	strb	r1, [r5, #24]
 800a338:	f000 faea 	bl	800a910 <memchr>
 800a33c:	2800      	cmp	r0, #0
 800a33e:	d045      	beq.n	800a3cc <_vfiprintf_r+0x240>
 800a340:	4b2d      	ldr	r3, [pc, #180]	; (800a3f8 <_vfiprintf_r+0x26c>)
 800a342:	2b00      	cmp	r3, #0
 800a344:	d127      	bne.n	800a396 <_vfiprintf_r+0x20a>
 800a346:	2207      	movs	r2, #7
 800a348:	9b07      	ldr	r3, [sp, #28]
 800a34a:	3307      	adds	r3, #7
 800a34c:	4393      	bics	r3, r2
 800a34e:	3308      	adds	r3, #8
 800a350:	9307      	str	r3, [sp, #28]
 800a352:	696b      	ldr	r3, [r5, #20]
 800a354:	9a04      	ldr	r2, [sp, #16]
 800a356:	189b      	adds	r3, r3, r2
 800a358:	616b      	str	r3, [r5, #20]
 800a35a:	e75d      	b.n	800a218 <_vfiprintf_r+0x8c>
 800a35c:	210a      	movs	r1, #10
 800a35e:	434b      	muls	r3, r1
 800a360:	4667      	mov	r7, ip
 800a362:	189b      	adds	r3, r3, r2
 800a364:	3909      	subs	r1, #9
 800a366:	e7a3      	b.n	800a2b0 <_vfiprintf_r+0x124>
 800a368:	2301      	movs	r3, #1
 800a36a:	425b      	negs	r3, r3
 800a36c:	e7ce      	b.n	800a30c <_vfiprintf_r+0x180>
 800a36e:	2300      	movs	r3, #0
 800a370:	001a      	movs	r2, r3
 800a372:	3701      	adds	r7, #1
 800a374:	606b      	str	r3, [r5, #4]
 800a376:	7839      	ldrb	r1, [r7, #0]
 800a378:	1c78      	adds	r0, r7, #1
 800a37a:	3930      	subs	r1, #48	; 0x30
 800a37c:	4684      	mov	ip, r0
 800a37e:	2909      	cmp	r1, #9
 800a380:	d903      	bls.n	800a38a <_vfiprintf_r+0x1fe>
 800a382:	2b00      	cmp	r3, #0
 800a384:	d0c3      	beq.n	800a30e <_vfiprintf_r+0x182>
 800a386:	9209      	str	r2, [sp, #36]	; 0x24
 800a388:	e7c1      	b.n	800a30e <_vfiprintf_r+0x182>
 800a38a:	230a      	movs	r3, #10
 800a38c:	435a      	muls	r2, r3
 800a38e:	4667      	mov	r7, ip
 800a390:	1852      	adds	r2, r2, r1
 800a392:	3b09      	subs	r3, #9
 800a394:	e7ef      	b.n	800a376 <_vfiprintf_r+0x1ea>
 800a396:	ab07      	add	r3, sp, #28
 800a398:	9300      	str	r3, [sp, #0]
 800a39a:	0022      	movs	r2, r4
 800a39c:	0029      	movs	r1, r5
 800a39e:	0030      	movs	r0, r6
 800a3a0:	4b16      	ldr	r3, [pc, #88]	; (800a3fc <_vfiprintf_r+0x270>)
 800a3a2:	e000      	b.n	800a3a6 <_vfiprintf_r+0x21a>
 800a3a4:	bf00      	nop
 800a3a6:	9004      	str	r0, [sp, #16]
 800a3a8:	9b04      	ldr	r3, [sp, #16]
 800a3aa:	3301      	adds	r3, #1
 800a3ac:	d1d1      	bne.n	800a352 <_vfiprintf_r+0x1c6>
 800a3ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a3b0:	07db      	lsls	r3, r3, #31
 800a3b2:	d405      	bmi.n	800a3c0 <_vfiprintf_r+0x234>
 800a3b4:	89a3      	ldrh	r3, [r4, #12]
 800a3b6:	059b      	lsls	r3, r3, #22
 800a3b8:	d402      	bmi.n	800a3c0 <_vfiprintf_r+0x234>
 800a3ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a3bc:	f7ff fc46 	bl	8009c4c <__retarget_lock_release_recursive>
 800a3c0:	89a3      	ldrh	r3, [r4, #12]
 800a3c2:	065b      	lsls	r3, r3, #25
 800a3c4:	d500      	bpl.n	800a3c8 <_vfiprintf_r+0x23c>
 800a3c6:	e70a      	b.n	800a1de <_vfiprintf_r+0x52>
 800a3c8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a3ca:	e70a      	b.n	800a1e2 <_vfiprintf_r+0x56>
 800a3cc:	ab07      	add	r3, sp, #28
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	0022      	movs	r2, r4
 800a3d2:	0029      	movs	r1, r5
 800a3d4:	0030      	movs	r0, r6
 800a3d6:	4b09      	ldr	r3, [pc, #36]	; (800a3fc <_vfiprintf_r+0x270>)
 800a3d8:	f000 f882 	bl	800a4e0 <_printf_i>
 800a3dc:	e7e3      	b.n	800a3a6 <_vfiprintf_r+0x21a>
 800a3de:	46c0      	nop			; (mov r8, r8)
 800a3e0:	0800b40c 	.word	0x0800b40c
 800a3e4:	0800b42c 	.word	0x0800b42c
 800a3e8:	0800b3ec 	.word	0x0800b3ec
 800a3ec:	0800b44c 	.word	0x0800b44c
 800a3f0:	0800b452 	.word	0x0800b452
 800a3f4:	0800b456 	.word	0x0800b456
 800a3f8:	00000000 	.word	0x00000000
 800a3fc:	0800a167 	.word	0x0800a167

0800a400 <_printf_common>:
 800a400:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a402:	0015      	movs	r5, r2
 800a404:	9301      	str	r3, [sp, #4]
 800a406:	688a      	ldr	r2, [r1, #8]
 800a408:	690b      	ldr	r3, [r1, #16]
 800a40a:	000c      	movs	r4, r1
 800a40c:	9000      	str	r0, [sp, #0]
 800a40e:	4293      	cmp	r3, r2
 800a410:	da00      	bge.n	800a414 <_printf_common+0x14>
 800a412:	0013      	movs	r3, r2
 800a414:	0022      	movs	r2, r4
 800a416:	602b      	str	r3, [r5, #0]
 800a418:	3243      	adds	r2, #67	; 0x43
 800a41a:	7812      	ldrb	r2, [r2, #0]
 800a41c:	2a00      	cmp	r2, #0
 800a41e:	d001      	beq.n	800a424 <_printf_common+0x24>
 800a420:	3301      	adds	r3, #1
 800a422:	602b      	str	r3, [r5, #0]
 800a424:	6823      	ldr	r3, [r4, #0]
 800a426:	069b      	lsls	r3, r3, #26
 800a428:	d502      	bpl.n	800a430 <_printf_common+0x30>
 800a42a:	682b      	ldr	r3, [r5, #0]
 800a42c:	3302      	adds	r3, #2
 800a42e:	602b      	str	r3, [r5, #0]
 800a430:	6822      	ldr	r2, [r4, #0]
 800a432:	2306      	movs	r3, #6
 800a434:	0017      	movs	r7, r2
 800a436:	401f      	ands	r7, r3
 800a438:	421a      	tst	r2, r3
 800a43a:	d027      	beq.n	800a48c <_printf_common+0x8c>
 800a43c:	0023      	movs	r3, r4
 800a43e:	3343      	adds	r3, #67	; 0x43
 800a440:	781b      	ldrb	r3, [r3, #0]
 800a442:	1e5a      	subs	r2, r3, #1
 800a444:	4193      	sbcs	r3, r2
 800a446:	6822      	ldr	r2, [r4, #0]
 800a448:	0692      	lsls	r2, r2, #26
 800a44a:	d430      	bmi.n	800a4ae <_printf_common+0xae>
 800a44c:	0022      	movs	r2, r4
 800a44e:	9901      	ldr	r1, [sp, #4]
 800a450:	9800      	ldr	r0, [sp, #0]
 800a452:	9e08      	ldr	r6, [sp, #32]
 800a454:	3243      	adds	r2, #67	; 0x43
 800a456:	47b0      	blx	r6
 800a458:	1c43      	adds	r3, r0, #1
 800a45a:	d025      	beq.n	800a4a8 <_printf_common+0xa8>
 800a45c:	2306      	movs	r3, #6
 800a45e:	6820      	ldr	r0, [r4, #0]
 800a460:	682a      	ldr	r2, [r5, #0]
 800a462:	68e1      	ldr	r1, [r4, #12]
 800a464:	2500      	movs	r5, #0
 800a466:	4003      	ands	r3, r0
 800a468:	2b04      	cmp	r3, #4
 800a46a:	d103      	bne.n	800a474 <_printf_common+0x74>
 800a46c:	1a8d      	subs	r5, r1, r2
 800a46e:	43eb      	mvns	r3, r5
 800a470:	17db      	asrs	r3, r3, #31
 800a472:	401d      	ands	r5, r3
 800a474:	68a3      	ldr	r3, [r4, #8]
 800a476:	6922      	ldr	r2, [r4, #16]
 800a478:	4293      	cmp	r3, r2
 800a47a:	dd01      	ble.n	800a480 <_printf_common+0x80>
 800a47c:	1a9b      	subs	r3, r3, r2
 800a47e:	18ed      	adds	r5, r5, r3
 800a480:	2700      	movs	r7, #0
 800a482:	42bd      	cmp	r5, r7
 800a484:	d120      	bne.n	800a4c8 <_printf_common+0xc8>
 800a486:	2000      	movs	r0, #0
 800a488:	e010      	b.n	800a4ac <_printf_common+0xac>
 800a48a:	3701      	adds	r7, #1
 800a48c:	68e3      	ldr	r3, [r4, #12]
 800a48e:	682a      	ldr	r2, [r5, #0]
 800a490:	1a9b      	subs	r3, r3, r2
 800a492:	42bb      	cmp	r3, r7
 800a494:	ddd2      	ble.n	800a43c <_printf_common+0x3c>
 800a496:	0022      	movs	r2, r4
 800a498:	2301      	movs	r3, #1
 800a49a:	9901      	ldr	r1, [sp, #4]
 800a49c:	9800      	ldr	r0, [sp, #0]
 800a49e:	9e08      	ldr	r6, [sp, #32]
 800a4a0:	3219      	adds	r2, #25
 800a4a2:	47b0      	blx	r6
 800a4a4:	1c43      	adds	r3, r0, #1
 800a4a6:	d1f0      	bne.n	800a48a <_printf_common+0x8a>
 800a4a8:	2001      	movs	r0, #1
 800a4aa:	4240      	negs	r0, r0
 800a4ac:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800a4ae:	2030      	movs	r0, #48	; 0x30
 800a4b0:	18e1      	adds	r1, r4, r3
 800a4b2:	3143      	adds	r1, #67	; 0x43
 800a4b4:	7008      	strb	r0, [r1, #0]
 800a4b6:	0021      	movs	r1, r4
 800a4b8:	1c5a      	adds	r2, r3, #1
 800a4ba:	3145      	adds	r1, #69	; 0x45
 800a4bc:	7809      	ldrb	r1, [r1, #0]
 800a4be:	18a2      	adds	r2, r4, r2
 800a4c0:	3243      	adds	r2, #67	; 0x43
 800a4c2:	3302      	adds	r3, #2
 800a4c4:	7011      	strb	r1, [r2, #0]
 800a4c6:	e7c1      	b.n	800a44c <_printf_common+0x4c>
 800a4c8:	0022      	movs	r2, r4
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	9901      	ldr	r1, [sp, #4]
 800a4ce:	9800      	ldr	r0, [sp, #0]
 800a4d0:	9e08      	ldr	r6, [sp, #32]
 800a4d2:	321a      	adds	r2, #26
 800a4d4:	47b0      	blx	r6
 800a4d6:	1c43      	adds	r3, r0, #1
 800a4d8:	d0e6      	beq.n	800a4a8 <_printf_common+0xa8>
 800a4da:	3701      	adds	r7, #1
 800a4dc:	e7d1      	b.n	800a482 <_printf_common+0x82>
	...

0800a4e0 <_printf_i>:
 800a4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4e2:	b08b      	sub	sp, #44	; 0x2c
 800a4e4:	9206      	str	r2, [sp, #24]
 800a4e6:	000a      	movs	r2, r1
 800a4e8:	3243      	adds	r2, #67	; 0x43
 800a4ea:	9307      	str	r3, [sp, #28]
 800a4ec:	9005      	str	r0, [sp, #20]
 800a4ee:	9204      	str	r2, [sp, #16]
 800a4f0:	7e0a      	ldrb	r2, [r1, #24]
 800a4f2:	000c      	movs	r4, r1
 800a4f4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a4f6:	2a78      	cmp	r2, #120	; 0x78
 800a4f8:	d806      	bhi.n	800a508 <_printf_i+0x28>
 800a4fa:	2a62      	cmp	r2, #98	; 0x62
 800a4fc:	d808      	bhi.n	800a510 <_printf_i+0x30>
 800a4fe:	2a00      	cmp	r2, #0
 800a500:	d100      	bne.n	800a504 <_printf_i+0x24>
 800a502:	e0c0      	b.n	800a686 <_printf_i+0x1a6>
 800a504:	2a58      	cmp	r2, #88	; 0x58
 800a506:	d052      	beq.n	800a5ae <_printf_i+0xce>
 800a508:	0026      	movs	r6, r4
 800a50a:	3642      	adds	r6, #66	; 0x42
 800a50c:	7032      	strb	r2, [r6, #0]
 800a50e:	e022      	b.n	800a556 <_printf_i+0x76>
 800a510:	0010      	movs	r0, r2
 800a512:	3863      	subs	r0, #99	; 0x63
 800a514:	2815      	cmp	r0, #21
 800a516:	d8f7      	bhi.n	800a508 <_printf_i+0x28>
 800a518:	f7f7 ffc0 	bl	800249c <__gnu_thumb1_case_shi>
 800a51c:	001f0016 	.word	0x001f0016
 800a520:	fff6fff6 	.word	0xfff6fff6
 800a524:	fff6fff6 	.word	0xfff6fff6
 800a528:	fff6001f 	.word	0xfff6001f
 800a52c:	fff6fff6 	.word	0xfff6fff6
 800a530:	00a8fff6 	.word	0x00a8fff6
 800a534:	009a0036 	.word	0x009a0036
 800a538:	fff6fff6 	.word	0xfff6fff6
 800a53c:	fff600b9 	.word	0xfff600b9
 800a540:	fff60036 	.word	0xfff60036
 800a544:	009efff6 	.word	0x009efff6
 800a548:	0026      	movs	r6, r4
 800a54a:	681a      	ldr	r2, [r3, #0]
 800a54c:	3642      	adds	r6, #66	; 0x42
 800a54e:	1d11      	adds	r1, r2, #4
 800a550:	6019      	str	r1, [r3, #0]
 800a552:	6813      	ldr	r3, [r2, #0]
 800a554:	7033      	strb	r3, [r6, #0]
 800a556:	2301      	movs	r3, #1
 800a558:	e0a7      	b.n	800a6aa <_printf_i+0x1ca>
 800a55a:	6808      	ldr	r0, [r1, #0]
 800a55c:	6819      	ldr	r1, [r3, #0]
 800a55e:	1d0a      	adds	r2, r1, #4
 800a560:	0605      	lsls	r5, r0, #24
 800a562:	d50b      	bpl.n	800a57c <_printf_i+0x9c>
 800a564:	680d      	ldr	r5, [r1, #0]
 800a566:	601a      	str	r2, [r3, #0]
 800a568:	2d00      	cmp	r5, #0
 800a56a:	da03      	bge.n	800a574 <_printf_i+0x94>
 800a56c:	232d      	movs	r3, #45	; 0x2d
 800a56e:	9a04      	ldr	r2, [sp, #16]
 800a570:	426d      	negs	r5, r5
 800a572:	7013      	strb	r3, [r2, #0]
 800a574:	4b61      	ldr	r3, [pc, #388]	; (800a6fc <_printf_i+0x21c>)
 800a576:	270a      	movs	r7, #10
 800a578:	9303      	str	r3, [sp, #12]
 800a57a:	e032      	b.n	800a5e2 <_printf_i+0x102>
 800a57c:	680d      	ldr	r5, [r1, #0]
 800a57e:	601a      	str	r2, [r3, #0]
 800a580:	0641      	lsls	r1, r0, #25
 800a582:	d5f1      	bpl.n	800a568 <_printf_i+0x88>
 800a584:	b22d      	sxth	r5, r5
 800a586:	e7ef      	b.n	800a568 <_printf_i+0x88>
 800a588:	680d      	ldr	r5, [r1, #0]
 800a58a:	6819      	ldr	r1, [r3, #0]
 800a58c:	1d08      	adds	r0, r1, #4
 800a58e:	6018      	str	r0, [r3, #0]
 800a590:	062e      	lsls	r6, r5, #24
 800a592:	d501      	bpl.n	800a598 <_printf_i+0xb8>
 800a594:	680d      	ldr	r5, [r1, #0]
 800a596:	e003      	b.n	800a5a0 <_printf_i+0xc0>
 800a598:	066d      	lsls	r5, r5, #25
 800a59a:	d5fb      	bpl.n	800a594 <_printf_i+0xb4>
 800a59c:	680d      	ldr	r5, [r1, #0]
 800a59e:	b2ad      	uxth	r5, r5
 800a5a0:	4b56      	ldr	r3, [pc, #344]	; (800a6fc <_printf_i+0x21c>)
 800a5a2:	270a      	movs	r7, #10
 800a5a4:	9303      	str	r3, [sp, #12]
 800a5a6:	2a6f      	cmp	r2, #111	; 0x6f
 800a5a8:	d117      	bne.n	800a5da <_printf_i+0xfa>
 800a5aa:	2708      	movs	r7, #8
 800a5ac:	e015      	b.n	800a5da <_printf_i+0xfa>
 800a5ae:	3145      	adds	r1, #69	; 0x45
 800a5b0:	700a      	strb	r2, [r1, #0]
 800a5b2:	4a52      	ldr	r2, [pc, #328]	; (800a6fc <_printf_i+0x21c>)
 800a5b4:	9203      	str	r2, [sp, #12]
 800a5b6:	681a      	ldr	r2, [r3, #0]
 800a5b8:	6821      	ldr	r1, [r4, #0]
 800a5ba:	ca20      	ldmia	r2!, {r5}
 800a5bc:	601a      	str	r2, [r3, #0]
 800a5be:	0608      	lsls	r0, r1, #24
 800a5c0:	d550      	bpl.n	800a664 <_printf_i+0x184>
 800a5c2:	07cb      	lsls	r3, r1, #31
 800a5c4:	d502      	bpl.n	800a5cc <_printf_i+0xec>
 800a5c6:	2320      	movs	r3, #32
 800a5c8:	4319      	orrs	r1, r3
 800a5ca:	6021      	str	r1, [r4, #0]
 800a5cc:	2710      	movs	r7, #16
 800a5ce:	2d00      	cmp	r5, #0
 800a5d0:	d103      	bne.n	800a5da <_printf_i+0xfa>
 800a5d2:	2320      	movs	r3, #32
 800a5d4:	6822      	ldr	r2, [r4, #0]
 800a5d6:	439a      	bics	r2, r3
 800a5d8:	6022      	str	r2, [r4, #0]
 800a5da:	0023      	movs	r3, r4
 800a5dc:	2200      	movs	r2, #0
 800a5de:	3343      	adds	r3, #67	; 0x43
 800a5e0:	701a      	strb	r2, [r3, #0]
 800a5e2:	6863      	ldr	r3, [r4, #4]
 800a5e4:	60a3      	str	r3, [r4, #8]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	db03      	blt.n	800a5f2 <_printf_i+0x112>
 800a5ea:	2204      	movs	r2, #4
 800a5ec:	6821      	ldr	r1, [r4, #0]
 800a5ee:	4391      	bics	r1, r2
 800a5f0:	6021      	str	r1, [r4, #0]
 800a5f2:	2d00      	cmp	r5, #0
 800a5f4:	d102      	bne.n	800a5fc <_printf_i+0x11c>
 800a5f6:	9e04      	ldr	r6, [sp, #16]
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d00c      	beq.n	800a616 <_printf_i+0x136>
 800a5fc:	9e04      	ldr	r6, [sp, #16]
 800a5fe:	0028      	movs	r0, r5
 800a600:	0039      	movs	r1, r7
 800a602:	f7f7 ffdb 	bl	80025bc <__aeabi_uidivmod>
 800a606:	9b03      	ldr	r3, [sp, #12]
 800a608:	3e01      	subs	r6, #1
 800a60a:	5c5b      	ldrb	r3, [r3, r1]
 800a60c:	7033      	strb	r3, [r6, #0]
 800a60e:	002b      	movs	r3, r5
 800a610:	0005      	movs	r5, r0
 800a612:	429f      	cmp	r7, r3
 800a614:	d9f3      	bls.n	800a5fe <_printf_i+0x11e>
 800a616:	2f08      	cmp	r7, #8
 800a618:	d109      	bne.n	800a62e <_printf_i+0x14e>
 800a61a:	6823      	ldr	r3, [r4, #0]
 800a61c:	07db      	lsls	r3, r3, #31
 800a61e:	d506      	bpl.n	800a62e <_printf_i+0x14e>
 800a620:	6863      	ldr	r3, [r4, #4]
 800a622:	6922      	ldr	r2, [r4, #16]
 800a624:	4293      	cmp	r3, r2
 800a626:	dc02      	bgt.n	800a62e <_printf_i+0x14e>
 800a628:	2330      	movs	r3, #48	; 0x30
 800a62a:	3e01      	subs	r6, #1
 800a62c:	7033      	strb	r3, [r6, #0]
 800a62e:	9b04      	ldr	r3, [sp, #16]
 800a630:	1b9b      	subs	r3, r3, r6
 800a632:	6123      	str	r3, [r4, #16]
 800a634:	9b07      	ldr	r3, [sp, #28]
 800a636:	0021      	movs	r1, r4
 800a638:	9300      	str	r3, [sp, #0]
 800a63a:	9805      	ldr	r0, [sp, #20]
 800a63c:	9b06      	ldr	r3, [sp, #24]
 800a63e:	aa09      	add	r2, sp, #36	; 0x24
 800a640:	f7ff fede 	bl	800a400 <_printf_common>
 800a644:	1c43      	adds	r3, r0, #1
 800a646:	d135      	bne.n	800a6b4 <_printf_i+0x1d4>
 800a648:	2001      	movs	r0, #1
 800a64a:	4240      	negs	r0, r0
 800a64c:	b00b      	add	sp, #44	; 0x2c
 800a64e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a650:	2220      	movs	r2, #32
 800a652:	6809      	ldr	r1, [r1, #0]
 800a654:	430a      	orrs	r2, r1
 800a656:	6022      	str	r2, [r4, #0]
 800a658:	0022      	movs	r2, r4
 800a65a:	2178      	movs	r1, #120	; 0x78
 800a65c:	3245      	adds	r2, #69	; 0x45
 800a65e:	7011      	strb	r1, [r2, #0]
 800a660:	4a27      	ldr	r2, [pc, #156]	; (800a700 <_printf_i+0x220>)
 800a662:	e7a7      	b.n	800a5b4 <_printf_i+0xd4>
 800a664:	0648      	lsls	r0, r1, #25
 800a666:	d5ac      	bpl.n	800a5c2 <_printf_i+0xe2>
 800a668:	b2ad      	uxth	r5, r5
 800a66a:	e7aa      	b.n	800a5c2 <_printf_i+0xe2>
 800a66c:	681a      	ldr	r2, [r3, #0]
 800a66e:	680d      	ldr	r5, [r1, #0]
 800a670:	1d10      	adds	r0, r2, #4
 800a672:	6949      	ldr	r1, [r1, #20]
 800a674:	6018      	str	r0, [r3, #0]
 800a676:	6813      	ldr	r3, [r2, #0]
 800a678:	062e      	lsls	r6, r5, #24
 800a67a:	d501      	bpl.n	800a680 <_printf_i+0x1a0>
 800a67c:	6019      	str	r1, [r3, #0]
 800a67e:	e002      	b.n	800a686 <_printf_i+0x1a6>
 800a680:	066d      	lsls	r5, r5, #25
 800a682:	d5fb      	bpl.n	800a67c <_printf_i+0x19c>
 800a684:	8019      	strh	r1, [r3, #0]
 800a686:	2300      	movs	r3, #0
 800a688:	9e04      	ldr	r6, [sp, #16]
 800a68a:	6123      	str	r3, [r4, #16]
 800a68c:	e7d2      	b.n	800a634 <_printf_i+0x154>
 800a68e:	681a      	ldr	r2, [r3, #0]
 800a690:	1d11      	adds	r1, r2, #4
 800a692:	6019      	str	r1, [r3, #0]
 800a694:	6816      	ldr	r6, [r2, #0]
 800a696:	2100      	movs	r1, #0
 800a698:	0030      	movs	r0, r6
 800a69a:	6862      	ldr	r2, [r4, #4]
 800a69c:	f000 f938 	bl	800a910 <memchr>
 800a6a0:	2800      	cmp	r0, #0
 800a6a2:	d001      	beq.n	800a6a8 <_printf_i+0x1c8>
 800a6a4:	1b80      	subs	r0, r0, r6
 800a6a6:	6060      	str	r0, [r4, #4]
 800a6a8:	6863      	ldr	r3, [r4, #4]
 800a6aa:	6123      	str	r3, [r4, #16]
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	9a04      	ldr	r2, [sp, #16]
 800a6b0:	7013      	strb	r3, [r2, #0]
 800a6b2:	e7bf      	b.n	800a634 <_printf_i+0x154>
 800a6b4:	6923      	ldr	r3, [r4, #16]
 800a6b6:	0032      	movs	r2, r6
 800a6b8:	9906      	ldr	r1, [sp, #24]
 800a6ba:	9805      	ldr	r0, [sp, #20]
 800a6bc:	9d07      	ldr	r5, [sp, #28]
 800a6be:	47a8      	blx	r5
 800a6c0:	1c43      	adds	r3, r0, #1
 800a6c2:	d0c1      	beq.n	800a648 <_printf_i+0x168>
 800a6c4:	6823      	ldr	r3, [r4, #0]
 800a6c6:	079b      	lsls	r3, r3, #30
 800a6c8:	d415      	bmi.n	800a6f6 <_printf_i+0x216>
 800a6ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6cc:	68e0      	ldr	r0, [r4, #12]
 800a6ce:	4298      	cmp	r0, r3
 800a6d0:	dabc      	bge.n	800a64c <_printf_i+0x16c>
 800a6d2:	0018      	movs	r0, r3
 800a6d4:	e7ba      	b.n	800a64c <_printf_i+0x16c>
 800a6d6:	0022      	movs	r2, r4
 800a6d8:	2301      	movs	r3, #1
 800a6da:	9906      	ldr	r1, [sp, #24]
 800a6dc:	9805      	ldr	r0, [sp, #20]
 800a6de:	9e07      	ldr	r6, [sp, #28]
 800a6e0:	3219      	adds	r2, #25
 800a6e2:	47b0      	blx	r6
 800a6e4:	1c43      	adds	r3, r0, #1
 800a6e6:	d0af      	beq.n	800a648 <_printf_i+0x168>
 800a6e8:	3501      	adds	r5, #1
 800a6ea:	68e3      	ldr	r3, [r4, #12]
 800a6ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a6ee:	1a9b      	subs	r3, r3, r2
 800a6f0:	42ab      	cmp	r3, r5
 800a6f2:	dcf0      	bgt.n	800a6d6 <_printf_i+0x1f6>
 800a6f4:	e7e9      	b.n	800a6ca <_printf_i+0x1ea>
 800a6f6:	2500      	movs	r5, #0
 800a6f8:	e7f7      	b.n	800a6ea <_printf_i+0x20a>
 800a6fa:	46c0      	nop			; (mov r8, r8)
 800a6fc:	0800b45d 	.word	0x0800b45d
 800a700:	0800b46e 	.word	0x0800b46e

0800a704 <_putc_r>:
 800a704:	b570      	push	{r4, r5, r6, lr}
 800a706:	0006      	movs	r6, r0
 800a708:	000d      	movs	r5, r1
 800a70a:	0014      	movs	r4, r2
 800a70c:	2800      	cmp	r0, #0
 800a70e:	d004      	beq.n	800a71a <_putc_r+0x16>
 800a710:	6983      	ldr	r3, [r0, #24]
 800a712:	2b00      	cmp	r3, #0
 800a714:	d101      	bne.n	800a71a <_putc_r+0x16>
 800a716:	f7ff f9f7 	bl	8009b08 <__sinit>
 800a71a:	4b1c      	ldr	r3, [pc, #112]	; (800a78c <_putc_r+0x88>)
 800a71c:	429c      	cmp	r4, r3
 800a71e:	d124      	bne.n	800a76a <_putc_r+0x66>
 800a720:	6874      	ldr	r4, [r6, #4]
 800a722:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a724:	07db      	lsls	r3, r3, #31
 800a726:	d405      	bmi.n	800a734 <_putc_r+0x30>
 800a728:	89a3      	ldrh	r3, [r4, #12]
 800a72a:	059b      	lsls	r3, r3, #22
 800a72c:	d402      	bmi.n	800a734 <_putc_r+0x30>
 800a72e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a730:	f7ff fa8b 	bl	8009c4a <__retarget_lock_acquire_recursive>
 800a734:	68a3      	ldr	r3, [r4, #8]
 800a736:	3b01      	subs	r3, #1
 800a738:	60a3      	str	r3, [r4, #8]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	da05      	bge.n	800a74a <_putc_r+0x46>
 800a73e:	69a2      	ldr	r2, [r4, #24]
 800a740:	4293      	cmp	r3, r2
 800a742:	db1c      	blt.n	800a77e <_putc_r+0x7a>
 800a744:	b2eb      	uxtb	r3, r5
 800a746:	2b0a      	cmp	r3, #10
 800a748:	d019      	beq.n	800a77e <_putc_r+0x7a>
 800a74a:	6823      	ldr	r3, [r4, #0]
 800a74c:	1c5a      	adds	r2, r3, #1
 800a74e:	6022      	str	r2, [r4, #0]
 800a750:	701d      	strb	r5, [r3, #0]
 800a752:	b2ed      	uxtb	r5, r5
 800a754:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a756:	07db      	lsls	r3, r3, #31
 800a758:	d405      	bmi.n	800a766 <_putc_r+0x62>
 800a75a:	89a3      	ldrh	r3, [r4, #12]
 800a75c:	059b      	lsls	r3, r3, #22
 800a75e:	d402      	bmi.n	800a766 <_putc_r+0x62>
 800a760:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a762:	f7ff fa73 	bl	8009c4c <__retarget_lock_release_recursive>
 800a766:	0028      	movs	r0, r5
 800a768:	bd70      	pop	{r4, r5, r6, pc}
 800a76a:	4b09      	ldr	r3, [pc, #36]	; (800a790 <_putc_r+0x8c>)
 800a76c:	429c      	cmp	r4, r3
 800a76e:	d101      	bne.n	800a774 <_putc_r+0x70>
 800a770:	68b4      	ldr	r4, [r6, #8]
 800a772:	e7d6      	b.n	800a722 <_putc_r+0x1e>
 800a774:	4b07      	ldr	r3, [pc, #28]	; (800a794 <_putc_r+0x90>)
 800a776:	429c      	cmp	r4, r3
 800a778:	d1d3      	bne.n	800a722 <_putc_r+0x1e>
 800a77a:	68f4      	ldr	r4, [r6, #12]
 800a77c:	e7d1      	b.n	800a722 <_putc_r+0x1e>
 800a77e:	0029      	movs	r1, r5
 800a780:	0022      	movs	r2, r4
 800a782:	0030      	movs	r0, r6
 800a784:	f7fe ffc4 	bl	8009710 <__swbuf_r>
 800a788:	0005      	movs	r5, r0
 800a78a:	e7e3      	b.n	800a754 <_putc_r+0x50>
 800a78c:	0800b40c 	.word	0x0800b40c
 800a790:	0800b42c 	.word	0x0800b42c
 800a794:	0800b3ec 	.word	0x0800b3ec

0800a798 <_sbrk_r>:
 800a798:	2300      	movs	r3, #0
 800a79a:	b570      	push	{r4, r5, r6, lr}
 800a79c:	4d06      	ldr	r5, [pc, #24]	; (800a7b8 <_sbrk_r+0x20>)
 800a79e:	0004      	movs	r4, r0
 800a7a0:	0008      	movs	r0, r1
 800a7a2:	602b      	str	r3, [r5, #0]
 800a7a4:	f7fa fdc2 	bl	800532c <_sbrk>
 800a7a8:	1c43      	adds	r3, r0, #1
 800a7aa:	d103      	bne.n	800a7b4 <_sbrk_r+0x1c>
 800a7ac:	682b      	ldr	r3, [r5, #0]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d000      	beq.n	800a7b4 <_sbrk_r+0x1c>
 800a7b2:	6023      	str	r3, [r4, #0]
 800a7b4:	bd70      	pop	{r4, r5, r6, pc}
 800a7b6:	46c0      	nop			; (mov r8, r8)
 800a7b8:	20000918 	.word	0x20000918

0800a7bc <__sread>:
 800a7bc:	b570      	push	{r4, r5, r6, lr}
 800a7be:	000c      	movs	r4, r1
 800a7c0:	250e      	movs	r5, #14
 800a7c2:	5f49      	ldrsh	r1, [r1, r5]
 800a7c4:	f000 f8f8 	bl	800a9b8 <_read_r>
 800a7c8:	2800      	cmp	r0, #0
 800a7ca:	db03      	blt.n	800a7d4 <__sread+0x18>
 800a7cc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800a7ce:	181b      	adds	r3, r3, r0
 800a7d0:	6563      	str	r3, [r4, #84]	; 0x54
 800a7d2:	bd70      	pop	{r4, r5, r6, pc}
 800a7d4:	89a3      	ldrh	r3, [r4, #12]
 800a7d6:	4a02      	ldr	r2, [pc, #8]	; (800a7e0 <__sread+0x24>)
 800a7d8:	4013      	ands	r3, r2
 800a7da:	81a3      	strh	r3, [r4, #12]
 800a7dc:	e7f9      	b.n	800a7d2 <__sread+0x16>
 800a7de:	46c0      	nop			; (mov r8, r8)
 800a7e0:	ffffefff 	.word	0xffffefff

0800a7e4 <__swrite>:
 800a7e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7e6:	001f      	movs	r7, r3
 800a7e8:	898b      	ldrh	r3, [r1, #12]
 800a7ea:	0005      	movs	r5, r0
 800a7ec:	000c      	movs	r4, r1
 800a7ee:	0016      	movs	r6, r2
 800a7f0:	05db      	lsls	r3, r3, #23
 800a7f2:	d505      	bpl.n	800a800 <__swrite+0x1c>
 800a7f4:	230e      	movs	r3, #14
 800a7f6:	5ec9      	ldrsh	r1, [r1, r3]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	2302      	movs	r3, #2
 800a7fc:	f000 f874 	bl	800a8e8 <_lseek_r>
 800a800:	89a3      	ldrh	r3, [r4, #12]
 800a802:	4a05      	ldr	r2, [pc, #20]	; (800a818 <__swrite+0x34>)
 800a804:	0028      	movs	r0, r5
 800a806:	4013      	ands	r3, r2
 800a808:	81a3      	strh	r3, [r4, #12]
 800a80a:	0032      	movs	r2, r6
 800a80c:	230e      	movs	r3, #14
 800a80e:	5ee1      	ldrsh	r1, [r4, r3]
 800a810:	003b      	movs	r3, r7
 800a812:	f000 f81f 	bl	800a854 <_write_r>
 800a816:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a818:	ffffefff 	.word	0xffffefff

0800a81c <__sseek>:
 800a81c:	b570      	push	{r4, r5, r6, lr}
 800a81e:	000c      	movs	r4, r1
 800a820:	250e      	movs	r5, #14
 800a822:	5f49      	ldrsh	r1, [r1, r5]
 800a824:	f000 f860 	bl	800a8e8 <_lseek_r>
 800a828:	89a3      	ldrh	r3, [r4, #12]
 800a82a:	1c42      	adds	r2, r0, #1
 800a82c:	d103      	bne.n	800a836 <__sseek+0x1a>
 800a82e:	4a05      	ldr	r2, [pc, #20]	; (800a844 <__sseek+0x28>)
 800a830:	4013      	ands	r3, r2
 800a832:	81a3      	strh	r3, [r4, #12]
 800a834:	bd70      	pop	{r4, r5, r6, pc}
 800a836:	2280      	movs	r2, #128	; 0x80
 800a838:	0152      	lsls	r2, r2, #5
 800a83a:	4313      	orrs	r3, r2
 800a83c:	81a3      	strh	r3, [r4, #12]
 800a83e:	6560      	str	r0, [r4, #84]	; 0x54
 800a840:	e7f8      	b.n	800a834 <__sseek+0x18>
 800a842:	46c0      	nop			; (mov r8, r8)
 800a844:	ffffefff 	.word	0xffffefff

0800a848 <__sclose>:
 800a848:	b510      	push	{r4, lr}
 800a84a:	230e      	movs	r3, #14
 800a84c:	5ec9      	ldrsh	r1, [r1, r3]
 800a84e:	f000 f815 	bl	800a87c <_close_r>
 800a852:	bd10      	pop	{r4, pc}

0800a854 <_write_r>:
 800a854:	b570      	push	{r4, r5, r6, lr}
 800a856:	0004      	movs	r4, r0
 800a858:	0008      	movs	r0, r1
 800a85a:	0011      	movs	r1, r2
 800a85c:	001a      	movs	r2, r3
 800a85e:	2300      	movs	r3, #0
 800a860:	4d05      	ldr	r5, [pc, #20]	; (800a878 <_write_r+0x24>)
 800a862:	602b      	str	r3, [r5, #0]
 800a864:	f7fa fd49 	bl	80052fa <_write>
 800a868:	1c43      	adds	r3, r0, #1
 800a86a:	d103      	bne.n	800a874 <_write_r+0x20>
 800a86c:	682b      	ldr	r3, [r5, #0]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	d000      	beq.n	800a874 <_write_r+0x20>
 800a872:	6023      	str	r3, [r4, #0]
 800a874:	bd70      	pop	{r4, r5, r6, pc}
 800a876:	46c0      	nop			; (mov r8, r8)
 800a878:	20000918 	.word	0x20000918

0800a87c <_close_r>:
 800a87c:	2300      	movs	r3, #0
 800a87e:	b570      	push	{r4, r5, r6, lr}
 800a880:	4d06      	ldr	r5, [pc, #24]	; (800a89c <_close_r+0x20>)
 800a882:	0004      	movs	r4, r0
 800a884:	0008      	movs	r0, r1
 800a886:	602b      	str	r3, [r5, #0]
 800a888:	f7fa fd44 	bl	8005314 <_close>
 800a88c:	1c43      	adds	r3, r0, #1
 800a88e:	d103      	bne.n	800a898 <_close_r+0x1c>
 800a890:	682b      	ldr	r3, [r5, #0]
 800a892:	2b00      	cmp	r3, #0
 800a894:	d000      	beq.n	800a898 <_close_r+0x1c>
 800a896:	6023      	str	r3, [r4, #0]
 800a898:	bd70      	pop	{r4, r5, r6, pc}
 800a89a:	46c0      	nop			; (mov r8, r8)
 800a89c:	20000918 	.word	0x20000918

0800a8a0 <_fstat_r>:
 800a8a0:	2300      	movs	r3, #0
 800a8a2:	b570      	push	{r4, r5, r6, lr}
 800a8a4:	4d06      	ldr	r5, [pc, #24]	; (800a8c0 <_fstat_r+0x20>)
 800a8a6:	0004      	movs	r4, r0
 800a8a8:	0008      	movs	r0, r1
 800a8aa:	0011      	movs	r1, r2
 800a8ac:	602b      	str	r3, [r5, #0]
 800a8ae:	f7fa fd34 	bl	800531a <_fstat>
 800a8b2:	1c43      	adds	r3, r0, #1
 800a8b4:	d103      	bne.n	800a8be <_fstat_r+0x1e>
 800a8b6:	682b      	ldr	r3, [r5, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d000      	beq.n	800a8be <_fstat_r+0x1e>
 800a8bc:	6023      	str	r3, [r4, #0]
 800a8be:	bd70      	pop	{r4, r5, r6, pc}
 800a8c0:	20000918 	.word	0x20000918

0800a8c4 <_isatty_r>:
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	b570      	push	{r4, r5, r6, lr}
 800a8c8:	4d06      	ldr	r5, [pc, #24]	; (800a8e4 <_isatty_r+0x20>)
 800a8ca:	0004      	movs	r4, r0
 800a8cc:	0008      	movs	r0, r1
 800a8ce:	602b      	str	r3, [r5, #0]
 800a8d0:	f7fa fd28 	bl	8005324 <_isatty>
 800a8d4:	1c43      	adds	r3, r0, #1
 800a8d6:	d103      	bne.n	800a8e0 <_isatty_r+0x1c>
 800a8d8:	682b      	ldr	r3, [r5, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d000      	beq.n	800a8e0 <_isatty_r+0x1c>
 800a8de:	6023      	str	r3, [r4, #0]
 800a8e0:	bd70      	pop	{r4, r5, r6, pc}
 800a8e2:	46c0      	nop			; (mov r8, r8)
 800a8e4:	20000918 	.word	0x20000918

0800a8e8 <_lseek_r>:
 800a8e8:	b570      	push	{r4, r5, r6, lr}
 800a8ea:	0004      	movs	r4, r0
 800a8ec:	0008      	movs	r0, r1
 800a8ee:	0011      	movs	r1, r2
 800a8f0:	001a      	movs	r2, r3
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	4d05      	ldr	r5, [pc, #20]	; (800a90c <_lseek_r+0x24>)
 800a8f6:	602b      	str	r3, [r5, #0]
 800a8f8:	f7fa fd16 	bl	8005328 <_lseek>
 800a8fc:	1c43      	adds	r3, r0, #1
 800a8fe:	d103      	bne.n	800a908 <_lseek_r+0x20>
 800a900:	682b      	ldr	r3, [r5, #0]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d000      	beq.n	800a908 <_lseek_r+0x20>
 800a906:	6023      	str	r3, [r4, #0]
 800a908:	bd70      	pop	{r4, r5, r6, pc}
 800a90a:	46c0      	nop			; (mov r8, r8)
 800a90c:	20000918 	.word	0x20000918

0800a910 <memchr>:
 800a910:	b2c9      	uxtb	r1, r1
 800a912:	1882      	adds	r2, r0, r2
 800a914:	4290      	cmp	r0, r2
 800a916:	d101      	bne.n	800a91c <memchr+0xc>
 800a918:	2000      	movs	r0, #0
 800a91a:	4770      	bx	lr
 800a91c:	7803      	ldrb	r3, [r0, #0]
 800a91e:	428b      	cmp	r3, r1
 800a920:	d0fb      	beq.n	800a91a <memchr+0xa>
 800a922:	3001      	adds	r0, #1
 800a924:	e7f6      	b.n	800a914 <memchr+0x4>

0800a926 <memmove>:
 800a926:	b510      	push	{r4, lr}
 800a928:	4288      	cmp	r0, r1
 800a92a:	d902      	bls.n	800a932 <memmove+0xc>
 800a92c:	188b      	adds	r3, r1, r2
 800a92e:	4298      	cmp	r0, r3
 800a930:	d303      	bcc.n	800a93a <memmove+0x14>
 800a932:	2300      	movs	r3, #0
 800a934:	e007      	b.n	800a946 <memmove+0x20>
 800a936:	5c8b      	ldrb	r3, [r1, r2]
 800a938:	5483      	strb	r3, [r0, r2]
 800a93a:	3a01      	subs	r2, #1
 800a93c:	d2fb      	bcs.n	800a936 <memmove+0x10>
 800a93e:	bd10      	pop	{r4, pc}
 800a940:	5ccc      	ldrb	r4, [r1, r3]
 800a942:	54c4      	strb	r4, [r0, r3]
 800a944:	3301      	adds	r3, #1
 800a946:	429a      	cmp	r2, r3
 800a948:	d1fa      	bne.n	800a940 <memmove+0x1a>
 800a94a:	e7f8      	b.n	800a93e <memmove+0x18>

0800a94c <__malloc_lock>:
 800a94c:	b510      	push	{r4, lr}
 800a94e:	4802      	ldr	r0, [pc, #8]	; (800a958 <__malloc_lock+0xc>)
 800a950:	f7ff f97b 	bl	8009c4a <__retarget_lock_acquire_recursive>
 800a954:	bd10      	pop	{r4, pc}
 800a956:	46c0      	nop			; (mov r8, r8)
 800a958:	20000910 	.word	0x20000910

0800a95c <__malloc_unlock>:
 800a95c:	b510      	push	{r4, lr}
 800a95e:	4802      	ldr	r0, [pc, #8]	; (800a968 <__malloc_unlock+0xc>)
 800a960:	f7ff f974 	bl	8009c4c <__retarget_lock_release_recursive>
 800a964:	bd10      	pop	{r4, pc}
 800a966:	46c0      	nop			; (mov r8, r8)
 800a968:	20000910 	.word	0x20000910

0800a96c <_realloc_r>:
 800a96c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a96e:	0007      	movs	r7, r0
 800a970:	000d      	movs	r5, r1
 800a972:	0016      	movs	r6, r2
 800a974:	2900      	cmp	r1, #0
 800a976:	d105      	bne.n	800a984 <_realloc_r+0x18>
 800a978:	0011      	movs	r1, r2
 800a97a:	f7ff fa1f 	bl	8009dbc <_malloc_r>
 800a97e:	0004      	movs	r4, r0
 800a980:	0020      	movs	r0, r4
 800a982:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a984:	2a00      	cmp	r2, #0
 800a986:	d103      	bne.n	800a990 <_realloc_r+0x24>
 800a988:	f7ff f9ce 	bl	8009d28 <_free_r>
 800a98c:	0034      	movs	r4, r6
 800a98e:	e7f7      	b.n	800a980 <_realloc_r+0x14>
 800a990:	f000 f826 	bl	800a9e0 <_malloc_usable_size_r>
 800a994:	002c      	movs	r4, r5
 800a996:	42b0      	cmp	r0, r6
 800a998:	d2f2      	bcs.n	800a980 <_realloc_r+0x14>
 800a99a:	0031      	movs	r1, r6
 800a99c:	0038      	movs	r0, r7
 800a99e:	f7ff fa0d 	bl	8009dbc <_malloc_r>
 800a9a2:	1e04      	subs	r4, r0, #0
 800a9a4:	d0ec      	beq.n	800a980 <_realloc_r+0x14>
 800a9a6:	0029      	movs	r1, r5
 800a9a8:	0032      	movs	r2, r6
 800a9aa:	f7fe fdd5 	bl	8009558 <memcpy>
 800a9ae:	0029      	movs	r1, r5
 800a9b0:	0038      	movs	r0, r7
 800a9b2:	f7ff f9b9 	bl	8009d28 <_free_r>
 800a9b6:	e7e3      	b.n	800a980 <_realloc_r+0x14>

0800a9b8 <_read_r>:
 800a9b8:	b570      	push	{r4, r5, r6, lr}
 800a9ba:	0004      	movs	r4, r0
 800a9bc:	0008      	movs	r0, r1
 800a9be:	0011      	movs	r1, r2
 800a9c0:	001a      	movs	r2, r3
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	4d05      	ldr	r5, [pc, #20]	; (800a9dc <_read_r+0x24>)
 800a9c6:	602b      	str	r3, [r5, #0]
 800a9c8:	f7fa fc8a 	bl	80052e0 <_read>
 800a9cc:	1c43      	adds	r3, r0, #1
 800a9ce:	d103      	bne.n	800a9d8 <_read_r+0x20>
 800a9d0:	682b      	ldr	r3, [r5, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d000      	beq.n	800a9d8 <_read_r+0x20>
 800a9d6:	6023      	str	r3, [r4, #0]
 800a9d8:	bd70      	pop	{r4, r5, r6, pc}
 800a9da:	46c0      	nop			; (mov r8, r8)
 800a9dc:	20000918 	.word	0x20000918

0800a9e0 <_malloc_usable_size_r>:
 800a9e0:	1f0b      	subs	r3, r1, #4
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	1f18      	subs	r0, r3, #4
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	da01      	bge.n	800a9ee <_malloc_usable_size_r+0xe>
 800a9ea:	580b      	ldr	r3, [r1, r0]
 800a9ec:	18c0      	adds	r0, r0, r3
 800a9ee:	4770      	bx	lr

0800a9f0 <_init>:
 800a9f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9f2:	46c0      	nop			; (mov r8, r8)
 800a9f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a9f6:	bc08      	pop	{r3}
 800a9f8:	469e      	mov	lr, r3
 800a9fa:	4770      	bx	lr

0800a9fc <_fini>:
 800a9fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a9fe:	46c0      	nop			; (mov r8, r8)
 800aa00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa02:	bc08      	pop	{r3}
 800aa04:	469e      	mov	lr, r3
 800aa06:	4770      	bx	lr
